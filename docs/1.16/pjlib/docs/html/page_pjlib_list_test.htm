<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Linked List (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Linked List </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation of <b>list_test()</b>. It tests the functionality of the linked-list API.</p>
<h2><a class="anchor" id="list_test_sec"></a>
Scope of the Test</h2>
<p>API tested:</p>
<ul>
<li><a class="el" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga64e9ace6bdf9ec204a52e88ae339bbfd">pj_list_insert_after()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#gaa362db05b7c9337b4159548dff385980">pj_list_merge_last()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga45a5b9503ce73660eac3ad6872acf167">pj_list_insert_nodes_before()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga2781509d8fc3708b88f897482bf85207">pj_list_erase()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#gacba19f3dfca4142dc264372f0caa238c">pj_list_find_node()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga85a0e31896bedc6b47450d2e6f8220c2">pj_list_search()</a></li>
</ul>
<p>This file is <b>pjlib-test/list.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: list.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>

<span class="preprocessor">#if INCLUDE_LIST_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>

<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structlist__node.htm">list_node</a>
{
    <a class="code" href="group__PJ__LIST.htm#ga18f1e5604efeff83af34401b2c447d0a">PJ_DECL_LIST_MEMBER</a>(<span class="keyword">struct</span> <a class="code" href="structlist__node.htm">list_node</a>);
    <span class="keywordtype">int</span> value;
} <a class="code" href="structlist__node.htm">list_node</a>;

<span class="keyword">static</span> <span class="keywordtype">int</span> compare_node(<span class="keywordtype">void</span> *value, <span class="keyword">const</span> <a class="code" href="group__PJ__BASIC.htm#ga56842cba859dc628f0b2f8ba4754062d">pj_list_type</a> *nd)
{
    <a class="code" href="structlist__node.htm">list_node</a> *node = (<a class="code" href="structlist__node.htm">list_node</a>*)nd;
    <span class="keywordflow">return</span> ((<span class="keywordtype">long</span>)value == node-&gt;value) ? 0 : -1;
}

<span class="preprocessor">#define PJ_SIGNED_ARRAY_SIZE(a) ((int)PJ_ARRAY_SIZE(a))</span>
<span class="preprocessor"></span>
<span class="keywordtype">int</span> list_test()
{
    <a class="code" href="structlist__node.htm">list_node</a> nodes[4];    <span class="comment">// must be even number of nodes</span>
    <a class="code" href="structlist__node.htm">list_node</a> list;
    <a class="code" href="structlist__node.htm">list_node</a> list2;
    <a class="code" href="structlist__node.htm">list_node</a> *p;
    <span class="keywordtype">int</span> i; <span class="comment">// don&#39;t change to unsigned!</span>

    <span class="comment">//</span>
    <span class="comment">// Test insert_before().</span>
    <span class="comment">//</span>
    list.value = (unsigned)-1;
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);
    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {
        nodes[i].value = i;
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);
    }
    <span class="comment">// check.</span>
    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {
        <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);
        <span class="keywordflow">if</span> (p-&gt;value != i) {
            <span class="keywordflow">return</span> -1;
        }
    }

    <span class="comment">//</span>
    <span class="comment">// Test insert_after()</span>
    <span class="comment">//</span>
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);
    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)-1; i&gt;=0; --i) {
        <a class="code" href="group__PJ__LIST.htm#ga64e9ace6bdf9ec204a52e88ae339bbfd">pj_list_insert_after</a>(&amp;list, &amp;nodes[i]);
    }
    <span class="comment">// check.</span>
    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {
        <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);
        <span class="keywordflow">if</span> (p-&gt;value != i) {
            <span class="keywordflow">return</span> -1;
        }
    }

    <span class="comment">//</span>
    <span class="comment">// Test merge_last()</span>
    <span class="comment">//</span>
    <span class="comment">// Init lists</span>
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list2);
    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes)/2; ++i) {
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);
    }
    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)/2; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list2, &amp;nodes[i]);
    }
    <span class="comment">// merge</span>
    <a class="code" href="group__PJ__LIST.htm#gaa362db05b7c9337b4159548dff385980">pj_list_merge_last</a>(&amp;list, &amp;list2);
    <span class="comment">// check.</span>
    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {
        <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);
        <span class="keywordflow">if</span> (p-&gt;value != i) {
            <span class="keywordflow">return</span> -1;
        }
    }
    <span class="comment">// check list is empty</span>
    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( <a class="code" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list2) );
    <span class="keywordflow">if</span> (!<a class="code" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list2)) {
        <span class="keywordflow">return</span> -1;
    }

    <span class="comment">// </span>
    <span class="comment">// Check merge_first()</span>
    <span class="comment">//</span>
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list2);
    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes)/2; ++i) {
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);
    }
    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)/2; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list2, &amp;nodes[i]);
    }
    <span class="comment">// merge</span>
    <a class="code" href="group__PJ__LIST.htm#ga32f9998ff249bf9733ac9f9e9a6d8cd5">pj_list_merge_first</a>(&amp;list2, &amp;list);
    <span class="comment">// check (list2).</span>
    <span class="keywordflow">for</span> (i=0, p=list2.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {
        <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);
        <span class="keywordflow">if</span> (p-&gt;value != i) {
            <span class="keywordflow">return</span> -1;
        }
    }
    <span class="comment">// check list is empty</span>
    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( <a class="code" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list) );
    <span class="keywordflow">if</span> (!<a class="code" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list)) {
        <span class="keywordflow">return</span> -1;
    }

    <span class="comment">//</span>
    <span class="comment">// Test insert_nodes_before()</span>
    <span class="comment">//</span>
    <span class="comment">// init list</span>
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);
    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes)/2; ++i) {
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);
    }
    <span class="comment">// chain remaining nodes</span>
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;nodes[PJ_SIGNED_ARRAY_SIZE(nodes)/2]);
    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)/2+1; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;nodes[PJ_SIGNED_ARRAY_SIZE(nodes)/2], &amp;nodes[i]);
    }
    <span class="comment">// insert nodes</span>
    <a class="code" href="group__PJ__LIST.htm#ga45a5b9503ce73660eac3ad6872acf167">pj_list_insert_nodes_before</a>(&amp;list, &amp;nodes[PJ_SIGNED_ARRAY_SIZE(nodes)/2]);
    <span class="comment">// check</span>
    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {
        <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);
        <span class="keywordflow">if</span> (p-&gt;value != i) {
            <span class="keywordflow">return</span> -1;
        }
    }

    <span class="comment">// erase test.</span>
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);
    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {
        nodes[i].value = i;
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);
    }
    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)-1; i&gt;=0; --i) {
        <span class="keywordtype">int</span> j;
        <a class="code" href="group__PJ__LIST.htm#ga2781509d8fc3708b88f897482bf85207">pj_list_erase</a>(&amp;nodes[i]);
        <span class="keywordflow">for</span> (j=0, p=list.next; j&lt;i; ++j, p=p-&gt;next) {
            <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == j);
            <span class="keywordflow">if</span> (p-&gt;value != j) {
                <span class="keywordflow">return</span> -1;
            }
        }
    }

    <span class="comment">// find and search</span>
    <a class="code" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);
    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {
        nodes[i].value = i;
        <a class="code" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);
    }
    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {
        p = (<a class="code" href="structlist__node.htm">list_node</a>*) <a class="code" href="group__PJ__LIST.htm#gacba19f3dfca4142dc264372f0caa238c">pj_list_find_node</a>(&amp;list, &amp;nodes[i]);
        <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( p == &amp;nodes[i] );
        <span class="keywordflow">if</span> (p != &amp;nodes[i]) {
            <span class="keywordflow">return</span> -1;
        }
        p = (<a class="code" href="structlist__node.htm">list_node</a>*) <a class="code" href="group__PJ__LIST.htm#ga85a0e31896bedc6b47450d2e6f8220c2">pj_list_search</a>(&amp;list, (<span class="keywordtype">void</span>*)(long)i, &amp;compare_node);
        <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( p == &amp;nodes[i] );
        <span class="keywordflow">if</span> (p != &amp;nodes[i]) {
            <span class="keywordflow">return</span> -1;
        }
    }
    <span class="keywordflow">return</span> 0;
}

<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_list_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_LIST_TEST */</span>


</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
