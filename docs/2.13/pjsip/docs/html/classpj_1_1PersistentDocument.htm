<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj::PersistentDocument Class Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacepj.htm">pj</a></li><li class="navelem"><a class="el" href="classpj_1_1PersistentDocument.htm">PersistentDocument</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle"><div class="title">pj::PersistentDocument Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__PJSUA2__Ref.htm">pjsua2 API Reference</a> &raquo; <a class="el" href="group__PJSUA2__PERSISTENT.htm">Persistent API</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;persistent.hpp&gt;</code></p>
<div class="dynheader">
Inheritance diagram for pj::PersistentDocument:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classpj_1_1PersistentDocument.png" usemap="#pj::PersistentDocument_map" alt=""/>
  <map id="pj::PersistentDocument_map" name="pj::PersistentDocument_map">
<area href="classpj_1_1JsonDocument.htm" alt="pj::JsonDocument" shape="rect" coords="0,56,139,80"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae46db82c3a65e74b5a0569580dbdfc12"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ae46db82c3a65e74b5a0569580dbdfc12">~PersistentDocument</a> ()</td></tr>
<tr class="separator:ae46db82c3a65e74b5a0569580dbdfc12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7a4e7e250a00bfc2f0efcfe23c1207f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#aa7a4e7e250a00bfc2f0efcfe23c1207f">loadFile</a> (const string &amp;filename)=0  throw (Error)</td></tr>
<tr class="separator:aa7a4e7e250a00bfc2f0efcfe23c1207f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f543be1f0475426a995ec92670694d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a34f543be1f0475426a995ec92670694d">loadString</a> (const string &amp;input)=0  throw (Error)</td></tr>
<tr class="separator:a34f543be1f0475426a995ec92670694d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa88fdd25644396cafbb09a36911ae66a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#aa88fdd25644396cafbb09a36911ae66a">saveFile</a> (const string &amp;filename)=0  throw (Error)</td></tr>
<tr class="separator:aa88fdd25644396cafbb09a36911ae66a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8abe1729d7a01d107793c31c425f550e"><td class="memItemLeft" align="right" valign="top">virtual string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a8abe1729d7a01d107793c31c425f550e">saveString</a> ()=0  throw (Error)</td></tr>
<tr class="separator:a8abe1729d7a01d107793c31c425f550e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae858d2e29a9a723ba188fe9af84b8277"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ae858d2e29a9a723ba188fe9af84b8277">getRootContainer</a> () const =0</td></tr>
<tr class="separator:ae858d2e29a9a723ba188fe9af84b8277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3124663b0c4447e2e39e67cf1b8f1f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ad3124663b0c4447e2e39e67cf1b8f1f0">hasUnread</a> () const</td></tr>
<tr class="separator:ad3124663b0c4447e2e39e67cf1b8f1f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb1d1cb438d0a8da738dde3dd2a609fb"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#adb1d1cb438d0a8da738dde3dd2a609fb">unreadName</a> () const  throw (Error)</td></tr>
<tr class="separator:adb1d1cb438d0a8da738dde3dd2a609fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68713c89855c47018b04c2e39b12ee00"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a68713c89855c47018b04c2e39b12ee00">readInt</a> (const string &amp;name=&quot;&quot;) const  throw (Error)</td></tr>
<tr class="separator:a68713c89855c47018b04c2e39b12ee00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0a7fbbff97155871542f118f0ace2a3"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#af0a7fbbff97155871542f118f0ace2a3">readNumber</a> (const string &amp;name=&quot;&quot;) const  throw (Error)</td></tr>
<tr class="separator:af0a7fbbff97155871542f118f0ace2a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99daae0117f0e6cd72b8b1f424275d34"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a99daae0117f0e6cd72b8b1f424275d34">readBool</a> (const string &amp;name=&quot;&quot;) const  throw (Error)</td></tr>
<tr class="separator:a99daae0117f0e6cd72b8b1f424275d34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c2dec4fa8afa548aba1fd840e183586"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a9c2dec4fa8afa548aba1fd840e183586">readString</a> (const string &amp;name=&quot;&quot;) const  throw (Error)</td></tr>
<tr class="separator:a9c2dec4fa8afa548aba1fd840e183586"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ac224f684bb6311c576cdd638a2c90f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a5ac224f684bb6311c576cdd638a2c90f">readStringVector</a> (const string &amp;name=&quot;&quot;) const  throw (Error)</td></tr>
<tr class="separator:a5ac224f684bb6311c576cdd638a2c90f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a133fd2cf8ab8088a91a91e1a027234f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a133fd2cf8ab8088a91a91e1a027234f1">readObject</a> (<a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;obj) const  throw (Error)</td></tr>
<tr class="separator:a133fd2cf8ab8088a91a91e1a027234f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdc1a76d85a8673abc19d78f9dbba2d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#acdc1a76d85a8673abc19d78f9dbba2d9">readContainer</a> (const string &amp;name=&quot;&quot;) const  throw (Error)</td></tr>
<tr class="separator:acdc1a76d85a8673abc19d78f9dbba2d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a981e15df0a4c3918716843aafebb0645"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a981e15df0a4c3918716843aafebb0645">readArray</a> (const string &amp;name=&quot;&quot;) const  throw (Error)</td></tr>
<tr class="separator:a981e15df0a4c3918716843aafebb0645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8526dc79588520dbc8a4cccbf5d98842"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a8526dc79588520dbc8a4cccbf5d98842">writeNumber</a> (const string &amp;name, float num)  throw (Error)</td></tr>
<tr class="separator:a8526dc79588520dbc8a4cccbf5d98842"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65c83877eb2184da5aa95930a06ce61c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a65c83877eb2184da5aa95930a06ce61c">writeInt</a> (const string &amp;name, int num)  throw (Error)</td></tr>
<tr class="separator:a65c83877eb2184da5aa95930a06ce61c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6227159dfd161695a1180a6c765227ce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a6227159dfd161695a1180a6c765227ce">writeBool</a> (const string &amp;name, bool value)  throw (Error)</td></tr>
<tr class="separator:a6227159dfd161695a1180a6c765227ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5782046f7dbf363d9b844945c15463ed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a5782046f7dbf363d9b844945c15463ed">writeString</a> (const string &amp;name, const string &amp;value)  throw (Error)</td></tr>
<tr class="separator:a5782046f7dbf363d9b844945c15463ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6b2e47b171917cc143ea66d92ce23dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ac6b2e47b171917cc143ea66d92ce23dc">writeStringVector</a> (const string &amp;name, const <a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a> &amp;arr)  throw (Error)</td></tr>
<tr class="separator:ac6b2e47b171917cc143ea66d92ce23dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2acf510949316f3ec52eb629df0a644d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a2acf510949316f3ec52eb629df0a644d">writeObject</a> (const <a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;obj)  throw (Error)</td></tr>
<tr class="separator:a2acf510949316f3ec52eb629df0a644d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a704bcd74e979750ed753f322046e2089"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a704bcd74e979750ed753f322046e2089">writeNewContainer</a> (const string &amp;name)  throw (Error)</td></tr>
<tr class="separator:a704bcd74e979750ed753f322046e2089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a270c8d919d87cad372ed30b980ad014b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a270c8d919d87cad372ed30b980ad014b">writeNewArray</a> (const string &amp;name)  throw (Error)</td></tr>
<tr class="separator:a270c8d919d87cad372ed30b980ad014b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >This a the abstract base class for a persistent document. A document is created either by loading from a string or a file, or by constructing it manually when writing data to it. The document then can be saved to either string or to a file. A document contains one root <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> where all data are stored under.</p>
<p >Document is read and written serially, hence the order of reading must be the same as the order of writing. The <a class="el" href="classpj_1_1PersistentDocument.htm">PersistentDocument</a> class provides API to read and write to the root node, but for more flexible operations application can use the <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> methods instead. Indeed the read and write API in <a class="el" href="classpj_1_1PersistentDocument.htm">PersistentDocument</a> is just a shorthand which calls the relevant methods in the <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>. As a tip, normally application only uses the <a class="el" href="classpj_1_1PersistentDocument.htm#a133fd2cf8ab8088a91a91e1a027234f1">readObject()</a> and <a class="el" href="classpj_1_1PersistentDocument.htm#a2acf510949316f3ec52eb629df0a644d">writeObject()</a> methods declared here to read/write top level objects, and use the macros that are explained in <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> documentation to read/write more detailed data. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ae46db82c3a65e74b5a0569580dbdfc12" name="ae46db82c3a65e74b5a0569580dbdfc12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae46db82c3a65e74b5a0569580dbdfc12">&#9670;&nbsp;</a></span>~PersistentDocument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual pj::PersistentDocument::~PersistentDocument </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Virtual destructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa7a4e7e250a00bfc2f0efcfe23c1207f" name="aa7a4e7e250a00bfc2f0efcfe23c1207f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7a4e7e250a00bfc2f0efcfe23c1207f">&#9670;&nbsp;</a></span>loadFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::PersistentDocument::loadFile </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Load this document from a file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>The file name. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#a84da707ccc8d54613a1123732dc3792c">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="a34f543be1f0475426a995ec92670694d" name="a34f543be1f0475426a995ec92670694d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34f543be1f0475426a995ec92670694d">&#9670;&nbsp;</a></span>loadString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::PersistentDocument::loadString </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Load this document from string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The string. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#ac51dbb1cc7d0fbd69b36d7440b8b39f8">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="aa88fdd25644396cafbb09a36911ae66a" name="aa88fdd25644396cafbb09a36911ae66a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa88fdd25644396cafbb09a36911ae66a">&#9670;&nbsp;</a></span>saveFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::PersistentDocument::saveFile </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Write this document to a file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>The file name. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#a6b1fe0cf7b117ac6ad48cac25dacec45">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="a8abe1729d7a01d107793c31c425f550e" name="a8abe1729d7a01d107793c31c425f550e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8abe1729d7a01d107793c31c425f550e">&#9670;&nbsp;</a></span>saveString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual string pj::PersistentDocument::saveString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Write this document to string.</p>
<dl class="section return"><dt>Returns</dt><dd>The string document. </dd></dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#a5519fedef1aea725f187d508078a99d1">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="ae858d2e29a9a723ba188fe9af84b8277" name="ae858d2e29a9a723ba188fe9af84b8277"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae858d2e29a9a723ba188fe9af84b8277">&#9670;&nbsp;</a></span>getRootContainer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> &amp; pj::PersistentDocument::getRootContainer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Get the root container node for this document</p>
<dl class="section return"><dt>Returns</dt><dd>The root node. </dd></dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#a780d5d4fa036842fb7f683965c5170e2">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="ad3124663b0c4447e2e39e67cf1b8f1f0" name="ad3124663b0c4447e2e39e67cf1b8f1f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3124663b0c4447e2e39e67cf1b8f1f0">&#9670;&nbsp;</a></span>hasUnread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::PersistentDocument::hasUnread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Determine if there is unread element. If yes, then app can use one of the readXxx() functions to read it.</p>
<dl class="section return"><dt>Returns</dt><dd>True if there is. </dd></dl>

</div>
</div>
<a id="adb1d1cb438d0a8da738dde3dd2a609fb" name="adb1d1cb438d0a8da738dde3dd2a609fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb1d1cb438d0a8da738dde3dd2a609fb">&#9670;&nbsp;</a></span>unreadName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string pj::PersistentDocument::unreadName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the name of the next unread element. It will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if there is no more element to read.</p>
<dl class="section return"><dt>Returns</dt><dd>The name of the next element . </dd></dl>

</div>
</div>
<a id="a68713c89855c47018b04c2e39b12ee00" name="a68713c89855c47018b04c2e39b12ee00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68713c89855c47018b04c2e39b12ee00">&#9670;&nbsp;</a></span>readInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::PersistentDocument::readInt </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read an integer value from the document and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a number. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="af0a7fbbff97155871542f118f0ace2a3" name="af0a7fbbff97155871542f118f0ace2a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0a7fbbff97155871542f118f0ace2a3">&#9670;&nbsp;</a></span>readNumber()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float pj::PersistentDocument::readNumber </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read a float value from the document and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a number. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="a99daae0117f0e6cd72b8b1f424275d34" name="a99daae0117f0e6cd72b8b1f424275d34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99daae0117f0e6cd72b8b1f424275d34">&#9670;&nbsp;</a></span>readBool()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::PersistentDocument::readBool </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read a boolean value from the container and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a boolean. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="a9c2dec4fa8afa548aba1fd840e183586" name="a9c2dec4fa8afa548aba1fd840e183586"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c2dec4fa8afa548aba1fd840e183586">&#9670;&nbsp;</a></span>readString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string pj::PersistentDocument::readString </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read a string value from the container and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a string. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="a5ac224f684bb6311c576cdd638a2c90f" name="a5ac224f684bb6311c576cdd638a2c90f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ac224f684bb6311c576cdd638a2c90f">&#9670;&nbsp;</a></span>readStringVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a> pj::PersistentDocument::readStringVector </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read a string array from the container. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a string array. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="a133fd2cf8ab8088a91a91e1a027234f1" name="a133fd2cf8ab8088a91a91e1a027234f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a133fd2cf8ab8088a91a91e1a027234f1">&#9670;&nbsp;</a></span>readObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::readObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read the specified object from the container. This is equal to calling PersistentObject.readObject(ContainerNode);</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">obj</td><td>The object to read. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acdc1a76d85a8673abc19d78f9dbba2d9" name="acdc1a76d85a8673abc19d78f9dbba2d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdc1a76d85a8673abc19d78f9dbba2d9">&#9670;&nbsp;</a></span>readContainer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::readContainer </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read a container from the container. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not an object. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Container object. </dd></dl>

</div>
</div>
<a id="a981e15df0a4c3918716843aafebb0645" name="a981e15df0a4c3918716843aafebb0645"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a981e15df0a4c3918716843aafebb0645">&#9670;&nbsp;</a></span>readArray()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::readArray </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Read array container from the container. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not an array. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Container object. </dd></dl>

</div>
</div>
<a id="a8526dc79588520dbc8a4cccbf5d98842" name="a8526dc79588520dbc8a4cccbf5d98842"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8526dc79588520dbc8a4cccbf5d98842">&#9670;&nbsp;</a></span>writeNumber()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeNumber </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Write a number value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">num</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a65c83877eb2184da5aa95930a06ce61c" name="a65c83877eb2184da5aa95930a06ce61c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65c83877eb2184da5aa95930a06ce61c">&#9670;&nbsp;</a></span>writeInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeInt </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Write a number value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">num</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6227159dfd161695a1180a6c765227ce" name="a6227159dfd161695a1180a6c765227ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6227159dfd161695a1180a6c765227ce">&#9670;&nbsp;</a></span>writeBool()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeBool </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Write a boolean value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">value</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5782046f7dbf363d9b844945c15463ed" name="a5782046f7dbf363d9b844945c15463ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5782046f7dbf363d9b844945c15463ed">&#9670;&nbsp;</a></span>writeString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeString </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Write a string value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">value</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac6b2e47b171917cc143ea66d92ce23dc" name="ac6b2e47b171917cc143ea66d92ce23dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6b2e47b171917cc143ea66d92ce23dc">&#9670;&nbsp;</a></span>writeStringVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeStringVector </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a> &amp;&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Write string vector to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">arr</td><td>The vector to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2acf510949316f3ec52eb629df0a644d" name="a2acf510949316f3ec52eb629df0a644d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2acf510949316f3ec52eb629df0a644d">&#9670;&nbsp;</a></span>writeObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeObject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Write an object to the container. This is equal to calling PersistentObject.writeObject(ContainerNode);</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">obj</td><td>The object to be written </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a704bcd74e979750ed753f322046e2089" name="a704bcd74e979750ed753f322046e2089"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a704bcd74e979750ed753f322046e2089">&#9670;&nbsp;</a></span>writeNewContainer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::writeNewContainer </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create and write an empty Object node that can be used as parent for subsequent write operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the new container in the container.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A sub-container. </dd></dl>

</div>
</div>
<a id="a270c8d919d87cad372ed30b980ad014b" name="a270c8d919d87cad372ed30b980ad014b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a270c8d919d87cad372ed30b980ad014b">&#9670;&nbsp;</a></span>writeNewArray()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::writeNewArray </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create and write an empty array node that can be used as parent for subsequent write operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the array.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A sub-container. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="persistent_8hpp.htm">persistent.hpp</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
