<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj::PersistentDocument Class Reference (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacepj.htm">pj</a></li><li class="navelem"><a class="el" href="classpj_1_1PersistentDocument.htm">PersistentDocument</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">pj::PersistentDocument Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__PJSUA2__Ref.htm">pjsua2 API Reference</a> &raquo; <a class="el" href="group__PJSUA2__PERSISTENT.htm">Persistent API</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;persistent.hpp&gt;</code></p>
<div class="dynheader">
Inheritance diagram for pj::PersistentDocument:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classpj_1_1PersistentDocument.png" usemap="#pj::PersistentDocument_map" alt=""/>
  <map id="pj::PersistentDocument_map" name="pj::PersistentDocument_map">
<area href="classpj_1_1JsonDocument.htm" alt="pj::JsonDocument" shape="rect" coords="0,56,139,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae46db82c3a65e74b5a0569580dbdfc12"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ae46db82c3a65e74b5a0569580dbdfc12">~PersistentDocument</a> ()</td></tr>
<tr class="separator:ae46db82c3a65e74b5a0569580dbdfc12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9dd8a183d5e8b39beedd5618eebeec1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ac9dd8a183d5e8b39beedd5618eebeec1">loadFile</a> (const string &amp;filename) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)=0</td></tr>
<tr class="separator:ac9dd8a183d5e8b39beedd5618eebeec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bbc170f184737eaba17136625d58485"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a6bbc170f184737eaba17136625d58485">loadString</a> (const string &amp;input) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)=0</td></tr>
<tr class="separator:a6bbc170f184737eaba17136625d58485"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7cd7f9681c34108a896ff66827fe266"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#aa7cd7f9681c34108a896ff66827fe266">saveFile</a> (const string &amp;filename) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)=0</td></tr>
<tr class="separator:aa7cd7f9681c34108a896ff66827fe266"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f4e0b884bc26d80dca8a929edbcb01a"><td class="memItemLeft" align="right" valign="top">virtual string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a7f4e0b884bc26d80dca8a929edbcb01a">saveString</a> () PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)=0</td></tr>
<tr class="separator:a7f4e0b884bc26d80dca8a929edbcb01a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6f96979cb7c597c0c942b69c2b6f76c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ab6f96979cb7c597c0c942b69c2b6f76c">getRootContainer</a> () const =0</td></tr>
<tr class="separator:ab6f96979cb7c597c0c942b69c2b6f76c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3124663b0c4447e2e39e67cf1b8f1f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ad3124663b0c4447e2e39e67cf1b8f1f0">hasUnread</a> () const</td></tr>
<tr class="separator:ad3124663b0c4447e2e39e67cf1b8f1f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab52ea41bd635ac890628a782d2268aa1"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ab52ea41bd635ac890628a782d2268aa1">unreadName</a> () const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:ab52ea41bd635ac890628a782d2268aa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71bd569a1f4974888a4271b8cd0ccb99"><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a71bd569a1f4974888a4271b8cd0ccb99">readInt</a> (const string &amp;name=&quot;&quot;) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a71bd569a1f4974888a4271b8cd0ccb99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5db92d74c6146bb16a2de2765486acb"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#af5db92d74c6146bb16a2de2765486acb">readNumber</a> (const string &amp;name=&quot;&quot;) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:af5db92d74c6146bb16a2de2765486acb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13b46af8da1238d8e9bb8886dce0ac1b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a13b46af8da1238d8e9bb8886dce0ac1b">readBool</a> (const string &amp;name=&quot;&quot;) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a13b46af8da1238d8e9bb8886dce0ac1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14eab21018b1e3c0c6c63181625b11ff"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a14eab21018b1e3c0c6c63181625b11ff">readString</a> (const string &amp;name=&quot;&quot;) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a14eab21018b1e3c0c6c63181625b11ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27f4ba0ad2294e72a6e4a4e6cc874a12"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a27f4ba0ad2294e72a6e4a4e6cc874a12">readStringVector</a> (const string &amp;name=&quot;&quot;) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a27f4ba0ad2294e72a6e4a4e6cc874a12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8763ab20ddc52460487464fee8bd2e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#ad8763ab20ddc52460487464fee8bd2e7">readObject</a> (<a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;obj) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:ad8763ab20ddc52460487464fee8bd2e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f7073b2caea9eea176e4ec4650726f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a7f7073b2caea9eea176e4ec4650726f5">readContainer</a> (const string &amp;name=&quot;&quot;) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a7f7073b2caea9eea176e4ec4650726f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedc74375f86a0cf4ab6685ce46bae384"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#aedc74375f86a0cf4ab6685ce46bae384">readArray</a> (const string &amp;name=&quot;&quot;) const PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:aedc74375f86a0cf4ab6685ce46bae384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afae9297c057dd7a19aee7d92374ae419"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#afae9297c057dd7a19aee7d92374ae419">writeNumber</a> (const string &amp;name, float num) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:afae9297c057dd7a19aee7d92374ae419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a0f533cba0e42ffd95419f532cf0b69"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a4a0f533cba0e42ffd95419f532cf0b69">writeInt</a> (const string &amp;name, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> num) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a4a0f533cba0e42ffd95419f532cf0b69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d4af439d3ac1a175293d6f0015f9d9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a3d4af439d3ac1a175293d6f0015f9d9a">writeBool</a> (const string &amp;name, bool value) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a3d4af439d3ac1a175293d6f0015f9d9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37c8a54e22d740e87b738505b1304d0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a37c8a54e22d740e87b738505b1304d0c">writeString</a> (const string &amp;name, const string &amp;value) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a37c8a54e22d740e87b738505b1304d0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabc372320920e3b0cd873167c198f30b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#aabc372320920e3b0cd873167c198f30b">writeStringVector</a> (const string &amp;name, const <a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a> &amp;arr) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:aabc372320920e3b0cd873167c198f30b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae9e7b6e28ab59b417d7054dfcb3e7cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#aae9e7b6e28ab59b417d7054dfcb3e7cf">writeObject</a> (const <a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;obj) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:aae9e7b6e28ab59b417d7054dfcb3e7cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7f42a6e3780ac345f0ff8bc337a5720"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#af7f42a6e3780ac345f0ff8bc337a5720">writeNewContainer</a> (const string &amp;name) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:af7f42a6e3780ac345f0ff8bc337a5720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d08a6357add29da5f6cf380a8c6bdea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1PersistentDocument.htm#a5d08a6357add29da5f6cf380a8c6bdea">writeNewArray</a> (const string &amp;name) PJSUA2_THROW(<a class="el" href="structpj_1_1Error.htm">Error</a>)</td></tr>
<tr class="separator:a5d08a6357add29da5f6cf380a8c6bdea"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This a the abstract base class for a persistent document. A document is created either by loading from a string or a file, or by constructing it manually when writing data to it. The document then can be saved to either string or to a file. A document contains one root <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> where all data are stored under.</p>
<p>Document is read and written serially, hence the order of reading must be the same as the order of writing. The <a class="el" href="classpj_1_1PersistentDocument.htm">PersistentDocument</a> class provides API to read and write to the root node, but for more flexible operations application can use the <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> methods instead. Indeed the read and write API in <a class="el" href="classpj_1_1PersistentDocument.htm">PersistentDocument</a> is just a shorthand which calls the relevant methods in the <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>. As a tip, normally application only uses the <a class="el" href="classpj_1_1PersistentDocument.htm#ad8763ab20ddc52460487464fee8bd2e7">readObject()</a> and <a class="el" href="classpj_1_1PersistentDocument.htm#aae9e7b6e28ab59b417d7054dfcb3e7cf">writeObject()</a> methods declared here to read/write top level objects, and use the macros that are explained in <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> documentation to read/write more detailed data. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ae46db82c3a65e74b5a0569580dbdfc12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae46db82c3a65e74b5a0569580dbdfc12">&#9670;&nbsp;</a></span>~PersistentDocument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual pj::PersistentDocument::~PersistentDocument </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Virtual destructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac9dd8a183d5e8b39beedd5618eebeec1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9dd8a183d5e8b39beedd5618eebeec1">&#9670;&nbsp;</a></span>loadFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::PersistentDocument::loadFile </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Load this document from a file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>The file name. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#ad9ef9fc4ac65a26441424b973e2cd502">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="a6bbc170f184737eaba17136625d58485"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bbc170f184737eaba17136625d58485">&#9670;&nbsp;</a></span>loadString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::PersistentDocument::loadString </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Load this document from string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The string. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#a57ab60f57ba2c50df947a17a3060a73d">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="aa7cd7f9681c34108a896ff66827fe266"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7cd7f9681c34108a896ff66827fe266">&#9670;&nbsp;</a></span>saveFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::PersistentDocument::saveFile </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Write this document to a file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>The file name. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#af1bafffa389d8b03b2ee36c4652d69da">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="a7f4e0b884bc26d80dca8a929edbcb01a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f4e0b884bc26d80dca8a929edbcb01a">&#9670;&nbsp;</a></span>saveString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual string pj::PersistentDocument::saveString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Write this document to string.</p>
<dl class="section return"><dt>Returns</dt><dd>The string document. </dd></dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#a82745e5cddbe4e75dccab486196be307">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="ab6f96979cb7c597c0c942b69c2b6f76c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6f96979cb7c597c0c942b69c2b6f76c">&#9670;&nbsp;</a></span>getRootContainer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a>&amp; pj::PersistentDocument::getRootContainer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the root container node for this document</p>
<dl class="section return"><dt>Returns</dt><dd>The root node. </dd></dl>

<p>Implemented in <a class="el" href="classpj_1_1JsonDocument.htm#aa98ef4192125868864c0269cc7d873a4">pj::JsonDocument</a>.</p>

</div>
</div>
<a id="ad3124663b0c4447e2e39e67cf1b8f1f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3124663b0c4447e2e39e67cf1b8f1f0">&#9670;&nbsp;</a></span>hasUnread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::PersistentDocument::hasUnread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determine if there is unread element. If yes, then app can use one of the readXxx() functions to read it.</p>
<dl class="section return"><dt>Returns</dt><dd>True if there is. </dd></dl>

</div>
</div>
<a id="ab52ea41bd635ac890628a782d2268aa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab52ea41bd635ac890628a782d2268aa1">&#9670;&nbsp;</a></span>unreadName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string pj::PersistentDocument::unreadName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the name of the next unread element. It will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if there is no more element to read.</p>
<dl class="section return"><dt>Returns</dt><dd>The name of the next element . </dd></dl>

</div>
</div>
<a id="a71bd569a1f4974888a4271b8cd0ccb99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71bd569a1f4974888a4271b8cd0ccb99">&#9670;&nbsp;</a></span>readInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> pj::PersistentDocument::readInt </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read an integer value from the document and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a number. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="af5db92d74c6146bb16a2de2765486acb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5db92d74c6146bb16a2de2765486acb">&#9670;&nbsp;</a></span>readNumber()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float pj::PersistentDocument::readNumber </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read a float value from the document and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a number. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="a13b46af8da1238d8e9bb8886dce0ac1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13b46af8da1238d8e9bb8886dce0ac1b">&#9670;&nbsp;</a></span>readBool()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::PersistentDocument::readBool </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read a boolean value from the container and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a boolean. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="a14eab21018b1e3c0c6c63181625b11ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14eab21018b1e3c0c6c63181625b11ff">&#9670;&nbsp;</a></span>readString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string pj::PersistentDocument::readString </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read a string value from the container and return the value. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a string. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="a27f4ba0ad2294e72a6e4a4e6cc874a12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27f4ba0ad2294e72a6e4a4e6cc874a12">&#9670;&nbsp;</a></span>readStringVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a> pj::PersistentDocument::readStringVector </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read a string array from the container. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not a string array. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value. </dd></dl>

</div>
</div>
<a id="ad8763ab20ddc52460487464fee8bd2e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8763ab20ddc52460487464fee8bd2e7">&#9670;&nbsp;</a></span>readObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::readObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read the specified object from the container. This is equal to calling PersistentObject.readObject(ContainerNode);</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">obj</td><td>The object to read. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7f7073b2caea9eea176e4ec4650726f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f7073b2caea9eea176e4ec4650726f5">&#9670;&nbsp;</a></span>readContainer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::readContainer </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read a container from the container. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not an object. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Container object. </dd></dl>

</div>
</div>
<a id="aedc74375f86a0cf4ab6685ce46bae384"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedc74375f86a0cf4ab6685ce46bae384">&#9670;&nbsp;</a></span>readArray()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::readArray </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read array container from the container. This will throw <a class="el" href="structpj_1_1Error.htm">Error</a> if the current element is not an array. The read position will be advanced to the next element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>If specified, then the function will check if the name of the next element matches the specified name and throw <a class="el" href="structpj_1_1Error.htm">Error</a> if it doesn't match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Container object. </dd></dl>

</div>
</div>
<a id="afae9297c057dd7a19aee7d92374ae419"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afae9297c057dd7a19aee7d92374ae419">&#9670;&nbsp;</a></span>writeNumber()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeNumber </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Write a number value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">num</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4a0f533cba0e42ffd95419f532cf0b69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a0f533cba0e42ffd95419f532cf0b69">&#9670;&nbsp;</a></span>writeInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeInt </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Write a number value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">num</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3d4af439d3ac1a175293d6f0015f9d9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d4af439d3ac1a175293d6f0015f9d9a">&#9670;&nbsp;</a></span>writeBool()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeBool </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Write a boolean value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">value</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a37c8a54e22d740e87b738505b1304d0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37c8a54e22d740e87b738505b1304d0c">&#9670;&nbsp;</a></span>writeString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeString </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Write a string value to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">value</td><td>The value to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aabc372320920e3b0cd873167c198f30b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabc372320920e3b0cd873167c198f30b">&#9670;&nbsp;</a></span>writeStringVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeStringVector </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJSUA2__TYPES.htm#gaf4b042acfebd1325cae85c758f4482ae">StringVector</a> &amp;&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Write string vector to the container.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the value in the container. </td></tr>
    <tr><td class="paramname">arr</td><td>The vector to be written. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aae9e7b6e28ab59b417d7054dfcb3e7cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae9e7b6e28ab59b417d7054dfcb3e7cf">&#9670;&nbsp;</a></span>writeObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::PersistentDocument::writeObject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classpj_1_1PersistentObject.htm">PersistentObject</a> &amp;&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Write an object to the container. This is equal to calling PersistentObject.writeObject(ContainerNode);</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">obj</td><td>The object to be written </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af7f42a6e3780ac345f0ff8bc337a5720"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7f42a6e3780ac345f0ff8bc337a5720">&#9670;&nbsp;</a></span>writeNewContainer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::writeNewContainer </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create and write an empty Object node that can be used as parent for subsequent write operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the new container in the container.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A sub-container. </dd></dl>

</div>
</div>
<a id="a5d08a6357add29da5f6cf380a8c6bdea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d08a6357add29da5f6cf380a8c6bdea">&#9670;&nbsp;</a></span>writeNewArray()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1ContainerNode.htm">ContainerNode</a> pj::PersistentDocument::writeNewArray </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create and write an empty array node that can be used as parent for subsequent write operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name for the array.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A sub-container. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="persistent_8hpp.htm">persistent.hpp</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
