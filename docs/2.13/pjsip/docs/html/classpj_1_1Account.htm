<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj::Account Class Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacepj.htm">pj</a></li><li class="navelem"><a class="el" href="classpj_1_1Account.htm">Account</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle"><div class="title">pj::Account Class Reference<div class="ingroups"><a class="el" href="group__PJSUA2__Ref.htm">pjsua2 API Reference</a> &raquo; <a class="el" href="group__PJSUA2__ACC.htm">Account</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;account.hpp&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5b6ee3200caf2e35ad363da11b6fb029"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a5b6ee3200caf2e35ad363da11b6fb029">Account</a> ()</td></tr>
<tr class="separator:a5b6ee3200caf2e35ad363da11b6fb029"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44b5aa5bc565ae932a3701d9657ddcb"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#aa44b5aa5bc565ae932a3701d9657ddcb">~Account</a> ()</td></tr>
<tr class="separator:aa44b5aa5bc565ae932a3701d9657ddcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a883609c401677157cd7fb53c442345a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a883609c401677157cd7fb53c442345a3">create</a> (const <a class="el" href="structpj_1_1AccountConfig.htm">AccountConfig</a> &amp;cfg, bool make_default=false)  throw (Error)</td></tr>
<tr class="separator:a883609c401677157cd7fb53c442345a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a326f3d669c657d7b8926d9a7df1fcbb6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a326f3d669c657d7b8926d9a7df1fcbb6">shutdown</a> ()</td></tr>
<tr class="separator:a326f3d669c657d7b8926d9a7df1fcbb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4ed211af4900af9882fcd779d4f33ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#ac4ed211af4900af9882fcd779d4f33ac">modify</a> (const <a class="el" href="structpj_1_1AccountConfig.htm">AccountConfig</a> &amp;cfg)  throw (Error)</td></tr>
<tr class="separator:ac4ed211af4900af9882fcd779d4f33ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f033535f6709e644f8e993bbfbc2da7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a2f033535f6709e644f8e993bbfbc2da7">isValid</a> () const</td></tr>
<tr class="separator:a2f033535f6709e644f8e993bbfbc2da7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebf59fe75f71b8b2b815d65c77e30244"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#aebf59fe75f71b8b2b815d65c77e30244">setDefault</a> ()  throw (Error)</td></tr>
<tr class="separator:aebf59fe75f71b8b2b815d65c77e30244"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c7ac361417cc98c26702e2059184a9d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a8c7ac361417cc98c26702e2059184a9d">isDefault</a> () const</td></tr>
<tr class="separator:a8c7ac361417cc98c26702e2059184a9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ce50d0916c7ebf05cc35db87ea36cae"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a2ce50d0916c7ebf05cc35db87ea36cae">getId</a> () const</td></tr>
<tr class="separator:a2ce50d0916c7ebf05cc35db87ea36cae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c115a1b2a810d6a7635f915f3ab234a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1AccountInfo.htm">AccountInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a1c115a1b2a810d6a7635f915f3ab234a">getInfo</a> () const  throw (Error)</td></tr>
<tr class="separator:a1c115a1b2a810d6a7635f915f3ab234a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f3df60cbc0e27bd4884ab875b1d63af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a1f3df60cbc0e27bd4884ab875b1d63af">setRegistration</a> (bool renew)  throw (Error)</td></tr>
<tr class="separator:a1f3df60cbc0e27bd4884ab875b1d63af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac89026f87fd4495c992547ce618d0888"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#ac89026f87fd4495c992547ce618d0888">setOnlineStatus</a> (const <a class="el" href="structpj_1_1PresenceStatus.htm">PresenceStatus</a> &amp;pres_st)  throw (Error)</td></tr>
<tr class="separator:ac89026f87fd4495c992547ce618d0888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a15592a52e22918c41c4bec8fdef29"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a92a15592a52e22918c41c4bec8fdef29">setTransport</a> (<a class="el" href="group__PJSUA2__TYPES.htm#ga2ecd820d8891d99dc84e769d76864a59">TransportId</a> tp_id)  throw (Error)</td></tr>
<tr class="separator:a92a15592a52e22918c41c4bec8fdef29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c152c920040711f83c3a9cea1c1cf7b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a4c152c920040711f83c3a9cea1c1cf7b">presNotify</a> (const <a class="el" href="structpj_1_1PresNotifyParam.htm">PresNotifyParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a4c152c920040711f83c3a9cea1c1cf7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4b1efd0b2cba03af79d4c41cd4ad129"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="group__PJSUA2__PRES.htm#ga50874d5d7c45f706773adc278dbf10e3">BuddyVector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#af4b1efd0b2cba03af79d4c41cd4ad129">enumBuddies</a> () const  throw (Error)</td></tr>
<tr class="separator:af4b1efd0b2cba03af79d4c41cd4ad129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80e2f1117bac9716e7288d1969e71d68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSUA2__PRES.htm#ga4a19fd5d482e86153d5989a5843bc8ae">BuddyVector2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a80e2f1117bac9716e7288d1969e71d68">enumBuddies2</a> () const  throw (Error)</td></tr>
<tr class="separator:a80e2f1117bac9716e7288d1969e71d68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc7fa35d75aba9d6534a7261b6c936a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1Buddy.htm">Buddy</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#abc7fa35d75aba9d6534a7261b6c936a3">findBuddy</a> (string uri, <a class="el" href="classpj_1_1FindBuddyMatch.htm">FindBuddyMatch</a> *buddy_match=NULL) const  throw (Error)</td></tr>
<tr class="separator:abc7fa35d75aba9d6534a7261b6c936a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb0050811c8964717054bc2dc7865fc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1Buddy.htm">Buddy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#aeb0050811c8964717054bc2dc7865fc5">findBuddy2</a> (string uri) const  throw (Error)</td></tr>
<tr class="separator:aeb0050811c8964717054bc2dc7865fc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb0b990849d0fe456f7b69c75552f072"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#acb0b990849d0fe456f7b69c75552f072">onIncomingCall</a> (<a class="el" href="structpj_1_1OnIncomingCallParam.htm">OnIncomingCallParam</a> &amp;prm)</td></tr>
<tr class="separator:acb0b990849d0fe456f7b69c75552f072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8347332099d42e3013710b9b488ea77"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#ad8347332099d42e3013710b9b488ea77">onRegStarted</a> (<a class="el" href="structpj_1_1OnRegStartedParam.htm">OnRegStartedParam</a> &amp;prm)</td></tr>
<tr class="separator:ad8347332099d42e3013710b9b488ea77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d8297cbb48f8c93c2de2a36873f406f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a9d8297cbb48f8c93c2de2a36873f406f">onRegState</a> (<a class="el" href="structpj_1_1OnRegStateParam.htm">OnRegStateParam</a> &amp;prm)</td></tr>
<tr class="separator:a9d8297cbb48f8c93c2de2a36873f406f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab791abb665663b736f9920e01a5a55d3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#ab791abb665663b736f9920e01a5a55d3">onIncomingSubscribe</a> (<a class="el" href="structpj_1_1OnIncomingSubscribeParam.htm">OnIncomingSubscribeParam</a> &amp;prm)</td></tr>
<tr class="separator:ab791abb665663b736f9920e01a5a55d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2bebdae14ee1223b3b73da2a599c484"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#af2bebdae14ee1223b3b73da2a599c484">onInstantMessage</a> (<a class="el" href="structpj_1_1OnInstantMessageParam.htm">OnInstantMessageParam</a> &amp;prm)</td></tr>
<tr class="separator:af2bebdae14ee1223b3b73da2a599c484"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24a5783eecc0b9da7a65f8b652f528d9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a24a5783eecc0b9da7a65f8b652f528d9">onInstantMessageStatus</a> (<a class="el" href="structpj_1_1OnInstantMessageStatusParam.htm">OnInstantMessageStatusParam</a> &amp;prm)</td></tr>
<tr class="separator:a24a5783eecc0b9da7a65f8b652f528d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a163df3e44084422267dc173fecf06868"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a163df3e44084422267dc173fecf06868">onTypingIndication</a> (<a class="el" href="structpj_1_1OnTypingIndicationParam.htm">OnTypingIndicationParam</a> &amp;prm)</td></tr>
<tr class="separator:a163df3e44084422267dc173fecf06868"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e534a4899efbd71715bc145b8d862dd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#a0e534a4899efbd71715bc145b8d862dd">onMwiInfo</a> (<a class="el" href="structpj_1_1OnMwiInfoParam.htm">OnMwiInfoParam</a> &amp;prm)</td></tr>
<tr class="separator:a0e534a4899efbd71715bc145b8d862dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:adb225bb9b623dbf0817f111245b7c692"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classpj_1_1Account.htm">Account</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Account.htm#adb225bb9b623dbf0817f111245b7c692">lookup</a> (int acc_id)</td></tr>
<tr class="separator:adb225bb9b623dbf0817f111245b7c692"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a500d74fc41e3ab6b4889a579193566ed"><td class="memItemLeft" align="right" valign="top"><a id="a500d74fc41e3ab6b4889a579193566ed" name="a500d74fc41e3ab6b4889a579193566ed"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Endpoint</b></td></tr>
<tr class="separator:a500d74fc41e3ab6b4889a579193566ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91e7b59190859e6ec49d3166d76a2f83"><td class="memItemLeft" align="right" valign="top"><a id="a91e7b59190859e6ec49d3166d76a2f83" name="a91e7b59190859e6ec49d3166d76a2f83"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Buddy</b></td></tr>
<tr class="separator:a91e7b59190859e6ec49d3166d76a2f83"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p ><a class="el" href="classpj_1_1Account.htm">Account</a>. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5b6ee3200caf2e35ad363da11b6fb029" name="a5b6ee3200caf2e35ad363da11b6fb029"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b6ee3200caf2e35ad363da11b6fb029">&#9670;&nbsp;</a></span>Account()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj::Account::Account </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Constructor. </p>

</div>
</div>
<a id="aa44b5aa5bc565ae932a3701d9657ddcb" name="aa44b5aa5bc565ae932a3701d9657ddcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa44b5aa5bc565ae932a3701d9657ddcb">&#9670;&nbsp;</a></span>~Account()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual pj::Account::~Account </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Destructor. Note that if the account is deleted, it will also delete the corresponding account in the PJSUA-LIB.</p>
<p >If application implements a derived class, the derived class should call <a class="el" href="classpj_1_1Account.htm#a326f3d669c657d7b8926d9a7df1fcbb6">shutdown()</a> in the beginning stage in its destructor, or alternatively application should call <a class="el" href="classpj_1_1Account.htm#a326f3d669c657d7b8926d9a7df1fcbb6">shutdown()</a> before deleting the derived class instance. This is to avoid race condition between the derived class destructor and <a class="el" href="classpj_1_1Account.htm">Account</a> callbacks. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a883609c401677157cd7fb53c442345a3" name="a883609c401677157cd7fb53c442345a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a883609c401677157cd7fb53c442345a3">&#9670;&nbsp;</a></span>create()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::create </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1AccountConfig.htm">AccountConfig</a> &amp;&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>make_default</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create the account.</p>
<p >If application implements a derived class, the derived class should call <a class="el" href="classpj_1_1Account.htm#a326f3d669c657d7b8926d9a7df1fcbb6">shutdown()</a> in the beginning stage in its destructor, or alternatively application should call <a class="el" href="classpj_1_1Account.htm#a326f3d669c657d7b8926d9a7df1fcbb6">shutdown()</a> before deleting the derived class instance. This is to avoid race condition between the derived class destructor and <a class="el" href="classpj_1_1Account.htm">Account</a> callbacks.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cfg</td><td>The account config. </td></tr>
    <tr><td class="paramname">make_default</td><td>Make this the default account. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a326f3d669c657d7b8926d9a7df1fcbb6" name="a326f3d669c657d7b8926d9a7df1fcbb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a326f3d669c657d7b8926d9a7df1fcbb6">&#9670;&nbsp;</a></span>shutdown()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::shutdown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Shutdown the account. This will initiate unregistration if needed, and delete the corresponding account in the PJSUA-LIB.</p>
<p >Note that application must delete all <a class="el" href="classpj_1_1Buddy.htm">Buddy</a> instances belong to this account before shutting down the account.</p>
<p >If application implements a derived class, the derived class should call this method in the beginning stage in its destructor, or alternatively application should call this method before deleting the derived class instance. This is to avoid race condition between the derived class destructor and <a class="el" href="classpj_1_1Account.htm">Account</a> callbacks. </p>

</div>
</div>
<a id="ac4ed211af4900af9882fcd779d4f33ac" name="ac4ed211af4900af9882fcd779d4f33ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4ed211af4900af9882fcd779d4f33ac">&#9670;&nbsp;</a></span>modify()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::modify </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1AccountConfig.htm">AccountConfig</a> &amp;&#160;</td>
          <td class="paramname"><em>cfg</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Modify the account to use the specified account configuration. Depending on the changes, this may cause unregistration or reregistration on the account.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cfg</td><td>New account config to be applied to the account. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2f033535f6709e644f8e993bbfbc2da7" name="a2f033535f6709e644f8e993bbfbc2da7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f033535f6709e644f8e993bbfbc2da7">&#9670;&nbsp;</a></span>isValid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::Account::isValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if this account is still valid.</p>
<dl class="section return"><dt>Returns</dt><dd>True if it is. </dd></dl>

</div>
</div>
<a id="aebf59fe75f71b8b2b815d65c77e30244" name="aebf59fe75f71b8b2b815d65c77e30244"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebf59fe75f71b8b2b815d65c77e30244">&#9670;&nbsp;</a></span>setDefault()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::setDefault </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set this as default account to be used when incoming and outgoing requests don't match any accounts. </p>

</div>
</div>
<a id="a8c7ac361417cc98c26702e2059184a9d" name="a8c7ac361417cc98c26702e2059184a9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c7ac361417cc98c26702e2059184a9d">&#9670;&nbsp;</a></span>isDefault()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::Account::isDefault </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if this account is the default account. Default account will be used for incoming and outgoing requests that don't match any other accounts.</p>
<dl class="section return"><dt>Returns</dt><dd>True if this is the default account. </dd></dl>

</div>
</div>
<a id="a2ce50d0916c7ebf05cc35db87ea36cae" name="a2ce50d0916c7ebf05cc35db87ea36cae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ce50d0916c7ebf05cc35db87ea36cae">&#9670;&nbsp;</a></span>getId()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::Account::getId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get PJSUA-LIB account ID or index associated with this account.</p>
<dl class="section return"><dt>Returns</dt><dd>Integer greater than or equal to zero. </dd></dl>

</div>
</div>
<a id="adb225bb9b623dbf0817f111245b7c692" name="adb225bb9b623dbf0817f111245b7c692"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb225bb9b623dbf0817f111245b7c692">&#9670;&nbsp;</a></span>lookup()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classpj_1_1Account.htm">Account</a> * pj::Account::lookup </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>acc_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Get the <a class="el" href="classpj_1_1Account.htm">Account</a> class for the specified account Id.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">acc_id</td><td>The account ID to lookup</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The <a class="el" href="classpj_1_1Account.htm">Account</a> instance or NULL if not found. </dd></dl>

</div>
</div>
<a id="a1c115a1b2a810d6a7635f915f3ab234a" name="a1c115a1b2a810d6a7635f915f3ab234a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c115a1b2a810d6a7635f915f3ab234a">&#9670;&nbsp;</a></span>getInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1AccountInfo.htm">AccountInfo</a> pj::Account::getInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get account info.</p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classpj_1_1Account.htm">Account</a> info. </dd></dl>

</div>
</div>
<a id="a1f3df60cbc0e27bd4884ab875b1d63af" name="a1f3df60cbc0e27bd4884ab875b1d63af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f3df60cbc0e27bd4884ab875b1d63af">&#9670;&nbsp;</a></span>setRegistration()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::setRegistration </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>renew</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Update registration or perform unregistration. Application normally only needs to call this function if it wants to manually update the registration or to unregister from the server.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">renew</td><td>If False, this will start unregistration process. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac89026f87fd4495c992547ce618d0888" name="ac89026f87fd4495c992547ce618d0888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac89026f87fd4495c992547ce618d0888">&#9670;&nbsp;</a></span>setOnlineStatus()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::setOnlineStatus </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1PresenceStatus.htm">PresenceStatus</a> &amp;&#160;</td>
          <td class="paramname"><em>pres_st</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set or modify account's presence online status to be advertised to remote/presence subscribers. This would trigger the sending of outgoing NOTIFY request if there are server side presence subscription for this account, and/or outgoing PUBLISH if presence publication is enabled for this account.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pres_st</td><td>Presence online status. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a92a15592a52e22918c41c4bec8fdef29" name="a92a15592a52e22918c41c4bec8fdef29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92a15592a52e22918c41c4bec8fdef29">&#9670;&nbsp;</a></span>setTransport()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::setTransport </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJSUA2__TYPES.htm#ga2ecd820d8891d99dc84e769d76864a59">TransportId</a>&#160;</td>
          <td class="paramname"><em>tp_id</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Lock/bind this account to a specific transport/listener. Normally application shouldn't need to do this, as transports will be selected automatically by the library according to the destination.</p>
<p >When account is locked/bound to a specific transport, all outgoing requests from this account will use the specified transport (this includes SIP registration, dialog (call and event subscription), and out-of-dialog requests such as MESSAGE).</p>
<p >Note that transport id may be specified in <a class="el" href="structpj_1_1AccountConfig.htm">AccountConfig</a> too.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp_id</td><td>The transport ID. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4c152c920040711f83c3a9cea1c1cf7b" name="a4c152c920040711f83c3a9cea1c1cf7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c152c920040711f83c3a9cea1c1cf7b">&#9670;&nbsp;</a></span>presNotify()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Account::presNotify </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1PresNotifyParam.htm">PresNotifyParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send NOTIFY to inform account presence status or to terminate server side presence subscription. If application wants to reject the incoming request, it should set the param <em><a class="el" href="structpj_1_1PresNotifyParam.htm#ad4a1688129e15b733d4ec21daea3e8ce">PresNotifyParam.state</a></em> to PJSIP_EVSUB_STATE_TERMINATED.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>The sending NOTIFY parameter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af4b1efd0b2cba03af79d4c41cd4ad129" name="af4b1efd0b2cba03af79d4c41cd4ad129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4b1efd0b2cba03af79d4c41cd4ad129">&#9670;&nbsp;</a></span>enumBuddies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="group__PJSUA2__PRES.htm#ga50874d5d7c45f706773adc278dbf10e3">BuddyVector</a> &amp; pj::Account::enumBuddies </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Warning: deprecated, use <a class="el" href="classpj_1_1Account.htm#a80e2f1117bac9716e7288d1969e71d68">enumBuddies2()</a> instead. This function is not safe in multithreaded environment.</p>
<p >Enumerate all buddies of the account.</p>
<dl class="section return"><dt>Returns</dt><dd>The buddy list. </dd></dl>

</div>
</div>
<a id="a80e2f1117bac9716e7288d1969e71d68" name="a80e2f1117bac9716e7288d1969e71d68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80e2f1117bac9716e7288d1969e71d68">&#9670;&nbsp;</a></span>enumBuddies2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSUA2__PRES.htm#ga4a19fd5d482e86153d5989a5843bc8ae">BuddyVector2</a> pj::Account::enumBuddies2 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Enumerate all buddies of the account.</p>
<dl class="section return"><dt>Returns</dt><dd>The buddy list. </dd></dl>

</div>
</div>
<a id="abc7fa35d75aba9d6534a7261b6c936a3" name="abc7fa35d75aba9d6534a7261b6c936a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc7fa35d75aba9d6534a7261b6c936a3">&#9670;&nbsp;</a></span>findBuddy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1Buddy.htm">Buddy</a> * pj::Account::findBuddy </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>uri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpj_1_1FindBuddyMatch.htm">FindBuddyMatch</a> *&#160;</td>
          <td class="paramname"><em>buddy_match</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Warning: deprecated, use findBuddy2 instead. This function is not safe in multithreaded environment.</p>
<p >Find a buddy in the buddy list with the specified URI.</p>
<p >Exception: if buddy is not found, PJ_ENOTFOUND will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uri</td><td>The buddy URI. </td></tr>
    <tr><td class="paramname">buddy_match</td><td>The buddy match algo.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The pointer to buddy. </dd></dl>

</div>
</div>
<a id="aeb0050811c8964717054bc2dc7865fc5" name="aeb0050811c8964717054bc2dc7865fc5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb0050811c8964717054bc2dc7865fc5">&#9670;&nbsp;</a></span>findBuddy2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1Buddy.htm">Buddy</a> pj::Account::findBuddy2 </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>uri</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find a buddy in the buddy list with the specified URI.</p>
<p >Exception: if buddy is not found, PJ_ENOTFOUND will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uri</td><td>The buddy URI.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The pointer to buddy. </dd></dl>

</div>
</div>
<a id="acb0b990849d0fe456f7b69c75552f072" name="acb0b990849d0fe456f7b69c75552f072"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb0b990849d0fe456f7b69c75552f072">&#9670;&nbsp;</a></span>onIncomingCall()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onIncomingCall </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnIncomingCallParam.htm">OnIncomingCallParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application on incoming call.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ad8347332099d42e3013710b9b488ea77" name="ad8347332099d42e3013710b9b488ea77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8347332099d42e3013710b9b488ea77">&#9670;&nbsp;</a></span>onRegStarted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onRegStarted </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnRegStartedParam.htm">OnRegStartedParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when registration or unregistration has been initiated. Note that this only notifies the initial registration and unregistration. Once registration session is active, subsequent refresh will not cause this callback to be called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a9d8297cbb48f8c93c2de2a36873f406f" name="a9d8297cbb48f8c93c2de2a36873f406f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d8297cbb48f8c93c2de2a36873f406f">&#9670;&nbsp;</a></span>onRegState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onRegState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnRegStateParam.htm">OnRegStateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when registration status has changed. Application may then query the account info to get the registration details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ab791abb665663b736f9920e01a5a55d3" name="ab791abb665663b736f9920e01a5a55d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab791abb665663b736f9920e01a5a55d3">&#9670;&nbsp;</a></span>onIncomingSubscribe()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onIncomingSubscribe </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnIncomingSubscribeParam.htm">OnIncomingSubscribeParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notification when incoming SUBSCRIBE request is received. Application may use this callback to authorize the incoming subscribe request (e.g. ask user permission if the request should be granted).</p>
<p >If this callback is not implemented, all incoming presence subscription requests will be accepted.</p>
<p >If this callback is implemented, application has several choices on what to do with the incoming request:</p><ul>
<li>it may reject the request immediately by specifying non-200 class final response in the IncomingSubscribeParam.code parameter.</li>
<li>it may immediately accept the request by specifying 200 as the IncomingSubscribeParam.code parameter. This is the default value if application doesn't set any value to the IncomingSubscribeParam.code parameter. In this case, the library will automatically send NOTIFY request upon returning from this callback.</li>
<li>it may delay the processing of the request, for example to request user permission whether to accept or reject the request. In this case, the application MUST set the IncomingSubscribeParam.code argument to 202, then IMMEDIATELY calls <a class="el" href="classpj_1_1Account.htm#a4c152c920040711f83c3a9cea1c1cf7b">presNotify()</a> with state PJSIP_EVSUB_STATE_PENDING and later calls <a class="el" href="classpj_1_1Account.htm#a4c152c920040711f83c3a9cea1c1cf7b">presNotify()</a> again to accept or reject the subscription request.</li>
</ul>
<p >Any IncomingSubscribeParam.code other than 200 and 202 will be treated as 200.</p>
<p >Application MUST return from this callback immediately (e.g. it must not block in this callback while waiting for user confirmation).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="af2bebdae14ee1223b3b73da2a599c484" name="af2bebdae14ee1223b3b73da2a599c484"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2bebdae14ee1223b3b73da2a599c484">&#9670;&nbsp;</a></span>onInstantMessage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onInstantMessage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnInstantMessageParam.htm">OnInstantMessageParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application on incoming instant message or pager (i.e. MESSAGE request) that was received outside call context.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a24a5783eecc0b9da7a65f8b652f528d9" name="a24a5783eecc0b9da7a65f8b652f528d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24a5783eecc0b9da7a65f8b652f528d9">&#9670;&nbsp;</a></span>onInstantMessageStatus()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onInstantMessageStatus </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnInstantMessageStatusParam.htm">OnInstantMessageStatusParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application about the delivery status of outgoing pager/instant message (i.e. MESSAGE) request.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a163df3e44084422267dc173fecf06868" name="a163df3e44084422267dc173fecf06868"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a163df3e44084422267dc173fecf06868">&#9670;&nbsp;</a></span>onTypingIndication()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onTypingIndication </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnTypingIndicationParam.htm">OnTypingIndicationParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application about typing indication.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a0e534a4899efbd71715bc145b8d862dd" name="a0e534a4899efbd71715bc145b8d862dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e534a4899efbd71715bc145b8d862dd">&#9670;&nbsp;</a></span>onMwiInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Account::onMwiInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnMwiInfoParam.htm">OnMwiInfoParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notification about MWI (Message Waiting Indication) status change. This callback can be called upon the status change of the SUBSCRIBE request (for example, 202/Accepted to SUBSCRIBE is received) or when a NOTIFY reqeust is received.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="account_8hpp.htm">account.hpp</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
