<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: Socket Select() (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Test: Socket Select() </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This file provides implementation of <b>select_test()</b>. It tests the functionality of the <a class="el" href="group__PJ__SOCK__SELECT.htm#gac84492169bc8b8fbab6e48f1b9150b2f">pj_sock_select()</a> API.</p>
<p>This file is <b>pjlib-test/select.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* $Id$ */</span></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div><div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><span class="comment"> * (at your option) any later version.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div><div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if INCLUDE_SELECT_TEST</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="sock_8h.htm">pj/sock.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="sock__select_8h.htm">pj/sock_select.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="log_8h.htm">pj/log.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="string_8h.htm">pj/string.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="assert_8h.htm">pj/assert.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="os_8h.htm">pj/os.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="errno_8h.htm">pj/errno.h</a>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">enum</span></div><div class="line">{</div><div class="line">    READ_FDS,</div><div class="line">    WRITE_FDS,</div><div class="line">    EXCEPT_FDS</div><div class="line">};</div><div class="line"></div><div class="line"><span class="preprocessor">#define UDP_PORT    51232</span></div><div class="line"><span class="preprocessor">#define THIS_FILE   &quot;select_test&quot;</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * do_select()</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Perform pj_sock_select() and find out which sockets</span></div><div class="line"><span class="comment"> * are signalled.</span></div><div class="line"><span class="comment"> */</span>    </div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> do_select( <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock1, <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock2,</div><div class="line">                      <span class="keywordtype">int</span> setcount[])</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__fd__set__t.htm">pj_fd_set_t</a> fds[3];</div><div class="line">    <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout;</div><div class="line">    <span class="keywordtype">int</span> i, n;</div><div class="line">    </div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;3; ++i) {</div><div class="line">        <a class="code" href="group__PJ__SOCK__SELECT.htm#ga73e77bf9c12e925d43e7b45f1121e596">PJ_FD_ZERO</a>(&amp;fds[i]);</div><div class="line">        <a class="code" href="group__PJ__SOCK__SELECT.htm#ga5c61d47831851a00aed2361f0166bb69">PJ_FD_SET</a>(sock1, &amp;fds[i]);</div><div class="line">        <a class="code" href="group__PJ__SOCK__SELECT.htm#ga5c61d47831851a00aed2361f0166bb69">PJ_FD_SET</a>(sock2, &amp;fds[i]);</div><div class="line">        setcount[i] = 0;</div><div class="line">    }</div><div class="line"></div><div class="line">    timeout.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 1;</div><div class="line">    timeout.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;</div><div class="line"></div><div class="line">    n = <a class="code" href="group__PJ__SOCK__SELECT.htm#gac84492169bc8b8fbab6e48f1b9150b2f">pj_sock_select</a>(<a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, &amp;fds[0], &amp;fds[1], &amp;fds[2],</div><div class="line">                       &amp;timeout);</div><div class="line">    <span class="keywordflow">if</span> (n &lt; 0)</div><div class="line">        <span class="keywordflow">return</span> n;</div><div class="line">    <span class="keywordflow">if</span> (n == 0)</div><div class="line">        <span class="keywordflow">return</span> 0;</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;3; ++i) {</div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK__SELECT.htm#gab8396be2fb425e96a4182f7c90504477">PJ_FD_ISSET</a>(sock1, &amp;fds[i]))</div><div class="line">            setcount[i]++;</div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK__SELECT.htm#gab8396be2fb425e96a4182f7c90504477">PJ_FD_ISSET</a>(sock2, &amp;fds[i]))</div><div class="line">            setcount[i]++;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> n;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * select_test()</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Test main entry.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> select_test()</div><div class="line">{</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> udp1=<a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>, udp2=<a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div><div class="line">    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> udp_addr;</div><div class="line">    <span class="keywordtype">int</span> status;</div><div class="line">    <span class="keywordtype">int</span> setcount[3];</div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">char</span> data[] = <span class="stringliteral">&quot;hello&quot;</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> datalen = 5;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent, received;</div><div class="line">    <span class="keywordtype">char</span> buf[10];</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...Testing simple UDP select()&quot;</span>));</div><div class="line">    </div><div class="line">    <span class="comment">// Create two UDP sockets.</span></div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>( <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;udp1);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create socket&quot;</span>, rc);</div><div class="line">        status=-10; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>( <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;udp2);</div><div class="line">    <span class="keywordflow">if</span> (udp2 == <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create socket&quot;</span>, rc);</div><div class="line">        status=-20; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Bind one of the UDP socket.</span></div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;udp_addr, <span class="keyword">sizeof</span>(udp_addr));</div><div class="line">    udp_addr.<a class="code" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();</div><div class="line">    udp_addr.<a class="code" href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = UDP_PORT;</div><div class="line">    udp_addr.<a class="code" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a> = <a class="code" href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a>(<a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;s, <span class="stringliteral">&quot;127.0.0.1&quot;</span>));</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(udp2, &amp;udp_addr, <span class="keyword">sizeof</span>(udp_addr))) {</div><div class="line">        status=-30; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Send data.</span></div><div class="line">    sent = datalen;</div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a>(udp1, data, &amp;sent, 0, &amp;udp_addr, <span class="keyword">sizeof</span>(udp_addr));</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || sent != datalen) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: sendto() error&quot;</span>, rc);</div><div class="line">        status=-40; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Sleep a bit. See http://trac.pjsip.org/repos/ticket/890</span></div><div class="line">    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(10);</div><div class="line"></div><div class="line">    <span class="comment">// Check that socket is marked as reable.</span></div><div class="line">    <span class="comment">// Note that select() may also report that sockets are writable.</span></div><div class="line">    status = do_select(udp1, udp2, setcount);</div><div class="line">    <span class="keywordflow">if</span> (status &lt; 0) {</div><div class="line">        <span class="keywordtype">char</span> errbuf[128];</div><div class="line">        <a class="code" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a>(<a class="code" href="group__pj__errno.htm#gaf32783cbca43d14cfc7e29694ba9057c">pj_get_netos_error</a>(), errbuf, <span class="keyword">sizeof</span>(errbuf));</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;...error: %s&quot;</span>, errbuf));</div><div class="line">        status=-50; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (status == 0) {</div><div class="line">        status=-60; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (setcount[READ_FDS] != 1) {</div><div class="line">        status=-70; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (setcount[WRITE_FDS] != 0) {</div><div class="line">        <span class="keywordflow">if</span> (setcount[WRITE_FDS] == 2) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...info: system reports writable sockets&quot;</span>));</div><div class="line">        } <span class="keywordflow">else</span> {</div><div class="line">            status=-80; <span class="keywordflow">goto</span> on_return;</div><div class="line">        }</div><div class="line">    } <span class="keywordflow">else</span> {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, </div><div class="line">                  <span class="stringliteral">&quot;...info: system doesn&#39;t report writable sockets&quot;</span>));</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (setcount[EXCEPT_FDS] != 0) {</div><div class="line">        status=-90; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Read the socket to clear readable sockets.</span></div><div class="line">    received = <span class="keyword">sizeof</span>(buf);</div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#gaef84c78edb396f0e1522117c48bce530">pj_sock_recv</a>(udp2, buf, &amp;received, 0);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || received != 5) {</div><div class="line">        status=-100; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    </div><div class="line">    status = 0;</div><div class="line"></div><div class="line">    <span class="comment">// Test timeout on the read part.</span></div><div class="line">    <span class="comment">// This won&#39;t necessarily return zero, as select() may report that</span></div><div class="line">    <span class="comment">// sockets are writable.</span></div><div class="line">    setcount[0] = setcount[1] = setcount[2] = 0;</div><div class="line">    status = do_select(udp1, udp2, setcount);</div><div class="line">    <span class="keywordflow">if</span> (status != 0 &amp;&amp; status != setcount[WRITE_FDS]) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: expecting timeout but got %d sks set&quot;</span>,</div><div class="line">                             status));</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;          rdset: %d, wrset: %d, exset: %d&quot;</span>,</div><div class="line">                             setcount[0], setcount[1], setcount[2]));</div><div class="line">        status = -110; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (setcount[READ_FDS] != 0) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: readable socket not expected&quot;</span>));</div><div class="line">        status = -120; <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    status = 0;</div><div class="line"></div><div class="line">on_return:</div><div class="line">    <span class="keywordflow">if</span> (udp1 != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)</div><div class="line">        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(udp1);</div><div class="line">    <span class="keywordflow">if</span> (udp2 != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)</div><div class="line">        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(udp2);</div><div class="line">    <span class="keywordflow">return</span> status;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div><div class="line"><span class="comment"> * when this test is disabled. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> dummy_select_test;</div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_SELECT_TEST */</span><span class="preprocessor"></span></div><div class="line"></div><div class="line"></div></div><!-- fragment --> </div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
