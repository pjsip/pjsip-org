<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: String Operations (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>String Operations<br/>
<small>
[<a class="el" href="group__PJ__DS.htm">Data Structure.</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga9eafbfcc5e991749803c1e1b2f5e27b7">strnicmp_alnum</a>&nbsp;&nbsp;&nbsp;pj_ansi_strnicmp</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab812f5bf3536395fc0fbb2e4f0b5c025">pj_stricmp_alnum</a>&nbsp;&nbsp;&nbsp;pj_stricmp</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a> (char *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const char *s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab53dbf67855cd727bb21c7593b9a28f9">pj_strset</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, char *ptr, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> length)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga61b04091b1095c6392718d7687869040">pj_strset2</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, char *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga497b909ada3acf301ce15ad2eb21bca3">pj_strset3</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, char *begin, char *end)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga55b16763bc8aa36e23e30d50ec18cc71">pj_strassign</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga86c2920ae4d2a3444f5b53cb995e18d7">pj_strcpy</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gad39451b8882670ec290e9e45bb7fbadc">pj_strcpy2</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaf2e25bcf3c87cac81a7ac7472e2c8386">pj_strncpy</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> max)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gae451ead4bc3433fd650c9a9aca09eaf0">pj_strncpy_with_null</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> max)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaaf333c83193b9bc446259960f093a3ad">pj_strdup</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga2ef03b838e3aa3090a0a14dca67ff9ec">pj_strdup_with_null</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga96cdcaa39650b7f36fd850f53f4ebebf">pj_strdup2</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gacc1cccb0ce99c9873b847e13de65f9ad">pj_strdup2_with_null</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gac3f0542aaac9be1884b5da2031d62ab7">pj_strdup3</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const char *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab8b91334e749e1c4aa6bebec6ec7fc81">pj_strlen</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga8bf55b5856b2266e04e19d3daee6959d">pj_strbuf</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga3321b5cee71785a7b450ad29afe0895b">pj_strcmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab83273533b1b136a66fb453b905bedf4">pj_strncmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga5a4821adde187cd914620f89c7bc0779">pj_strncmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gac6f28fa3462c129b73ca4572f0049be6">pj_stricmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga508848e33f034d920be8333ccdf7e077">pj_stricmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga2e4ec6d2005b66d5c97abde02404c443">pj_strnicmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga7d098decc316cec1798a1b9de0a0a4d4">pj_strnicmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga7851384cbdcf51404c7ef6f43c3a9c47">pj_strcat</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga101dde22d40c234fad3da7d0abde436a">pj_strcat2</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gad6e4de8b9359b0b17328fb0a9b8ba6bb">pj_strchr</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, int chr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gac365d8c915f80e5d174db1b84dbbf3cc">pj_strstr</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *substr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga604d5a9a3c62202fa9ab31d2c71d1dfb">pj_stristr</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *substr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga647015dea7037823ac2133fe0130591b">pj_strltrim</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaee5fdfe416daa2ee02b2a887f059c5f2">pj_strrtrim</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga748d08fdf09faa06cfeea485c01cbacf">pj_strtrim</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a> (char *str, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> length)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga0b12a5cc98e05ff6993aa02436246999">pj_strtoul</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *endptr, unsigned base)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga60c21f277b9d2aab493712856972946b">pj_utoa</a> (unsigned long val, char *buf)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga3bd8a27e248674b4f506de841c623276">pj_utoa_pad</a> (unsigned long val, char *buf, int min_dig, int pad)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a> (void *dst, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga4c63a114dcee8ff7f04b3f142d2158f0">pj_memset</a> (void *dst, int c, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga38d0ee03a9c582c627d44bfcb35fb6a8">pj_memcpy</a> (void *dst, const void *src, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gafd9c91c61bc9dbcbc5420d298fa968e3">pj_memmove</a> (void *dst, const void *src, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a> (const void *buf1, const void *buf2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga70fb2b0a4370d175f40e66093df0aa52">pj_memchr</a> (const void *buf, int c, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>This module provides string manipulation API.</p>
<h2><a class="anchor" id="pj_pstr_not_null_sec"></a>
PJLIB String is NOT Null Terminated!</h2>
<p>That is the first information that developers need to know. Instead of using normal C string, strings in PJLIB are represented as <a class="el" href="structpj__str__t.htm">pj_str_t</a> structure below:</p>
<pre>
   typedef struct <a class="el" href="structpj__str__t.htm">pj_str_t</a>
   {
       char      *ptr;
       pj_size_t  slen;
   } <a class="el" href="structpj__str__t.htm">pj_str_t</a>;
 </pre><p>There are some advantages of using this approach:</p>
<ul>
<li>the string can point to arbitrary location in memory even if the string in that location is not null terminated. This is most usefull for text parsing, where the parsed text can just point to the original text in the input. If we use C string, then we will have to copy the text portion from the input to a string variable.</li>
<li>because the length of the string is known, string copy operation can be made more efficient.</li>
</ul>
<p>Most of APIs in PJLIB that expect or return string will represent the string as <a class="el" href="structpj__str__t.htm">pj_str_t</a> instead of normal C string.</p>
<h2><a class="anchor" id="pj_pstr_examples_sec"></a>
Examples</h2>
<p>For some examples, please see:</p>
<ul>
<li><a class="el" href="page_pjlib_string_test.htm">Test: String</a> </li>
</ul>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="gab812f5bf3536395fc0fbb2e4f0b5c025"></a><!-- doxytag: member="string.h::pj_stricmp_alnum" ref="gab812f5bf3536395fc0fbb2e4f0b5c025" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define pj_stricmp_alnum&nbsp;&nbsp;&nbsp;pj_stricmp</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform lowercase comparison to the strings which consists of only alnum characters. More over, it will only return non-zero if both strings are not equal, not the usual negative or positive value.</p>
<p>If non-alnum inputs are given, then the function may mistakenly treat two strings as equal.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>0 if str1 is equal to str2</li>
<li>(-1) if not equal. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga9eafbfcc5e991749803c1e1b2f5e27b7"></a><!-- doxytag: member="string.h::strnicmp_alnum" ref="ga9eafbfcc5e991749803c1e1b2f5e27b7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define strnicmp_alnum&nbsp;&nbsp;&nbsp;pj_ansi_strnicmp</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform lowercase comparison to the strings which consists of only alnum characters. More over, it will only return non-zero if both strings are not equal, not the usual negative or positive value.</p>
<p>If non-alnum inputs are given, then the function may mistakenly treat two strings as equal.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>The length to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>0 if str1 is equal to str2</li>
<li>(-1) if not equal. </li>
</ul>
</dd></dl>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gafa92001573289c87313c660146369fa3"></a><!-- doxytag: member="string.h::pj_bzero" ref="gafa92001573289c87313c660146369fa3" args="(void *dst, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_bzero </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Fill the memory location with zero.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The destination buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The number of bytes. </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="group__pj__math.htm#gaa8a95eefaca81c25e82d2f806c9839d0">pj_math_stat_init()</a>.</p>

</div>
</div>
<a class="anchor" id="gae0f30eb53208168b12b6c8e50649ce89"></a><!-- doxytag: member="string.h::pj_create_random_string" ref="gae0f30eb53208168b12b6c8e50649ce89" args="(char *str, pj_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* pj_create_random_string </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>length</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Initialize the buffer with some random string. Note that the generated string is not NULL terminated.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>the string to store the result. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>length</em>&nbsp;</td><td>the length of the random string to generate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5a57d48a802ff650d8e5186cf65b7c4a"></a><!-- doxytag: member="string.h::pj_cstr" ref="ga5a57d48a802ff650d8e5186cf65b7c4a" args="(pj_str_t *str, const char *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_cstr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>s</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create constant string from normal C string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string to be initialized. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>Null terminated string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="structpj__str__t.htm">pj_str_t</a>. </dd></dl>

<p>References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>.</p>

</div>
</div>
<a class="anchor" id="ga70fb2b0a4370d175f40e66093df0aa52"></a><!-- doxytag: member="string.h::pj_memchr" ref="ga70fb2b0a4370d175f40e66093df0aa52" args="(const void *buf, int c, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* pj_memchr </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find character in the buffer.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>The buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>The character to find. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The size to check.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the pointer to location where the character is found, or NULL if not found. </dd></dl>

</div>
</div>
<a class="anchor" id="ga81417b253e8d0f658d2fe73e9eeb6bb5"></a><!-- doxytag: member="string.h::pj_memcmp" ref="ga81417b253e8d0f658d2fe73e9eeb6bb5" args="(const void *buf1, const void *buf2, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_memcmp </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>buf1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>buf2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare buffers.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf1</em>&nbsp;</td><td>The first buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buf2</em>&nbsp;</td><td>The second buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The size to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>negative, zero, or positive value. </dd></dl>

</div>
</div>
<a class="anchor" id="ga38d0ee03a9c582c627d44bfcb35fb6a8"></a><!-- doxytag: member="string.h::pj_memcpy" ref="ga38d0ee03a9c582c627d44bfcb35fb6a8" args="(void *dst, const void *src, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* pj_memcpy </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Copy buffer.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The destination buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The size to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the destination buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="gafd9c91c61bc9dbcbc5420d298fa968e3"></a><!-- doxytag: member="string.h::pj_memmove" ref="gafd9c91c61bc9dbcbc5420d298fa968e3" args="(void *dst, const void *src, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* pj_memmove </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Move memory.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The destination buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The size to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the destination buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4c63a114dcee8ff7f04b3f142d2158f0"></a><!-- doxytag: member="string.h::pj_memset" ref="ga4c63a114dcee8ff7f04b3f142d2158f0" args="(void *dst, int c, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* pj_memset </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Fill the memory location with value.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The destination buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>Character to set. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The number of characters.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the value of dst. </dd></dl>

</div>
</div>
<a class="anchor" id="ga20fa0c4d9ccddd0822a775730cf4a867"></a><!-- doxytag: member="string.h::pj_str" ref="ga20fa0c4d9ccddd0822a775730cf4a867" args="(char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> pj_str </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>str</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create string initializer from a normal C string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>Null terminated string to be stored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="structpj__str__t.htm">pj_str_t</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ga55b16763bc8aa36e23e30d50ec18cc71"></a><!-- doxytag: member="string.h::pj_strassign" ref="ga55b16763bc8aa36e23e30d50ec18cc71" args="(pj_str_t *dst, pj_str_t *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strassign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Assign string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The target string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the target string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8bf55b5856b2266e04e19d3daee6959d"></a><!-- doxytag: member="string.h::pj_strbuf" ref="ga8bf55b5856b2266e04e19d3daee6959d" args="(const pj_str_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* pj_strbuf </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return the pointer to the string data.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the pointer to the string buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7851384cbdcf51404c7ef6f43c3a9c47"></a><!-- doxytag: member="string.h::pj_strcat" ref="ga7851384cbdcf51404c7ef6f43c3a9c47" args="(pj_str_t *dst, const pj_str_t *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_strcat </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Concatenate strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The destination string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source string. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga101dde22d40c234fad3da7d0abde436a"></a><!-- doxytag: member="string.h::pj_strcat2" ref="ga101dde22d40c234fad3da7d0abde436a" args="(pj_str_t *dst, const char *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_strcat2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Concatenate strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The destination string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source string. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad6e4de8b9359b0b17328fb0a9b8ba6bb"></a><!-- doxytag: member="string.h::pj_strchr" ref="gad6e4de8b9359b0b17328fb0a9b8ba6bb" args="(const pj_str_t *str, int chr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* pj_strchr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>chr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Finds a character in a string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>chr</em>&nbsp;</td><td>The character to find.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the pointer to first character found, or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="ga521ddd312725bf6fa77e91d0dd4aec34"></a><!-- doxytag: member="string.h::pj_strcmp" ref="ga521ddd312725bf6fa77e91d0dd4aec34" args="(const pj_str_t *str1, const pj_str_t *str2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strcmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="ga3321b5cee71785a7b450ad29afe0895b"></a><!-- doxytag: member="string.h::pj_strcmp2" ref="ga3321b5cee71785a7b450ad29afe0895b" args="(const pj_str_t *str1, const char *str2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strcmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>str2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="ga86c2920ae4d2a3444f5b53cb995e18d7"></a><!-- doxytag: member="string.h::pj_strcpy" ref="ga86c2920ae4d2a3444f5b53cb995e18d7" args="(pj_str_t *dst, const pj_str_t *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strcpy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Copy string contents.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The target string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the target string. </dd></dl>

</div>
</div>
<a class="anchor" id="gad39451b8882670ec290e9e45bb7fbadc"></a><!-- doxytag: member="string.h::pj_strcpy2" ref="gad39451b8882670ec290e9e45bb7fbadc" args="(pj_str_t *dst, const char *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strcpy2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Copy string contents.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The target string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the target string. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaf333c83193b9bc446259960f093a3ad"></a><!-- doxytag: member="string.h::pj_strdup" ref="gaaf333c83193b9bc446259960f093a3ad" args="(pj_pool_t *pool, pj_str_t *dst, const pj_str_t *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strdup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Duplicate string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The string result. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string result. </dd></dl>

</div>
</div>
<a class="anchor" id="ga96cdcaa39650b7f36fd850f53f4ebebf"></a><!-- doxytag: member="string.h::pj_strdup2" ref="ga96cdcaa39650b7f36fd850f53f4ebebf" args="(pj_pool_t *pool, pj_str_t *dst, const char *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strdup2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Duplicate string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The string result. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string result. </dd></dl>

</div>
</div>
<a class="anchor" id="gacc1cccb0ce99c9873b847e13de65f9ad"></a><!-- doxytag: member="string.h::pj_strdup2_with_null" ref="gacc1cccb0ce99c9873b847e13de65f9ad" args="(pj_pool_t *pool, pj_str_t *dst, const char *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strdup2_with_null </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Duplicate string and NULL terminate the destination string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The string result. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The string result. </dd></dl>

</div>
</div>
<a class="anchor" id="gac3f0542aaac9be1884b5da2031d62ab7"></a><!-- doxytag: member="string.h::pj_strdup3" ref="gac3f0542aaac9be1884b5da2031d62ab7" args="(pj_pool_t *pool, const char *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> pj_strdup3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Duplicate string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string result. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2ef03b838e3aa3090a0a14dca67ff9ec"></a><!-- doxytag: member="string.h::pj_strdup_with_null" ref="ga2ef03b838e3aa3090a0a14dca67ff9ec" args="(pj_pool_t *pool, pj_str_t *dst, const pj_str_t *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strdup_with_null </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Duplicate string and NULL terminate the destination string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The string result. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The string result. </dd></dl>

</div>
</div>
<a class="anchor" id="gac6f28fa3462c129b73ca4572f0049be6"></a><!-- doxytag: member="string.h::pj_stricmp" ref="gac6f28fa3462c129b73ca4572f0049be6" args="(const pj_str_t *str1, const pj_str_t *str2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_stricmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform case-insensitive comparison to the strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is equal to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="ga508848e33f034d920be8333ccdf7e077"></a><!-- doxytag: member="string.h::pj_stricmp2" ref="ga508848e33f034d920be8333ccdf7e077" args="(const pj_str_t *str1, const char *str2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_stricmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>str2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform case-insensitive comparison to the strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="ga604d5a9a3c62202fa9ab31d2c71d1dfb"></a><!-- doxytag: member="string.h::pj_stristr" ref="ga604d5a9a3c62202fa9ab31d2c71d1dfb" args="(const pj_str_t *str, const pj_str_t *substr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* pj_stristr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>substr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Performs substring lookup like <a class="el" href="group__PJ__PSTR.htm#gac365d8c915f80e5d174db1b84dbbf3cc">pj_strstr()</a> but ignores the case of both strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string to search. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>substr</em>&nbsp;</td><td>The string to search fo.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the pointer to the position of substr in str, or NULL. Note that if str is not NULL terminated, the returned pointer is pointing to non-NULL terminated string. </dd></dl>

</div>
</div>
<a class="anchor" id="gab8b91334e749e1c4aa6bebec6ec7fc81"></a><!-- doxytag: member="string.h::pj_strlen" ref="gab8b91334e749e1c4aa6bebec6ec7fc81" args="(const pj_str_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> pj_strlen </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return the length of the string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the length of the string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga647015dea7037823ac2133fe0130591b"></a><!-- doxytag: member="string.h::pj_strltrim" ref="ga647015dea7037823ac2133fe0130591b" args="(pj_str_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strltrim </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Remove (trim) leading whitespaces from the string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string. </dd></dl>

</div>
</div>
<a class="anchor" id="gab83273533b1b136a66fb453b905bedf4"></a><!-- doxytag: member="string.h::pj_strncmp" ref="gab83273533b1b136a66fb453b905bedf4" args="(const pj_str_t *str1, const pj_str_t *str2, pj_size_t len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strncmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="ga5a4821adde187cd914620f89c7bc0779"></a><!-- doxytag: member="string.h::pj_strncmp2" ref="ga5a4821adde187cd914620f89c7bc0779" args="(const pj_str_t *str1, const char *str2, pj_size_t len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strncmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="gaf2e25bcf3c87cac81a7ac7472e2c8386"></a><!-- doxytag: member="string.h::pj_strncpy" ref="gaf2e25bcf3c87cac81a7ac7472e2c8386" args="(pj_str_t *dst, const pj_str_t *src, pj_ssize_t max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strncpy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&nbsp;</td>
          <td class="paramname"> <em>max</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Copy source string to destination up to the specified max length.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The target string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>max</em>&nbsp;</td><td>Maximum characters to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the target string. </dd></dl>

</div>
</div>
<a class="anchor" id="gae451ead4bc3433fd650c9a9aca09eaf0"></a><!-- doxytag: member="string.h::pj_strncpy_with_null" ref="gae451ead4bc3433fd650c9a9aca09eaf0" args="(pj_str_t *dst, const pj_str_t *src, pj_ssize_t max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strncpy_with_null </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&nbsp;</td>
          <td class="paramname"> <em>max</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Copy source string to destination up to the specified max length, and NULL terminate the destination. If source string length is greater than or equal to max, then max-1 will be copied.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The target string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>max</em>&nbsp;</td><td>Maximum characters to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the target string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2e4ec6d2005b66d5c97abde02404c443"></a><!-- doxytag: member="string.h::pj_strnicmp" ref="ga2e4ec6d2005b66d5c97abde02404c443" args="(const pj_str_t *str1, const pj_str_t *str2, pj_size_t len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strnicmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform case-insensitive comparison to the strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="ga7d098decc316cec1798a1b9de0a0a4d4"></a><!-- doxytag: member="string.h::pj_strnicmp2" ref="ga7d098decc316cec1798a1b9de0a0a4d4" args="(const pj_str_t *str1, const char *str2, pj_size_t len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strnicmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform case-insensitive comparison to the strings.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str1</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>str2</em>&nbsp;</td><td>The string to compare. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
</ul>
</dd></dl>
<ul>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>

</div>
</div>
<a class="anchor" id="gaee5fdfe416daa2ee02b2a887f059c5f2"></a><!-- doxytag: member="string.h::pj_strrtrim" ref="gaee5fdfe416daa2ee02b2a887f059c5f2" args="(pj_str_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strrtrim </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Remove (trim) the trailing whitespaces from the string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string. </dd></dl>

</div>
</div>
<a class="anchor" id="gab53dbf67855cd727bb21c7593b9a28f9"></a><!-- doxytag: member="string.h::pj_strset" ref="gab53dbf67855cd727bb21c7593b9a28f9" args="(pj_str_t *str, char *ptr, pj_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>length</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the pointer and length to the specified value.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>the string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>pointer to set. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>length</em>&nbsp;</td><td>length to set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string. </dd></dl>

<p>References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>.</p>

</div>
</div>
<a class="anchor" id="ga61b04091b1095c6392718d7687869040"></a><!-- doxytag: member="string.h::pj_strset2" ref="ga61b04091b1095c6392718d7687869040" args="(pj_str_t *str, char *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strset2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>src</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the pointer and length of the string to the source string, which must be NULL terminated.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>the string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>pointer to set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string. </dd></dl>

<p>References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>.</p>

</div>
</div>
<a class="anchor" id="ga497b909ada3acf301ce15ad2eb21bca3"></a><!-- doxytag: member="string.h::pj_strset3" ref="ga497b909ada3acf301ce15ad2eb21bca3" args="(pj_str_t *str, char *begin, char *end)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strset3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>end</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the pointer and the length of the string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The target string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>begin</em>&nbsp;</td><td>The start of the string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>end</em>&nbsp;</td><td>The end of the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the target string. </dd></dl>

<p>References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>.</p>

</div>
</div>
<a class="anchor" id="gac365d8c915f80e5d174db1b84dbbf3cc"></a><!-- doxytag: member="string.h::pj_strstr" ref="gac365d8c915f80e5d174db1b84dbbf3cc" args="(const pj_str_t *str, const pj_str_t *substr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* pj_strstr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>substr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find the occurence of a substring substr in string str.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string to search. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>substr</em>&nbsp;</td><td>The string to search fo.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the pointer to the position of substr in str, or NULL. Note that if str is not NULL terminated, the returned pointer is pointing to non-NULL terminated string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0b12a5cc98e05ff6993aa02436246999"></a><!-- doxytag: member="string.h::pj_strtoul" ref="ga0b12a5cc98e05ff6993aa02436246999" args="(const pj_str_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long pj_strtoul </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Convert string to unsigned integer. The conversion will stop as soon as non-digit character is found or all the characters have been processed.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the unsigned integer. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9c8b52cb93c5e002921fd393441b7c66"></a><!-- doxytag: member="string.h::pj_strtoul2" ref="ga9c8b52cb93c5e002921fd393441b7c66" args="(const pj_str_t *str, pj_str_t *endptr, unsigned base)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long pj_strtoul2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>endptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>base</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Convert strings to an unsigned long-integer value. This function stops reading the string input either when the number of characters has exceeded the length of the input or it has read the first character it cannot recognize as part of a number, that is a character greater than or equal to base.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The input string. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>endptr</em>&nbsp;</td><td>Optional pointer to receive the remainder/unparsed portion of the input. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>base</em>&nbsp;</td><td>Number base to use.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the unsigned integer number. </dd></dl>

</div>
</div>
<a class="anchor" id="ga748d08fdf09faa06cfeea485c01cbacf"></a><!-- doxytag: member="string.h::pj_strtrim" ref="ga748d08fdf09faa06cfeea485c01cbacf" args="(pj_str_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a>* pj_strtrim </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>str</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Remove (trim) leading and trailing whitespaces from the string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga60c21f277b9d2aab493712856972946b"></a><!-- doxytag: member="string.h::pj_utoa" ref="ga60c21f277b9d2aab493712856972946b" args="(unsigned long val, char *buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_utoa </td>
          <td>(</td>
          <td class="paramtype">unsigned long&nbsp;</td>
          <td class="paramname"> <em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>buf</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Utility to convert unsigned integer to string. Note that the string will be NULL terminated.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>the unsigned integer value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>the buffer</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of characters written </dd></dl>

</div>
</div>
<a class="anchor" id="ga3bd8a27e248674b4f506de841c623276"></a><!-- doxytag: member="string.h::pj_utoa_pad" ref="ga3bd8a27e248674b4f506de841c623276" args="(unsigned long val, char *buf, int min_dig, int pad)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_utoa_pad </td>
          <td>(</td>
          <td class="paramtype">unsigned long&nbsp;</td>
          <td class="paramname"> <em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>min_dig</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>pad</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Convert unsigned integer to string with minimum digits. Note that the string will be NULL terminated.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>The unsigned integer value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>The buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>min_dig</em>&nbsp;</td><td>Minimum digits to be printed, or zero to specify no minimum digit. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pad</em>&nbsp;</td><td>The padding character to be put in front of the string when the digits is less than minimum.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of characters written. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
