<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: Thread Test (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div><div class="header">
  <div class="headertitle"><div class="title">Test: Thread Test </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p >This file contains <em>thread_test()</em> definition.</p>
<h1><a class="anchor" id="thread_test_scope_sec"></a>
Scope of Test</h1>
<p >This tests:</p><ul>
<li>whether PJ_THREAD_SUSPENDED flag works.</li>
<li>whether multithreading works.</li>
<li>whether thread timeslicing works, and threads have equal time-slice proportion.</li>
</ul>
<p >APIs tested:</p><ul>
<li><a class="el" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga685932a4ed71905400aad42f653cf40b">pj_thread_this()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga76dceb0f22ce42050cff2cb83924c84c">pj_thread_get_name()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy()</a></li>
</ul>
<p >This file is <b>pjlib-test/thread.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div>
<div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div>
<div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div>
<div class="line"><span class="comment"> * (at your option) any later version.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div>
<div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><span class="comment"> * GNU General Public License for more details.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div>
<div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div>
<div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if INCLUDE_THREAD_TEST</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define THIS_FILE   &quot;thread_test&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keywordtype">int</span> quit_flag=0;</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if 0</span></div>
<div class="line"><span class="preprocessor">#   define TRACE__(args)        PJ_LOG(3,args)</span></div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor">#   define TRACE__(args)</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * The thread&#39;s entry point.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Each of the thread mainly will just execute the loop which</span></div>
<div class="line"><span class="comment"> * increments a variable.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span>* thread_proc(<a class="code hl_typedef" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> *pcounter)</div>
<div class="line">{</div>
<div class="line">    <span class="comment">/* Test that pj_thread_register() works. */</span></div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a> desc;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *this_thread;</div>
<div class="line">    <span class="keywordtype">unsigned</span> id;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">id</span> = *pcounter;</div>
<div class="line">    <a class="code hl_define" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(<span class="keywordtype">id</span>); <span class="comment">/* Warning about unused var if TRACE__ is disabled */</span></div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;     thread %d running..&quot;</span>, <span class="keywordtype">id</span>));</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(desc, <span class="keyword">sizeof</span>(desc));</div>
<div class="line"> </div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register</a>(<span class="stringliteral">&quot;thread&quot;</span>, desc, &amp;this_thread);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error in pj_thread_register&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">return</span> NULL;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Test that pj_thread_this() works */</span></div>
<div class="line">    this_thread = <a class="code hl_function" href="group__PJ__THREAD.htm#ga685932a4ed71905400aad42f653cf40b">pj_thread_this</a>();</div>
<div class="line">    <span class="keywordflow">if</span> (this_thread == NULL) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: pj_thread_this() returns NULL!&quot;</span>));</div>
<div class="line">        <span class="keywordflow">return</span> NULL;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Test that pj_thread_get_name() works */</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_function" href="group__PJ__THREAD.htm#ga76dceb0f22ce42050cff2cb83924c84c">pj_thread_get_name</a>(this_thread) == NULL) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: pj_thread_get_name() returns NULL!&quot;</span>));</div>
<div class="line">        <span class="keywordflow">return</span> NULL;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Main loop */</span></div>
<div class="line">    <span class="keywordflow">for</span> (;!quit_flag;) {</div>
<div class="line">        (*pcounter)++;</div>
<div class="line">        <span class="comment">//Must sleep if platform doesn&#39;t do time-slicing.</span></div>
<div class="line">        <span class="comment">//pj_thread_sleep(0);</span></div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;     thread %d quitting..&quot;</span>, <span class="keywordtype">id</span>));</div>
<div class="line">    <span class="keywordflow">return</span> NULL;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * simple_thread()</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> simple_thread(<span class="keyword">const</span> <span class="keywordtype">char</span> *title, <span class="keywordtype">unsigned</span> flags)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> counter = 0;</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..%s&quot;</span>, title));</div>
<div class="line"> </div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, 4000, 4000, NULL);</div>
<div class="line">    <span class="keywordflow">if</span> (!pool)</div>
<div class="line">        <span class="keywordflow">return</span> -1000;</div>
<div class="line"> </div>
<div class="line">    quit_flag = 0;</div>
<div class="line"> </div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Creating thread 0..&quot;</span>));</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>(pool, <span class="stringliteral">&quot;thread&quot;</span>, (<a class="code hl_typedef" href="group__PJ__THREAD.htm#ga51407a7f0a22c4dd46c8bd92fe43d26a">pj_thread_proc</a>*)&amp;thread_proc,</div>
<div class="line">                          &amp;counter,</div>
<div class="line">                          <a class="code hl_define" href="group__pj__config.htm#gac2fba901c0f4a6af0a6cfc948a420602">PJ_THREAD_DEFAULT_STACK_SIZE</a>,</div>
<div class="line">                          flags,</div>
<div class="line">                          &amp;thread);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create thread&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">return</span> -1010;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread waiting..&quot;</span>));</div>
<div class="line">    <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1500);</div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread resuming..&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (flags &amp; PJ_THREAD_SUSPENDED) {</div>
<div class="line"> </div>
<div class="line">        <span class="comment">/* Check that counter is still zero */</span></div>
<div class="line">        <span class="keywordflow">if</span> (counter != 0) {</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: thread is not suspended&quot;</span>));</div>
<div class="line">            <span class="keywordflow">return</span> -1015;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a>(thread);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error: resume thread error&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">return</span> -1020;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..waiting for thread to quit..&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1500);</div>
<div class="line"> </div>
<div class="line">    quit_flag = 1;</div>
<div class="line">    <a class="code hl_function" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(thread);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (counter == 0) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: thread is not running&quot;</span>));</div>
<div class="line">        <span class="keywordflow">return</span> -1025;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...%s success&quot;</span>, title));</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * timeslice_test()</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> timeslice_test(<span class="keywordtype">void</span>)</div>
<div class="line">{</div>
<div class="line">    <span class="keyword">enum</span> { NUM_THREADS = 4 };</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> counter[NUM_THREADS], lowest, highest, diff;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread[NUM_THREADS];</div>
<div class="line">    <span class="keywordtype">unsigned</span> i;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line"> </div>
<div class="line">    quit_flag = 0;</div>
<div class="line"> </div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, 4000, 4000, NULL);</div>
<div class="line">    <span class="keywordflow">if</span> (!pool)</div>
<div class="line">        <span class="keywordflow">return</span> -10;</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..timeslice testing with %d threads&quot;</span>, NUM_THREADS));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Create all threads in suspended mode. */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {</div>
<div class="line">        counter[i] = i;</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>(pool, <span class="stringliteral">&quot;thread&quot;</span>, (<a class="code hl_typedef" href="group__PJ__THREAD.htm#ga51407a7f0a22c4dd46c8bd92fe43d26a">pj_thread_proc</a>*)&amp;thread_proc,</div>
<div class="line">                              &amp;counter[i],</div>
<div class="line">                              <a class="code hl_define" href="group__pj__config.htm#gac2fba901c0f4a6af0a6cfc948a420602">PJ_THREAD_DEFAULT_STACK_SIZE</a>,</div>
<div class="line">                              PJ_THREAD_SUSPENDED,</div>
<div class="line">                              &amp;thread[i]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc!=<a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_create()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">return</span> -20;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Sleep for 1 second.</span></div>
<div class="line"><span class="comment">     * The purpose of this is to test whether all threads are suspended.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread waiting..&quot;</span>));</div>
<div class="line">    <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1000);</div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread resuming..&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Check that all counters are still zero. */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {</div>
<div class="line">        <span class="keywordflow">if</span> (counter[i] &gt; i) {</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....ERROR! Thread %d-th is not suspended!&quot;</span>,</div>
<div class="line">                      i));</div>
<div class="line">            <span class="keywordflow">return</span> -30;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Now resume all threads. */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {</div>
<div class="line">        TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Resuming thread %d [%p]..&quot;</span>, i, thread[i]));</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a>(thread[i]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_resume()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">return</span> -40;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Main thread sleeps for some time to allow threads to run.</span></div>
<div class="line"><span class="comment">     * The longer we sleep, the more accurate the calculation will be,</span></div>
<div class="line"><span class="comment">     * but it&#39;ll make user waits for longer for the test to finish.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread waiting (5s)..&quot;</span>));</div>
<div class="line">    <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(5000);</div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread resuming..&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Signal all threads to quit. */</span></div>
<div class="line">    quit_flag = 1;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Wait until all threads quit, then destroy. */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {</div>
<div class="line">        TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread joining thread %d [%p]..&quot;</span>,</div>
<div class="line">                            i, thread[i]));</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(thread[i]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_join()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">return</span> -50;</div>
<div class="line">        }</div>
<div class="line">        TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Destroying thread %d [%p]..&quot;</span>, i, thread[i]));</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(thread[i]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_destroy()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">return</span> -60;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread calculating time slices..&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Now examine the value of the counters.</span></div>
<div class="line"><span class="comment">     * Check that all threads had equal proportion of processing.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    lowest = 0xFFFFFFFF;</div>
<div class="line">    highest = 0;</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {</div>
<div class="line">        <span class="keywordflow">if</span> (counter[i] &lt; lowest)</div>
<div class="line">            lowest = counter[i];</div>
<div class="line">        <span class="keywordflow">if</span> (counter[i] &gt; highest)</div>
<div class="line">            highest = counter[i];</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Check that all threads are running. */</span></div>
<div class="line">    <span class="keywordflow">if</span> (lowest &lt; 2) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: not all threads were running!&quot;</span>));</div>
<div class="line">        <span class="keywordflow">return</span> -70;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* The difference between lowest and higest should be lower than 50%.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    diff = (highest-lowest)*100 / ((highest+lowest)/2);</div>
<div class="line">    <span class="keywordflow">if</span> ( diff &gt;= 50) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,</div>
<div class="line">                  <span class="stringliteral">&quot;...ERROR: thread didn&#39;t have equal timeslice!&quot;</span>));</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,</div>
<div class="line">                  <span class="stringliteral">&quot;.....lowest counter=%u, highest counter=%u, diff=%u%%&quot;</span>,</div>
<div class="line">                  lowest, highest, diff));</div>
<div class="line">        <span class="keywordflow">return</span> -80;</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,</div>
<div class="line">                  <span class="stringliteral">&quot;...info: timeslice diff between lowest &amp; highest=%u%%&quot;</span>,</div>
<div class="line">                  diff));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> thread_test(<span class="keywordtype">void</span>)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> rc;</div>
<div class="line"> </div>
<div class="line">    rc = simple_thread(<span class="stringliteral">&quot;simple thread test&quot;</span>, 0);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div>
<div class="line">        <span class="keywordflow">return</span> rc;</div>
<div class="line"> </div>
<div class="line">    rc = simple_thread(<span class="stringliteral">&quot;suspended thread test&quot;</span>, PJ_THREAD_SUSPENDED);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div>
<div class="line">        <span class="keywordflow">return</span> rc;</div>
<div class="line"> </div>
<div class="line">    rc = timeslice_test();</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div>
<div class="line">        <span class="keywordflow">return</span> rc;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> rc;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div>
<div class="line"><span class="comment"> * when this test is disabled.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keywordtype">int</span> dummy_thread_test;</div>
<div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_THREAD_TEST */</span><span class="preprocessor"></span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gab43ba3167bd2a2ab4580509dbf79200e"><div class="ttname"><a href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a></div><div class="ttdeci">int pj_status_t</div><div class="ttdef"><b>Definition:</b> types.h:68</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gacb9d46aed6813bf142efc1c3db7a2d17"><div class="ttname"><a href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a></div><div class="ttdeci">struct pj_thread_t pj_thread_t</div><div class="ttdef"><b>Definition:</b> types.h:236</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gafbfd2fd08c6041ea3cb217310c0b5b48"><div class="ttname"><a href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a></div><div class="ttdeci">unsigned int pj_uint32_t</div><div class="ttdef"><b>Definition:</b> types.h:43</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935"><div class="ttname"><a href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a></div><div class="ttdeci">@ PJ_SUCCESS</div><div class="ttdef"><b>Definition:</b> types.h:93</div></div>
<div class="ttc" id="agroup__PJ__LOG_htm_ga767b9231bf7c2b57274771cdc4bca818"><div class="ttname"><a href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a></div><div class="ttdeci">#define PJ_LOG(level, arg)</div><div class="ttdef"><b>Definition:</b> log.h:106</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_ga4634b31af5eb0a0178481536986f1d15"><div class="ttname"><a href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a></div><div class="ttdeci">pj_pool_t * pj_pool_create(pj_pool_factory *factory, const char *name, pj_size_t initial_size, pj_size_t increment_size, pj_pool_callback *callback)</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_gade0f14f6635ecfccb576ec41c57fede5"><div class="ttname"><a href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a></div><div class="ttdeci">void pj_pool_release(pj_pool_t *pool)</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_gafa92001573289c87313c660146369fa3"><div class="ttname"><a href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a></div><div class="ttdeci">void pj_bzero(void *dst, pj_size_t size)</div><div class="ttdef"><b>Definition:</b> string.h:762</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga145dba91437211fe7b768573c14268bb"><div class="ttname"><a href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a></div><div class="ttdeci">long pj_thread_desc[(64)]</div><div class="ttdef"><b>Definition:</b> os.h:170</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga223e764be70bd61ab21a77c76be32783"><div class="ttname"><a href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a></div><div class="ttdeci">pj_status_t pj_thread_resume(pj_thread_t *thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga51407a7f0a22c4dd46c8bd92fe43d26a"><div class="ttname"><a href="group__PJ__THREAD.htm#ga51407a7f0a22c4dd46c8bd92fe43d26a">pj_thread_proc</a></div><div class="ttdeci">int() pj_thread_proc(void *)</div><div class="ttdef"><b>Definition:</b> os.h:157</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga5435f79ad044f9ce2113af311bf2b777"><div class="ttname"><a href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a></div><div class="ttdeci">pj_status_t pj_thread_destroy(pj_thread_t *thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga600d2f8baddfd78de3b6b60cce027a9a"><div class="ttname"><a href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register</a></div><div class="ttdeci">pj_status_t pj_thread_register(const char *thread_name, pj_thread_desc desc, pj_thread_t **thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga60d90ce08d2f7e92dcaa0443cf87912f"><div class="ttname"><a href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a></div><div class="ttdeci">pj_status_t pj_thread_join(pj_thread_t *thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga685932a4ed71905400aad42f653cf40b"><div class="ttname"><a href="group__PJ__THREAD.htm#ga685932a4ed71905400aad42f653cf40b">pj_thread_this</a></div><div class="ttdeci">pj_thread_t * pj_thread_this(void)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga76dceb0f22ce42050cff2cb83924c84c"><div class="ttname"><a href="group__PJ__THREAD.htm#ga76dceb0f22ce42050cff2cb83924c84c">pj_thread_get_name</a></div><div class="ttdeci">const char * pj_thread_get_name(pj_thread_t *thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga7b63533cf4f3ba0cba68cab49a22d722"><div class="ttname"><a href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a></div><div class="ttdeci">pj_status_t pj_thread_create(pj_pool_t *pool, const char *thread_name, pj_thread_proc *proc, void *arg, pj_size_t stack_size, unsigned flags, pj_thread_t **thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_gad59cd6fd7390711758afcc0bde375d68"><div class="ttname"><a href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a></div><div class="ttdeci">pj_status_t pj_thread_sleep(unsigned msec)</div></div>
<div class="ttc" id="agroup__pj__config_htm_ga7523f8576efd271c22b188eab05d7870"><div class="ttname"><a href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a></div><div class="ttdeci">#define PJ_UNUSED_ARG(arg)</div><div class="ttdef"><b>Definition:</b> config.h:1343</div></div>
<div class="ttc" id="agroup__pj__config_htm_gac2fba901c0f4a6af0a6cfc948a420602"><div class="ttname"><a href="group__pj__config.htm#gac2fba901c0f4a6af0a6cfc948a420602">PJ_THREAD_DEFAULT_STACK_SIZE</a></div><div class="ttdeci">#define PJ_THREAD_DEFAULT_STACK_SIZE</div><div class="ttdef"><b>Definition:</b> config.h:607</div></div>
<div class="ttc" id="astructpj__pool__t_htm"><div class="ttname"><a href="structpj__pool__t.htm">pj_pool_t</a></div><div class="ttdef"><b>Definition:</b> pool.h:310</div></div>
</div><!-- fragment --> </div></div><!-- contents -->
</div><!-- PageDoc -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
