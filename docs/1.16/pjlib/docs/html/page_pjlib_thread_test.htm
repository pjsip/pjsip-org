<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Thread Test (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Thread Test </h1>  </div>
</div>
<div class="contents">
<p>This file contains <em>thread_test()</em> definition.</p>
<h2><a class="anchor" id="thread_test_scope_sec"></a>
Scope of Test</h2>
<p>This tests:</p>
<ul>
<li>whether PJ_THREAD_SUSPENDED flag works.</li>
<li>whether multithreading works.</li>
<li>whether thread timeslicing works, and threads have equal time-slice proportion.</li>
</ul>
<p>APIs tested:</p>
<ul>
<li><a class="el" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga2fcffcdf69a7b51ef19550a7dfb726e3">pj_thread_this()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#gaf2dc77f1afbcc5e513ec782cc6a79ea1">pj_thread_get_name()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join()</a></li>
<li><a class="el" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy()</a></li>
</ul>
<p>This file is <b>pjlib-test/thread.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: thread.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>

<span class="preprocessor">#if INCLUDE_THREAD_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>

<span class="preprocessor">#define THIS_FILE   &quot;thread_test&quot;</span>
<span class="preprocessor"></span>
<span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keywordtype">int</span> quit_flag=0;

<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span><span class="preprocessor">#   define TRACE__(args)        PJ_LOG(3,args)</span>
<span class="preprocessor"></span><span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="preprocessor">#   define TRACE__(args)</span>
<span class="preprocessor"></span><span class="preprocessor">#endif</span>
<span class="preprocessor"></span>

<span class="comment">/*</span>
<span class="comment"> * The thread&#39;s entry point.</span>
<span class="comment"> *</span>
<span class="comment"> * Each of the thread mainly will just execute the loop which</span>
<span class="comment"> * increments a variable.</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">void</span>* thread_proc(<a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> *pcounter)
{
    <span class="comment">/* Test that pj_thread_register() works. */</span>
    <a class="code" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a> desc;
    <a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *this_thread;
    <span class="keywordtype">unsigned</span> id;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    <span class="keywordtype">id</span> = *pcounter;
    TRACE__((THIS_FILE, <span class="stringliteral">&quot;     thread %d running..&quot;</span>, <span class="keywordtype">id</span>));

    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(desc, <span class="keyword">sizeof</span>(desc));

    rc = <a class="code" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register</a>(<span class="stringliteral">&quot;thread&quot;</span>, desc, &amp;this_thread);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error in pj_thread_register&quot;</span>, rc);
        <span class="keywordflow">return</span> NULL;
    }

    <span class="comment">/* Test that pj_thread_this() works */</span>
    this_thread = <a class="code" href="group__PJ__THREAD.htm#ga2fcffcdf69a7b51ef19550a7dfb726e3">pj_thread_this</a>();
    <span class="keywordflow">if</span> (this_thread == NULL) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: pj_thread_this() returns NULL!&quot;</span>));
        <span class="keywordflow">return</span> NULL;
    }

    <span class="comment">/* Test that pj_thread_get_name() works */</span>
    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__THREAD.htm#gaf2dc77f1afbcc5e513ec782cc6a79ea1">pj_thread_get_name</a>(this_thread) == NULL) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: pj_thread_get_name() returns NULL!&quot;</span>));
        <span class="keywordflow">return</span> NULL;
    }

    <span class="comment">/* Main loop */</span>
    <span class="keywordflow">for</span> (;!quit_flag;) {
        (*pcounter)++;
        <span class="comment">//Must sleep if platform doesn&#39;t do time-slicing.</span>
        <span class="comment">//pj_thread_sleep(0);</span>
    }

    TRACE__((THIS_FILE, <span class="stringliteral">&quot;     thread %d quitting..&quot;</span>, <span class="keywordtype">id</span>));
    <span class="keywordflow">return</span> NULL;
}

<span class="comment">/*</span>
<span class="comment"> * simple_thread()</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> simple_thread(<span class="keyword">const</span> <span class="keywordtype">char</span> *title, <span class="keywordtype">unsigned</span> flags)
{
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;
    <a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> counter = 0;
 
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..%s&quot;</span>, title));
    
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, 4000, 4000, NULL);
    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -1000;

    quit_flag = 0;

    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Creating thread 0..&quot;</span>));
    rc = <a class="code" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>(pool, <span class="stringliteral">&quot;thread&quot;</span>, (pj_thread_proc*)&amp;thread_proc,
                          &amp;counter,
                          <a class="code" href="group__pj__config.htm#gac2fba901c0f4a6af0a6cfc948a420602">PJ_THREAD_DEFAULT_STACK_SIZE</a>,
                          flags,
                          &amp;thread);

    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error: unable to create thread&quot;</span>, rc);
        <span class="keywordflow">return</span> -1010;
    }

    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread waiting..&quot;</span>));
    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1500);
    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread resuming..&quot;</span>));

    <span class="keywordflow">if</span> (flags &amp; PJ_THREAD_SUSPENDED) {

        <span class="comment">/* Check that counter is still zero */</span>
        <span class="keywordflow">if</span> (counter != 0) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: thread is not suspended&quot;</span>));
            <span class="keywordflow">return</span> -1015;
        }
        
        rc = <a class="code" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a>(thread);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error: resume thread error&quot;</span>, rc);
            <span class="keywordflow">return</span> -1020;
        }
    }
    
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..waiting for thread to quit..&quot;</span>));

    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1500);

    quit_flag = 1;
    <a class="code" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(thread);

    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);

    <span class="keywordflow">if</span> (counter == 0) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: thread is not running&quot;</span>));
        <span class="keywordflow">return</span> -1025;
    }
    
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...%s success&quot;</span>, title));
    <span class="keywordflow">return</span> PJ_SUCCESS;
}


<span class="comment">/*</span>
<span class="comment"> * timeslice_test()</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> timeslice_test(<span class="keywordtype">void</span>)
{
    <span class="keyword">enum</span> { NUM_THREADS = 4 };
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> counter[NUM_THREADS], lowest, highest, diff;
    <a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread[NUM_THREADS];
    <span class="keywordtype">unsigned</span> i;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    quit_flag = 0;

    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, 4000, 4000, NULL);
    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -10;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..timeslice testing with %d threads&quot;</span>, NUM_THREADS));

    <span class="comment">/* Create all threads in suspended mode. */</span>
    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {
        counter[i] = i;
        rc = <a class="code" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>(pool, <span class="stringliteral">&quot;thread&quot;</span>, (pj_thread_proc*)&amp;thread_proc, 
                              &amp;counter[i], 
                              <a class="code" href="group__pj__config.htm#gac2fba901c0f4a6af0a6cfc948a420602">PJ_THREAD_DEFAULT_STACK_SIZE</a>, 
                              PJ_THREAD_SUSPENDED, 
                              &amp;thread[i]);
        <span class="keywordflow">if</span> (rc!=<a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_create()&quot;</span>, rc);
            <span class="keywordflow">return</span> -20;
        }
    }

    <span class="comment">/* Sleep for 1 second.</span>
<span class="comment">     * The purpose of this is to test whether all threads are suspended.</span>
<span class="comment">     */</span>
    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread waiting..&quot;</span>));
    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1000);
    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread resuming..&quot;</span>));

    <span class="comment">/* Check that all counters are still zero. */</span>
    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {
        <span class="keywordflow">if</span> (counter[i] &gt; i) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....ERROR! Thread %d-th is not suspended!&quot;</span>, 
                      i));
            <span class="keywordflow">return</span> -30;
        }
    }

    <span class="comment">/* Now resume all threads. */</span>
    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {
        TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Resuming thread %d [%p]..&quot;</span>, i, thread[i]));
        rc = <a class="code" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a>(thread[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_resume()&quot;</span>, rc);
            <span class="keywordflow">return</span> -40;
        }
    }

    <span class="comment">/* Main thread sleeps for some time to allow threads to run. </span>
<span class="comment">     * The longer we sleep, the more accurate the calculation will be,</span>
<span class="comment">     * but it&#39;ll make user waits for longer for the test to finish.</span>
<span class="comment">     */</span>
    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread waiting (5s)..&quot;</span>));
    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(5000);
    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread resuming..&quot;</span>));

    <span class="comment">/* Signal all threads to quit. */</span>
    quit_flag = 1;

    <span class="comment">/* Wait until all threads quit, then destroy. */</span>
    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {
        TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread joining thread %d [%p]..&quot;</span>, 
                            i, thread[i]));
        rc = <a class="code" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(thread[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_join()&quot;</span>, rc);
            <span class="keywordflow">return</span> -50;
        }
        TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Destroying thread %d [%p]..&quot;</span>, i, thread[i]));
        rc = <a class="code" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(thread[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...ERROR in pj_thread_destroy()&quot;</span>, rc);
            <span class="keywordflow">return</span> -60;
        }
    }

    TRACE__((THIS_FILE, <span class="stringliteral">&quot;    Main thread calculating time slices..&quot;</span>));

    <span class="comment">/* Now examine the value of the counters.</span>
<span class="comment">     * Check that all threads had equal proportion of processing.</span>
<span class="comment">     */</span>
    lowest = 0xFFFFFFFF;
    highest = 0;
    <span class="keywordflow">for</span> (i=0; i&lt;NUM_THREADS; ++i) {
        <span class="keywordflow">if</span> (counter[i] &lt; lowest)
            lowest = counter[i];
        <span class="keywordflow">if</span> (counter[i] &gt; highest)
            highest = counter[i];
    }

    <span class="comment">/* Check that all threads are running. */</span>
    <span class="keywordflow">if</span> (lowest &lt; 2) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: not all threads were running!&quot;</span>));
        <span class="keywordflow">return</span> -70;
    }

    <span class="comment">/* The difference between lowest and higest should be lower than 50%.</span>
<span class="comment">     */</span>
    diff = (highest-lowest)*100 / ((highest+lowest)/2);
    <span class="keywordflow">if</span> ( diff &gt;= 50) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
                  <span class="stringliteral">&quot;...ERROR: thread didn&#39;t have equal timeslice!&quot;</span>));
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
                  <span class="stringliteral">&quot;.....lowest counter=%u, highest counter=%u, diff=%u%%&quot;</span>,
                  lowest, highest, diff));
        <span class="keywordflow">return</span> -80;
    } <span class="keywordflow">else</span> {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
                  <span class="stringliteral">&quot;...info: timeslice diff between lowest &amp; highest=%u%%&quot;</span>,
                  diff));
    }

    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> 0;
}

<span class="keywordtype">int</span> thread_test(<span class="keywordtype">void</span>)
{
    <span class="keywordtype">int</span> rc;

    rc = simple_thread(<span class="stringliteral">&quot;simple thread test&quot;</span>, 0);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>)
        <span class="keywordflow">return</span> rc;
    
    rc = simple_thread(<span class="stringliteral">&quot;suspended thread test&quot;</span>, PJ_THREAD_SUSPENDED);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>)
        <span class="keywordflow">return</span> rc;
    
    rc = timeslice_test();
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>)
        <span class="keywordflow">return</span> rc;

    <span class="keywordflow">return</span> rc;
}

<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_thread_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_THREAD_TEST */</span>


</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
