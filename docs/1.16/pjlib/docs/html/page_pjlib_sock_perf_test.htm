<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Socket Performance (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Socket Performance </h1>  </div>
</div>
<div class="contents">
<p>Test the performance of the socket communication. This will perform simple producer-consumer type of test, where we calculate how long does it take to send certain number of packets from producer to consumer.</p>
<p>This file is <b>pjlib-test/sock_perf.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: sock_perf.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>
<span class="preprocessor">#include &lt;pj/compat/high_precision.h&gt;</span>


<span class="preprocessor">#if INCLUDE_SOCK_PERF_TEST</span>
<span class="preprocessor"></span>
<span class="comment">/*</span>
<span class="comment"> * sock_producer_consumer()</span>
<span class="comment"> *</span>
<span class="comment"> * Simple producer-consumer benchmarking. Send loop number of</span>
<span class="comment"> * buf_size size packets as fast as possible.</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> sock_producer_consumer(<span class="keywordtype">int</span> sock_type,
                                  <span class="keywordtype">unsigned</span> buf_size,
                                  <span class="keywordtype">unsigned</span> loop, 
                                  <span class="keywordtype">unsigned</span> *p_bandwidth)
{
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> consumer, producer;
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <span class="keywordtype">char</span> *outgoing_buffer, *incoming_buffer;
    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> start, stop;
    <span class="keywordtype">unsigned</span> i;
    pj_highprec_t elapsed, bandwidth;
    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> total_received;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    <span class="comment">/* Create pool. */</span>
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, 4096, 4096, NULL);
    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -10;

    <span class="comment">/* Create producer-consumer pair. */</span>
    rc = app_socketpair(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), sock_type, 0, &amp;consumer, &amp;producer);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error: create socket pair&quot;</span>, rc);
        <span class="keywordflow">return</span> -20;
    }

    <span class="comment">/* Create buffers. */</span>
    outgoing_buffer = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, buf_size);
    incoming_buffer = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, buf_size);

    <span class="comment">/* Start loop. */</span>
    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;start);
    total_received = 0;
    <span class="keywordflow">for</span> (i=0; i&lt;loop; ++i) {
        <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent, part_received, received;
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> delay;

        sent = buf_size;
        rc = <a class="code" href="group__PJ__SOCK.htm#ga21be8c2a1eb582bd13a801d4285f3ef9">pj_sock_send</a>(producer, outgoing_buffer, &amp;sent, 0);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> || sent != (<a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>)buf_size) {
            app_perror(<span class="stringliteral">&quot;...error: send()&quot;</span>, rc);
            <span class="keywordflow">return</span> -61;
        }

        <span class="comment">/* Repeat recv() until all data is part_received.</span>
<span class="comment">         * This applies only for non-UDP of course, since for UDP</span>
<span class="comment">         * we would expect all data to be part_received in one packet.</span>
<span class="comment">         */</span>
        received = 0;
        <span class="keywordflow">do</span> {
            part_received = buf_size-received;
            rc = <a class="code" href="group__PJ__SOCK.htm#gaef84c78edb396f0e1522117c48bce530">pj_sock_recv</a>(consumer, incoming_buffer+received, 
                              &amp;part_received, 0);
            <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
                app_perror(<span class="stringliteral">&quot;...recv error&quot;</span>, rc);
                <span class="keywordflow">return</span> -70;
            }
            <span class="keywordflow">if</span> (part_received &lt;= 0) {
                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: socket has closed (part_received=%d)!&quot;</span>,
                          part_received));
                <span class="keywordflow">return</span> -73;
            }
            <span class="keywordflow">if</span> ((<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>)part_received != buf_size-received) {
                <span class="keywordflow">if</span> (sock_type != <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>()) {
                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: expecting %u bytes, got %u bytes&quot;</span>,
                              buf_size-received, part_received));
                    <span class="keywordflow">return</span> -76;
                }
            }
            received += part_received;
        } <span class="keywordflow">while</span> ((<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>)received &lt; buf_size);

        total_received += received;

        <span class="comment">/* Stop test if it&#39;s been runnign for more than 10 secs. */</span>
        <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;stop);
        delay = <a class="code" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time</a>(&amp;start, &amp;stop);
        <span class="keywordflow">if</span> (delay.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> &gt; 10)
            <span class="keywordflow">break</span>;
    }

    <span class="comment">/* Stop timer. */</span>
    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;stop);

    elapsed = <a class="code" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a>(&amp;start, &amp;stop);

    <span class="comment">/* bandwidth = total_received * 1000 / elapsed */</span>
    bandwidth = total_received;
    pj_highprec_mul(bandwidth, 1000);
    pj_highprec_div(bandwidth, elapsed);
    
    *p_bandwidth = (pj_uint32_t)bandwidth;

    <span class="comment">/* Close sockets. */</span>
    <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(consumer);
    <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(producer);

    <span class="comment">/* Done */</span>
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);

    <span class="keywordflow">return</span> 0;
}

<span class="comment">/*</span>
<span class="comment"> * sock_perf_test()</span>
<span class="comment"> *</span>
<span class="comment"> * Main test entry.</span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> sock_perf_test(<span class="keywordtype">void</span>)
{
    <span class="keyword">enum</span> { LOOP = 64 * 1024 };
    <span class="keywordtype">int</span> rc;
    <span class="keywordtype">unsigned</span> bandwidth;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...benchmarking socket &quot;</span>
                  <span class="stringliteral">&quot;(2 sockets, packet=512, single threaded):&quot;</span>));

    <span class="comment">/* Disable this test on Symbian since UDP connect()/send() failed</span>
<span class="comment">     * with S60 3rd edition (including MR2).</span>
<span class="comment">     * See http://www.pjsip.org/trac/ticket/264</span>
<span class="comment">     */</span>    
<span class="preprocessor">#if !defined(PJ_SYMBIAN) || PJ_SYMBIAN==0</span>
<span class="preprocessor"></span>    <span class="comment">/* Benchmarking UDP */</span>
    rc = sock_producer_consumer(<a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 512, LOOP, &amp;bandwidth);
    <span class="keywordflow">if</span> (rc != 0) <span class="keywordflow">return</span> rc;
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;....bandwidth UDP = %d KB/s&quot;</span>, bandwidth));
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
    <span class="comment">/* Benchmarking TCP */</span>
    rc = sock_producer_consumer(<a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 512, LOOP, &amp;bandwidth);
    <span class="keywordflow">if</span> (rc != 0) <span class="keywordflow">return</span> rc;
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;....bandwidth TCP = %d KB/s&quot;</span>, bandwidth));

    <span class="keywordflow">return</span> rc;
}


<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_sock_perf_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_SOCK_PERF_TEST */</span>


</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
