<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Build Configuration (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#groups">Modules</a> &#124;
<a href="#define-members">Defines</a>  </div>
  <div class="headertitle">
<h1>Build Configuration</h1>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="groups"></a>
Modules</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__dll__target.htm">Building Dynamic Link Libraries (DLL/DSO)</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga6f7fd173e588012bb8155cab6670b55c">PJ_DEBUG</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga9b9bac430e9fbb52ca71b9c3440d35e7">PJ_DEBUG_MUTEX</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga5e200558ccd002c23190558020df2203">PJ_FUNCTIONS_ARE_INLINED</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga3a5c8ba980683893cbefd4deb859c102">PJ_HAS_FLOATING_POINT</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga047e6a9e8b2f9feb2b959e9078532cdb">PJ_LOG_MAX_SIZE</a>&nbsp;&nbsp;&nbsp;4000</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga95a3a5dad40e6fe7c009646722a0a952">PJ_LOG_USE_STACK_BUFFER</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gac3102e8d8bd1b83180a3442c9c9d81e1">PJ_TERM_HAS_COLOR</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga7c2ad1191be92dc8238942413a028444">PJ_SAFE_POOL</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga7a7088eb8759a38e00d7c0bf56d9021a">PJ_POOL_DEBUG</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gac2fba901c0f4a6af0a6cfc948a420602">PJ_THREAD_DEFAULT_STACK_SIZE</a>&nbsp;&nbsp;&nbsp;8192</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gaef430effc4116f5e7f6f6fedfbebeced">PJ_OS_HAS_CHECK_STACK</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga1a5167b1e72576693eebebb759f006eb">PJ_HAS_POOL_ALT_API</a>&nbsp;&nbsp;&nbsp;PJ_POOL_DEBUG</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gaac138889ca97f944c9f5683508da6cca">PJ_HAS_IPV6</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gab514d3cd52cce6c3c18d0566bf8ed2da">PJ_MAX_HOSTNAME</a>&nbsp;&nbsp;&nbsp;(128)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga8338e0abc8364293d444e442647a28e5">PJ_ACTIVESOCK_MAX_CONSECUTIVE_ACCEPT_ERROR</a>&nbsp;&nbsp;&nbsp;50</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>&nbsp;&nbsp;&nbsp;(64)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gace618c3111aad13c19956d98fbe240d1">PJ_IOQUEUE_HAS_SAFE_UNREG</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga66f7f7844487f66b7cb528ef5c9af2f0">PJ_IOQUEUE_DEFAULT_ALLOW_CONCURRENCY</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga5db550a999ee6b65533854093bf43fce">PJ_IOQUEUE_KEY_FREE_DELAY</a>&nbsp;&nbsp;&nbsp;500</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga034d9ce82e4dba19d72d912be91e5677">PJ_FD_SETSIZE_SETABLE</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga0dd453467b2baa987e37fd41bd768529">PJ_IP_HELPER_IGNORE_LOOPBACK_IF</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga987d918137a4cd873c1002b110f32d29">PJ_MAXPATH</a>&nbsp;&nbsp;&nbsp;260</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gade844726c373f0eb081528039ffdfe97">PJ_ENABLE_EXTRA_CHECK</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga947ded0e2ed47b6a4ce977c8e1245195">PJ_HAS_EXCEPTION_NAMES</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga7664c75901150194d460fafed1d3b215">PJ_MAX_EXCEPTION_ID</a>&nbsp;&nbsp;&nbsp;16</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga0763dec16f5b479add1c05b36fb029bb">PJ_EXCEPTION_USE_WIN32_SEH</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga657ad653d6237a35236cfeb7a48de7f7">PJ_TIMESTAMP_USE_RDTSC</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gaa8c5260ff2d79f4bc011db1bd7cac931">PJ_NATIVE_ERR_POSITIVE</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gabf82a601b496d1c6e2b239e1b4119d69">PJ_HAS_ERROR_STRING</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gaaef9d4f99914e1e035d40f9667a05741">PJ_HAS_STRICMP_ALNUM</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga2d73ca6e51bc66c1b5d4c9aaaf51d6b6">PJ_QOS_DUMMY</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga1b33b6eb00cf4b24a382643ad354aa09">PJ_QOS_BSD</a>&nbsp;&nbsp;&nbsp;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gac24dd04f8c612033bc52c03e57669d7d">PJ_QOS_WM</a>&nbsp;&nbsp;&nbsp;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga34659d21764a0df3f2972f656a18122b">PJ_QOS_SYMBIAN</a>&nbsp;&nbsp;&nbsp;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gad777e5853050474bbd21987cebaa56aa">PJ_HAS_SSL_SOCK</a>&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga620038e6bc7d0cf13f268a9da448320e">PJ_SOCK_DISABLE_WSAECONNRESET</a>&nbsp;&nbsp;&nbsp;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(type)&nbsp;&nbsp;&nbsp;PJ_INLINE_SPECIFIER type</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga5af663297b0d9af1ee78d504d8184da9">PJ_EXPORT_DECL_SPECIFIER</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga056420df2548e8728e316ca207f97f27">PJ_EXPORT_DEF_SPECIFIER</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga2b6e7ac9795c0f3a017a23d8d65fa0e2">PJ_IMPORT_DECL_SPECIFIER</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga1abbade3f2f355fb77ddb38518dcfba4">PJ_EXPORT_SYMBOL</a>(x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gaa8d4cddf3008446dfc87215a7bd01a61">PJ_DECL_NO_RETURN</a>(type)&nbsp;&nbsp;&nbsp;PJ_NORETURN PJ_DECL(type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gacb94a27f9265a0faaa5eb2e1b31fb641">PJ_IDECL_NO_RETURN</a>(type)&nbsp;&nbsp;&nbsp;PJ_NORETURN PJ_INLINE(type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga288f0f20eddba864219d6d9b3cd006e1">PJ_BEGIN_DECL</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gac961f7d199eeed7666ab3ec2442c1b00">PJ_END_DECL</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gaa7b27901b3bc582d41a833ec75cb4646">PJ_DEF_DATA</a>(type)&nbsp;&nbsp;&nbsp;type</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga73e8d006fcb35f1d9eed107c93be3de6">PJ_IDECL</a>(type)&nbsp;&nbsp;&nbsp;PJ_DECL(type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga2cc2fc57d1e46796188d6d73505cf70b">PJ_IDEF</a>(type)&nbsp;&nbsp;&nbsp;PJ_DEF(type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(arg)&nbsp;&nbsp;&nbsp;(void)arg</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#ga5074ce869f2077ea0f53ef137cbe3a24">PJ_TODO</a>(id)&nbsp;&nbsp;&nbsp;TODO___##id:</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__config.htm#gaaa4fe67778e9d32a99895ee5bcbed72c">__pj_throw__</a>(x)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>This section contains macros that can set during PJLIB build process to controll various aspects of the library.</p>
<p><b>Note</b>: the values in this page does NOT necessarily reflect to the macro values during the build process. </p>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="gaaa4fe67778e9d32a99895ee5bcbed72c"></a><!-- doxytag: member="config.h::__pj_throw__" ref="gaaa4fe67778e9d32a99895ee5bcbed72c" args="(x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define __pj_throw__</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">x</td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function attributes to inform that the function may throw exception.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>The exception list, enclosed in parenthesis. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8338e0abc8364293d444e442647a28e5"></a><!-- doxytag: member="config.h::PJ_ACTIVESOCK_MAX_CONSECUTIVE_ACCEPT_ERROR" ref="ga8338e0abc8364293d444e442647a28e5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_ACTIVESOCK_MAX_CONSECUTIVE_ACCEPT_ERROR&nbsp;&nbsp;&nbsp;50</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Maximum consecutive identical error for accept() operation before activesock stops calling the next ioqueue accept.</p>
<p>Default: 50 </p>

</div>
</div>
<a class="anchor" id="ga288f0f20eddba864219d6d9b3cd006e1"></a><!-- doxytag: member="config.h::PJ_BEGIN_DECL" ref="ga288f0f20eddba864219d6d9b3cd006e1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_BEGIN_DECL</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Mark beginning of declaration section in a header file. </p>

</div>
</div>
<a class="anchor" id="ga6f7fd173e588012bb8155cab6670b55c"></a><!-- doxytag: member="config.h::PJ_DEBUG" ref="ga6f7fd173e588012bb8155cab6670b55c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_DEBUG&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>If this macro is set to 1, it will enable some debugging checking in the library.</p>
<p>Default: equal to (NOT NDEBUG). </p>

</div>
</div>
<a class="anchor" id="ga9b9bac430e9fbb52ca71b9c3440d35e7"></a><!-- doxytag: member="config.h::PJ_DEBUG_MUTEX" ref="ga9b9bac430e9fbb52ca71b9c3440d35e7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_DEBUG_MUTEX&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enable this macro to activate logging to mutex/semaphore related events. This is useful to troubleshoot concurrency problems such as deadlocks. In addition, you should also add PJ_LOG_HAS_THREAD_ID flag to the log decoration to assist the troubleshooting.</p>
<p>Default: 0 </p>

</div>
</div>
<a class="anchor" id="gaa8d4cddf3008446dfc87215a7bd01a61"></a><!-- doxytag: member="config.h::PJ_DECL_NO_RETURN" ref="gaa8d4cddf3008446dfc87215a7bd01a61" args="(type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_DECL_NO_RETURN</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">type</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PJ_NORETURN PJ_DECL(type)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The return type of the function. Declare a function that will not return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaa7b27901b3bc582d41a833ec75cb4646"></a><!-- doxytag: member="config.h::PJ_DEF_DATA" ref="gaa7b27901b3bc582d41a833ec75cb4646" args="(type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_DEF_DATA</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">type</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;type</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The data type. Define a global data. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gade844726c373f0eb081528039ffdfe97"></a><!-- doxytag: member="config.h::PJ_ENABLE_EXTRA_CHECK" ref="gade844726c373f0eb081528039ffdfe97" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_ENABLE_EXTRA_CHECK&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enable library's extra check. If this macro is enabled, <a class="el" href="group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a> macro will expand to run-time checking. If this macro is disabled, <a class="el" href="group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a> will simply evaluate to <a class="el" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert()</a>.</p>
<p>You can disable this macro to reduce size, at the risk of crashes if invalid value (e.g. NULL) is passed to the library.</p>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="gac961f7d199eeed7666ab3ec2442c1b00"></a><!-- doxytag: member="config.h::PJ_END_DECL" ref="gac961f7d199eeed7666ab3ec2442c1b00" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_END_DECL</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Mark end of declaration section in a header file. </p>

</div>
</div>
<a class="anchor" id="ga0763dec16f5b479add1c05b36fb029bb"></a><!-- doxytag: member="config.h::PJ_EXCEPTION_USE_WIN32_SEH" ref="ga0763dec16f5b479add1c05b36fb029bb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_EXCEPTION_USE_WIN32_SEH&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Should we use Windows Structured Exception Handling (SEH) for the PJLIB exceptions.</p>
<p>Default: 0 </p>

</div>
</div>
<a class="anchor" id="ga5af663297b0d9af1ee78d504d8184da9"></a><!-- doxytag: member="config.h::PJ_EXPORT_DECL_SPECIFIER" ref="ga5af663297b0d9af1ee78d504d8184da9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_EXPORT_DECL_SPECIFIER</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This macro declares platform/compiler specific specifier prefix to be added to symbol declaration to export the symbol when PJLIB is built as dynamic library.</p>
<p>This macro should have been added by platform specific headers, if the platform supports building dynamic library target. </p>

</div>
</div>
<a class="anchor" id="ga056420df2548e8728e316ca207f97f27"></a><!-- doxytag: member="config.h::PJ_EXPORT_DEF_SPECIFIER" ref="ga056420df2548e8728e316ca207f97f27" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_EXPORT_DEF_SPECIFIER</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This macro declares platform/compiler specific specifier prefix to be added to symbol definition to export the symbol when PJLIB is built as dynamic library.</p>
<p>This macro should have been added by platform specific headers, if the platform supports building dynamic library target. </p>

</div>
</div>
<a class="anchor" id="ga1abbade3f2f355fb77ddb38518dcfba4"></a><!-- doxytag: member="config.h::PJ_EXPORT_SYMBOL" ref="ga1abbade3f2f355fb77ddb38518dcfba4" args="(x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_EXPORT_SYMBOL</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">x</td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This macro has been deprecated. It will evaluate to nothing. </p>

</div>
</div>
<a class="anchor" id="ga034d9ce82e4dba19d72d912be91e5677"></a><!-- doxytag: member="config.h::PJ_FD_SETSIZE_SETABLE" ref="ga034d9ce82e4dba19d72d912be91e5677" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_FD_SETSIZE_SETABLE&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Determine if FD_SETSIZE is changeable/set-able. If so, then we will set it to PJ_IOQUEUE_MAX_HANDLES. Currently we detect this by checking for Winsock. </p>

</div>
</div>
<a class="anchor" id="ga5e200558ccd002c23190558020df2203"></a><!-- doxytag: member="config.h::PJ_FUNCTIONS_ARE_INLINED" ref="ga5e200558ccd002c23190558020df2203" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_FUNCTIONS_ARE_INLINED&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Expand functions in *_i.h header files as inline.</p>
<p>Default: 0. </p>

</div>
</div>
<a class="anchor" id="gabf82a601b496d1c6e2b239e1b4119d69"></a><!-- doxytag: member="config.h::PJ_HAS_ERROR_STRING" ref="gabf82a601b496d1c6e2b239e1b4119d69" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_HAS_ERROR_STRING&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Include error message string in the library (<a class="el" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror()</a>). This is very much desirable!</p>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="ga947ded0e2ed47b6a4ce977c8e1245195"></a><!-- doxytag: member="config.h::PJ_HAS_EXCEPTION_NAMES" ref="ga947ded0e2ed47b6a4ce977c8e1245195" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_HAS_EXCEPTION_NAMES&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enable name registration for exceptions with <a class="el" href="group__PJ__EXCEPT.htm#gacf20c1cddd2875d1353d4d8d6672040e">pj_exception_id_alloc()</a>. If this feature is enabled, then the library will keep track of names associated with each exception ID requested by application via <a class="el" href="group__PJ__EXCEPT.htm#gacf20c1cddd2875d1353d4d8d6672040e">pj_exception_id_alloc()</a>.</p>
<p>Disabling this macro will reduce the code and .bss size by a tad bit. See also <a class="el" href="group__pj__config.htm#ga7664c75901150194d460fafed1d3b215">PJ_MAX_EXCEPTION_ID</a>.</p>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="ga3a5c8ba980683893cbefd4deb859c102"></a><!-- doxytag: member="config.h::PJ_HAS_FLOATING_POINT" ref="ga3a5c8ba980683893cbefd4deb859c102" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_HAS_FLOATING_POINT&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Use floating point computations in the library.</p>
<p>Default: 1. </p>

</div>
</div>
<a class="anchor" id="gaac138889ca97f944c9f5683508da6cca"></a><!-- doxytag: member="config.h::PJ_HAS_IPV6" ref="gaac138889ca97f944c9f5683508da6cca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_HAS_IPV6&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Support TCP in the library. Disabling TCP will reduce the footprint slightly (about 6KB).</p>
<p>Default: 1 Support IPv6 in the library. If this support is disabled, some IPv6 related functions will return PJ_EIPV6NOTSUP.</p>
<p>Default: 0 (disabled, for now) </p>

</div>
</div>
<a class="anchor" id="ga1a5167b1e72576693eebebb759f006eb"></a><!-- doxytag: member="config.h::PJ_HAS_POOL_ALT_API" ref="ga1a5167b1e72576693eebebb759f006eb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_HAS_POOL_ALT_API&nbsp;&nbsp;&nbsp;PJ_POOL_DEBUG</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Do we have alternate pool implementation?</p>
<p>Default: 0 </p>

</div>
</div>
<a class="anchor" id="gad777e5853050474bbd21987cebaa56aa"></a><!-- doxytag: member="config.h::PJ_HAS_SSL_SOCK" ref="gad777e5853050474bbd21987cebaa56aa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_HAS_SSL_SOCK&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Force the use of some QoS backend API for some platforms. Enable secure socket. For most platforms, this is implemented using OpenSSL, so this will require OpenSSL to be installed. For Symbian platform, this is implemented natively using CSecureSocket.</p>
<p>Default: 0 (for now) </p>

</div>
</div>
<a class="anchor" id="gaaef9d4f99914e1e035d40f9667a05741"></a><!-- doxytag: member="config.h::PJ_HAS_STRICMP_ALNUM" ref="gaaef9d4f99914e1e035d40f9667a05741" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_HAS_STRICMP_ALNUM&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Include <a class="el" href="group__PJ__PSTR.htm#gab812f5bf3536395fc0fbb2e4f0b5c025">pj_stricmp_alnum()</a> and pj_strnicmp_alnum(), i.e. custom functions to compare alnum strings. On some systems, they're faster then stricmp/strcasecmp, but they can be slower on other systems. When disabled, pjlib will fallback to stricmp/strnicmp.</p>
<p>Default: 0 </p>

</div>
</div>
<a class="anchor" id="ga73e8d006fcb35f1d9eed107c93be3de6"></a><!-- doxytag: member="config.h::PJ_IDECL" ref="ga73e8d006fcb35f1d9eed107c93be3de6" args="(type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IDECL</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">type</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PJ_DECL(type)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The function's return type. Declare a function that may be expanded as inline. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gacb94a27f9265a0faaa5eb2e1b31fb641"></a><!-- doxytag: member="config.h::PJ_IDECL_NO_RETURN" ref="gacb94a27f9265a0faaa5eb2e1b31fb641" args="(type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IDECL_NO_RETURN</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">type</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PJ_NORETURN PJ_INLINE(type)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The return type of the function. Declare an inline function that will not return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga2cc2fc57d1e46796188d6d73505cf70b"></a><!-- doxytag: member="config.h::PJ_IDEF" ref="ga2cc2fc57d1e46796188d6d73505cf70b" args="(type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IDEF</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">type</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PJ_DEF(type)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The function's return type. Define a function that may be expanded as inline. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga2b6e7ac9795c0f3a017a23d8d65fa0e2"></a><!-- doxytag: member="config.h::PJ_IMPORT_DECL_SPECIFIER" ref="ga2b6e7ac9795c0f3a017a23d8d65fa0e2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IMPORT_DECL_SPECIFIER</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This macro declares platform/compiler specific specifier prefix to be added to symbol declaration to import the symbol.</p>
<p>This macro should have been added by platform specific headers, if the platform supports building dynamic library target. </p>

</div>
</div>
<a class="anchor" id="gac928151ecd64bc26385f2725100b559c"></a><!-- doxytag: member="config.h::PJ_INLINE" ref="gac928151ecd64bc26385f2725100b559c" args="(type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_INLINE</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">type</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PJ_INLINE_SPECIFIER type</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The return type of the function. Expand the function as inline. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga66f7f7844487f66b7cb528ef5c9af2f0"></a><!-- doxytag: member="config.h::PJ_IOQUEUE_DEFAULT_ALLOW_CONCURRENCY" ref="ga66f7f7844487f66b7cb528ef5c9af2f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IOQUEUE_DEFAULT_ALLOW_CONCURRENCY&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Default concurrency setting for sockets/handles registered to ioqueue. This controls whether the ioqueue is allowed to call the key's callback concurrently/in parallel. The default is yes, which means that if there are more than one pending operations complete simultaneously, more than one threads may call the key's callback at the same time. This generally would promote good scalability for application, at the expense of more complexity to manage the concurrent accesses.</p>
<p>Please see the ioqueue documentation for more info. </p>

</div>
</div>
<a class="anchor" id="gace618c3111aad13c19956d98fbe240d1"></a><!-- doxytag: member="config.h::PJ_IOQUEUE_HAS_SAFE_UNREG" ref="gace618c3111aad13c19956d98fbe240d1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IOQUEUE_HAS_SAFE_UNREG&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>If PJ_IOQUEUE_HAS_SAFE_UNREG macro is defined, then ioqueue will do more things to ensure thread safety of handle unregistration operation by employing reference counter to each handle.</p>
<p>In addition, the ioqueue will preallocate memory for the handles, according to the maximum number of handles that is specified during ioqueue creation.</p>
<p>All applications would normally want this enabled, but you may disable this if:</p>
<ul>
<li>there is no dynamic unregistration to all ioqueues.</li>
<li>there is no threading, or there is no preemptive multitasking.</li>
</ul>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="ga5db550a999ee6b65533854093bf43fce"></a><!-- doxytag: member="config.h::PJ_IOQUEUE_KEY_FREE_DELAY" ref="ga5db550a999ee6b65533854093bf43fce" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IOQUEUE_KEY_FREE_DELAY&nbsp;&nbsp;&nbsp;500</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>When safe unregistration (PJ_IOQUEUE_HAS_SAFE_UNREG) is configured in ioqueue, the PJ_IOQUEUE_KEY_FREE_DELAY macro specifies how long the ioqueue key is kept in closing state before it can be reused.</p>
<p>The value is in miliseconds.</p>
<p>Default: 500 msec. </p>

</div>
</div>
<a class="anchor" id="ga0b0fdd6e70bdbe412c1a3337ce3ff5ee"></a><!-- doxytag: member="config.h::PJ_IOQUEUE_MAX_HANDLES" ref="ga0b0fdd6e70bdbe412c1a3337ce3ff5ee" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IOQUEUE_MAX_HANDLES&nbsp;&nbsp;&nbsp;(64)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Constants for declaring the maximum handles that can be supported by a single IOQ framework. This constant might not be relevant to the underlying I/O queue impelementation, but still, developers should be aware of this constant, to make sure that the program will not break when the underlying implementation changes. </p>

</div>
</div>
<a class="anchor" id="ga0dd453467b2baa987e37fd41bd768529"></a><!-- doxytag: member="config.h::PJ_IP_HELPER_IGNORE_LOOPBACK_IF" ref="ga0dd453467b2baa987e37fd41bd768529" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_IP_HELPER_IGNORE_LOOPBACK_IF&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Overrides FD_SETSIZE so it is consistent throughout the library. We only do this if we detected that FD_SETSIZE is changeable. If FD_SETSIZE is not set-able, then PJ_IOQUEUE_MAX_HANDLES must be set to value lower than FD_SETSIZE. Specify whether <a class="el" href="group__pj__ip__helper.htm#gab983d56df83721c32feeb2fe0d394e69">pj_enum_ip_interface()</a> function should exclude loopback interfaces.</p>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="ga047e6a9e8b2f9feb2b959e9078532cdb"></a><!-- doxytag: member="config.h::PJ_LOG_MAX_SIZE" ref="ga047e6a9e8b2f9feb2b959e9078532cdb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_LOG_MAX_SIZE&nbsp;&nbsp;&nbsp;4000</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Declare maximum logging level/verbosity. Lower number indicates higher importance, with the highest importance has level zero. The least important level is five in this implementation, but this can be extended by supplying the appropriate implementation.</p>
<p>The level conventions:</p>
<ul>
<li>0: fatal error</li>
<li>1: error</li>
<li>2: warning</li>
<li>3: info</li>
<li>4: debug</li>
<li>5: trace</li>
<li>6: more detailed trace</li>
</ul>
<p>Default: 4 Maximum message size that can be sent to output device for each call to <a class="el" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG()</a>. If the message size is longer than this value, it will be cut. This may affect the stack usage, depending whether PJ_LOG_USE_STACK_BUFFER flag is set.</p>
<p>Default: 4000 </p>

</div>
</div>
<a class="anchor" id="ga95a3a5dad40e6fe7c009646722a0a952"></a><!-- doxytag: member="config.h::PJ_LOG_USE_STACK_BUFFER" ref="ga95a3a5dad40e6fe7c009646722a0a952" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_LOG_USE_STACK_BUFFER&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Log buffer. Does the log get the buffer from the stack? (default is yes). If the value is set to NO, then the buffer will be taken from static buffer, which in this case will make the log function non-reentrant.</p>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="ga7664c75901150194d460fafed1d3b215"></a><!-- doxytag: member="config.h::PJ_MAX_EXCEPTION_ID" ref="ga7664c75901150194d460fafed1d3b215" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_MAX_EXCEPTION_ID&nbsp;&nbsp;&nbsp;16</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Maximum number of unique exception IDs that can be requested with <a class="el" href="group__PJ__EXCEPT.htm#gacf20c1cddd2875d1353d4d8d6672040e">pj_exception_id_alloc()</a>. For each entry, a small record will be allocated in the .bss segment.</p>
<p>Default: 16 </p>

</div>
</div>
<a class="anchor" id="gab514d3cd52cce6c3c18d0566bf8ed2da"></a><!-- doxytag: member="config.h::PJ_MAX_HOSTNAME" ref="gab514d3cd52cce6c3c18d0566bf8ed2da" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_MAX_HOSTNAME&nbsp;&nbsp;&nbsp;(128)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Maximum hostname length. Libraries sometimes needs to make copy of an address to stack buffer; the value here affects the stack usage.</p>
<p>Default: 128 </p>

</div>
</div>
<a class="anchor" id="ga987d918137a4cd873c1002b110f32d29"></a><!-- doxytag: member="config.h::PJ_MAXPATH" ref="ga987d918137a4cd873c1002b110f32d29" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_MAXPATH&nbsp;&nbsp;&nbsp;260</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Has semaphore functionality?</p>
<p>Default: 1 Event object (for synchronization, e.g. in Win32)</p>
<p>Default: 1 Maximum file name length. </p>

</div>
</div>
<a class="anchor" id="gaa8c5260ff2d79f4bc011db1bd7cac931"></a><!-- doxytag: member="config.h::PJ_NATIVE_ERR_POSITIVE" ref="gaa8c5260ff2d79f4bc011db1bd7cac931" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_NATIVE_ERR_POSITIVE&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Is native platform error positive number? Default: 1 (yes) </p>

</div>
</div>
<a class="anchor" id="gaef430effc4116f5e7f6f6fedfbebeced"></a><!-- doxytag: member="config.h::PJ_OS_HAS_CHECK_STACK" ref="gaef430effc4116f5e7f6f6fedfbebeced" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_OS_HAS_CHECK_STACK&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Specify if <a class="el" href="group__PJ__THREAD.htm#ga9af86900386496e4b75fdeafff9459e3">PJ_CHECK_STACK()</a> macro is enabled to check the sanity of the stack. The OS implementation may check that no stack overflow occurs, and it also may collect statistic about stack usage. Note that this will increase the footprint of the libraries since it tracks the filename and line number of each functions. </p>

</div>
</div>
<a class="anchor" id="ga7a7088eb8759a38e00d7c0bf56d9021a"></a><!-- doxytag: member="config.h::PJ_POOL_DEBUG" ref="ga7a7088eb8759a38e00d7c0bf56d9021a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_POOL_DEBUG&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>If pool debugging is used, then each memory allocation from the pool will call malloc(), and pool will release all memory chunks when it is destroyed. This works better when memory verification programs such as Rational Purify is used.</p>
<p>Default: 0 </p>

</div>
</div>
<a class="anchor" id="ga1b33b6eb00cf4b24a382643ad354aa09"></a><!-- doxytag: member="config.h::PJ_QOS_BSD" ref="ga1b33b6eb00cf4b24a382643ad354aa09" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_QOS_BSD&nbsp;&nbsp;&nbsp;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>QoS backend based on setsockopt(IP_TOS) </p>

</div>
</div>
<a class="anchor" id="ga2d73ca6e51bc66c1b5d4c9aaaf51d6b6"></a><!-- doxytag: member="config.h::PJ_QOS_DUMMY" ref="ga2d73ca6e51bc66c1b5d4c9aaaf51d6b6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_QOS_DUMMY&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Dummy QoS backend implementation, will always return error on all the APIs. </p>

</div>
</div>
<a class="anchor" id="ga34659d21764a0df3f2972f656a18122b"></a><!-- doxytag: member="config.h::PJ_QOS_SYMBIAN" ref="ga34659d21764a0df3f2972f656a18122b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_QOS_SYMBIAN&nbsp;&nbsp;&nbsp;4</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>QoS backend for Symbian </p>

</div>
</div>
<a class="anchor" id="gac24dd04f8c612033bc52c03e57669d7d"></a><!-- doxytag: member="config.h::PJ_QOS_WM" ref="gac24dd04f8c612033bc52c03e57669d7d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_QOS_WM&nbsp;&nbsp;&nbsp;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>QoS backend for Windows Mobile 6 </p>

</div>
</div>
<a class="anchor" id="ga7c2ad1191be92dc8238942413a028444"></a><!-- doxytag: member="config.h::PJ_SAFE_POOL" ref="ga7c2ad1191be92dc8238942413a028444" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_SAFE_POOL&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set this flag to non-zero to enable various checking for pool operations. When this flag is set, assertion must be enabled in the application.</p>
<p>This will slow down pool creation and destruction and will add few bytes of overhead, so application would normally want to disable this feature on release build.</p>
<p>Default: 0 </p>

</div>
</div>
<a class="anchor" id="ga620038e6bc7d0cf13f268a9da448320e"></a><!-- doxytag: member="config.h::PJ_SOCK_DISABLE_WSAECONNRESET" ref="ga620038e6bc7d0cf13f268a9da448320e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_SOCK_DISABLE_WSAECONNRESET&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Disable WSAECONNRESET error for UDP sockets on Win32 platforms. See <a href="https://trac.pjsip.org/repos/ticket/1197.">https://trac.pjsip.org/repos/ticket/1197.</a></p>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="gac3102e8d8bd1b83180a3442c9c9d81e1"></a><!-- doxytag: member="config.h::PJ_TERM_HAS_COLOR" ref="gac3102e8d8bd1b83180a3442c9c9d81e1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_TERM_HAS_COLOR&nbsp;&nbsp;&nbsp;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Colorfull terminal (for logging etc).</p>
<p>Default: 1 </p>

</div>
</div>
<a class="anchor" id="gac2fba901c0f4a6af0a6cfc948a420602"></a><!-- doxytag: member="config.h::PJ_THREAD_DEFAULT_STACK_SIZE" ref="gac2fba901c0f4a6af0a6cfc948a420602" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_THREAD_DEFAULT_STACK_SIZE&nbsp;&nbsp;&nbsp;8192</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Specify this as <em>stack_size</em> argument in <a class="el" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create()</a> to specify that thread should use default stack size for the current platform.</p>
<p>Default: 8192 </p>

</div>
</div>
<a class="anchor" id="ga657ad653d6237a35236cfeb7a48de7f7"></a><!-- doxytag: member="config.h::PJ_TIMESTAMP_USE_RDTSC" ref="ga657ad653d6237a35236cfeb7a48de7f7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_TIMESTAMP_USE_RDTSC&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Should we attempt to use Pentium's rdtsc for high resolution timestamp.</p>
<p>Default: 0 </p>

</div>
</div>
<a class="anchor" id="ga5074ce869f2077ea0f53ef137cbe3a24"></a><!-- doxytag: member="config.h::PJ_TODO" ref="ga5074ce869f2077ea0f53ef137cbe3a24" args="(id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_TODO</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">id</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;TODO___##id:</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>id</em>&nbsp;</td><td>Any identifier that will be printed as TODO message. PJ_TODO macro will display TODO message as warning during compilation. Example: <a class="el" href="group__pj__config.htm#ga5074ce869f2077ea0f53ef137cbe3a24">PJ_TODO(CLEAN_UP_ERROR)</a>; </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga7523f8576efd271c22b188eab05d7870"></a><!-- doxytag: member="config.h::PJ_UNUSED_ARG" ref="ga7523f8576efd271c22b188eab05d7870" args="(arg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_UNUSED_ARG</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">arg</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;(void)arg</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>arg</em>&nbsp;</td><td>The argument name. PJ_UNUSED_ARG prevents warning about unused argument in a function. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
