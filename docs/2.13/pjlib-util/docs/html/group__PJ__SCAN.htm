<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Fast Text Scanning (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB-UTIL Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Fast Text Scanning<div class="ingroups"><a class="el" href="group__PJLIB__TEXT.htm">Text and String Manipulation</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Text scanning utility.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__scanner.htm">pj_scanner</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__scan__state.htm">pj_scan_state</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga3d4e819ff155eb7c132f099822fe7278"><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga3d4e819ff155eb7c132f099822fe7278">pj_syn_err_func_ptr</a>) (struct <a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:ga3d4e819ff155eb7c132f099822fe7278"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="enum-members" name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gadc29c2ff13d900c2f185ee95427fb06c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="group__PJ__SCAN.htm#ggadc29c2ff13d900c2f185ee95427fb06ca236ed6aaaf3d2b027e36322400ea9b8d">PJ_SCAN_AUTOSKIP_WS</a> = 1
, <a class="el" href="group__PJ__SCAN.htm#ggadc29c2ff13d900c2f185ee95427fb06ca0bedb65bd3b6cf89b949ad9b6c7439d8">PJ_SCAN_AUTOSKIP_WS_HEADER</a> = 3
, <a class="el" href="group__PJ__SCAN.htm#ggadc29c2ff13d900c2f185ee95427fb06ca20a28dcbf6ff52877d15a19a126b74e4">PJ_SCAN_AUTOSKIP_NEWLINE</a> = 4
 }</td></tr>
<tr class="separator:gadc29c2ff13d900c2f185ee95427fb06c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga7f5b615cfb0e25f1bf7a021ce6f82203"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga7f5b615cfb0e25f1bf7a021ce6f82203">pj_cis_buf_init</a> (<a class="el" href="structpj__cis__buf__t.htm">pj_cis_buf_t</a> *cs_buf)</td></tr>
<tr class="separator:ga7f5b615cfb0e25f1bf7a021ce6f82203"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74c8ea31c1244aa76cd74e28ccf75def"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga74c8ea31c1244aa76cd74e28ccf75def">pj_cis_init</a> (<a class="el" href="structpj__cis__buf__t.htm">pj_cis_buf_t</a> *cs_buf, <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis)</td></tr>
<tr class="separator:ga74c8ea31c1244aa76cd74e28ccf75def"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8228f4c64ff8ed34c4dd6f31db3dbc1a"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga8228f4c64ff8ed34c4dd6f31db3dbc1a">pj_cis_dup</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *new_cis, <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *existing)</td></tr>
<tr class="separator:ga8228f4c64ff8ed34c4dd6f31db3dbc1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabac4e709141161722e3a6177a25840f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gabac4e709141161722e3a6177a25840f3">pj_cis_add_range</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis, int cstart, int cend)</td></tr>
<tr class="separator:gabac4e709141161722e3a6177a25840f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7aff3d0271bc340387e61f64e06b4331"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga7aff3d0271bc340387e61f64e06b4331">pj_cis_add_alpha</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis)</td></tr>
<tr class="separator:ga7aff3d0271bc340387e61f64e06b4331"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cd620df740e9a8b38cc389054fc889b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga5cd620df740e9a8b38cc389054fc889b">pj_cis_add_num</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis)</td></tr>
<tr class="separator:ga5cd620df740e9a8b38cc389054fc889b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b33e9ccba52dd04d2deb1cbeb57349d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga7b33e9ccba52dd04d2deb1cbeb57349d">pj_cis_add_str</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis, const char *str)</td></tr>
<tr class="separator:ga7b33e9ccba52dd04d2deb1cbeb57349d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7f808fabc3686b34b3ee3fcd7829f5a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gaf7f808fabc3686b34b3ee3fcd7829f5a">pj_cis_add_cis</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis, const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *rhs)</td></tr>
<tr class="separator:gaf7f808fabc3686b34b3ee3fcd7829f5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad88f6b3efecb9683e5c5f78d0a7da3c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gad88f6b3efecb9683e5c5f78d0a7da3c9">pj_cis_del_range</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis, int cstart, int cend)</td></tr>
<tr class="separator:gad88f6b3efecb9683e5c5f78d0a7da3c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b78781e212adc1b3f2939639050c3ff"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga9b78781e212adc1b3f2939639050c3ff">pj_cis_del_str</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis, const char *str)</td></tr>
<tr class="separator:ga9b78781e212adc1b3f2939639050c3ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a73c4157d5035396cbc3a1400fa7927"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga7a73c4157d5035396cbc3a1400fa7927">pj_cis_invert</a> (<a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis)</td></tr>
<tr class="separator:ga7a73c4157d5035396cbc3a1400fa7927"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga81e18a957a8231fbfd997160a35fd836"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga81e18a957a8231fbfd997160a35fd836">pj_cis_match</a> (const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *cis, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga03cd006c29b1d24580f5df4db912749e">pj_uint8_t</a> c)</td></tr>
<tr class="separator:ga81e18a957a8231fbfd997160a35fd836"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34d97b1f4677695fad1e15b99d5a309f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga34d97b1f4677695fad1e15b99d5a309f">pj_scan_init</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, char *bufstart, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> buflen, unsigned options, <a class="el" href="group__PJ__SCAN.htm#ga3d4e819ff155eb7c132f099822fe7278">pj_syn_err_func_ptr</a> callback)</td></tr>
<tr class="separator:ga34d97b1f4677695fad1e15b99d5a309f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec2a0614afcc41bcd823bc80d2c0466d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gaec2a0614afcc41bcd823bc80d2c0466d">pj_scan_fini</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:gaec2a0614afcc41bcd823bc80d2c0466d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga611ccc175b3cd21c51f16537930cc36d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga611ccc175b3cd21c51f16537930cc36d">pj_scan_is_eof</a> (const <a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:ga611ccc175b3cd21c51f16537930cc36d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9c6d94b0224e4a38570d49ec3ddf3f0"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gae9c6d94b0224e4a38570d49ec3ddf3f0">pj_scan_peek</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *spec, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:gae9c6d94b0224e4a38570d49ec3ddf3f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5597051a9f4b8943fbcd84bf519341f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gad5597051a9f4b8943fbcd84bf519341f">pj_scan_peek_n</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:gad5597051a9f4b8943fbcd84bf519341f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7d8a05fc58cba38aed683eb65061492"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gaf7d8a05fc58cba38aed683eb65061492">pj_scan_peek_until</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *spec, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:gaf7d8a05fc58cba38aed683eb65061492"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7c79764159bd1c7999633bd6a37dd4f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gac7c79764159bd1c7999633bd6a37dd4f">pj_scan_get</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *spec, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:gac7c79764159bd1c7999633bd6a37dd4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0009cd4f93aa7d40264f1642b9697423"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga0009cd4f93aa7d40264f1642b9697423">pj_scan_get_unescape</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *spec, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:ga0009cd4f93aa7d40264f1642b9697423"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5acdbc9733e609e2aec1c9a7216f0932"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga5acdbc9733e609e2aec1c9a7216f0932">pj_scan_get_quote</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, int begin_quote, int end_quote, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:ga5acdbc9733e609e2aec1c9a7216f0932"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaadd20c9dc9dc821049d375ed80d17db7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gaadd20c9dc9dc821049d375ed80d17db7">pj_scan_get_quotes</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const char *begin_quotes, const char *end_quotes, int qsize, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:gaadd20c9dc9dc821049d375ed80d17db7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ed80a598c74514bef05739658a830be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga3ed80a598c74514bef05739658a830be">pj_scan_get_n</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, unsigned N, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:ga3ed80a598c74514bef05739658a830be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c589cd959a7f3748aba3a9c749fbf88"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga5c589cd959a7f3748aba3a9c749fbf88">pj_scan_get_char</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:ga5c589cd959a7f3748aba3a9c749fbf88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80f5b6901343bc8468531110ec79fb34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga80f5b6901343bc8468531110ec79fb34">pj_scan_get_until</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *spec, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:ga80f5b6901343bc8468531110ec79fb34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga95b6fc805e37f18f3c724034f4a99c97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga95b6fc805e37f18f3c724034f4a99c97">pj_scan_get_until_ch</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, int until_char, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:ga95b6fc805e37f18f3c724034f4a99c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga78902c701f9b2adf0f4ab467a5fd70d1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga78902c701f9b2adf0f4ab467a5fd70d1">pj_scan_get_until_chr</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const char *until_spec, <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *out)</td></tr>
<tr class="separator:ga78902c701f9b2adf0f4ab467a5fd70d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga679db210062b18aa0c7c5bb698800a91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga679db210062b18aa0c7c5bb698800a91">pj_scan_advance_n</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, unsigned N, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> skip)</td></tr>
<tr class="separator:ga679db210062b18aa0c7c5bb698800a91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c039498123b4d4b7a037b0d0f7d3d5a"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga5c039498123b4d4b7a037b0d0f7d3d5a">pj_scan_strcmp</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const char *s, int len)</td></tr>
<tr class="separator:ga5c039498123b4d4b7a037b0d0f7d3d5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad64224d724bf7509204f13ce0488ce08"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gad64224d724bf7509204f13ce0488ce08">pj_scan_stricmp</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const char *s, int len)</td></tr>
<tr class="separator:gad64224d724bf7509204f13ce0488ce08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80c9fc097a837d9d54708460904bb217"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga80c9fc097a837d9d54708460904bb217">pj_scan_stricmp_alnum</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, const char *s, int len)</td></tr>
<tr class="separator:ga80c9fc097a837d9d54708460904bb217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4500369203ee0e498c39410a8742155"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gae4500369203ee0e498c39410a8742155">pj_scan_get_newline</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:gae4500369203ee0e498c39410a8742155"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad6d6fbcd5fb1177a2e6f99bbd292f392"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#gad6d6fbcd5fb1177a2e6f99bbd292f392">pj_scan_skip_whitespace</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:gad6d6fbcd5fb1177a2e6f99bbd292f392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c7066a94e2077bb288247c5ebd54047"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga5c7066a94e2077bb288247c5ebd54047">pj_scan_skip_line</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:ga5c7066a94e2077bb288247c5ebd54047"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga144d962bddcceae420a93c1fa1a5cfce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga144d962bddcceae420a93c1fa1a5cfce">pj_scan_save_state</a> (const <a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, <a class="el" href="structpj__scan__state.htm">pj_scan_state</a> *state)</td></tr>
<tr class="separator:ga144d962bddcceae420a93c1fa1a5cfce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8f2a310cf5628903ebbde40ba37855c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga8f2a310cf5628903ebbde40ba37855c0">pj_scan_restore_state</a> (<a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner, <a class="el" href="structpj__scan__state.htm">pj_scan_state</a> *state)</td></tr>
<tr class="separator:ga8f2a310cf5628903ebbde40ba37855c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8cfa03125fc9624936863951681c37ea"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SCAN.htm#ga8cfa03125fc9624936863951681c37ea">pj_scan_get_col</a> (const <a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td></tr>
<tr class="separator:ga8cfa03125fc9624936863951681c37ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Text scanning utility. </p>
<p >This module describes a fast text scanning functions. </p>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ga3d4e819ff155eb7c132f099822fe7278" name="ga3d4e819ff155eb7c132f099822fe7278"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3d4e819ff155eb7c132f099822fe7278">&#9670;&nbsp;</a></span>pj_syn_err_func_ptr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* pj_syn_err_func_ptr) (struct <a class="el" href="structpj__scanner.htm">pj_scanner</a> *scanner)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >The callback function type to be called by the scanner when it encounters syntax error.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner instance that calls the callback . </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="gadc29c2ff13d900c2f185ee95427fb06c" name="gadc29c2ff13d900c2f185ee95427fb06c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadc29c2ff13d900c2f185ee95427fb06c">&#9670;&nbsp;</a></span>anonymous enum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Flags for scanner. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ggadc29c2ff13d900c2f185ee95427fb06ca236ed6aaaf3d2b027e36322400ea9b8d" name="ggadc29c2ff13d900c2f185ee95427fb06ca236ed6aaaf3d2b027e36322400ea9b8d"></a>PJ_SCAN_AUTOSKIP_WS&#160;</td><td class="fielddoc"><p >This flags specifies that the scanner should automatically skip whitespaces </p>
</td></tr>
<tr><td class="fieldname"><a id="ggadc29c2ff13d900c2f185ee95427fb06ca0bedb65bd3b6cf89b949ad9b6c7439d8" name="ggadc29c2ff13d900c2f185ee95427fb06ca0bedb65bd3b6cf89b949ad9b6c7439d8"></a>PJ_SCAN_AUTOSKIP_WS_HEADER&#160;</td><td class="fielddoc"><p >This flags specifies that the scanner should automatically skip SIP header continuation. This flag implies PJ_SCAN_AUTOSKIP_WS. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggadc29c2ff13d900c2f185ee95427fb06ca20a28dcbf6ff52877d15a19a126b74e4" name="ggadc29c2ff13d900c2f185ee95427fb06ca20a28dcbf6ff52877d15a19a126b74e4"></a>PJ_SCAN_AUTOSKIP_NEWLINE&#160;</td><td class="fielddoc"><p >Auto-skip new lines. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga7aff3d0271bc340387e61f64e06b4331" name="ga7aff3d0271bc340387e61f64e06b4331"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7aff3d0271bc340387e61f64e06b4331">&#9670;&nbsp;</a></span>pj_cis_add_alpha()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_add_alpha </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Add alphabetic characters to the specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaf7f808fabc3686b34b3ee3fcd7829f5a" name="gaf7f808fabc3686b34b3ee3fcd7829f5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf7f808fabc3686b34b3ee3fcd7829f5a">&#9670;&nbsp;</a></span>pj_cis_add_cis()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_add_cis </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Add specification from another specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The specification is to be set. </td></tr>
    <tr><td class="paramname">rhs</td><td>The specification to be copied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga5cd620df740e9a8b38cc389054fc889b" name="ga5cd620df740e9a8b38cc389054fc889b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5cd620df740e9a8b38cc389054fc889b">&#9670;&nbsp;</a></span>pj_cis_add_num()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_add_num </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Add numeric characters to the specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gabac4e709141161722e3a6177a25840f3" name="gabac4e709141161722e3a6177a25840f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabac4e709141161722e3a6177a25840f3">&#9670;&nbsp;</a></span>pj_cis_add_range()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_add_range </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cstart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cend</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Add the characters in the specified range '[cstart, cend)' to the specification (the last character itself ('cend') is not added).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
    <tr><td class="paramname">cstart</td><td>The first character in the range. </td></tr>
    <tr><td class="paramname">cend</td><td>The next character after the last character in the range. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga7b33e9ccba52dd04d2deb1cbeb57349d" name="ga7b33e9ccba52dd04d2deb1cbeb57349d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7b33e9ccba52dd04d2deb1cbeb57349d">&#9670;&nbsp;</a></span>pj_cis_add_str()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_add_str </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Add the characters in the string to the specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
    <tr><td class="paramname">str</td><td>The string. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga7f5b615cfb0e25f1bf7a021ce6f82203" name="ga7f5b615cfb0e25f1bf7a021ce6f82203"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7f5b615cfb0e25f1bf7a021ce6f82203">&#9670;&nbsp;</a></span>pj_cis_buf_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_buf_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__buf__t.htm">pj_cis_buf_t</a> *&#160;</td>
          <td class="paramname"><em>cs_buf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initialize scanner input specification buffer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cs_buf</td><td>The scanner character specification. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gad88f6b3efecb9683e5c5f78d0a7da3c9" name="gad88f6b3efecb9683e5c5f78d0a7da3c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad88f6b3efecb9683e5c5f78d0a7da3c9">&#9670;&nbsp;</a></span>pj_cis_del_range()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_del_range </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cstart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cend</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Delete characters in the specified range from the specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
    <tr><td class="paramname">cstart</td><td>The first character in the range. </td></tr>
    <tr><td class="paramname">cend</td><td>The next character after the last character in the range. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga9b78781e212adc1b3f2939639050c3ff" name="ga9b78781e212adc1b3f2939639050c3ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9b78781e212adc1b3f2939639050c3ff">&#9670;&nbsp;</a></span>pj_cis_del_str()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_del_str </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Delete characters in the specified string from the specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
    <tr><td class="paramname">str</td><td>The string. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga8228f4c64ff8ed34c4dd6f31db3dbc1a" name="ga8228f4c64ff8ed34c4dd6f31db3dbc1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8228f4c64ff8ed34c4dd6f31db3dbc1a">&#9670;&nbsp;</a></span>pj_cis_dup()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_cis_dup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>new_cis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>existing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create a new input specification based on an existing specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">new_cis</td><td>The new specification to be initialized. </td></tr>
    <tr><td class="paramname">existing</td><td>The existing specification, from which the input bitmask will be copied to the new specification.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if new specification has been successfully created, or PJ_ETOOMANY if there are already too many specifications in the buffer. </dd></dl>

</div>
</div>
<a id="ga74c8ea31c1244aa76cd74e28ccf75def" name="ga74c8ea31c1244aa76cd74e28ccf75def"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga74c8ea31c1244aa76cd74e28ccf75def">&#9670;&nbsp;</a></span>pj_cis_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_cis_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__buf__t.htm">pj_cis_buf_t</a> *&#160;</td>
          <td class="paramname"><em>cs_buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create a new input specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cs_buf</td><td>Specification buffer. </td></tr>
    <tr><td class="paramname">cis</td><td>Character input specification to be initialized.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if new specification has been successfully created, or PJ_ETOOMANY if there are already too many specifications in the buffer. </dd></dl>

</div>
</div>
<a id="ga7a73c4157d5035396cbc3a1400fa7927" name="ga7a73c4157d5035396cbc3a1400fa7927"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7a73c4157d5035396cbc3a1400fa7927">&#9670;&nbsp;</a></span>pj_cis_invert()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_cis_invert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Invert specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga81e18a957a8231fbfd997160a35fd836" name="ga81e18a957a8231fbfd997160a35fd836"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga81e18a957a8231fbfd997160a35fd836">&#9670;&nbsp;</a></span>pj_cis_match()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_cis_match </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>cis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga03cd006c29b1d24580f5df4db912749e">pj_uint8_t</a>&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check whether the specified character belongs to the specification.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cis</td><td>The scanner character specification. </td></tr>
    <tr><td class="paramname">c</td><td>The character to check for matching.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Non-zero if match (not necessarily one). </dd></dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="ga679db210062b18aa0c7c5bb698800a91" name="ga679db210062b18aa0c7c5bb698800a91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga679db210062b18aa0c7c5bb698800a91">&#9670;&nbsp;</a></span>pj_scan_advance_n()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_advance_n </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&#160;</td>
          <td class="paramname"><em>skip</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Advance the scanner N characters, and skip whitespace if necessary.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">N</td><td>Number of characters to skip. </td></tr>
    <tr><td class="paramname">skip</td><td>Flag to specify whether whitespace should be skipped after skipping the characters. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaec2a0614afcc41bcd823bc80d2c0466d" name="gaec2a0614afcc41bcd823bc80d2c0466d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaec2a0614afcc41bcd823bc80d2c0466d">&#9670;&nbsp;</a></span>pj_scan_fini()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_fini </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Call this function when application has finished using the scanner.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gac7c79764159bd1c7999633bd6a37dd4f" name="gac7c79764159bd1c7999633bd6a37dd4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac7c79764159bd1c7999633bd6a37dd4f">&#9670;&nbsp;</a></span>pj_scan_get()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>spec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get characters from the buffer according to the spec, and return them in out parameter. The scanner will attempt to get as many characters as possible as long as the spec matches. If the first character doesn't match the spec, or scanner is already in EOF when this function is called, an exception will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">spec</td><td>The spec to match input string. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga5c589cd959a7f3748aba3a9c749fbf88" name="ga5c589cd959a7f3748aba3a9c749fbf88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5c589cd959a7f3748aba3a9c749fbf88">&#9670;&nbsp;</a></span>pj_scan_get_char()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_get_char </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get one character from the scanner.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The character. </dd></dl>

</div>
</div>
<a id="ga8cfa03125fc9624936863951681c37ea" name="ga8cfa03125fc9624936863951681c37ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8cfa03125fc9624936863951681c37ea">&#9670;&nbsp;</a></span>pj_scan_get_col()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_get_col </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get current column position.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The column position. </dd></dl>

<p class="reference">References <a class="el" href="structpj__scanner.htm#af46cd462ce7424a4d30e760bcab44aa4">pj_scanner::curptr</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, and <a class="el" href="structpj__scanner.htm#ad01ff8316acc46de18e8e425a92eab1b">pj_scanner::start_line</a>.</p>

</div>
</div>
<a id="ga3ed80a598c74514bef05739658a830be" name="ga3ed80a598c74514bef05739658a830be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3ed80a598c74514bef05739658a830be">&#9670;&nbsp;</a></span>pj_scan_get_n()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_n </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get N characters from the scanner.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">N</td><td>Number of characters to get. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gae4500369203ee0e498c39410a8742155" name="gae4500369203ee0e498c39410a8742155"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae4500369203ee0e498c39410a8742155">&#9670;&nbsp;</a></span>pj_scan_get_newline()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_newline </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get a newline from the scanner. A newline is defined as '\n', or '\r', or "\\r\\n". If current input is not newline, syntax error will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga5acdbc9733e609e2aec1c9a7216f0932" name="ga5acdbc9733e609e2aec1c9a7216f0932"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5acdbc9733e609e2aec1c9a7216f0932">&#9670;&nbsp;</a></span>pj_scan_get_quote()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_quote </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>begin_quote</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>end_quote</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get characters between quotes. If current input doesn't match begin_quote, syntax error will be thrown. Note that the resulting string will contain the enclosing quote.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">begin_quote</td><td>The character to begin the quote. </td></tr>
    <tr><td class="paramname">end_quote</td><td>The character to end the quote. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaadd20c9dc9dc821049d375ed80d17db7" name="gaadd20c9dc9dc821049d375ed80d17db7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaadd20c9dc9dc821049d375ed80d17db7">&#9670;&nbsp;</a></span>pj_scan_get_quotes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_quotes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>begin_quotes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>end_quotes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>qsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get characters between quotes. If current input doesn't match begin_quote, syntax error will be thrown. Note that the resulting string will contain the enclosing quote.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">begin_quotes</td><td>The character array to begin the quotes. For example, the two characters " and '.
@param end_quotes    The character array to end the quotes. The position
                     found in the begin_quotes array will be used to match
                     the end quotes. So if the begin_quotes was the array
                     of "'&lt; the end_quotes should be "'&gt;. If begin_array matched the ' then the end_quotes will look for ' to match at the end. </td></tr>
    <tr><td class="paramname">qsize</td><td>The size of the begin_quotes and end_quotes arrays. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga0009cd4f93aa7d40264f1642b9697423" name="ga0009cd4f93aa7d40264f1642b9697423"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0009cd4f93aa7d40264f1642b9697423">&#9670;&nbsp;</a></span>pj_scan_get_unescape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_unescape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>spec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Just like <a class="el" href="group__PJ__SCAN.htm#gac7c79764159bd1c7999633bd6a37dd4f">pj_scan_get()</a>, but additionally performs unescaping when escaped ('') character is found. The input spec MUST NOT contain the specification for '' characted.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">spec</td><td>The spec to match input string. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga80f5b6901343bc8468531110ec79fb34" name="ga80f5b6901343bc8468531110ec79fb34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga80f5b6901343bc8468531110ec79fb34">&#9670;&nbsp;</a></span>pj_scan_get_until()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_until </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>spec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get characters from the scanner and move the scanner position until the current character matches the spec.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">spec</td><td>Get until the input match this spec. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga95b6fc805e37f18f3c724034f4a99c97" name="ga95b6fc805e37f18f3c724034f4a99c97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga95b6fc805e37f18f3c724034f4a99c97">&#9670;&nbsp;</a></span>pj_scan_get_until_ch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_until_ch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>until_char</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get characters from the scanner and move the scanner position until the current character matches until_char.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">until_char</td><td>Get until the input match this character. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga78902c701f9b2adf0f4ab467a5fd70d1" name="ga78902c701f9b2adf0f4ab467a5fd70d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga78902c701f9b2adf0f4ab467a5fd70d1">&#9670;&nbsp;</a></span>pj_scan_get_until_chr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_get_until_chr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>until_spec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get characters from the scanner and move the scanner position until the current character matches until_char.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">until_spec</td><td>Get until the input match any of these characters. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga34d97b1f4677695fad1e15b99d5a309f" name="ga34d97b1f4677695fad1e15b99d5a309f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga34d97b1f4677695fad1e15b99d5a309f">&#9670;&nbsp;</a></span>pj_scan_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>bufstart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>buflen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__SCAN.htm#ga3d4e819ff155eb7c132f099822fe7278">pj_syn_err_func_ptr</a>&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initialize the scanner. Note that the input string buffer MUST be NULL terminated and have length at least buflen+1 (buflen MUST NOT include the NULL terminator).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner to be initialized. </td></tr>
    <tr><td class="paramname">bufstart</td><td>The input buffer to scan, which must be NULL terminated. </td></tr>
    <tr><td class="paramname">buflen</td><td>The length of the input buffer, which normally is strlen(bufstart), hence not counting the NULL terminator. </td></tr>
    <tr><td class="paramname">options</td><td>Zero, or combination of PJ_SCAN_AUTOSKIP_WS or PJ_SCAN_AUTOSKIP_WS_HEADER </td></tr>
    <tr><td class="paramname">callback</td><td>Callback to be called when the scanner encounters syntax error condition. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga611ccc175b3cd21c51f16537930cc36d" name="ga611ccc175b3cd21c51f16537930cc36d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga611ccc175b3cd21c51f16537930cc36d">&#9670;&nbsp;</a></span>pj_scan_is_eof()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_is_eof </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Determine whether the EOF condition for the scanner has been met.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Non-zero if scanner is EOF. </dd></dl>

<p class="reference">References <a class="el" href="structpj__scanner.htm#af46cd462ce7424a4d30e760bcab44aa4">pj_scanner::curptr</a>, <a class="el" href="structpj__scanner.htm#a43b667606520bfe4320bfe774289fb25">pj_scanner::end</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="gae9c6d94b0224e4a38570d49ec3ddf3f0" name="gae9c6d94b0224e4a38570d49ec3ddf3f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae9c6d94b0224e4a38570d49ec3ddf3f0">&#9670;&nbsp;</a></span>pj_scan_peek()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_peek </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>spec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Peek strings in current position according to parameter spec, and return the strings in parameter out. The current scanner position will not be moved. If the scanner is already in EOF state, syntax error callback will be called thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">spec</td><td>The spec to match input string. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the character right after the peek-ed position or zero if there's no more characters. </dd></dl>

</div>
</div>
<a id="gad5597051a9f4b8943fbcd84bf519341f" name="gad5597051a9f4b8943fbcd84bf519341f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad5597051a9f4b8943fbcd84bf519341f">&#9670;&nbsp;</a></span>pj_scan_peek_n()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_peek_n </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Peek len characters in current position, and return them in out parameter. Note that whitespaces or newlines will be returned as it is, regardless of PJ_SCAN_AUTOSKIP_WS settings. If the character left is less than len, syntax error callback will be called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">len</td><td>Length to peek. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the character right after the peek-ed position or zero if there's no more characters. </dd></dl>

</div>
</div>
<a id="gaf7d8a05fc58cba38aed683eb65061492" name="gaf7d8a05fc58cba38aed683eb65061492"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf7d8a05fc58cba38aed683eb65061492">&#9670;&nbsp;</a></span>pj_scan_peek_until()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_peek_until </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__cis__t.htm">pj_cis_t</a> *&#160;</td>
          <td class="paramname"><em>spec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Peek strings in current position until spec is matched, and return the strings in parameter out. The current scanner position will not be moved. If the scanner is already in EOF state, syntax error callback will be called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">spec</td><td>The peeking will stop when the input match this spec. </td></tr>
    <tr><td class="paramname">out</td><td>String to store the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the character right after the peek-ed position. </dd></dl>

</div>
</div>
<a id="ga8f2a310cf5628903ebbde40ba37855c0" name="ga8f2a310cf5628903ebbde40ba37855c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8f2a310cf5628903ebbde40ba37855c0">&#9670;&nbsp;</a></span>pj_scan_restore_state()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_restore_state </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__scan__state.htm">pj_scan_state</a> *&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Restore the full scanner state. Note that this would not restore the string if application has modified it. This will only restore the scanner scanning position.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">state</td><td>State of the scanner. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga144d962bddcceae420a93c1fa1a5cfce" name="ga144d962bddcceae420a93c1fa1a5cfce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga144d962bddcceae420a93c1fa1a5cfce">&#9670;&nbsp;</a></span>pj_scan_save_state()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_save_state </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__scan__state.htm">pj_scan_state</a> *&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Save the full scanner state.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">state</td><td>Variable to store scanner's state. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga5c7066a94e2077bb288247c5ebd54047" name="ga5c7066a94e2077bb288247c5ebd54047"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5c7066a94e2077bb288247c5ebd54047">&#9670;&nbsp;</a></span>pj_scan_skip_line()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_skip_line </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Skip current line.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gad6d6fbcd5fb1177a2e6f99bbd292f392" name="gad6d6fbcd5fb1177a2e6f99bbd292f392"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad6d6fbcd5fb1177a2e6f99bbd292f392">&#9670;&nbsp;</a></span>pj_scan_skip_whitespace()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_scan_skip_whitespace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Manually skip whitespaces according to flag that was specified when the scanner was initialized.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga5c039498123b4d4b7a037b0d0f7d3d5a" name="ga5c039498123b4d4b7a037b0d0f7d3d5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5c039498123b4d4b7a037b0d0f7d3d5a">&#9670;&nbsp;</a></span>pj_scan_strcmp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_strcmp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Compare string in current position with the specified string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">s</td><td>The string to compare with. </td></tr>
    <tr><td class="paramname">len</td><td>Length of the string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>zero, &lt;0, or &gt;0 (just like strcmp()). </dd></dl>

</div>
</div>
<a id="gad64224d724bf7509204f13ce0488ce08" name="gad64224d724bf7509204f13ce0488ce08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad64224d724bf7509204f13ce0488ce08">&#9670;&nbsp;</a></span>pj_scan_stricmp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_stricmp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Case-less string comparison of current position with the specified string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">s</td><td>The string to compare with. </td></tr>
    <tr><td class="paramname">len</td><td>Length of the string to compare with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>zero, &lt;0, or &gt;0 (just like strcmp()). </dd></dl>

</div>
</div>
<a id="ga80c9fc097a837d9d54708460904bb217" name="ga80c9fc097a837d9d54708460904bb217"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga80c9fc097a837d9d54708460904bb217">&#9670;&nbsp;</a></span>pj_scan_stricmp_alnum()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_scan_stricmp_alnum </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__scanner.htm">pj_scanner</a> *&#160;</td>
          <td class="paramname"><em>scanner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Perform case insensitive string comparison of string in current position, knowing that the string to compare only consists of alphanumeric characters.</p>
<p >Note that unlike <a class="el" href="group__PJ__SCAN.htm#gad64224d724bf7509204f13ce0488ce08">pj_scan_stricmp</a>, this function can only return zero or -1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanner</td><td>The scanner. </td></tr>
    <tr><td class="paramname">s</td><td>The string to compare with. </td></tr>
    <tr><td class="paramname">len</td><td>Length of the string to compare with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>zero if equal or -1.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="elRef" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga9eafbfcc5e991749803c1e1b2f5e27b7">strnicmp_alnum</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gab812f5bf3536395fc0fbb2e4f0b5c025">pj_stricmp_alnum</a> </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB-UTIL Open Source, small footprint, and portable asynchronous/caching DNS resolver, text scanner, STUN client, and XML library<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
