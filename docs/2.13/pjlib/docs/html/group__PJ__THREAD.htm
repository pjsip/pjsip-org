<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Threads (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Threads<div class="ingroups"><a class="el" href="group__PJ__OS.htm">Operating System Dependent Functionality.</a></div></div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="define-members" name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:gad89d8163d860b36123d0b5213fe9f6c5"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gad89d8163d860b36123d0b5213fe9f6c5">PJ_THREAD_DESC_SIZE</a>&#160;&#160;&#160;(64)</td></tr>
<tr class="separator:gad89d8163d860b36123d0b5213fe9f6c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9af86900386496e4b75fdeafff9459e3"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga9af86900386496e4b75fdeafff9459e3">PJ_CHECK_STACK</a>()</td></tr>
<tr class="separator:ga9af86900386496e4b75fdeafff9459e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga45cdab0321622ec3cc2ae98b1dbf74c6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga45cdab0321622ec3cc2ae98b1dbf74c6">pj_thread_get_stack_max_usage</a>(thread)&#160;&#160;&#160;0</td></tr>
<tr class="separator:ga45cdab0321622ec3cc2ae98b1dbf74c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga025f7f1bed34d08768c3852faeb4be79"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga025f7f1bed34d08768c3852faeb4be79">pj_thread_get_stack_info</a>(thread,  f,  l)&#160;&#160;&#160;(*(f)=&quot;&quot;,*(l)=0)</td></tr>
<tr class="separator:ga025f7f1bed34d08768c3852faeb4be79"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga51407a7f0a22c4dd46c8bd92fe43d26a"><td class="memItemLeft" align="right" valign="top">typedef int()&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga51407a7f0a22c4dd46c8bd92fe43d26a">pj_thread_proc</a>(void *)</td></tr>
<tr class="separator:ga51407a7f0a22c4dd46c8bd92fe43d26a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga145dba91437211fe7b768573c14268bb"><td class="memItemLeft" align="right" valign="top">typedef long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a>[(64)]</td></tr>
<tr class="separator:ga145dba91437211fe7b768573c14268bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="enum-members" name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga8b8f2c300e02517d5890d9b461178088"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga8b8f2c300e02517d5890d9b461178088">pj_thread_create_flags</a> { <b>PJ_THREAD_SUSPENDED</b> = 1
 }</td></tr>
<tr class="separator:ga8b8f2c300e02517d5890d9b461178088"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gae6e779b7ef2349ff205841e249255bb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gae6e779b7ef2349ff205841e249255bb0">pj_getpid</a> (void)</td></tr>
<tr class="separator:gae6e779b7ef2349ff205841e249255bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b63533cf4f3ba0cba68cab49a22d722"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const char *thread_name, <a class="el" href="group__PJ__THREAD.htm#ga51407a7f0a22c4dd46c8bd92fe43d26a">pj_thread_proc</a> *proc, void *arg, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> stack_size, unsigned flags, <a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **thread)</td></tr>
<tr class="separator:ga7b63533cf4f3ba0cba68cab49a22d722"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga600d2f8baddfd78de3b6b60cce027a9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register</a> (const char *thread_name, <a class="el" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a> desc, <a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **thread)</td></tr>
<tr class="separator:ga600d2f8baddfd78de3b6b60cce027a9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab74a1091f1ddb68da4f8f599ae339a9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gaab74a1091f1ddb68da4f8f599ae339a9">pj_thread_is_registered</a> (void)</td></tr>
<tr class="separator:gaab74a1091f1ddb68da4f8f599ae339a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab0227ecc33b2d62994c8eefc8cb48f5c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gab0227ecc33b2d62994c8eefc8cb48f5c">pj_thread_get_prio</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:gab0227ecc33b2d62994c8eefc8cb48f5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73337ff87e56cd9f66b58e2bace3621e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga73337ff87e56cd9f66b58e2bace3621e">pj_thread_set_prio</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread, int prio)</td></tr>
<tr class="separator:ga73337ff87e56cd9f66b58e2bace3621e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga07df1826af4b9aec2f68a9e0e9d6512e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga07df1826af4b9aec2f68a9e0e9d6512e">pj_thread_get_prio_min</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:ga07df1826af4b9aec2f68a9e0e9d6512e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadacba7fac1f06c71dd3c3666386d73cc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gadacba7fac1f06c71dd3c3666386d73cc">pj_thread_get_prio_max</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:gadacba7fac1f06c71dd3c3666386d73cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59514413af30ee62a0eda89cc99459e0"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga59514413af30ee62a0eda89cc99459e0">pj_thread_get_os_handle</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:ga59514413af30ee62a0eda89cc99459e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76dceb0f22ce42050cff2cb83924c84c"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga76dceb0f22ce42050cff2cb83924c84c">pj_thread_get_name</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:ga76dceb0f22ce42050cff2cb83924c84c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga223e764be70bd61ab21a77c76be32783"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:ga223e764be70bd61ab21a77c76be32783"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga685932a4ed71905400aad42f653cf40b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga685932a4ed71905400aad42f653cf40b">pj_thread_this</a> (void)</td></tr>
<tr class="separator:ga685932a4ed71905400aad42f653cf40b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60d90ce08d2f7e92dcaa0443cf87912f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:ga60d90ce08d2f7e92dcaa0443cf87912f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5435f79ad044f9ce2113af311bf2b777"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr class="separator:ga5435f79ad044f9ce2113af311bf2b777"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad59cd6fd7390711758afcc0bde375d68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a> (unsigned msec)</td></tr>
<tr class="separator:gad59cd6fd7390711758afcc0bde375d68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >This module provides multithreading API.</p>
<h1><a class="anchor" id="pj_thread_examples_sec"></a>
Examples</h1>
<p >For examples, please see:</p><ul>
<li><a class="el" href="page_pjlib_thread_test.htm">Test: Thread Test</a></li>
<li><a class="el" href="page_pjlib_sleep_test.htm">Test: Sleep, Time, and Timestamp</a> </li>
</ul>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga9af86900386496e4b75fdeafff9459e3" name="ga9af86900386496e4b75fdeafff9459e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9af86900386496e4b75fdeafff9459e3">&#9670;&nbsp;</a></span>PJ_CHECK_STACK</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_CHECK_STACK</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p ><a class="el" href="group__PJ__THREAD.htm#ga9af86900386496e4b75fdeafff9459e3">PJ_CHECK_STACK()</a> macro is used to check the sanity of the stack. The OS implementation may check that no stack overflow occurs, and it also may collect statistic about stack usage. </p>

</div>
</div>
<a id="gad89d8163d860b36123d0b5213fe9f6c5" name="gad89d8163d860b36123d0b5213fe9f6c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad89d8163d860b36123d0b5213fe9f6c5">&#9670;&nbsp;</a></span>PJ_THREAD_DESC_SIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_THREAD_DESC_SIZE&#160;&#160;&#160;(64)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Size of thread struct. </p>

</div>
</div>
<a id="ga025f7f1bed34d08768c3852faeb4be79" name="ga025f7f1bed34d08768c3852faeb4be79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga025f7f1bed34d08768c3852faeb4be79">&#9670;&nbsp;</a></span>pj_thread_get_stack_info</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define pj_thread_get_stack_info</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">thread, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">f, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">l&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;(*(f)=&quot;&quot;,*(l)=0)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p ><a class="el" href="group__PJ__THREAD.htm#ga025f7f1bed34d08768c3852faeb4be79">pj_thread_get_stack_info()</a> for the thread </p>

</div>
</div>
<a id="ga45cdab0321622ec3cc2ae98b1dbf74c6" name="ga45cdab0321622ec3cc2ae98b1dbf74c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga45cdab0321622ec3cc2ae98b1dbf74c6">&#9670;&nbsp;</a></span>pj_thread_get_stack_max_usage</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define pj_thread_get_stack_max_usage</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">thread</td><td>)</td>
          <td>&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">
<p ><a class="el" href="group__PJ__THREAD.htm#ga45cdab0321622ec3cc2ae98b1dbf74c6">pj_thread_get_stack_max_usage()</a> for the thread </p>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ga145dba91437211fe7b768573c14268bb" name="ga145dba91437211fe7b768573c14268bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga145dba91437211fe7b768573c14268bb">&#9670;&nbsp;</a></span>pj_thread_desc</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef long pj_thread_desc[(64)]</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Thread structure, to thread's state when the thread is created by external or native API. </p>

</div>
</div>
<a id="ga51407a7f0a22c4dd46c8bd92fe43d26a" name="ga51407a7f0a22c4dd46c8bd92fe43d26a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga51407a7f0a22c4dd46c8bd92fe43d26a">&#9670;&nbsp;</a></span>pj_thread_proc</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int() pj_thread_proc(void *)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Type of thread entry function. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="ga8b8f2c300e02517d5890d9b461178088" name="ga8b8f2c300e02517d5890d9b461178088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8b8f2c300e02517d5890d9b461178088">&#9670;&nbsp;</a></span>pj_thread_create_flags</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__THREAD.htm#ga8b8f2c300e02517d5890d9b461178088">pj_thread_create_flags</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Thread creation flags:</p><ul>
<li>PJ_THREAD_SUSPENDED: specify that the thread should be created suspended. </li>
</ul>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="gae6e779b7ef2349ff205841e249255bb0" name="gae6e779b7ef2349ff205841e249255bb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae6e779b7ef2349ff205841e249255bb0">&#9670;&nbsp;</a></span>pj_getpid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> pj_getpid </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get process ID. </p><dl class="section return"><dt>Returns</dt><dd>process ID. </dd></dl>

</div>
</div>
<a id="ga7b63533cf4f3ba0cba68cab49a22d722" name="ga7b63533cf4f3ba0cba68cab49a22d722"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7b63533cf4f3ba0cba68cab49a22d722">&#9670;&nbsp;</a></span>pj_thread_create()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>thread_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__THREAD.htm#ga51407a7f0a22c4dd46c8bd92fe43d26a">pj_thread_proc</a> *&#160;</td>
          <td class="paramname"><em>proc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>stack_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **&#160;</td>
          <td class="paramname"><em>thread</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create a new thread.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The memory pool from which the thread record will be allocated from. </td></tr>
    <tr><td class="paramname">thread_name</td><td>The optional name to be assigned to the thread. </td></tr>
    <tr><td class="paramname">proc</td><td>Thread entry function. </td></tr>
    <tr><td class="paramname">arg</td><td>Argument to be passed to the thread entry function. </td></tr>
    <tr><td class="paramname">stack_size</td><td>The size of the stack for the new thread, or ZERO or PJ_THREAD_DEFAULT_STACK_SIZE to let the library choose the reasonable size for the stack. For some systems, the stack will be allocated from the pool, so the pool must have suitable capacity. </td></tr>
    <tr><td class="paramname">flags</td><td>Flags for thread creation, which is bitmask combination from enum pj_thread_create_flags. </td></tr>
    <tr><td class="paramname">thread</td><td>Pointer to hold the newly created thread.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the error code. </dd></dl>

</div>
</div>
<a id="ga5435f79ad044f9ce2113af311bf2b777" name="ga5435f79ad044f9ce2113af311bf2b777"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5435f79ad044f9ce2113af311bf2b777">&#9670;&nbsp;</a></span>pj_thread_destroy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Destroy thread and release resources allocated for the thread. However, the memory allocated for the pj_thread_t itself will only be released when the pool used to create the thread is destroyed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>zero on success. </dd></dl>

</div>
</div>
<a id="ga76dceb0f22ce42050cff2cb83924c84c" name="ga76dceb0f22ce42050cff2cb83924c84c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga76dceb0f22ce42050cff2cb83924c84c">&#9670;&nbsp;</a></span>pj_thread_get_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * pj_thread_get_name </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get thread name.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Thread name as null terminated string. </dd></dl>

</div>
</div>
<a id="ga59514413af30ee62a0eda89cc99459e0" name="ga59514413af30ee62a0eda89cc99459e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga59514413af30ee62a0eda89cc99459e0">&#9670;&nbsp;</a></span>pj_thread_get_os_handle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * pj_thread_get_os_handle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Return native handle from pj_thread_t for manipulation using native OS APIs.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>PJLIB thread descriptor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Native thread handle. For example, when the backend thread uses pthread, this function will return pointer to pthread_t, and on Windows, this function will return HANDLE. </dd></dl>

</div>
</div>
<a id="gab0227ecc33b2d62994c8eefc8cb48f5c" name="gab0227ecc33b2d62994c8eefc8cb48f5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab0227ecc33b2d62994c8eefc8cb48f5c">&#9670;&nbsp;</a></span>pj_thread_get_prio()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_thread_get_prio </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get thread priority value for the thread.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>Thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Thread priority value, or -1 on error. </dd></dl>

</div>
</div>
<a id="gadacba7fac1f06c71dd3c3666386d73cc" name="gadacba7fac1f06c71dd3c3666386d73cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadacba7fac1f06c71dd3c3666386d73cc">&#9670;&nbsp;</a></span>pj_thread_get_prio_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_thread_get_prio_max </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the highest priority value available for this thread.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>Thread handle. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Minimum thread priority value, or -1 on error. </dd></dl>

</div>
</div>
<a id="ga07df1826af4b9aec2f68a9e0e9d6512e" name="ga07df1826af4b9aec2f68a9e0e9d6512e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga07df1826af4b9aec2f68a9e0e9d6512e">&#9670;&nbsp;</a></span>pj_thread_get_prio_min()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_thread_get_prio_min </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the lowest priority value available for this thread.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>Thread handle. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Minimum thread priority value, or -1 on error. </dd></dl>

</div>
</div>
<a id="gaab74a1091f1ddb68da4f8f599ae339a9" name="gaab74a1091f1ddb68da4f8f599ae339a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaab74a1091f1ddb68da4f8f599ae339a9">&#9670;&nbsp;</a></span>pj_thread_is_registered()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pj_thread_is_registered </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if this thread has been registered to PJLIB.</p>
<dl class="section return"><dt>Returns</dt><dd>Non-zero if it is registered. </dd></dl>

</div>
</div>
<a id="ga60d90ce08d2f7e92dcaa0443cf87912f" name="ga60d90ce08d2f7e92dcaa0443cf87912f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga60d90ce08d2f7e92dcaa0443cf87912f">&#9670;&nbsp;</a></span>pj_thread_join()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_join </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Join thread, and block the caller thread until the specified thread exits. If it is called from within the thread itself, it will return immediately with failure status. If the specified thread has already been dead, or it does not exist, the function will return immediately with successful status.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success. </dd></dl>

</div>
</div>
<a id="ga600d2f8baddfd78de3b6b60cce027a9a" name="ga600d2f8baddfd78de3b6b60cce027a9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga600d2f8baddfd78de3b6b60cce027a9a">&#9670;&nbsp;</a></span>pj_thread_register()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_register </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>thread_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a>&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **&#160;</td>
          <td class="paramname"><em>thread</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Register a thread that was created by external or native API to PJLIB. This function must be called in the context of the thread being registered. When the thread is created by external function or API call, it must be 'registered' to PJLIB using <a class="el" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register()</a>, so that it can cooperate with PJLIB's framework. During registration, some data needs to be maintained, and this data must remain available during the thread's lifetime.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread_name</td><td>The optional name to be assigned to the thread. </td></tr>
    <tr><td class="paramname">desc</td><td>Thread descriptor, which must be available throughout the lifetime of the thread. </td></tr>
    <tr><td class="paramname">thread</td><td>Pointer to hold the created thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the error code. </dd></dl>

</div>
</div>
<a id="ga223e764be70bd61ab21a77c76be32783" name="ga223e764be70bd61ab21a77c76be32783"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga223e764be70bd61ab21a77c76be32783">&#9670;&nbsp;</a></span>pj_thread_resume()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_resume </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Resume a suspended thread.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>zero on success. </dd></dl>

</div>
</div>
<a id="ga73337ff87e56cd9f66b58e2bace3621e" name="ga73337ff87e56cd9f66b58e2bace3621e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga73337ff87e56cd9f66b58e2bace3621e">&#9670;&nbsp;</a></span>pj_thread_set_prio()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_set_prio </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&#160;</td>
          <td class="paramname"><em>thread</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prio</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set the thread priority. The priority value must be in the priority value range, which can be retrieved with <a class="el" href="group__PJ__THREAD.htm#ga07df1826af4b9aec2f68a9e0e9d6512e">pj_thread_get_prio_min()</a> and <a class="el" href="group__PJ__THREAD.htm#gadacba7fac1f06c71dd3c3666386d73cc">pj_thread_get_prio_max()</a> functions.</p>
<p >For Android, this function will only set the priority of the calling thread (the thread param must be set to NULL or the calling thread handle).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">thread</td><td>Thread handle. </td></tr>
    <tr><td class="paramname">prio</td><td>New priority to be set to the thread.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success or the error code. </dd></dl>

</div>
</div>
<a id="gad59cd6fd7390711758afcc0bde375d68" name="gad59cd6fd7390711758afcc0bde375d68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad59cd6fd7390711758afcc0bde375d68">&#9670;&nbsp;</a></span>pj_thread_sleep()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_sleep </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>msec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Put the current thread to sleep for the specified miliseconds.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">msec</td><td>Miliseconds delay.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>zero if successfull. </dd></dl>

</div>
</div>
<a id="ga685932a4ed71905400aad42f653cf40b" name="ga685932a4ed71905400aad42f653cf40b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga685932a4ed71905400aad42f653cf40b">&#9670;&nbsp;</a></span>pj_thread_this()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> * pj_thread_this </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the current thread.</p>
<dl class="section return"><dt>Returns</dt><dd>Thread handle of current thread. </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
