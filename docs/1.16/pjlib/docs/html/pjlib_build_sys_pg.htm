<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Building, and Installing PJLIB (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Building, and Installing PJLIB </h1>  </div>
</div>
<div class="contents">
<h2><a class="anchor" id="build_sys_install_sec"></a>
Build and Installation</h2>
<dl class="note"><dt><b>Note:</b></dt><dd><b>The most up-to-date information on building and installing PJLIB should be found in the website, under "Getting Started" document. More over, the new PJLIB build system is now based on autoconf, so some of the information here might not be relevant anymore (although most still are, since the autoconf script still use the old Makefile system as the backend).</b></dd></dl>
<h3><a class="anchor" id="build_sys_install_win32_sec"></a>
Visual Studio</h3>
<p>The PJLIB Visual Studio workspace supports the building of PJLIB for Win32 target. Although currently only the Visual Studio 6 Workspace is actively maintained, developers with later version of Visual Studio can easily imports VS6 workspace into their IDE.</p>
<p>To start building PJLIB projects with Visual Studio 6 or later, open the <em>workspace</em> file in the corresponding <b><code>build</code> directory</b>. You have several choices on which <em>dsw</em> file to open: </p>
<div class="fragment"><pre class="fragment">
  $PJPROJECT/pjlib/build/pjlib.dsw
  $PJPROJECT/pjsip/build/pjsip.dsw
 ..etc
 </pre></div><p>The easiest way is to open <code>pjsip_apps.dsw</code> file in <b><code>$PJPROJECT/pjsip-apps/build</code> directory</b>, and build pjsua project or the samples project. However this will not build the complete projects. For example, the PJLIB test is not included in this workspace. To build the complete projects, you must open and build each <em>dsw</em> file in <code>build</code> directory in each subprojects. For example, to open the complete PJLIB workspace, open <code>pjlib.dsw</code> in <code>$PJPROJECT/pjlib/build</code> directory.</p>
<h4><a class="anchor" id="config_site_create_vc_sec"></a>
Create config_site.h</h4>
<p>The file <code><b>$PJPROJECT/pjlib/include/pj/config_site.h</b></code> is supposed to contain configuration that is specific to your site/target. This file is not part of PJLIB, so you must create it yourself. Normally you just need to create a blank file.</p>
<p>The reason why it's not included in PJLIB is so that you would not accidently overwrite your site configuration.</p>
<p>If you fail to do this, Visual C will complain with error like:</p>
<p><b>"fatal error C1083: Cannot open include file: 'pj/config_site.h': No such file 
 or directory"</b>.</p>
<h4><a class="anchor" id="build_vc_subsubsec"></a>
Build the Projects</h4>
<p>Just hit the build button!</p>
<h3><a class="anchor" id="build_sys_install_unix_sec"></a>
Make System</h3>
<p>For other targets, PJLIB provides a rather comprehensive build system that uses GNU <em>make</em> (and only GNU <em>make</em> will work). Currently, the build system supports building * PJLIB for these targets:</p>
<ul>
<li>i386/Win32/mingw</li>
<li>i386/Linux</li>
<li>i386/Linux (kernel)</li>
<li>alpha/linux</li>
<li>sparc/SunOS</li>
<li>etc..</li>
</ul>
<h4><a class="anchor" id="build_req_sec"></a>
Requirements</h4>
<p>In order to use the <code>make</code> based build system, you MUST have:</p>
<ul>
<li><b>GNU make</b> <br/>
 The Makefiles heavily utilize GNU make commands which most likely are not available in other <code>make</code> system.</li>
<li><b>bash</b> shell is recommended. <br/>
 Specificly, there is a command <code>"echo -n"</code> which may not work in other shells. This command is used when generating dependencies (<code>make dep</code>) and it's located in <code>$PJPROJECT/build/rules.mak</code>.</li>
<li><b>ar</b>, <b>ranlib</b> from GNU binutils <br/>
 In your system has different <code>ar</code> or <code>ranlib</code> (e.g. they may have been installed as <code>gar</code> and <code>granlib</code>), then either you create the relevant symbolic links, <b>or</b> modify <code>$PJPROJECT/build/cc-gcc.mak</code> and rename <code>ar</code> and <code>ranlib</code> to the appropriate names.</li>
<li><b>gcc</b> to generate dependency. <br/>
 Currently the build system uses <code>"gcc -MM"</code> to generate build dependencies. If <code>gcc</code> is not desired to generate dependency, then either you don't run <code>make dep</code>, <b>or</b> edit <code>$PJPROJECT/build/rules.mak</code> to calculate dependency using your prefered method. (And let me know when you do so so that I can update the file. :) )</li>
</ul>
<h4><a class="anchor" id="build_overview_sec"></a>
Building the Project</h4>
<p>Generally, steps required to build the PJLIB are:</p>
<div class="fragment"><pre class="fragment">
   $ cd /home/user/pjproject
   $ ./configure
   $ touch pjlib/include/pj/config_site.h
   $ make dep
   $ make
 </pre></div><p>The above process will build all static libraries and all applications.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>the <code>configure</code> script is not a proper autoconf script, but rather a simple shell script to detect current host. This script currently does not support cross-compilation.</dd>
<dd>
For Linux kernel target, there are additional steps required, which will be explained in section <a class="el" href="pjlib_build_sys_pg.htm#linux_kern_target_subsec">Linux Kernel Target</a>.</dd></dl>
<h4><a class="anchor" id="build_mak_sec"></a>
Cross Compilation</h4>
<p>For cross compilation, you will need to edit the <code>build.mak</code> file in <code>$PJPROJECT</code> root directory manually. Please see <b>README-configure</b> file in the root directory for more information.</p>
<p>For Linux kernel target, you are also required to declare the following variables in this <a href="file:">file:</a></p>
<ul>
<li><code>KERNEL_DIR:</code> full path of kernel source tree.</li>
<li><code>KERNEL_ARCH:</code> kernel ARCH options (e.g. "ARCH=um"), or leave blank for default.</li>
<li><code>PJPROJECT_DIR:</code> full path of PJPROJECT source tree.</li>
</ul>
<p>Apart from these, there are also additional steps required to build Linux kernel target, which will be explained in <a class="el" href="pjlib_build_sys_pg.htm#linux_kern_target_subsec">Linux Kernel Target</a>.</p>
<h4><a class="anchor" id="build_dir_sec"></a>
Files in "build" Directory</h4>
<p>The <code>*.mak</code> files in <code>$PJPROJECT/build</code> directory are used to specify the configuration for the specified compiler, target machine target operating system, and host options. These files will be executed (included) by <em>make</em> during building process, depending on the values specified in <b>$PJPROJECT/build.mak</b> file.</p>
<p>Normally you don't need to edit these files, except when you're porting PJLIB to new target.</p>
<p>Below are the description of some files in this directory:</p>
<ul>
<li><code>rules.mak</code>: contains generic rules always included during make.</li>
<li><code>cc-gcc.mak</code>: rules when gcc is used for compiler.</li>
<li><code>cc-vc.mak</code>: rules when MSVC compiler is used.</li>
<li><code>host-mingw.mak</code>: rules for building in mingw host.</li>
<li><code>host-unix.mak</code>: rules for building in Unix/Posix host.</li>
<li><code>host-win32.mak</code>: rules for building in Win32 command console (only valid when VC is used).</li>
<li><code>m-i386.mak</code>: rules when target machine is an i386 processor.</li>
<li><code>m-m68k.mak</code>: rules when target machine is an m68k processor.</li>
<li><code>os-linux.mak</code>: rules when target OS is Linux.</li>
<li><code>os-linux-kernel.mak</code>: rules when PJLIB is to be build as part of Linux kernel.</li>
<li><code>os-win32.mak</code>: rules when target OS is Win32.</li>
</ul>
<h4><a class="anchor" id="config_site_create_sec"></a>
Create config_site.h</h4>
<p>The file <code><b>$PJPROJECT/pjlib/include/pj/config_site.h</b></code> is supposed to contain configuration that is specific to your site/target. This file is not part of PJLIB, so you must create it yourself.</p>
<p>The reason why it's not included in PJLIB is so that you would not accidently overwrite your site configuration.</p>
<h4><a class="anchor" id="invoking_make_sec"></a>
Invoking make</h4>
<p>Normally, <em>make</em> is invoked in <code>build</code> directory under each project. For example, to build PJLIB, you would invoke <em>make</em> in <code>$PJPROJECT/pjlib/build</code> directory like below:</p>
<div class="fragment"><pre class="fragment">
   $ cd pjlib/build
   $ make
 </pre></div><p>Alternatively you may invoke <code>make</code> in <code>$PJPROJECT</code> directory, to build all projects under that directory (e.g. PJLIB, PJSIP, etc.).</p>
<h4><a class="anchor" id="linux_kern_target_subsec"></a>
Linux Kernel Target</h4>
<dl class="note"><dt><b>Note:</b></dt><dd><b>BUILDING APPLICATIONS IN LINUX KERNEL MODE IS A VERY DANGEROUS BUSINESS. YOU MAY CRASH THE WHOLE OF YOUR SYSTEM, CORRUPT YOUR HARDISK, ETC. PJLIB KERNEL MODULES ARE STILL IN EXPERIMENTAL PHASE. DO NOT RUN IT IN PRODUCTION SYSTEMS OR OTHER SYSTEMS WHERE RISK OF LOSS OF DATA IS NOT ACCEPTABLE. YOU HAVE BEEN WARNED.</b></dd>
<dd>
<b>User Mode Linux (UML)</b> provides excellent way to experiment with Linux kernel without risking the stability of the host system. See <a href="http://user-mode-linux.sourceforge.net">http://user-mode-linux.sourceforge.net</a> for details.</dd>
<dd>
I only use <b>UML</b> to experiment with PJLIB kernel modules. <b>I wouldn't be so foolish to use my host Linux machine to experiment with this.</b></dd>
<dd>
You have been warned.</dd></dl>
<p>For building PJLIB for Linux kernel target, there are additional steps required. In general, the additional tasks are:</p>
<ul>
<li>Declare some more variables in <b><code>build.mak</code></b> file (this has been explained in <a class="el" href="pjlib_build_sys_pg.htm#build_mak_sec">Cross Compilation</a> above).</li>
</ul>
<p>Perform these two small modifications in kernel source tree.</p>
<p>There are two small modification need to be applied to the kernel tree.</p>
<p><b>1. Edit <code>Makefile</code> in kernel root source tree.</b></p>
<p>Add the following lines at the end of the <code>Makefile</code> in your <code>$KERNEL_SRC</code> dir: </p>
<div class="fragment"><pre class="fragment">
script:
       $(SCRIPT)
 </pre></div><dl class="note"><dt><b>Note:</b></dt><dd>Remember to replace spaces with <b>tab</b> in the Makefile.</dd></dl>
<p>The modification above is needed to capture kernel's <code>$CFLAGS</code> and <code>$CFLAGS_MODULE</code> which will be used for PJLIB's compilation.</p>
<p><b>2. Add Additional Exports.</b></p>
<p>We need the kernel to export some more symbols for our use. So we declare the additional symbols to be exported in <code>extra-exports.c</code> file, and add a this file to be compiled into the kernel:</p>
<ul>
<li>Copy the file <code>extra-exports.c</code> from <code>pjlib/src/pj</code> directory to <code>$KERNEL_SRC/kernel/</code> directory.</li>
<li>Edit <code>Makefile</code> in that directory, and add this line somewhere after the declaration of that variable: <div class="fragment"><pre class="fragment">
obj-y   += extra-exports.o
 </pre></div></li>
</ul>
<p>To illustrate what have been done in your kernel source tree, below is screenshot of my kernel source tree _after_ the modification.</p>
<div class="fragment"><pre class="fragment">
[root@vpc-linux linux-2.6.7]# pwd
/usr/src/linux-2.6.7
[root@vpc-linux linux-2.6.7]# 
[root@vpc-linux linux-2.6.7]# 
[root@vpc-linux linux-2.6.7]# tail Makefile 

endif   # skip-makefile

FORCE:

.PHONY: script

script:
        $(SCRIPT)

[root@vpc-linux linux-2.6.7]# 
[root@vpc-linux linux-2.6.7]# 
[root@vpc-linux linux-2.6.7]# head kernel/extra-exports.c 
#include &lt;linux/module.h&gt;
#include &lt;linux/syscalls.h&gt;

EXPORT_SYMBOL(sys_select);

EXPORT_SYMBOL(sys_epoll_create);
EXPORT_SYMBOL(sys_epoll_ctl);
EXPORT_SYMBOL(sys_epoll_wait);

EXPORT_SYMBOL(sys_socket);
[root@vpc-linux linux-2.6.7]# 
[root@vpc-linux linux-2.6.7]# 
[root@vpc-linux linux-2.6.7]# head -15 kernel/Makefile 
#
# Makefile for the linux kernel.
#

obj-y     = sched.o fork.o exec_domain.o panic.o printk.o profile.o \
            exit.o itimer.o time.o softirq.o resource.o \
            sysctl.o capability.o ptrace.o timer.o user.o \
            signal.o sys.o kmod.o workqueue.o pid.o \
            rcupdate.o intermodule.o extable.o params.o posix-timers.o \
            kthread.o

obj-y   +=  extra-exports.o

obj-$(CONFIG_FUTEX) += futex.o
obj-$(CONFIG_GENERIC_ISA_DMA) += dma.o
[root@vpc-linux linux-2.6.7]# 

 </pre></div><p>Then you must rebuild the kernel. If you fail to do this, you won't be able to <b>insmod</b> pjlib.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>You will see a lots of warning messages during pjlib-test compilation. The warning messages complain about unresolved symbols which are defined in pjlib module. You can safely ignore these warnings. However, you can not ignore warnings about non-pjlib unresolved symbols.</dd></dl>
<h3><a class="anchor" id="makefile_explained_sec"></a>
Makefile Explained</h3>
<p>The <em>Makefile</em> for each project (e.g. PJLIB, PJSIP, etc) should be very similar in the contents. The Makefile is located under <code>build</code> directory in each project subdir.</p>
<h4><a class="anchor" id="pjlib_makefile_subsec"></a>
PJLIB Makefile.</h4>
<p>Below is PJLIB's Makefile:</p>
<div class="fragment"><pre class="fragment">include ../../build.mak
include ../../version.mak
include $(PJDIR)/build/common.mak

RULES_MAK := $(PJDIR)/build/rules.mak


export PJLIB_LIB := ../lib/libpj-$(TARGET_NAME)$(LIBEXT)

<span class="preprocessor">###############################################################################</span>
<span class="preprocessor"></span><span class="preprocessor"># Gather all flags.</span>
<span class="preprocessor"></span><span class="preprocessor">#</span>
<span class="preprocessor"></span>export _CFLAGS  := $(CC_CFLAGS) $(OS_CFLAGS) $(HOST_CFLAGS) $(M_CFLAGS) \
                   $(CFLAGS) $(CC_INC)../include
export _CXXFLAGS:= $(_CFLAGS) $(CC_CXXFLAGS) $(OS_CXXFLAGS) $(M_CXXFLAGS) \
                   $(HOST_CXXFLAGS) $(CXXFLAGS)
export _LDFLAGS := $(subst /,$(HOST_PSEP),$(PJLIB_LIB)) \
                   $(CC_LDFLAGS) $(OS_LDFLAGS) $(M_LDFLAGS) $(HOST_LDFLAGS) \
                   $(LDFLAGS) 

<span class="preprocessor">###############################################################################</span>
<span class="preprocessor"></span><span class="preprocessor"># Defines for building PJLIB library</span>
<span class="preprocessor"></span><span class="preprocessor">#</span>
<span class="preprocessor"></span>export PJLIB_SRCDIR = ../src/pj
export PJLIB_OBJS += $(OS_OBJS) $(M_OBJS) $(CC_OBJS) $(HOST_OBJS) \
        activesock.o array.o config.o ctype.o errno.o except.o fifobuf.o \
        guid.o hash.o ip_helper_generic.o list.o lock.o log.o os_time_common.o \
        os_info.o pool.o pool_buf.o pool_caching.o pool_dbg.o rand.o \
        rbtree.o sock_common.o sock_qos_common.o sock_qos_bsd.o \
        ssl_sock_common.o ssl_sock_ossl.o ssl_sock_dump.o \
        <span class="keywordtype">string</span>.o timer.o types.o
export PJLIB_CFLAGS += $(_CFLAGS)

###############################################################################
# Defines <span class="keywordflow">for</span> building test application
#
export TEST_SRCDIR = ../src/pjlib-test
export TEST_OBJS += activesock.o atomic.o echo_clt.o errno.o exception.o \
                    fifobuf.o file.o hash_test.o ioq_perf.o ioq_udp.o \
                    ioq_unreg.o ioq_tcp.o \
                    list.o mutex.o os.o pool.o pool_perf.o rand.o rbtree.o \
                    select.o sleep.o sock.o sock_perf.o ssl_sock.o \
                    <span class="keywordtype">string</span>.o test.o thread.o timer.o timestamp.o \
                    udp_echo_srv_sync.o udp_echo_srv_ioqueue.o \
                    util.o
export TEST_CFLAGS += $(_CFLAGS)
export TEST_LDFLAGS += $(_LDFLAGS)
export TEST_EXE := ../bin/pjlib-test-$(TARGET_NAME)$(HOST_EXE)

        
export CC_OUT CC AR RANLIB HOST_MV HOST_RM HOST_RMDIR HOST_MKDIR OBJEXT LD LDOUT 
###############################################################################
# Main entry
#
# $(TARGET) is defined in os-$(OS_NAME).mak file in current directory.
#

all: $(TARGETS)

doc:
        cd .. &amp;&amp; rm -rf docs/$(<a class="code" href="config_8h.htm#ada43005aa623e3c95e85818075efe3af">PJ_VERSION</a>) &amp;&amp; doxygen docs/doxygen.cfg
        @<span class="keywordflow">if</span> [ -n <span class="stringliteral">&quot;$(WWWDIR)&quot;</span> ] &amp;&amp; ! [ -d <span class="stringliteral">&quot;$(WWWDIR)/docs/$(PJ_VERSION)/pjlib/docs/html&quot;</span> ] ; then \
                echo <span class="stringliteral">&quot;Creating docs/$(PJ_VERSION)/pjlib/docs/html&quot;</span> ; \
                mkdir -p $(WWWDIR)/docs/$(<a class="code" href="config_8h.htm#ada43005aa623e3c95e85818075efe3af">PJ_VERSION</a>)/pjlib/docs/html ; \
        fi 
        @<span class="keywordflow">if</span> [ -n <span class="stringliteral">&quot;$(WWWDIR)&quot;</span> ] &amp;&amp; [ -d <span class="stringliteral">&quot;$(WWWDIR)/docs/$(PJ_VERSION)/pjlib/docs/html&quot;</span> ] ; then \
                echo <span class="stringliteral">&quot;Copying docs/$(PJ_VERSION) to $(WWWDIR)/docs/$(PJ_VERSION)/pjlib/docs/html..&quot;</span> ; \
                cp -v -a ../docs/$(<a class="code" href="config_8h.htm#ada43005aa623e3c95e85818075efe3af">PJ_VERSION</a>)/html<span class="comment">/* $(WWWDIR)/docs/$(PJ_VERSION)/pjlib/docs/html/ ; \</span>
<span class="comment">        fi</span>
<span class="comment">print:</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=PJLIB app=pjlib print_lib</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=TEST app=pjlib-test print_bin</span>
<span class="comment">        </span>
<span class="comment">depend: ../include/pj/config_site.h</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=PJLIB app=pjlib depend</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=TEST app=pjlib-test depend</span>
<span class="comment">        echo &#39;$(TEST_EXE): $(PJLIB_LIB)&#39; &gt;&gt; .pjlib-test-$(TARGET_NAME).depend</span>
<span class="comment"></span>
<span class="comment"></span>
<span class="comment">.PHONY: dep depend pjlib pjlib-test clean realclean distclean</span>
<span class="comment"></span>
<span class="comment">dep: depend</span>
<span class="comment"></span>
<span class="comment">pjlib: ../include/pj/config_site.h</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=PJLIB app=pjlib $(PJLIB_LIB)</span>
<span class="comment"></span>
<span class="comment">../include/pj/config_site.h:</span>
<span class="comment">        touch ../include/pj/config_site.h</span>
<span class="comment">        </span>
<span class="comment">pjlib-test: pjlib</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=TEST app=pjlib-test $(TEST_EXE)</span>
<span class="comment"></span>
<span class="comment">.PHONY: ../lib/pjlib.ko</span>
<span class="comment">../lib/pjlib.ko:</span>
<span class="comment">        echo Making $@</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=PJLIB app=pjlib $@</span>
<span class="comment"></span>
<span class="comment">.PHONY: ../lib/pjlib-test.ko</span>
<span class="comment">../lib/pjlib-test.ko:</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=TEST app=pjlib-test $@</span>
<span class="comment"></span>
<span class="comment">clean:</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=PJLIB app=pjlib clean</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=TEST app=pjlib-test clean</span>
<span class="comment"></span>
<span class="comment">realclean:</span>
<span class="comment">        $(subst @@,$(subst /,$(HOST_PSEP),.pjlib-$(TARGET_NAME).depend),$(HOST_RMR))</span>
<span class="comment">        $(subst @@,$(subst /,$(HOST_PSEP),.pjlib-test-$(TARGET_NAME).depend),$(HOST_RMR))</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=PJLIB app=pjlib realclean</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=TEST app=pjlib-test realclean</span>
<span class="comment"></span>
<span class="comment">distclean: realclean</span>
<span class="comment"></span>
<span class="comment">gcov-report:</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=PJLIB app=pjlib gcov-report</span>
<span class="comment">        $(MAKE) -f $(RULES_MAK) APP=TEST app=pjlib-test gcov-report</span>
<span class="comment"></span>
</pre></div><h4><a class="anchor" id="pjlib_os_makefile_subsec"></a>
PJLIB os-linux.mak.</h4>
<p>Below is file <code><b>os-linux.mak</b></code> file in <code>$PJPROJECT/pjlib/build</code> directory, which is OS specific configuration file for Linux target that is specific for PJLIB project. For <b>global</b> OS specific configuration, please see <code>$PJPROJECT/build/os-*.mak</code>.</p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">#</span>
<span class="preprocessor"></span><span class="preprocessor"># OS specific configuration for Linux OS target. </span>
<span class="preprocessor"></span><span class="preprocessor">#</span>
<span class="preprocessor"></span>
<span class="preprocessor">#</span>
<span class="preprocessor"></span><span class="preprocessor"># PJLIB_OBJS specified here are object files to be included in PJLIB</span>
<span class="preprocessor"></span><span class="preprocessor"># (the library) for this specific operating system. Object files common </span>
<span class="preprocessor"></span><span class="preprocessor"># to all operating systems should go in Makefile instead.</span>
<span class="preprocessor"></span><span class="preprocessor">#</span>
<span class="preprocessor"></span>export PJLIB_OBJS +=    addr_resolv_sock.o file_access_unistd.o \
                        file_io_ansi.o guid_simple.o \
                        log_writer_stdout.o os_core_unix.o \
                        os_error_unix.o os_time_unix.o \
                        os_timestamp_common.o os_timestamp_posix.o \
                        pool_policy_malloc.o sock_bsd.o sock_select.o

ifeq (epoll,$(LINUX_POLL))
export PJLIB_OBJS += ioqueue_epoll.o
else
export PJLIB_OBJS += ioqueue_select.o 
endif

<span class="preprocessor">#</span>
<span class="preprocessor"></span><span class="preprocessor"># TEST_OBJS are operating system specific object files to be included in</span>
<span class="preprocessor"></span><span class="preprocessor"># the test application.</span>
<span class="preprocessor"></span><span class="preprocessor">#</span>
<span class="preprocessor"></span>export TEST_OBJS +=     main.o

<span class="preprocessor">#</span>
<span class="preprocessor"></span><span class="preprocessor"># Additional LDFLAGS for pjlib-test</span>
<span class="preprocessor"></span><span class="preprocessor">#</span>
<span class="preprocessor"></span>export TEST_LDFLAGS += -lm

<span class="preprocessor">#</span>
<span class="preprocessor"></span><span class="preprocessor"># TARGETS are make targets in the Makefile, to be executed for this given</span>
<span class="preprocessor"></span><span class="preprocessor"># operating system.</span>
<span class="preprocessor"></span><span class="preprocessor">#</span>
<span class="preprocessor"></span>export TARGETS      =   pjlib pjlib-test

</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
