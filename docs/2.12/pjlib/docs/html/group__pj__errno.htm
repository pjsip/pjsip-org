<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Error Subsystem (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#groups">Modules</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Error Subsystem</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem:group__pj__errnum"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errnum.htm">PJLIB's Own Error Codes</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga314a8edfdcec54a086a401e97b5b0bd0"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga314a8edfdcec54a086a401e97b5b0bd0">PJ_ERR_MSG_SIZE</a>&#160;&#160;&#160;80</td></tr>
<tr class="separator:ga314a8edfdcec54a086a401e97b5b0bd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3663b3835c7fd8a7bac1ce0a67e3ddcc"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga3663b3835c7fd8a7bac1ce0a67e3ddcc">PJ_PERROR_TITLE_BUF_SIZE</a>&#160;&#160;&#160;120</td></tr>
<tr class="separator:ga3663b3835c7fd8a7bac1ce0a67e3ddcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacb73514c3158bdeda93488e8624e7b42"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR</a>(level,  arg)</td></tr>
<tr class="separator:gacb73514c3158bdeda93488e8624e7b42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc85d9323301650f961ae38e689fefcd"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#gacc85d9323301650f961ae38e689fefcd">PJ_RETURN_OS_ERROR</a>(os_code)</td></tr>
<tr class="separator:gacc85d9323301650f961ae38e689fefcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf21ec2038ae010661eb50c56696278c9"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#gaf21ec2038ae010661eb50c56696278c9">PJ_STATUS_FROM_OS</a>(e)</td></tr>
<tr class="separator:gaf21ec2038ae010661eb50c56696278c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0ee132edc83254a01c60d7ece4499032"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga0ee132edc83254a01c60d7ece4499032">PJ_STATUS_TO_OS</a>(e)</td></tr>
<tr class="separator:ga0ee132edc83254a01c60d7ece4499032"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga267c4a6b096aafb97bf17079c1e52aa4"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structpj__str__t.htm">pj_str_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga267c4a6b096aafb97bf17079c1e52aa4">pj_error_callback</a>) (<a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> e, char *msg, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> max)</td></tr>
<tr class="separator:ga267c4a6b096aafb97bf17079c1e52aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gab55e3d49c25f27e8353a8dd385f97942"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#gab55e3d49c25f27e8353a8dd385f97942">pj_get_os_error</a> (void)</td></tr>
<tr class="separator:gab55e3d49c25f27e8353a8dd385f97942"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga902af234ceebf60443561fb2dd26649e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga902af234ceebf60443561fb2dd26649e">pj_set_os_error</a> (<a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> code)</td></tr>
<tr class="separator:ga902af234ceebf60443561fb2dd26649e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf32783cbca43d14cfc7e29694ba9057c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#gaf32783cbca43d14cfc7e29694ba9057c">pj_get_netos_error</a> (void)</td></tr>
<tr class="separator:gaf32783cbca43d14cfc7e29694ba9057c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga963ec970ae960db3c2f8e545a33dd98a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga963ec970ae960db3c2f8e545a33dd98a">pj_set_netos_error</a> (<a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> code)</td></tr>
<tr class="separator:ga963ec970ae960db3c2f8e545a33dd98a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d2616aded0d61924fb31f4fd6ee45c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a> (<a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> statcode, char *buf, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> bufsize)</td></tr>
<tr class="separator:ga7d2616aded0d61924fb31f4fd6ee45c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6ed5bf6d40eb96eb9141b46efbd61279"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#ga6ed5bf6d40eb96eb9141b46efbd61279">pj_perror</a> (<a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> log_level, const char *sender, <a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status, const char *title_fmt,...)</td></tr>
<tr class="separator:ga6ed5bf6d40eb96eb9141b46efbd61279"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8f99b82d704194469c3b5345f01cc9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__pj__errno.htm#gad8f99b82d704194469c3b5345f01cc9e">pj_register_strerror</a> (<a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> start_code, <a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> err_space, <a class="el" href="group__pj__errno.htm#ga267c4a6b096aafb97bf17079c1e52aa4">pj_error_callback</a> f)</td></tr>
<tr class="separator:gad8f99b82d704194469c3b5345f01cc9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>The PJLIB Error Subsystem is a framework to unify all error codes produced by all components into a single error space, and provide uniform set of APIs to access them. With this framework, any error codes are encoded as pj_status_t value. The framework is extensible, application may register new error spaces to be recognized by the framework.</p>
<h1><a class="anchor" id="pj_errno_retval"></a>
Return Values</h1>
<p>All functions that returns <em>pj_status_t</em> returns <em>PJ_SUCCESS</em> if the operation was completed successfully, or non-zero value to indicate error. If the error came from operating system, then the native error code is translated/folded into PJLIB's error namespace by using <a class="el" href="group__pj__errno.htm#gaf21ec2038ae010661eb50c56696278c9">PJ_STATUS_FROM_OS()</a> macro. The function will do this automatically before returning the error to caller.</p>
<h1><a class="anchor" id="err_services"></a>
Retrieving and Displaying Error Messages</h1>
<p>The framework provides the following APIs to retrieve and/or display error messages:</p>
<ul>
<li><a class="el" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror()</a>: this is the base API to retrieve error string description for the specified pj_status_t error code.</li>
<li><a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a> macro: use this macro similar to PJ_LOG to format an error message and display them to the log</li>
<li><a class="el" href="group__pj__errno.htm#ga6ed5bf6d40eb96eb9141b46efbd61279">pj_perror()</a>: this function is similar to <a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a> but unlike <a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a>, this function will always be included in the link process. Due to this reason, prefer to use <a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a> if the application is concerned about the executable size.</li>
</ul>
<p>Application MUST NOT pass native error codes (such as error code from functions like GetLastError() or errno) to PJLIB functions expecting <em>pj_status_t</em>.</p>
<h1><a class="anchor" id="err_extending"></a>
Extending the Error Space</h1>
<p>Application may register new error space to be recognized by the framework by using <a class="el" href="group__pj__errno.htm#gad8f99b82d704194469c3b5345f01cc9e">pj_register_strerror()</a>. Use the range started from PJ_ERRNO_START_USER to avoid conflict with existing error spaces. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga314a8edfdcec54a086a401e97b5b0bd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga314a8edfdcec54a086a401e97b5b0bd0">&#9670;&nbsp;</a></span>PJ_ERR_MSG_SIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_ERR_MSG_SIZE&#160;&#160;&#160;80</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Guidelines on error message length. </p>

</div>
</div>
<a id="gacb73514c3158bdeda93488e8624e7b42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacb73514c3158bdeda93488e8624e7b42">&#9670;&nbsp;</a></span>PJ_PERROR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_PERROR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">level, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">arg&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>A utility macro to print error message pertaining to the specified error code to the log. This macro will construct the error message title according to the 'title_fmt' argument, and add the error string pertaining to the error code after the title string. A colon (':') will be added automatically between the title and the error string.</p>
<p>This function is similar to <a class="el" href="group__pj__errno.htm#ga6ed5bf6d40eb96eb9141b46efbd61279">pj_perror()</a> function, but has the advantage that the function call can be omitted from the link process if the log level argument is below PJ_LOG_MAX_LEVEL threshold.</p>
<p>Note that the title string constructed from the title_fmt will be built on a string buffer which size is PJ_PERROR_TITLE_BUF_SIZE, which normally is allocated from the stack. By default this buffer size is small (around 120 characters). Application MUST ensure that the constructed title string will not exceed this limit, since not all platforms support truncating the string.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="group__pj__errno.htm#ga6ed5bf6d40eb96eb9141b46efbd61279">pj_perror()</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">level</td><td>The logging verbosity level, valid values are 0-6. Lower number indicates higher importance, with level zero indicates fatal error. Only numeral argument is permitted (e.g. not variable). </td></tr>
    <tr><td class="paramname">arg</td><td>Enclosed 'printf' like arguments, with the following arguments:<ul>
<li>the sender (NULL terminated string),</li>
<li>the error code (pj_status_t)</li>
<li>the format string (title_fmt), and</li>
<li>optional variable number of arguments suitable for the format string.</li>
</ul>
</td></tr>
  </table>
  </dd>
</dl>
<p>Sample: </p><pre class="fragment">PJ_PERROR(2, (__FILE__, PJ_EBUSY, "Error making %s", "coffee"));
</pre> 
</div>
</div>
<a id="ga3663b3835c7fd8a7bac1ce0a67e3ddcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3663b3835c7fd8a7bac1ce0a67e3ddcc">&#9670;&nbsp;</a></span>PJ_PERROR_TITLE_BUF_SIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_PERROR_TITLE_BUF_SIZE&#160;&#160;&#160;120</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Buffer for title string of <a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a>. </p>

</div>
</div>
<a id="gacc85d9323301650f961ae38e689fefcd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacc85d9323301650f961ae38e689fefcd">&#9670;&nbsp;</a></span>PJ_RETURN_OS_ERROR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_RETURN_OS_ERROR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">os_code</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return platform os error code folded into pj_status_t code. This is the macro that is used throughout the library for all PJLIB's functions that returns error from operating system. Application may override this macro to reduce size (e.g. by defining it to always return <a class="el" href="group__pj__errnum.htm#ga009c72c2695c3f2726540bcbe8eead5f">PJ_EUNKNOWN</a>).</p>
<p>Note: This macro MUST return non-zero value regardless whether zero is passed as the argument. The reason is to protect logic error when the operating system doesn't report error codes properly.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">os_code</td><td>Platform OS error code. This value may be evaluated more than once. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The platform os error code folded into pj_status_t. </dd></dl>

</div>
</div>
<a id="gaf21ec2038ae010661eb50c56696278c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf21ec2038ae010661eb50c56696278c9">&#9670;&nbsp;</a></span>PJ_STATUS_FROM_OS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_STATUS_FROM_OS</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">e</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Fold a platform specific error into an pj_status_t code.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">e</td><td>The platform os error code. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pj_status_t </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Macro implementation; the syserr argument may be evaluated multiple times. </dd></dl>

</div>
</div>
<a id="ga0ee132edc83254a01c60d7ece4499032"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0ee132edc83254a01c60d7ece4499032">&#9670;&nbsp;</a></span>PJ_STATUS_TO_OS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_STATUS_TO_OS</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">e</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Fold an pj_status_t code back to the native platform defined error.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">e</td><td>The pj_status_t folded platform os error code. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pj_os_err_type </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>macro implementation; the statcode argument may be evaluated multiple times. If the statcode was not created by pj_get_os_error or PJ_STATUS_FROM_OS, the results are undefined. </dd></dl>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ga267c4a6b096aafb97bf17079c1e52aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga267c4a6b096aafb97bf17079c1e52aa4">&#9670;&nbsp;</a></span>pj_error_callback</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structpj__str__t.htm">pj_str_t</a>(* pj_error_callback) (<a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> e, char *msg, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> max)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Type of callback to be specified in <a class="el" href="group__pj__errno.htm#gad8f99b82d704194469c3b5345f01cc9e">pj_register_strerror()</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">e</td><td>The error code to lookup. </td></tr>
    <tr><td class="paramname">msg</td><td>Buffer to store the error message. </td></tr>
    <tr><td class="paramname">max</td><td>Length of the buffer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The error string. </dd></dl>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="gaf32783cbca43d14cfc7e29694ba9057c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf32783cbca43d14cfc7e29694ba9057c">&#9670;&nbsp;</a></span>pj_get_netos_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_get_netos_error </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the last error from socket operations. </p><dl class="section return"><dt>Returns</dt><dd>Last socket error, folded into pj_status_t. </dd></dl>

</div>
</div>
<a id="gab55e3d49c25f27e8353a8dd385f97942"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab55e3d49c25f27e8353a8dd385f97942">&#9670;&nbsp;</a></span>pj_get_os_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_get_os_error </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the last platform error/status, folded into pj_status_t. </p><dl class="section return"><dt>Returns</dt><dd>OS dependent error code, folded into pj_status_t. </dd></dl>
<dl class="section remark"><dt>Remarks</dt><dd>This function gets errno, or calls GetLastError() function and convert the code into pj_status_t with PJ_STATUS_FROM_OS. Do not call this for socket functions! </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="group__pj__errno.htm#gaf32783cbca43d14cfc7e29694ba9057c">pj_get_netos_error()</a> </dd></dl>

</div>
</div>
<a id="ga6ed5bf6d40eb96eb9141b46efbd61279"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6ed5bf6d40eb96eb9141b46efbd61279">&#9670;&nbsp;</a></span>pj_perror()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_perror </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&#160;</td>
          <td class="paramname"><em>log_level</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sender</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title_fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>A utility function to print error message pertaining to the specified error code to the log. This function will construct the error message title according to the 'title_fmt' argument, and add the error string pertaining to the error code after the title string. A colon (':') will be added automatically between the title and the error string.</p>
<p>Unlike the <a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a> macro, this function takes the <em>log_level</em> argument as a normal argument, unlike in <a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a> where a numeral value must be given. However this function will always be linked to the executable, unlike <a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a> which can be omitted when the level is below the PJ_LOG_MAX_LEVEL.</p>
<p>Note that the title string constructed from the title_fmt will be built on a string buffer which size is PJ_PERROR_TITLE_BUF_SIZE, which normally is allocated from the stack. By default this buffer size is small (around 120 characters). Application MUST ensure that the constructed title string will not exceed this limit, since not all platforms support truncating the string.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR()</a> </dd></dl>

</div>
</div>
<a id="gad8f99b82d704194469c3b5345f01cc9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad8f99b82d704194469c3b5345f01cc9e">&#9670;&nbsp;</a></span>pj_register_strerror()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_register_strerror </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td>
          <td class="paramname"><em>start_code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td>
          <td class="paramname"><em>err_space</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__pj__errno.htm#ga267c4a6b096aafb97bf17079c1e52aa4">pj_error_callback</a>&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Register strerror message handler for the specified error space. Application can register its own handler to supply the error message for the specified error code range. This handler will be called by <a class="el" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror()</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start_code</td><td>The starting error code where the handler should be called to retrieve the error message. </td></tr>
    <tr><td class="paramname">err_space</td><td>The size of error space. The error code range then will fall in start_code to start_code+err_space-1 range. </td></tr>
    <tr><td class="paramname">f</td><td>The handler to be called when <a class="el" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror()</a> is supplied with error code that falls into this range.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS or the specified error code. The registration may fail when the error space has been occupied by other handler, or when there are too many handlers registered to PJLIB. </dd></dl>

</div>
</div>
<a id="ga963ec970ae960db3c2f8e545a33dd98a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga963ec970ae960db3c2f8e545a33dd98a">&#9670;&nbsp;</a></span>pj_set_netos_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_set_netos_error </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td>
          <td class="paramname"><em>code</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set error code. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">code</td><td>pj_status_t. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga902af234ceebf60443561fb2dd26649e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga902af234ceebf60443561fb2dd26649e">&#9670;&nbsp;</a></span>pj_set_os_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_set_os_error </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td>
          <td class="paramname"><em>code</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set last error. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">code</td><td>pj_status_t </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga7d2616aded0d61924fb31f4fd6ee45c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7d2616aded0d61924fb31f4fd6ee45c0">&#9670;&nbsp;</a></span>pj_strerror()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> pj_strerror </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td>
          <td class="paramname"><em>statcode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>bufsize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the error message for the specified error code. The message string will be NULL terminated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">statcode</td><td>The error code. </td></tr>
    <tr><td class="paramname">buf</td><td>Buffer to hold the error message string. </td></tr>
    <tr><td class="paramname">bufsize</td><td>Size of the buffer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The error message as NULL terminated string, wrapped with <a class="el" href="structpj__str__t.htm">pj_str_t</a>. </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
