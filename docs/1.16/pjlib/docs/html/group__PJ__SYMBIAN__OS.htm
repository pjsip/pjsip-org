<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Symbian OS Specific (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>Symbian OS Specific<br/>
<small>
[<a class="el" href="group__PJ__SYS__INFO.htm">System Information</a>,&nbsp;<a class="el" href="group__PJ__OS.htm">Operating System Dependent Functionality.</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__symbianos__params.htm">pj_symbianos_params</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a> (int priority, int ms_timeout)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SYMBIAN__OS.htm#ga2bcae926829665f03a3963f18a49bb37">pj_symbianos_set_params</a> (<a class="el" href="structpj__symbianos__params.htm">pj_symbianos_params</a> *prm)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SYMBIAN__OS.htm#ga97d9a8c06847af3893e587d9f322068d">pj_symbianos_set_connection_status</a> (<a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> up)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Functionalities specific to Symbian OS.</p>
<p>Symbian OS strongly discourages the use of polling since this wastes CPU power, and instead provides Active Object and Active Scheduler pattern to allow application (in this case, PJLIB) to register asynchronous tasks. PJLIB port for Symbian complies to this recommended behavior. As the result, few things have been changed in PJLIB for Symbian:</p>
<ul>
<li>the timer heap (see <a class="el" href="group__PJ__TIMER.htm">Timer Heap Management.</a>) is implemented with active object framework, and each timer entry registered to the timer heap will register an Active Object to the Active Scheduler. Because of this, polling the timer heap with <a class="el" href="group__PJ__TIMER.htm#ga591fb436503b441ef00e6a4fe2a3117f">pj_timer_heap_poll()</a> is no longer necessary, and this function will just evaluate to nothing.</li>
<li>the ioqueue (see <a class="el" href="group__PJ__IOQUEUE.htm">IOQueue: I/O Event Dispatching with Proactor Pattern</a>) is also implemented with active object framework, with each asynchronous operation will register an Active Object to the Active Scheduler. Because of this, polling the ioqueue with <a class="el" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll()</a> is no longer necessary, and this function will just evaluate to nothing.</li>
</ul>
<p>Since timer heap and ioqueue polling are no longer necessary, Symbian application can now poll for all events by calling <em>User::WaitForAnyRequest()</em> and <em>CActiveScheduler::RunIfReady()</em>. PJLIB provides a thin wrapper which calls these two functions, called <a class="el" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll()</a>. </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga275984ae4a88fbf747275284fee70f62"></a><!-- doxytag: member="os.h::pj_symbianos_poll" ref="ga275984ae4a88fbf747275284fee70f62" args="(int priority, int ms_timeout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pj_symbianos_poll </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>priority</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>ms_timeout</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Wait the completion of any Symbian active objects. When the timeout value is not specified (the <em>ms_timeout</em> argument is -1), this function is a thin wrapper which calls <em>User::WaitForAnyRequest()</em> and <em>CActiveScheduler::RunIfReady()</em>. If the timeout value is specified, this function will schedule a timer entry to the timer heap (which is an Active Object), to limit the wait time for event occurences. Scheduling a timer entry is an expensive operation, therefore application should only specify a timeout value when it's really necessary (for example, when it's not sure there are other Active Objects currently running in the application).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>priority</em>&nbsp;</td><td>The minimum priority of the Active Objects to poll, which values are from CActive::TPriority constants. If -1 is given, CActive::EPriorityStandard. priority will be used. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ms_timeout</em>&nbsp;</td><td>Optional timeout to wait. Application should specify -1 to let the function wait indefinitely for any events.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_TRUE if there have been any events executed during the polling. This function will only return PJ_FALSE if <em>ms_timeout</em> argument is specified (i.e. the value is not -1) and there was no event executed when the timeout timer elapsed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga97d9a8c06847af3893e587d9f322068d"></a><!-- doxytag: member="os.h::pj_symbianos_set_connection_status" ref="ga97d9a8c06847af3893e587d9f322068d" args="(pj_bool_t up)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_symbianos_set_connection_status </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td>
          <td class="paramname"> <em>up</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Notify PJLIB that the access point connection has been down or unusable and PJLIB should not try to access the Symbian socket API (especially ones that send packets). Sending packet when RConnection is reconnected to different access point may cause the WaitForRequest() for the function to block indefinitely.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>up</em>&nbsp;</td><td>If set to PJ_FALSE it will cause PJLIB to not try to access socket API, and error will be returned immediately instead. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga2bcae926829665f03a3963f18a49bb37"></a><!-- doxytag: member="os.h::pj_symbianos_set_params" ref="ga2bcae926829665f03a3963f18a49bb37" args="(pj_symbianos_params *prm)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_symbianos_set_params </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__symbianos__params.htm">pj_symbianos_params</a> *&nbsp;</td>
          <td class="paramname"> <em>prm</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Specify Symbian OS parameters to be used by PJLIB. This function MUST be called before <a class="el" href="group__PJ__BASIC.htm#ga069615152140fa2df009cebc8a36b769">pj_init()</a> is called.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>prm</em>&nbsp;</td><td>Symbian specific parameters.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the parameters can be applied successfully. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
