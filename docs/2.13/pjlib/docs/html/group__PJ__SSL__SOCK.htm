<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Secure socket I/O (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Secure socket I/O<div class="ingroups"><a class="el" href="group__PJ__OS.htm">Operating System Dependent Functionality.</a> &raquo; <a class="el" href="group__PJ__IO.htm">Input/Output</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Secure socket provides security on socket operation using standard security protocols such as SSL and TLS.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__cert__info.htm">pj_ssl_cert_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__sock__cb.htm">pj_ssl_sock_cb</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__start__connect__param.htm">pj_ssl_start_connect_param</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gac6d1b65855cfff8ce1e36f2312c17d29"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a></td></tr>
<tr class="separator:gac6d1b65855cfff8ce1e36f2312c17d29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac87d6e6b687aa3c7a2019b7b43181524"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a></td></tr>
<tr class="separator:gac87d6e6b687aa3c7a2019b7b43181524"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga46b4d2c50121491ecc499f90cdc6c4ba"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structpj__str__t.htm">pj_str_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a></td></tr>
<tr class="separator:ga46b4d2c50121491ecc499f90cdc6c4ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="enum-members" name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gace0713defa5446c9455f3cce37453f30"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gace0713defa5446c9455f3cce37453f30">pj_ssl_cert_verify_flag_t</a> { <br />
&#160;&#160;<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a2a79e25049a015466a4a07a406e508c5">PJ_SSL_CERT_ESUCCESS</a> = 0
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30ace898190eceb513e6a722a1ee188f082">PJ_SSL_CERT_EISSUER_NOT_FOUND</a> = (1 &lt;&lt; 0)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30afc86024f0581e63006f7ca0b430d5521">PJ_SSL_CERT_EUNTRUSTED</a> = (1 &lt;&lt; 1)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a09cbdc90cf051de0519c942772dc3973">PJ_SSL_CERT_EVALIDITY_PERIOD</a> = (1 &lt;&lt; 2)
, <br />
&#160;&#160;<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a265c913a4dba6d0c6475c1e801e3e27f">PJ_SSL_CERT_EINVALID_FORMAT</a> = (1 &lt;&lt; 3)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a5a65cf0e17d96926615abf1b527e3b77">PJ_SSL_CERT_EINVALID_PURPOSE</a> = (1 &lt;&lt; 4)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a1cca5d6fa02c0ff2ab6d9175e769fb6e">PJ_SSL_CERT_EISSUER_MISMATCH</a> = (1 &lt;&lt; 5)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a6b2f6262dc3e7e9a87ea669f3f8bc6d5">PJ_SSL_CERT_ECRL_FAILURE</a> = (1 &lt;&lt; 6)
, <br />
&#160;&#160;<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a86426f73fd6adcbc3e31e3154a534805">PJ_SSL_CERT_EREVOKED</a> = (1 &lt;&lt; 7)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30ace7a06ddacf9d6d2ff70afa90e6f4844">PJ_SSL_CERT_ECHAIN_TOO_LONG</a> = (1 &lt;&lt; 8)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a9411a9f45095f14f1bc269f40da96fd2">PJ_SSL_CERT_EIDENTITY_NOT_MATCH</a> = (1 &lt;&lt; 30)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30abbff1227dbc0d60cb63f2a7d2e5add34">PJ_SSL_CERT_EUNKNOWN</a> = (1 &lt;&lt; 31)
<br />
 }</td></tr>
<tr class="separator:gace0713defa5446c9455f3cce37453f30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc61b1194af65c156e3205d12fef8e4a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gabc61b1194af65c156e3205d12fef8e4a">pj_ssl_cert_name_type</a> { <br />
&#160;&#160;<b>PJ_SSL_CERT_NAME_UNKNOWN</b> = 0
, <b>PJ_SSL_CERT_NAME_RFC822</b>
, <b>PJ_SSL_CERT_NAME_DNS</b>
, <b>PJ_SSL_CERT_NAME_URI</b>
, <br />
&#160;&#160;<b>PJ_SSL_CERT_NAME_IP</b>
<br />
 }</td></tr>
<tr class="separator:gabc61b1194af65c156e3205d12fef8e4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79c116fefb7b7618fddb1b790c58e078"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> { <br />
&#160;&#160;<b>PJ_TLS_UNKNOWN_CIPHER</b> = -1
, <b>PJ_TLS_NULL_WITH_NULL_NULL</b> = 0x00000000
, <b>PJ_TLS_RSA_WITH_NULL_MD5</b> = 0x00000001
, <b>PJ_TLS_RSA_WITH_NULL_SHA</b> = 0x00000002
, <br />
&#160;&#160;<b>PJ_TLS_RSA_WITH_NULL_SHA256</b> = 0x0000003B
, <b>PJ_TLS_RSA_WITH_RC4_128_MD5</b> = 0x00000004
, <b>PJ_TLS_RSA_WITH_RC4_128_SHA</b> = 0x00000005
, <b>PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA</b> = 0x0000000A
, <br />
&#160;&#160;<b>PJ_TLS_RSA_WITH_AES_128_CBC_SHA</b> = 0x0000002F
, <b>PJ_TLS_RSA_WITH_AES_256_CBC_SHA</b> = 0x00000035
, <b>PJ_TLS_RSA_WITH_AES_128_CBC_SHA256</b> = 0x0000003C
, <b>PJ_TLS_RSA_WITH_AES_256_CBC_SHA256</b> = 0x0000003D
, <br />
&#160;&#160;<b>PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA</b> = 0x0000000D
, <b>PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA</b> = 0x00000010
, <b>PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA</b> = 0x00000013
, <b>PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</b> = 0x00000016
, <br />
&#160;&#160;<b>PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA</b> = 0x00000030
, <b>PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA</b> = 0x00000031
, <b>PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA</b> = 0x00000032
, <b>PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA</b> = 0x00000033
, <br />
&#160;&#160;<b>PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA</b> = 0x00000036
, <b>PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA</b> = 0x00000037
, <b>PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA</b> = 0x00000038
, <b>PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA</b> = 0x00000039
, <br />
&#160;&#160;<b>PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256</b> = 0x0000003E
, <b>PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256</b> = 0x0000003F
, <b>PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</b> = 0x00000040
, <b>PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</b> = 0x00000067
, <br />
&#160;&#160;<b>PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256</b> = 0x00000068
, <b>PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256</b> = 0x00000069
, <b>PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</b> = 0x0000006A
, <b>PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</b> = 0x0000006B
, <br />
&#160;&#160;<b>PJ_TLS_DH_anon_WITH_RC4_128_MD5</b> = 0x00000018
, <b>PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA</b> = 0x0000001B
, <b>PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA</b> = 0x00000034
, <b>PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA</b> = 0x0000003A
, <br />
&#160;&#160;<b>PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256</b> = 0x0000006C
, <b>PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256</b> = 0x0000006D
, <b>PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5</b> = 0x00000003
, <b>PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5</b> = 0x00000006
, <br />
&#160;&#160;<b>PJ_TLS_RSA_WITH_IDEA_CBC_SHA</b> = 0x00000007
, <b>PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA</b> = 0x00000008
, <b>PJ_TLS_RSA_WITH_DES_CBC_SHA</b> = 0x00000009
, <b>PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA</b> = 0x0000000B
, <br />
&#160;&#160;<b>PJ_TLS_DH_DSS_WITH_DES_CBC_SHA</b> = 0x0000000C
, <b>PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA</b> = 0x0000000E
, <b>PJ_TLS_DH_RSA_WITH_DES_CBC_SHA</b> = 0x0000000F
, <b>PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</b> = 0x00000011
, <br />
&#160;&#160;<b>PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA</b> = 0x00000012
, <b>PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</b> = 0x00000014
, <b>PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA</b> = 0x00000015
, <b>PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5</b> = 0x00000017
, <br />
&#160;&#160;<b>PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA</b> = 0x00000019
, <b>PJ_TLS_DH_anon_WITH_DES_CBC_SHA</b> = 0x0000001A
, <b>PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA</b> = 0x0000001C
, <b>PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA</b> = 0x0000001D
, <br />
&#160;&#160;<b>PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA</b> = 0x0000001E
, <b>PJ_SSL_CK_RC4_128_WITH_MD5</b> = 0x00010080
, <b>PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5</b> = 0x00020080
, <b>PJ_SSL_CK_RC2_128_CBC_WITH_MD5</b> = 0x00030080
, <br />
&#160;&#160;<b>PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5</b> = 0x00040080
, <b>PJ_SSL_CK_IDEA_128_CBC_WITH_MD5</b> = 0x00050080
, <b>PJ_SSL_CK_DES_64_CBC_WITH_MD5</b> = 0x00060040
, <b>PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5</b> = 0x000700C0
<br />
 }</td></tr>
<tr class="separator:ga79c116fefb7b7618fddb1b790c58e078"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac28d939f81b88e799221aa1b9abf607e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a> { <br />
&#160;&#160;<b>PJ_TLS_UNKNOWN_CURVE</b> = 0
, <b>PJ_TLS_CURVE_SECT163K1</b> = 1
, <b>PJ_TLS_CURVE_SECT163R1</b> = 2
, <b>PJ_TLS_CURVE_SECT163R2</b> = 3
, <br />
&#160;&#160;<b>PJ_TLS_CURVE_SECT193R1</b> = 4
, <b>PJ_TLS_CURVE_SECT193R2</b> = 5
, <b>PJ_TLS_CURVE_SECT233K1</b> = 6
, <b>PJ_TLS_CURVE_SECT233R1</b> = 7
, <br />
&#160;&#160;<b>PJ_TLS_CURVE_SECT239K1</b> = 8
, <b>PJ_TLS_CURVE_SECT283K1</b> = 9
, <b>PJ_TLS_CURVE_SECT283R1</b> = 10
, <b>PJ_TLS_CURVE_SECT409K1</b> = 11
, <br />
&#160;&#160;<b>PJ_TLS_CURVE_SECT409R1</b> = 12
, <b>PJ_TLS_CURVE_SECT571K1</b> = 13
, <b>PJ_TLS_CURVE_SECT571R1</b> = 14
, <b>PJ_TLS_CURVE_SECP160K1</b> = 15
, <br />
&#160;&#160;<b>PJ_TLS_CURVE_SECP160R1</b> = 16
, <b>PJ_TLS_CURVE_SECP160R2</b> = 17
, <b>PJ_TLS_CURVE_SECP192K1</b> = 18
, <b>PJ_TLS_CURVE_SECP192R1</b> = 19
, <br />
&#160;&#160;<b>PJ_TLS_CURVE_SECP224K1</b> = 20
, <b>PJ_TLS_CURVE_SECP224R1</b> = 21
, <b>PJ_TLS_CURVE_SECP256K1</b> = 22
, <b>PJ_TLS_CURVE_SECP256R1</b> = 23
, <br />
&#160;&#160;<b>PJ_TLS_CURVE_SECP384R1</b> = 24
, <b>PJ_TLS_CURVE_SECP521R1</b> = 25
, <b>PJ_TLS_CURVE_BRAINPOOLP256R1</b> = 26
, <b>PJ_TLS_CURVE_BRAINPOOLP384R1</b> = 27
, <br />
&#160;&#160;<b>PJ_TLS_CURVE_BRAINPOOLP512R1</b> = 28
, <b>PJ_TLS_CURVE_ARBITRARY_EXPLICIT_PRIME_CURVES</b> = 0XFF01
, <b>PJ_TLS_CURVE_ARBITRARY_EXPLICIT_CHAR2_CURVES</b> = 0XFF02
<br />
 }</td></tr>
<tr class="separator:gac28d939f81b88e799221aa1b9abf607e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7ab60797adbee210121487d12e921ac"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gad7ab60797adbee210121487d12e921ac">pj_ssl_entropy_t</a> { <br />
&#160;&#160;<a class="el" href="group__PJ__SSL__SOCK.htm#ggad7ab60797adbee210121487d12e921aca6b5d73b9e85083d7cdb0b797fa8ae772">PJ_SSL_ENTROPY_NONE</a> = 0
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggad7ab60797adbee210121487d12e921aca3c458622728e0efdc7e01f6010831b7c">PJ_SSL_ENTROPY_EGD</a> = 1
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggad7ab60797adbee210121487d12e921acaceae8699a2616ec7250fb543bc5f1261">PJ_SSL_ENTROPY_RANDOM</a> = 2
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggad7ab60797adbee210121487d12e921aca39c5485e07e38a45382a61758ef68135">PJ_SSL_ENTROPY_URANDOM</a> = 3
, <br />
&#160;&#160;<a class="el" href="group__PJ__SSL__SOCK.htm#ggad7ab60797adbee210121487d12e921aca9275d0c456a9f42ed85169cb8a839db7">PJ_SSL_ENTROPY_FILE</a> = 4
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggad7ab60797adbee210121487d12e921acad4f2b125075298e556431d60ca1cddbe">PJ_SSL_ENTROPY_UNKNOWN</a> = 0x0F
<br />
 }</td></tr>
<tr class="separator:gad7ab60797adbee210121487d12e921ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac9ec96552b4d363c7293b12ac3fa36d8"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac9ec96552b4d363c7293b12ac3fa36d8">pj_ssl_sock_proto</a> { <br />
&#160;&#160;<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a89cbc44e93a0b87af1112c0739898e94">PJ_SSL_SOCK_PROTO_DEFAULT</a> = 0
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a94696ce111c70075626b06f0ccd7198c">PJ_SSL_SOCK_PROTO_SSL2</a> = (1 &lt;&lt; 0)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8ac36f14413704dffefa07dde6b0355c95">PJ_SSL_SOCK_PROTO_SSL3</a> = (1 &lt;&lt; 1)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8ac0e521edb3cfbc206d134192c3618fe9">PJ_SSL_SOCK_PROTO_TLS1</a> = (1 &lt;&lt; 2)
, <br />
&#160;&#160;<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a3df7eec123d6a9c0a4d3920454f52ff1">PJ_SSL_SOCK_PROTO_TLS1_1</a> = (1 &lt;&lt; 3)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a31816e4b567997f1761d9d5d7e3d9f74">PJ_SSL_SOCK_PROTO_TLS1_2</a> = (1 &lt;&lt; 4)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a8458b5bc3a36373becf68926dfcc52da">PJ_SSL_SOCK_PROTO_TLS1_3</a> = (1 &lt;&lt; 5)
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a657ef230ce923a8e0230bd25eb572c4e">PJ_SSL_SOCK_PROTO_SSL23</a> = (1 &lt;&lt; 16) - 1
, <br />
&#160;&#160;<b>PJ_SSL_SOCK_PROTO_ALL</b> = PJ_SSL_SOCK_PROTO_SSL23
, <a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8aaef6628e7304ff6abaadd9034881eec8">PJ_SSL_SOCK_PROTO_DTLS1</a> = (1 &lt;&lt; 16)
<br />
 }</td></tr>
<tr class="separator:gac9ec96552b4d363c7293b12ac3fa36d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga6f41ea4d6dee0960a176e1207ae94e0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga6f41ea4d6dee0960a176e1207ae94e0f">pj_ssl_cert_load_from_files</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *CA_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *cert_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *privkey_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *privkey_pass, <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **p_cert)</td></tr>
<tr class="separator:ga6f41ea4d6dee0960a176e1207ae94e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga901034c1b1126f24dcd6ed1e81cd7e8f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga901034c1b1126f24dcd6ed1e81cd7e8f">pj_ssl_cert_load_from_files2</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *CA_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *CA_path, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *cert_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *privkey_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *privkey_pass, <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **p_cert)</td></tr>
<tr class="separator:ga901034c1b1126f24dcd6ed1e81cd7e8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacdc0d2843bba2892ef7d9cb77796213b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gacdc0d2843bba2892ef7d9cb77796213b">pj_ssl_cert_load_from_buffer</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a> *CA_buf, const <a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a> *cert_buf, const <a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a> *privkey_buf, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *privkey_pass, <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **p_cert)</td></tr>
<tr class="separator:gacdc0d2843bba2892ef7d9cb77796213b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32fda1752ea202a908d56cafc489ffb5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga32fda1752ea202a908d56cafc489ffb5">pj_ssl_cert_info_dump</a> (const <a class="el" href="structpj__ssl__cert__info.htm">pj_ssl_cert_info</a> *ci, const char *indent, char *buf, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> buf_size)</td></tr>
<tr class="separator:ga32fda1752ea202a908d56cafc489ffb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga833b878a9887ff17df6a242bab9c6f6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga833b878a9887ff17df6a242bab9c6f6c">pj_ssl_cert_get_verify_status_strings</a> (<a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> verify_status, const char *error_strings[], unsigned *count)</td></tr>
<tr class="separator:ga833b878a9887ff17df6a242bab9c6f6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaafbe11c66bc5efba0975e45e4269c713"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaafbe11c66bc5efba0975e45e4269c713">pj_ssl_cert_wipe_keys</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> *cert)</td></tr>
<tr class="separator:gaafbe11c66bc5efba0975e45e4269c713"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19d7f3eb6dcb931761b89d6cdc51a01e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga19d7f3eb6dcb931761b89d6cdc51a01e">pj_ssl_cipher_get_availables</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> ciphers[], unsigned *cipher_num)</td></tr>
<tr class="separator:ga19d7f3eb6dcb931761b89d6cdc51a01e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1476e697e73ff8add8fa4c24ac25a09b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga1476e697e73ff8add8fa4c24ac25a09b">pj_ssl_cipher_is_supported</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> cipher)</td></tr>
<tr class="separator:ga1476e697e73ff8add8fa4c24ac25a09b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d8cc4717c7647a2f19ebbaedae59552"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga0d8cc4717c7647a2f19ebbaedae59552">pj_ssl_cipher_name</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> cipher)</td></tr>
<tr class="separator:ga0d8cc4717c7647a2f19ebbaedae59552"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae245194dee9b69c6e194fb671054582d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gae245194dee9b69c6e194fb671054582d">pj_ssl_cipher_id</a> (const char *cipher_name)</td></tr>
<tr class="separator:gae245194dee9b69c6e194fb671054582d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebd32cd02c1f61139687b09d6c78ccd0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaebd32cd02c1f61139687b09d6c78ccd0">pj_ssl_curve_get_availables</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a> curves[], unsigned *curve_num)</td></tr>
<tr class="separator:gaebd32cd02c1f61139687b09d6c78ccd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad480c8d7a362cdbe3d504fd3581018ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gad480c8d7a362cdbe3d504fd3581018ce">pj_ssl_curve_is_supported</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a> curve)</td></tr>
<tr class="separator:gad480c8d7a362cdbe3d504fd3581018ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1782f11f14111e774c56764e6914b0fd"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga1782f11f14111e774c56764e6914b0fd">pj_ssl_curve_name</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a> curve)</td></tr>
<tr class="separator:ga1782f11f14111e774c56764e6914b0fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57f9a9d9c12a0698fdecb6d0041df3c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga57f9a9d9c12a0698fdecb6d0041df3c0">pj_ssl_curve_id</a> (const char *curve_name)</td></tr>
<tr class="separator:ga57f9a9d9c12a0698fdecb6d0041df3c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7371af9e78093f05575aacdc34993e2c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga7371af9e78093f05575aacdc34993e2c">pj_ssl_sock_param_default</a> (<a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *param)</td></tr>
<tr class="separator:ga7371af9e78093f05575aacdc34993e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad6a92baa7d2b13dc285653b333c199ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gad6a92baa7d2b13dc285653b333c199ad">pj_ssl_sock_param_copy</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *dst, const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *src)</td></tr>
<tr class="separator:gad6a92baa7d2b13dc285653b333c199ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga754a041bc5466b6606008f698b4e0bc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga754a041bc5466b6606008f698b4e0bc5">pj_ssl_sock_create</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *param, <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> **p_ssock)</td></tr>
<tr class="separator:ga754a041bc5466b6606008f698b4e0bc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f97f0cbc876399bf4ff9f80333c7080"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga2f97f0cbc876399bf4ff9f80333c7080">pj_ssl_sock_set_certificate</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> *cert)</td></tr>
<tr class="separator:ga2f97f0cbc876399bf4ff9f80333c7080"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad18de000180234c0747418b9f14a6a54"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gad18de000180234c0747418b9f14a6a54">pj_ssl_sock_close</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock)</td></tr>
<tr class="separator:gad18de000180234c0747418b9f14a6a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ed3bf286a1c338332619a38fd0512ab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga3ed3bf286a1c338332619a38fd0512ab">pj_ssl_sock_set_user_data</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, void *user_data)</td></tr>
<tr class="separator:ga3ed3bf286a1c338332619a38fd0512ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga993787773287959386995e109a6a370b"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga993787773287959386995e109a6a370b">pj_ssl_sock_get_user_data</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock)</td></tr>
<tr class="separator:ga993787773287959386995e109a6a370b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee1d4ddbd7c680cdd7ef0636900ef5cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaee1d4ddbd7c680cdd7ef0636900ef5cb">pj_ssl_sock_get_info</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a> *info)</td></tr>
<tr class="separator:gaee1d4ddbd7c680cdd7ef0636900ef5cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga64967383bdeaab292724a9d45266b715"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga64967383bdeaab292724a9d45266b715">pj_ssl_sock_start_read</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr class="separator:ga64967383bdeaab292724a9d45266b715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7732c1f7fb3c5cc0896ff26cc48bda39"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga7732c1f7fb3c5cc0896ff26cc48bda39">pj_ssl_sock_start_read2</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, void *readbuf[], <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr class="separator:ga7732c1f7fb3c5cc0896ff26cc48bda39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaedae59ede7e40f69449eb8c3405d48d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaedae59ede7e40f69449eb8c3405d48d0">pj_ssl_sock_start_recvfrom</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr class="separator:gaedae59ede7e40f69449eb8c3405d48d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b5022402caf4a37573d77835b2b7718"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga5b5022402caf4a37573d77835b2b7718">pj_ssl_sock_start_recvfrom2</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, void *readbuf[], <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr class="separator:ga5b5022402caf4a37573d77835b2b7718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3d4b8b377709aa10a1ca37c05b0f0df0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga3d4b8b377709aa10a1ca37c05b0f0df0">pj_ssl_sock_send</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structsend__key.htm">send_key</a>, const void *data, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *size, unsigned flags)</td></tr>
<tr class="separator:ga3d4b8b377709aa10a1ca37c05b0f0df0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9cccecf460743235ca1e7d62fdaa5467"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga9cccecf460743235ca1e7d62fdaa5467">pj_ssl_sock_sendto</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structsend__key.htm">send_key</a>, const void *data, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *size, unsigned flags, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *addr, int addr_len)</td></tr>
<tr class="separator:ga9cccecf460743235ca1e7d62fdaa5467"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9cd4fbf761a6ee07769122085dd04f73"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga9cd4fbf761a6ee07769122085dd04f73">pj_ssl_sock_start_accept</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *local_addr, int addr_len)</td></tr>
<tr class="separator:ga9cd4fbf761a6ee07769122085dd04f73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4f33429923e2b1a1f6e31490701943bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga4f33429923e2b1a1f6e31490701943bf">pj_ssl_sock_start_accept2</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *local_addr, int addr_len, const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *newsock_param)</td></tr>
<tr class="separator:ga4f33429923e2b1a1f6e31490701943bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac1c3b0ca4ff363a6df2d04434c4b0027"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac1c3b0ca4ff363a6df2d04434c4b0027">pj_ssl_sock_start_connect</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *localaddr, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *remaddr, int addr_len)</td></tr>
<tr class="separator:gac1c3b0ca4ff363a6df2d04434c4b0027"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga485cee9cf28f45ef631aeff19076c156"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga485cee9cf28f45ef631aeff19076c156">pj_ssl_sock_start_connect2</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__ssl__start__connect__param.htm">pj_ssl_start_connect_param</a> *connect_param)</td></tr>
<tr class="separator:ga485cee9cf28f45ef631aeff19076c156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaca23db39a5e9d270bf89f16e589798d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaca23db39a5e9d270bf89f16e589798d0">pj_ssl_sock_renegotiate</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock)</td></tr>
<tr class="separator:gaca23db39a5e9d270bf89f16e589798d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Secure socket provides security on socket operation using standard security protocols such as SSL and TLS. </p>
<p >Secure socket wraps normal socket and applies security features, i.e: privacy and data integrity, on the socket traffic, using standard security protocols such as SSL and TLS.</p>
<p >Secure socket employs active socket operations, which is similar to (and described more detail) in <a class="el" href="group__PJ__ACTIVESOCK.htm">Active socket I/O</a>. </p>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ga46b4d2c50121491ecc499f90cdc6c4ba" name="ga46b4d2c50121491ecc499f90cdc6c4ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga46b4d2c50121491ecc499f90cdc6c4ba">&#9670;&nbsp;</a></span>pj_ssl_cert_buffer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structpj__str__t.htm">pj_str_t</a> <a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >The SSL certificate buffer. </p>

</div>
</div>
<a id="gac87d6e6b687aa3c7a2019b7b43181524" name="gac87d6e6b687aa3c7a2019b7b43181524"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac87d6e6b687aa3c7a2019b7b43181524">&#9670;&nbsp;</a></span>pj_ssl_cert_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Opaque declaration of endpoint certificate or credentials. This may contains certificate, private key, and trusted Certificate Authorities list. </p>

</div>
</div>
<a id="gac6d1b65855cfff8ce1e36f2312c17d29" name="gac6d1b65855cfff8ce1e36f2312c17d29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac6d1b65855cfff8ce1e36f2312c17d29">&#9670;&nbsp;</a></span>pj_ssl_sock_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This opaque structure describes the secure socket. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="gabc61b1194af65c156e3205d12fef8e4a" name="gabc61b1194af65c156e3205d12fef8e4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabc61b1194af65c156e3205d12fef8e4a">&#9670;&nbsp;</a></span>pj_ssl_cert_name_type</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#gabc61b1194af65c156e3205d12fef8e4a">pj_ssl_cert_name_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Type of SSL certificate name. </p>

</div>
</div>
<a id="gace0713defa5446c9455f3cce37453f30" name="gace0713defa5446c9455f3cce37453f30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gace0713defa5446c9455f3cce37453f30">&#9670;&nbsp;</a></span>pj_ssl_cert_verify_flag_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#gace0713defa5446c9455f3cce37453f30">pj_ssl_cert_verify_flag_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Bitwise flag for SSL certificate verification. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a2a79e25049a015466a4a07a406e508c5" name="ggace0713defa5446c9455f3cce37453f30a2a79e25049a015466a4a07a406e508c5"></a>PJ_SSL_CERT_ESUCCESS&#160;</td><td class="fielddoc"><p >No error in verification. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30ace898190eceb513e6a722a1ee188f082" name="ggace0713defa5446c9455f3cce37453f30ace898190eceb513e6a722a1ee188f082"></a>PJ_SSL_CERT_EISSUER_NOT_FOUND&#160;</td><td class="fielddoc"><p >The issuer certificate cannot be found. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30afc86024f0581e63006f7ca0b430d5521" name="ggace0713defa5446c9455f3cce37453f30afc86024f0581e63006f7ca0b430d5521"></a>PJ_SSL_CERT_EUNTRUSTED&#160;</td><td class="fielddoc"><p >The certificate is untrusted. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a09cbdc90cf051de0519c942772dc3973" name="ggace0713defa5446c9455f3cce37453f30a09cbdc90cf051de0519c942772dc3973"></a>PJ_SSL_CERT_EVALIDITY_PERIOD&#160;</td><td class="fielddoc"><p >The certificate has expired or not yet valid. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a265c913a4dba6d0c6475c1e801e3e27f" name="ggace0713defa5446c9455f3cce37453f30a265c913a4dba6d0c6475c1e801e3e27f"></a>PJ_SSL_CERT_EINVALID_FORMAT&#160;</td><td class="fielddoc"><p >One or more fields of the certificate cannot be decoded due to invalid format. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a5a65cf0e17d96926615abf1b527e3b77" name="ggace0713defa5446c9455f3cce37453f30a5a65cf0e17d96926615abf1b527e3b77"></a>PJ_SSL_CERT_EINVALID_PURPOSE&#160;</td><td class="fielddoc"><p >The certificate cannot be used for the specified purpose. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a1cca5d6fa02c0ff2ab6d9175e769fb6e" name="ggace0713defa5446c9455f3cce37453f30a1cca5d6fa02c0ff2ab6d9175e769fb6e"></a>PJ_SSL_CERT_EISSUER_MISMATCH&#160;</td><td class="fielddoc"><p >The issuer info in the certificate does not match to the (candidate) issuer certificate, e.g: issuer name not match to subject name of (candidate) issuer certificate. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a6b2f6262dc3e7e9a87ea669f3f8bc6d5" name="ggace0713defa5446c9455f3cce37453f30a6b2f6262dc3e7e9a87ea669f3f8bc6d5"></a>PJ_SSL_CERT_ECRL_FAILURE&#160;</td><td class="fielddoc"><p >The CRL certificate cannot be found or cannot be read properly. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a86426f73fd6adcbc3e31e3154a534805" name="ggace0713defa5446c9455f3cce37453f30a86426f73fd6adcbc3e31e3154a534805"></a>PJ_SSL_CERT_EREVOKED&#160;</td><td class="fielddoc"><p >The certificate has been revoked. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30ace7a06ddacf9d6d2ff70afa90e6f4844" name="ggace0713defa5446c9455f3cce37453f30ace7a06ddacf9d6d2ff70afa90e6f4844"></a>PJ_SSL_CERT_ECHAIN_TOO_LONG&#160;</td><td class="fielddoc"><p >The certificate chain length is too long. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30a9411a9f45095f14f1bc269f40da96fd2" name="ggace0713defa5446c9455f3cce37453f30a9411a9f45095f14f1bc269f40da96fd2"></a>PJ_SSL_CERT_EIDENTITY_NOT_MATCH&#160;</td><td class="fielddoc"><p >The server identity does not match to any identities specified in the certificate, e.g: subjectAltName extension, subject common name. This flag will only be set by application as SSL socket does not perform server identity verification. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggace0713defa5446c9455f3cce37453f30abbff1227dbc0d60cb63f2a7d2e5add34" name="ggace0713defa5446c9455f3cce37453f30abbff1227dbc0d60cb63f2a7d2e5add34"></a>PJ_SSL_CERT_EUNKNOWN&#160;</td><td class="fielddoc"><p >Unknown verification error. </p>
</td></tr>
</table>

</div>
</div>
<a id="ga79c116fefb7b7618fddb1b790c58e078" name="ga79c116fefb7b7618fddb1b790c58e078"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga79c116fefb7b7618fddb1b790c58e078">&#9670;&nbsp;</a></span>pj_ssl_cipher</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Cipher suites enumeration. </p>

</div>
</div>
<a id="gac28d939f81b88e799221aa1b9abf607e" name="gac28d939f81b88e799221aa1b9abf607e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac28d939f81b88e799221aa1b9abf607e">&#9670;&nbsp;</a></span>pj_ssl_curve</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Elliptic curves enumeration. </p>

</div>
</div>
<a id="gad7ab60797adbee210121487d12e921ac" name="gad7ab60797adbee210121487d12e921ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad7ab60797adbee210121487d12e921ac">&#9670;&nbsp;</a></span>pj_ssl_entropy_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#gad7ab60797adbee210121487d12e921ac">pj_ssl_entropy_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Entropy enumeration </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ggad7ab60797adbee210121487d12e921aca6b5d73b9e85083d7cdb0b797fa8ae772" name="ggad7ab60797adbee210121487d12e921aca6b5d73b9e85083d7cdb0b797fa8ae772"></a>PJ_SSL_ENTROPY_NONE&#160;</td><td class="fielddoc"><p >None </p>
</td></tr>
<tr><td class="fieldname"><a id="ggad7ab60797adbee210121487d12e921aca3c458622728e0efdc7e01f6010831b7c" name="ggad7ab60797adbee210121487d12e921aca3c458622728e0efdc7e01f6010831b7c"></a>PJ_SSL_ENTROPY_EGD&#160;</td><td class="fielddoc"><p >EGD </p>
</td></tr>
<tr><td class="fieldname"><a id="ggad7ab60797adbee210121487d12e921acaceae8699a2616ec7250fb543bc5f1261" name="ggad7ab60797adbee210121487d12e921acaceae8699a2616ec7250fb543bc5f1261"></a>PJ_SSL_ENTROPY_RANDOM&#160;</td><td class="fielddoc"><p >Random </p>
</td></tr>
<tr><td class="fieldname"><a id="ggad7ab60797adbee210121487d12e921aca39c5485e07e38a45382a61758ef68135" name="ggad7ab60797adbee210121487d12e921aca39c5485e07e38a45382a61758ef68135"></a>PJ_SSL_ENTROPY_URANDOM&#160;</td><td class="fielddoc"><p >Urandom </p>
</td></tr>
<tr><td class="fieldname"><a id="ggad7ab60797adbee210121487d12e921aca9275d0c456a9f42ed85169cb8a839db7" name="ggad7ab60797adbee210121487d12e921aca9275d0c456a9f42ed85169cb8a839db7"></a>PJ_SSL_ENTROPY_FILE&#160;</td><td class="fielddoc"><p >File </p>
</td></tr>
<tr><td class="fieldname"><a id="ggad7ab60797adbee210121487d12e921acad4f2b125075298e556431d60ca1cddbe" name="ggad7ab60797adbee210121487d12e921acad4f2b125075298e556431d60ca1cddbe"></a>PJ_SSL_ENTROPY_UNKNOWN&#160;</td><td class="fielddoc"><p >Unknown </p>
</td></tr>
</table>

</div>
</div>
<a id="gac9ec96552b4d363c7293b12ac3fa36d8" name="gac9ec96552b4d363c7293b12ac3fa36d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac9ec96552b4d363c7293b12ac3fa36d8">&#9670;&nbsp;</a></span>pj_ssl_sock_proto</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#gac9ec96552b4d363c7293b12ac3fa36d8">pj_ssl_sock_proto</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Enumeration of secure socket protocol types. This can be combined using bitwise OR operation. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8a89cbc44e93a0b87af1112c0739898e94" name="ggac9ec96552b4d363c7293b12ac3fa36d8a89cbc44e93a0b87af1112c0739898e94"></a>PJ_SSL_SOCK_PROTO_DEFAULT&#160;</td><td class="fielddoc"><p >Default protocol of backend. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8a94696ce111c70075626b06f0ccd7198c" name="ggac9ec96552b4d363c7293b12ac3fa36d8a94696ce111c70075626b06f0ccd7198c"></a>PJ_SSL_SOCK_PROTO_SSL2&#160;</td><td class="fielddoc"><p >SSLv2.0 protocol. <br  />
 </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8ac36f14413704dffefa07dde6b0355c95" name="ggac9ec96552b4d363c7293b12ac3fa36d8ac36f14413704dffefa07dde6b0355c95"></a>PJ_SSL_SOCK_PROTO_SSL3&#160;</td><td class="fielddoc"><p >SSLv3.0 protocol. <br  />
 </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8ac0e521edb3cfbc206d134192c3618fe9" name="ggac9ec96552b4d363c7293b12ac3fa36d8ac0e521edb3cfbc206d134192c3618fe9"></a>PJ_SSL_SOCK_PROTO_TLS1&#160;</td><td class="fielddoc"><p >TLSv1.0 protocol. <br  />
 </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8a3df7eec123d6a9c0a4d3920454f52ff1" name="ggac9ec96552b4d363c7293b12ac3fa36d8a3df7eec123d6a9c0a4d3920454f52ff1"></a>PJ_SSL_SOCK_PROTO_TLS1_1&#160;</td><td class="fielddoc"><p >TLSv1.1 protocol. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8a31816e4b567997f1761d9d5d7e3d9f74" name="ggac9ec96552b4d363c7293b12ac3fa36d8a31816e4b567997f1761d9d5d7e3d9f74"></a>PJ_SSL_SOCK_PROTO_TLS1_2&#160;</td><td class="fielddoc"><p >TLSv1.2 protocol. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8a8458b5bc3a36373becf68926dfcc52da" name="ggac9ec96552b4d363c7293b12ac3fa36d8a8458b5bc3a36373becf68926dfcc52da"></a>PJ_SSL_SOCK_PROTO_TLS1_3&#160;</td><td class="fielddoc"><p >TLSv1.3 protocol. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8a657ef230ce923a8e0230bd25eb572c4e" name="ggac9ec96552b4d363c7293b12ac3fa36d8a657ef230ce923a8e0230bd25eb572c4e"></a>PJ_SSL_SOCK_PROTO_SSL23&#160;</td><td class="fielddoc"><p >Certain backend implementation e.g:OpenSSL, has feature to enable all protocol. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggac9ec96552b4d363c7293b12ac3fa36d8aaef6628e7304ff6abaadd9034881eec8" name="ggac9ec96552b4d363c7293b12ac3fa36d8aaef6628e7304ff6abaadd9034881eec8"></a>PJ_SSL_SOCK_PROTO_DTLS1&#160;</td><td class="fielddoc"><p >DTLSv1.0 protocol. <br  />
 </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga833b878a9887ff17df6a242bab9c6f6c" name="ga833b878a9887ff17df6a242bab9c6f6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga833b878a9887ff17df6a242bab9c6f6c">&#9670;&nbsp;</a></span>pj_ssl_cert_get_verify_status_strings()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cert_get_verify_status_strings </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&#160;</td>
          <td class="paramname"><em>verify_status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>error_strings</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned *&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get SSL certificate verification error messages from verification status.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">verify_status</td><td>The SSL certificate verification status. </td></tr>
    <tr><td class="paramname">error_strings</td><td>Array of strings to receive the verification error messages. </td></tr>
    <tr><td class="paramname">count</td><td>On input it specifies maximum error messages should be retrieved. On output it specifies the number of error messages retrieved.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a id="ga32fda1752ea202a908d56cafc489ffb5" name="ga32fda1752ea202a908d56cafc489ffb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga32fda1752ea202a908d56cafc489ffb5">&#9670;&nbsp;</a></span>pj_ssl_cert_info_dump()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_ssl_cert_info_dump </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__ssl__cert__info.htm">pj_ssl_cert_info</a> *&#160;</td>
          <td class="paramname"><em>ci</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>indent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>buf_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Dump SSL certificate info.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ci</td><td>The certificate info. </td></tr>
    <tr><td class="paramname">indent</td><td>String for left indentation. </td></tr>
    <tr><td class="paramname">buf</td><td>The buffer where certificate info will be printed on. </td></tr>
    <tr><td class="paramname">buf_size</td><td>The buffer size.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The length of the dump result, or -1 when buffer size is not sufficient. </dd></dl>

</div>
</div>
<a id="gacdc0d2843bba2892ef7d9cb77796213b" name="gacdc0d2843bba2892ef7d9cb77796213b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacdc0d2843bba2892ef7d9cb77796213b">&#9670;&nbsp;</a></span>pj_ssl_cert_load_from_buffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cert_load_from_buffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a> *&#160;</td>
          <td class="paramname"><em>CA_buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a> *&#160;</td>
          <td class="paramname"><em>cert_buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__SSL__SOCK.htm#ga46b4d2c50121491ecc499f90cdc6c4ba">pj_ssl_cert_buffer</a> *&#160;</td>
          <td class="paramname"><em>privkey_buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>privkey_pass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **&#160;</td>
          <td class="paramname"><em>p_cert</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create credential from data buffer. The certificate expected is in PEM format.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">CA_buf</td><td>The buffer of trusted CA list. </td></tr>
    <tr><td class="paramname">cert_buf</td><td>The buffer of certificate. </td></tr>
    <tr><td class="paramname">privkey_buf</td><td>The buffer of private key. </td></tr>
    <tr><td class="paramname">privkey_pass</td><td>The password of private key, if any. </td></tr>
    <tr><td class="paramname">p_cert</td><td>Pointer to credential instance to be created.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a id="ga6f41ea4d6dee0960a176e1207ae94e0f" name="ga6f41ea4d6dee0960a176e1207ae94e0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6f41ea4d6dee0960a176e1207ae94e0f">&#9670;&nbsp;</a></span>pj_ssl_cert_load_from_files()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cert_load_from_files </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>CA_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>cert_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>privkey_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>privkey_pass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **&#160;</td>
          <td class="paramname"><em>p_cert</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create credential from files. TLS server application can provide multiple certificates (RSA, ECC, and DSA) by supplying certificate name with "_rsa" suffix, e.g: "pjsip_rsa.pem", the library will automatically check for other certificates with "_ecc" and "_dsa" suffix.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">CA_file</td><td>The file of trusted CA list. </td></tr>
    <tr><td class="paramname">cert_file</td><td>The file of certificate. </td></tr>
    <tr><td class="paramname">privkey_file</td><td>The file of private key. </td></tr>
    <tr><td class="paramname">privkey_pass</td><td>The password of private key, if any. </td></tr>
    <tr><td class="paramname">p_cert</td><td>Pointer to credential instance to be created.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a id="ga901034c1b1126f24dcd6ed1e81cd7e8f" name="ga901034c1b1126f24dcd6ed1e81cd7e8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga901034c1b1126f24dcd6ed1e81cd7e8f">&#9670;&nbsp;</a></span>pj_ssl_cert_load_from_files2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cert_load_from_files2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>CA_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>CA_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>cert_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>privkey_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>privkey_pass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **&#160;</td>
          <td class="paramname"><em>p_cert</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create credential from files. TLS server application can provide multiple certificates (RSA, ECC, and DSA) by supplying certificate name with "_rsa" suffix, e.g: "pjsip_rsa.pem", the library will automatically check for other certificates with "_ecc" and "_dsa" suffix.</p>
<p >This is the same as <a class="el" href="group__PJ__SSL__SOCK.htm#ga6f41ea4d6dee0960a176e1207ae94e0f">pj_ssl_cert_load_from_files()</a> but also accepts an additional param CA_path to load CA certificates from a directory.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">CA_file</td><td>The file of trusted CA list. </td></tr>
    <tr><td class="paramname">CA_path</td><td>The path to a directory of trusted CA list. </td></tr>
    <tr><td class="paramname">cert_file</td><td>The file of certificate. </td></tr>
    <tr><td class="paramname">privkey_file</td><td>The file of private key. </td></tr>
    <tr><td class="paramname">privkey_pass</td><td>The password of private key, if any. </td></tr>
    <tr><td class="paramname">p_cert</td><td>Pointer to credential instance to be created.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a id="gaafbe11c66bc5efba0975e45e4269c713" name="gaafbe11c66bc5efba0975e45e4269c713"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaafbe11c66bc5efba0975e45e4269c713">&#9670;&nbsp;</a></span>pj_ssl_cert_wipe_keys()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_ssl_cert_wipe_keys </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> *&#160;</td>
          <td class="paramname"><em>cert</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Wipe out the keys in the SSL certificate.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cert</td><td>The SSL certificate. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga19d7f3eb6dcb931761b89d6cdc51a01e" name="ga19d7f3eb6dcb931761b89d6cdc51a01e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga19d7f3eb6dcb931761b89d6cdc51a01e">&#9670;&nbsp;</a></span>pj_ssl_cipher_get_availables()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cipher_get_availables </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&#160;</td>
          <td class="paramname"><em>ciphers</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned *&#160;</td>
          <td class="paramname"><em>cipher_num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get cipher list supported by SSL/TLS backend.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ciphers</td><td>The ciphers buffer to receive cipher list. </td></tr>
    <tr><td class="paramname">cipher_num</td><td>Maximum number of ciphers to be received.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a id="gae245194dee9b69c6e194fb671054582d" name="gae245194dee9b69c6e194fb671054582d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae245194dee9b69c6e194fb671054582d">&#9670;&nbsp;</a></span>pj_ssl_cipher_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> pj_ssl_cipher_id </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>cipher_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get cipher ID from cipher name string. Note that on different backends (e.g. OpenSSL or Symbian implementation), cipher names may not be equivalent for the same cipher ID.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cipher_name</td><td>The cipher name string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The cipher ID or PJ_TLS_UNKNOWN_CIPHER if the cipher name string is not recognized/supported. </dd></dl>

</div>
</div>
<a id="ga1476e697e73ff8add8fa4c24ac25a09b" name="ga1476e697e73ff8add8fa4c24ac25a09b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1476e697e73ff8add8fa4c24ac25a09b">&#9670;&nbsp;</a></span>pj_ssl_cipher_is_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pj_ssl_cipher_is_supported </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&#160;</td>
          <td class="paramname"><em>cipher</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if the specified cipher is supported by SSL/TLS backend.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cipher</td><td>The cipher.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_TRUE when supported. </dd></dl>

</div>
</div>
<a id="ga0d8cc4717c7647a2f19ebbaedae59552" name="ga0d8cc4717c7647a2f19ebbaedae59552"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0d8cc4717c7647a2f19ebbaedae59552">&#9670;&nbsp;</a></span>pj_ssl_cipher_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * pj_ssl_cipher_name </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&#160;</td>
          <td class="paramname"><em>cipher</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get cipher name string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cipher</td><td>The cipher.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The cipher name or NULL if cipher is not recognized/ supported. </dd></dl>

</div>
</div>
<a id="gaebd32cd02c1f61139687b09d6c78ccd0" name="gaebd32cd02c1f61139687b09d6c78ccd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaebd32cd02c1f61139687b09d6c78ccd0">&#9670;&nbsp;</a></span>pj_ssl_curve_get_availables()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_curve_get_availables </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a>&#160;</td>
          <td class="paramname"><em>curves</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned *&#160;</td>
          <td class="paramname"><em>curve_num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get curve list supported by SSL/TLS backend.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">curves</td><td>The curves buffer to receive curve list. </td></tr>
    <tr><td class="paramname">curve_num</td><td>Maximum number of curves to be received.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a id="ga57f9a9d9c12a0698fdecb6d0041df3c0" name="ga57f9a9d9c12a0698fdecb6d0041df3c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga57f9a9d9c12a0698fdecb6d0041df3c0">&#9670;&nbsp;</a></span>pj_ssl_curve_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a> pj_ssl_curve_id </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>curve_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get curve ID from curve name string. Note that on different backends (e.g. OpenSSL or Symbian implementation), curve names may not be equivalent for the same curve ID.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">curve_name</td><td>The curve name string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The curve ID or PJ_TLS_UNKNOWN_CURVE if the curve name string is not recognized/supported. </dd></dl>

</div>
</div>
<a id="gad480c8d7a362cdbe3d504fd3581018ce" name="gad480c8d7a362cdbe3d504fd3581018ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad480c8d7a362cdbe3d504fd3581018ce">&#9670;&nbsp;</a></span>pj_ssl_curve_is_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pj_ssl_curve_is_supported </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a>&#160;</td>
          <td class="paramname"><em>curve</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if the specified curve is supported by SSL/TLS backend.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">curve</td><td>The curve.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_TRUE when supported. </dd></dl>

</div>
</div>
<a id="ga1782f11f14111e774c56764e6914b0fd" name="ga1782f11f14111e774c56764e6914b0fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1782f11f14111e774c56764e6914b0fd">&#9670;&nbsp;</a></span>pj_ssl_curve_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * pj_ssl_curve_name </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac28d939f81b88e799221aa1b9abf607e">pj_ssl_curve</a>&#160;</td>
          <td class="paramname"><em>curve</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get curve name string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">curve</td><td>The curve.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The curve name or NULL if curve is not recognized/ supported. </dd></dl>

</div>
</div>
<a id="gad18de000180234c0747418b9f14a6a54" name="gad18de000180234c0747418b9f14a6a54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad18de000180234c0747418b9f14a6a54">&#9670;&nbsp;</a></span>pj_ssl_sock_close()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_close </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Close and destroy the secure socket.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="ga754a041bc5466b6606008f698b4e0bc5" name="ga754a041bc5466b6606008f698b4e0bc5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga754a041bc5466b6606008f698b4e0bc5">&#9670;&nbsp;</a></span>pj_ssl_sock_create()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *&#160;</td>
          <td class="paramname"><em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> **&#160;</td>
          <td class="paramname"><em>p_ssock</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create secure socket instance.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool for allocating secure socket instance. </td></tr>
    <tr><td class="paramname">param</td><td>The secure socket parameter, see <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a>. </td></tr>
    <tr><td class="paramname">p_ssock</td><td>Pointer to secure socket instance to be created.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a id="gaee1d4ddbd7c680cdd7ef0636900ef5cb" name="gaee1d4ddbd7c680cdd7ef0636900ef5cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaee1d4ddbd7c680cdd7ef0636900ef5cb">&#9670;&nbsp;</a></span>pj_ssl_sock_get_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_get_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a> *&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Retrieve the local address and port used by specified secure socket.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">info</td><td>The info buffer to be set, see <a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on successful. </dd></dl>

</div>
</div>
<a id="ga993787773287959386995e109a6a370b" name="ga993787773287959386995e109a6a370b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga993787773287959386995e109a6a370b">&#9670;&nbsp;</a></span>pj_ssl_sock_get_user_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * pj_ssl_sock_get_user_data </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Retrieve the user data previously associated with this secure socket.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The user data. </dd></dl>

</div>
</div>
<a id="gad6a92baa7d2b13dc285653b333c199ad" name="gad6a92baa7d2b13dc285653b333c199ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad6a92baa7d2b13dc285653b333c199ad">&#9670;&nbsp;</a></span>pj_ssl_sock_param_copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_ssl_sock_param_copy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Duplicate <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>Pool to allocate memory. </td></tr>
    <tr><td class="paramname">dst</td><td>Destination parameter. </td></tr>
    <tr><td class="paramname">src</td><td>Source parameter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga7371af9e78093f05575aacdc34993e2c" name="ga7371af9e78093f05575aacdc34993e2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7371af9e78093f05575aacdc34993e2c">&#9670;&nbsp;</a></span>pj_ssl_sock_param_default()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_ssl_sock_param_default </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *&#160;</td>
          <td class="paramname"><em>param</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initialize the secure socket parameters for its creation with the default values.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">param</td><td>The parameter to be initialized. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaca23db39a5e9d270bf89f16e589798d0" name="gaca23db39a5e9d270bf89f16e589798d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaca23db39a5e9d270bf89f16e589798d0">&#9670;&nbsp;</a></span>pj_ssl_sock_renegotiate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_renegotiate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Starts SSL/TLS renegotiation over an already established SSL connection for this socket. This operation is performed transparently, no callback will be called once the renegotiation completed successfully. However, when the renegotiation fails, the connection will be closed and callback <em>on_data_read()</em> will be invoked with non-PJ_SUCCESS status code.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if renegotiation is completed immediately, or PJ_EPENDING if renegotiation has been started and waiting for completion, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="ga3d4b8b377709aa10a1ca37c05b0f0df0" name="ga3d4b8b377709aa10a1ca37c05b0f0df0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3d4b8b377709aa10a1ca37c05b0f0df0">&#9670;&nbsp;</a></span>pj_ssl_sock_send()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_send </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *&#160;</td>
          <td class="paramname"><em>send_key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send data using the socket.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname"><a class="el" href="structsend__key.htm">send_key</a></td><td>The operation key to send the data, which is useful if application wants to submit multiple pending send operations and want to track which exact data has been sent in the <em>on_data_sent()</em> callback. </td></tr>
    <tr><td class="paramname">data</td><td>The data to be sent. This data must remain valid until the data has been sent. </td></tr>
    <tr><td class="paramname">size</td><td>The size of the data. </td></tr>
    <tr><td class="paramname">flags</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if data has been sent immediately, or PJ_EPENDING if data cannot be sent immediately or PJ_ENOMEM when sending buffer could not handle all queued data, see <em>send_buffer_size</em>. The callback <em>on_data_sent()</em> will be called when data is actually sent. Any other return value indicates error condition. </dd></dl>

</div>
</div>
<a id="ga9cccecf460743235ca1e7d62fdaa5467" name="ga9cccecf460743235ca1e7d62fdaa5467"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9cccecf460743235ca1e7d62fdaa5467">&#9670;&nbsp;</a></span>pj_ssl_sock_sendto()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_sendto </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *&#160;</td>
          <td class="paramname"><em>send_key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>addr_len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send datagram using the socket.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname"><a class="el" href="structsend__key.htm">send_key</a></td><td>The operation key to send the data, which is useful if application wants to submit multiple pending send operations and want to track which exact data has been sent in the <em>on_data_sent()</em> callback. </td></tr>
    <tr><td class="paramname">data</td><td>The data to be sent. This data must remain valid until the data has been sent. </td></tr>
    <tr><td class="paramname">size</td><td>The size of the data. </td></tr>
    <tr><td class="paramname">flags</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send()</a>. </td></tr>
    <tr><td class="paramname">addr</td><td>The destination address. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of buffer containing destination address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if data has been sent immediately, or PJ_EPENDING if data cannot be sent immediately. In this case the <em>on_data_sent()</em> callback will be called when data is actually sent. Any other return value indicates error condition. </dd></dl>

</div>
</div>
<a id="ga2f97f0cbc876399bf4ff9f80333c7080" name="ga2f97f0cbc876399bf4ff9f80333c7080"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2f97f0cbc876399bf4ff9f80333c7080">&#9670;&nbsp;</a></span>pj_ssl_sock_set_certificate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_set_certificate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> *&#160;</td>
          <td class="paramname"><em>cert</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set secure socket certificate or credentials. Credentials may include certificate, private key and trusted Certification Authorities list. Normally, server socket must provide certificate (and private key). Socket client may also need to provide certificate in case requested by the server.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket instance. </td></tr>
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">cert</td><td>The endpoint certificate/credentials, see <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="ga3ed3bf286a1c338332619a38fd0512ab" name="ga3ed3bf286a1c338332619a38fd0512ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3ed3bf286a1c338332619a38fd0512ab">&#9670;&nbsp;</a></span>pj_ssl_sock_set_user_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_set_user_data </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Associate arbitrary data with the secure socket. Application may inspect this data in the callbacks and associate it with higher level processing.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">user_data</td><td>The user data to be associated with the secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="ga9cd4fbf761a6ee07769122085dd04f73" name="ga9cd4fbf761a6ee07769122085dd04f73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9cd4fbf761a6ee07769122085dd04f73">&#9670;&nbsp;</a></span>pj_ssl_sock_start_accept()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_accept </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>local_addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>addr_len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Starts asynchronous socket accept() operations on this secure socket. This function will issue <em>async_cnt</em> number of asynchronous <em>accept()</em> operations to the socket and returns back to caller. Incoming connection on the socket will be reported back to application via the <em>on_accept_complete()</em> callback.</p>
<p >Application only needs to call this function once to initiate accept() operations. Further accept() operations will be done automatically by the secure socket when <em>on_accept_complete()</em> callback returns non-zero.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">pool</td><td>Pool used to allocate some internal data for the operation. </td></tr>
    <tr><td class="paramname">local_addr</td><td>Local address to bind on. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of buffer containing local address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="ga4f33429923e2b1a1f6e31490701943bf" name="ga4f33429923e2b1a1f6e31490701943bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4f33429923e2b1a1f6e31490701943bf">&#9670;&nbsp;</a></span>pj_ssl_sock_start_accept2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_accept2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>local_addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>addr_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *&#160;</td>
          <td class="paramname"><em>newsock_param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Same as <a class="el" href="group__PJ__SSL__SOCK.htm#ga9cd4fbf761a6ee07769122085dd04f73">pj_ssl_sock_start_accept()</a>, but application can provide a secure socket parameter, which will be used to create a new secure socket reported in <em>on_accept_complete()</em> callback when there is an incoming connection.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">pool</td><td>Pool used to allocate some internal data for the operation. </td></tr>
    <tr><td class="paramname">local_addr</td><td>Local address to bind on. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of buffer containing local address. </td></tr>
    <tr><td class="paramname">newsock_param</td><td>Secure socket parameter for new accepted sockets.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="gac1c3b0ca4ff363a6df2d04434c4b0027" name="gac1c3b0ca4ff363a6df2d04434c4b0027"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac1c3b0ca4ff363a6df2d04434c4b0027">&#9670;&nbsp;</a></span>pj_ssl_sock_start_connect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_connect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>localaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>remaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>addr_len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Starts asynchronous socket connect() operation and SSL/TLS handshaking for this socket. Once the connection is done (either successfully or not), the <em>on_connect_complete()</em> callback will be called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">pool</td><td>The pool to allocate some internal data for the operation. </td></tr>
    <tr><td class="paramname">localaddr</td><td>Local address. </td></tr>
    <tr><td class="paramname">remaddr</td><td>Remote address. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of buffer containing above addresses.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if connection can be established immediately or PJ_EPENDING if connection cannot be established immediately. In this case the <em>on_connect_complete()</em> callback will be called when connection is complete. Any other return value indicates error condition. </dd></dl>

</div>
</div>
<a id="ga485cee9cf28f45ef631aeff19076c156" name="ga485cee9cf28f45ef631aeff19076c156"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga485cee9cf28f45ef631aeff19076c156">&#9670;&nbsp;</a></span>pj_ssl_sock_start_connect2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_connect2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ssl__start__connect__param.htm">pj_ssl_start_connect_param</a> *&#160;</td>
          <td class="paramname"><em>connect_param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Same as <a class="el" href="group__PJ__SSL__SOCK.htm#gac1c3b0ca4ff363a6df2d04434c4b0027">pj_ssl_sock_start_connect()</a>, but application can provide a <em>port_range</em> parameter, which will be used to bind the socket to random port.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket.</td></tr>
    <tr><td class="paramname">connect_param</td><td>The parameter, refer to <em><a class="el" href="structpj__ssl__start__connect__param.htm">pj_ssl_start_connect_param</a></em>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if connection can be established immediately or PJ_EPENDING if connection cannot be established immediately. In this case the <em>on_connect_complete()</em> callback will be called when connection is complete. Any other return value indicates error condition. </dd></dl>

</div>
</div>
<a id="ga64967383bdeaab292724a9d45266b715" name="ga64967383bdeaab292724a9d45266b715"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga64967383bdeaab292724a9d45266b715">&#9670;&nbsp;</a></span>pj_ssl_sock_start_read()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_read </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Starts read operation on this secure socket. This function will create <em>async_cnt</em> number of buffers (the <em>async_cnt</em> parameter was given in <em><a class="el" href="group__PJ__SSL__SOCK.htm#ga754a041bc5466b6606008f698b4e0bc5">pj_ssl_sock_create()</a></em> function) where each buffer is <em>buff_size</em> long. The buffers are allocated from the specified <em>pool</em>. Once the buffers are created, it then issues <em>async_cnt</em> number of asynchronous <em>recv()</em> operations to the socket and returns back to caller. Incoming data on the socket will be reported back to application via the <em>on_data_read()</em> callback.</p>
<p >Application only needs to call this function once to initiate read operations. Further read operations will be done automatically by the secure socket when <em>on_data_read()</em> callback returns non-zero.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">pool</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td class="paramname">buff_size</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td class="paramname">flags</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="ga7732c1f7fb3c5cc0896ff26cc48bda39" name="ga7732c1f7fb3c5cc0896ff26cc48bda39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7732c1f7fb3c5cc0896ff26cc48bda39">&#9670;&nbsp;</a></span>pj_ssl_sock_start_read2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_read2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>readbuf</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Same as <a class="el" href="group__PJ__SSL__SOCK.htm#ga64967383bdeaab292724a9d45266b715">pj_ssl_sock_start_read()</a>, except that the application supplies the buffers for the read operation so that the acive socket does not have to allocate the buffers.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">pool</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td class="paramname">buff_size</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td class="paramname">readbuf</td><td>Array of packet buffers, each has buff_size size. </td></tr>
    <tr><td class="paramname">flags</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="gaedae59ede7e40f69449eb8c3405d48d0" name="gaedae59ede7e40f69449eb8c3405d48d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaedae59ede7e40f69449eb8c3405d48d0">&#9670;&nbsp;</a></span>pj_ssl_sock_start_recvfrom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_recvfrom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Same as <a class="el" href="group__PJ__SSL__SOCK.htm#ga64967383bdeaab292724a9d45266b715">pj_ssl_sock_start_read()</a>, except that this function is used only for datagram sockets, and it will trigger <em>on_data_recvfrom()</em> callback instead.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">pool</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td class="paramname">buff_size</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td class="paramname">flags</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a id="ga5b5022402caf4a37573d77835b2b7718" name="ga5b5022402caf4a37573d77835b2b7718"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5b5022402caf4a37573d77835b2b7718">&#9670;&nbsp;</a></span>pj_ssl_sock_start_recvfrom2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_recvfrom2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&#160;</td>
          <td class="paramname"><em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>readbuf</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Same as <a class="el" href="group__PJ__SSL__SOCK.htm#gaedae59ede7e40f69449eb8c3405d48d0">pj_ssl_sock_start_recvfrom()</a> except that the recvfrom() operation takes the buffer from the argument rather than creating new ones.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ssock</td><td>The secure socket. </td></tr>
    <tr><td class="paramname">pool</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td class="paramname">buff_size</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td class="paramname">readbuf</td><td>Array of packet buffers, each has buff_size size. </td></tr>
    <tr><td class="paramname">flags</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
