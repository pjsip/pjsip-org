<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: I/O Queue (TCP) (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div><div class="header">
  <div class="headertitle"><div class="title">Test: I/O Queue (TCP) </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p >This file provides implementation to test the functionality of the I/O queue when TCP socket is used.</p>
<p >This file is <b>pjlib-test/ioq_tcp.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* </span></div>
<div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div>
<div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div>
<div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div>
<div class="line"><span class="comment"> * (at your option) any later version.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div>
<div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><span class="comment"> * GNU General Public License for more details.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div>
<div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div>
<div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if INCLUDE_TCP_IOQUEUE_TEST</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if PJ_HAS_TCP</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define THIS_FILE           &quot;test_tcp&quot;</span></div>
<div class="line"><span class="preprocessor">#define NON_EXISTANT_PORT   50123</span></div>
<div class="line"><span class="preprocessor">#define LOOP                100</span></div>
<div class="line"><span class="preprocessor">#define BUF_MIN_SIZE        32</span></div>
<div class="line"><span class="preprocessor">#define BUF_MAX_SIZE        2048</span></div>
<div class="line"><span class="preprocessor">#define SOCK_INACTIVE_MIN   (4-2)</span></div>
<div class="line"><span class="preprocessor">#define SOCK_INACTIVE_MAX   (PJ_IOQUEUE_MAX_HANDLES - 2)</span></div>
<div class="line"><span class="preprocessor">#define POOL_SIZE           (2*BUF_MAX_SIZE + SOCK_INACTIVE_MAX*128 + 2048)</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>            callback_read_size,</div>
<div class="line">                             callback_write_size,</div>
<div class="line">                             callback_accept_status,</div>
<div class="line">                             callback_connect_status;</div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">unsigned</span>              callback_call_count;</div>
<div class="line"><span class="keyword">static</span> <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>     *callback_read_key,</div>
<div class="line">                            *callback_write_key,</div>
<div class="line">                            *callback_accept_key,</div>
<div class="line">                            *callback_connect_key;</div>
<div class="line"><span class="keyword">static</span> <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>  *callback_read_op,</div>
<div class="line">                            *callback_write_op,</div>
<div class="line">                            *callback_accept_op;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_read(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div>
<div class="line">                            <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>,</div>
<div class="line">                            <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)</div>
<div class="line">{</div>
<div class="line">    callback_read_key = key;</div>
<div class="line">    callback_read_op = <a class="code hl_struct" href="structop__key.htm">op_key</a>;</div>
<div class="line">    callback_read_size = bytes_read;</div>
<div class="line">    callback_call_count++;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_write(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div>
<div class="line">                             <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>,</div>
<div class="line">                             <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_written)</div>
<div class="line">{</div>
<div class="line">    callback_write_key = key;</div>
<div class="line">    callback_write_op = <a class="code hl_struct" href="structop__key.htm">op_key</a>;</div>
<div class="line">    callback_write_size = bytes_written;</div>
<div class="line">    callback_call_count++;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_accept(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div>
<div class="line">                              <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>,</div>
<div class="line">                              <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock, </div>
<div class="line">                              <span class="keywordtype">int</span> status)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">if</span> (sock == <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            <span class="comment">/* Ignore. Could be blocking error */</span></div>
<div class="line">            app_perror(<span class="stringliteral">&quot;.....warning: received error in on_ioqueue_accept() callback&quot;</span>,</div>
<div class="line">                       status);</div>
<div class="line">        } <span class="keywordflow">else</span> {</div>
<div class="line">            callback_accept_status = -61;</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;..... on_ioqueue_accept() callback was given &quot;</span></div>
<div class="line">                          <span class="stringliteral">&quot;invalid socket and status is %d&quot;</span>, status));</div>
<div class="line">        }</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        <a class="code hl_union" href="unionpj__sockaddr.htm">pj_sockaddr</a> addr;</div>
<div class="line">        <span class="keywordtype">int</span> client_addr_len;</div>
<div class="line"> </div>
<div class="line">        client_addr_len = <span class="keyword">sizeof</span>(addr);</div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(sock, &amp;addr, &amp;client_addr_len);</div>
<div class="line">        <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_getsockname()&quot;</span>, status);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        callback_accept_key = key;</div>
<div class="line">        callback_accept_op = <a class="code hl_struct" href="structop__key.htm">op_key</a>;</div>
<div class="line">        callback_accept_status = status;</div>
<div class="line">        callback_call_count++;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_connect(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <span class="keywordtype">int</span> status)</div>
<div class="line">{</div>
<div class="line">    callback_connect_key = key;</div>
<div class="line">    callback_connect_status = status;</div>
<div class="line">    callback_call_count++;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_struct" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> test_cb = </div>
<div class="line">{</div>
<div class="line">    &amp;on_ioqueue_read,</div>
<div class="line">    &amp;on_ioqueue_write,</div>
<div class="line">    &amp;on_ioqueue_accept,</div>
<div class="line">    &amp;on_ioqueue_connect,</div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> send_recv_test(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque,</div>
<div class="line">                          <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey,</div>
<div class="line">                          <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *ckey,</div>
<div class="line">                          <span class="keywordtype">void</span> *send_buf,</div>
<div class="line">                          <span class="keywordtype">void</span> *recv_buf,</div>
<div class="line">                          <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bufsize,</div>
<div class="line">                          <a class="code hl_union" href="unionpj__timestamp.htm">pj_timestamp</a> *t_elapsed)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;</div>
<div class="line">    <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout;</div>
<div class="line">    <a class="code hl_union" href="unionpj__timestamp.htm">pj_timestamp</a> t1, t2;</div>
<div class="line">    <span class="keywordtype">int</span> i, pending_op = 0;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> read_op, write_op;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Init operation keys.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;read_op, <span class="keyword">sizeof</span>(read_op));</div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;write_op, <span class="keyword">sizeof</span>(write_op));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Start reading on the server side.</span></div>
<div class="line">    bytes = bufsize;</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(skey, &amp;read_op, recv_buf, &amp;bytes, 0);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...pj_ioqueue_recv error&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -100;</div>
<div class="line">    }</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (status == <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>)</div>
<div class="line">        ++pending_op;</div>
<div class="line">    <span class="keywordflow">else</span> {</div>
<div class="line">        <span class="comment">/* Does not expect to return error or immediate data. */</span></div>
<div class="line">        <span class="keywordflow">return</span> -115;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Randomize send buffer.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gaa89224d869eb10610c4c63617dcbb752">pj_create_random_string</a>((<span class="keywordtype">char</span>*)send_buf, bufsize);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Starts send on the client side.</span></div>
<div class="line">    bytes = bufsize;</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send</a>(ckey, &amp;write_op, send_buf, &amp;bytes, 0);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; bytes != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        <span class="keywordflow">return</span> -120;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (status == <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        ++pending_op;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Begin time.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Reset indicators</span></div>
<div class="line">    callback_read_size = callback_write_size = 0;</div>
<div class="line">    callback_read_key = callback_write_key = NULL;</div>
<div class="line">    callback_read_op = callback_write_op = NULL;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Poll the queue until we&#39;ve got completion event in the server side.</span></div>
<div class="line">    status = 0;</div>
<div class="line">    <span class="keywordflow">while</span> (pending_op &gt; 0) {</div>
<div class="line">        timeout.<a class="code hl_variable" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 1; timeout.<a class="code hl_variable" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">        <a class="code hl_define" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(ioque);</div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 1000);</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">        <span class="keywordflow">if</span> (status &gt; 0) {</div>
<div class="line">            <span class="keywordflow">if</span> (callback_read_size) {</div>
<div class="line">                <span class="keywordflow">if</span> (callback_read_size != bufsize)</div>
<div class="line">                    <span class="keywordflow">return</span> -160;</div>
<div class="line">                <span class="keywordflow">if</span> (callback_read_key != skey)</div>
<div class="line">                    <span class="keywordflow">return</span> -161;</div>
<div class="line">                <span class="keywordflow">if</span> (callback_read_op != &amp;read_op)</div>
<div class="line">                    <span class="keywordflow">return</span> -162;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (callback_write_size) {</div>
<div class="line">                <span class="keywordflow">if</span> (callback_write_key != ckey)</div>
<div class="line">                    <span class="keywordflow">return</span> -163;</div>
<div class="line">                <span class="keywordflow">if</span> (callback_write_op != &amp;write_op)</div>
<div class="line">                    <span class="keywordflow">return</span> -164;</div>
<div class="line">            }</div>
<div class="line">            pending_op -= status;</div>
<div class="line">        }</div>
<div class="line">        <span class="keywordflow">if</span> (status == 0) {</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: timed out&quot;</span>));</div>
<div class="line">        }</div>
<div class="line">        <span class="keywordflow">if</span> (status &lt; 0) {</div>
<div class="line">            <span class="keywordflow">return</span> -170;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Pending op is zero.</span></div>
<div class="line">    <span class="comment">// Subsequent poll should yield zero too.</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;10; ++i) {</div>
<div class="line">        timeout.<a class="code hl_variable" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 0;</div>
<div class="line">        timeout.<a class="code hl_variable" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 50;</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 1);</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">        <span class="keywordflow">if</span> (status != 0)</div>
<div class="line">            <span class="keywordflow">return</span> -173;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// End time.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);</div>
<div class="line">    t_elapsed-&gt;<a class="code hl_variable" href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">u32</a>.<a class="code hl_variable" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code hl_variable" href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">u32</a>.<a class="code hl_variable" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code hl_variable" href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">u32</a>.<a class="code hl_variable" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Compare recv buffer with send buffer.</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_function" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(send_buf, recv_buf, bufsize) != 0) {</div>
<div class="line">        <span class="keywordflow">return</span> -180;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Success</span></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Compliance test for success scenario.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test_0(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock=-1, csock0=-1, csock1=-1;</div>
<div class="line">    <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr, client_addr, rmt_addr;</div>
<div class="line">    <span class="keywordtype">int</span> client_addr_len;</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;</div>
<div class="line">    <span class="keywordtype">char</span> *send_buf, *recv_buf;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey=NULL, *ckey0=NULL, *ckey1=NULL;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> accept_op;</div>
<div class="line">    <span class="keywordtype">int</span> bufsize = BUF_MIN_SIZE;</div>
<div class="line">    <span class="keywordtype">int</span> status = -1;</div>
<div class="line">    <span class="keywordtype">int</span> pending_op = 0;</div>
<div class="line">    <a class="code hl_union" href="unionpj__timestamp.htm">pj_timestamp</a> t_elapsed;</div>
<div class="line">    <a class="code hl_struct" href="structpj__str__t.htm">pj_str_t</a> s;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create pool.</span></div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Allocate buffers for send and receive.</span></div>
<div class="line">    send_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line">    recv_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create server socket and client socket for connecting</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;ssock);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);</div>
<div class="line">        status=-1; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;csock1);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);</div>
<div class="line">        status=-1; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Bind server socket.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr, 0, 0);</div>
<div class="line">    <span class="keywordflow">if</span> ((rc=<a class="code hl_function" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(ssock, &amp;addr, <span class="keyword">sizeof</span>(addr))) != 0 ) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...bind error&quot;</span>, rc);</div>
<div class="line">        status=-10; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Get server address.</span></div>
<div class="line">    client_addr_len = <span class="keyword">sizeof</span>(addr);</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(ssock, &amp;addr, &amp;client_addr_len);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_getsockname()&quot;</span>, rc);</div>
<div class="line">        status=-15; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line">    addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a> = <a class="code hl_function" href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a>(<a class="code hl_function" href="group__PJ__PSTR.htm#gac34ba480d390a5652092da2fc29b4493">pj_cstr</a>(&amp;s, <span class="stringliteral">&quot;127.0.0.1&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create I/O Queue.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, <a class="code hl_define" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, cfg, &amp;ioque);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_create()&quot;</span>, rc);</div>
<div class="line">        status=-20; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Init operation key.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;accept_op, <span class="keyword">sizeof</span>(accept_op));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register server socket and client socket.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, ssock, NULL, &amp;test_cb, &amp;skey);</div>
<div class="line">    <span class="keywordflow">if</span> (rc == <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock1, NULL, &amp;test_cb, </div>
<div class="line">                                      &amp;ckey1);</div>
<div class="line">    <span class="keywordflow">else</span></div>
<div class="line">        ckey1 = NULL;</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock()&quot;</span>, rc);</div>
<div class="line">        status=-23; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Server socket listen().</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_function" href="group__PJ__SOCK.htm#ga6ca05fa6aa8db88c19a60d793fa0cc6b">pj_sock_listen</a>(ssock, 5)) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_listen()&quot;</span>, rc);</div>
<div class="line">        status=-25; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Server socket accept()</span></div>
<div class="line">    client_addr_len = <span class="keyword">sizeof</span>(<a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>);</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gaf7505cc18b3031e43e68c5fd4a7a388e">pj_ioqueue_accept</a>(skey, &amp;accept_op, &amp;csock0, </div>
<div class="line">                               &amp;client_addr, &amp;rmt_addr, &amp;client_addr_len);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_accept()&quot;</span>, rc);</div>
<div class="line">        status=-30; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (status==<a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        ++pending_op;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Client socket connect()</span></div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a>(ckey1, &amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line">    <span class="keywordflow">if</span> (status!=<a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_connect()&quot;</span>, rc);</div>
<div class="line">        status=-40; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (status==<a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        ++pending_op;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Poll until connected</span></div>
<div class="line">    callback_read_size = callback_write_size = 0;</div>
<div class="line">    callback_accept_status = callback_connect_status = -2;</div>
<div class="line">    callback_call_count = 0;</div>
<div class="line"> </div>
<div class="line">    callback_read_key = callback_write_key = </div>
<div class="line">        callback_accept_key = callback_connect_key = NULL;</div>
<div class="line">    callback_accept_op = callback_read_op = callback_write_op = NULL;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">while</span> (pending_op) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">        callback_call_count = 0;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line">        status = callback_call_count;</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">        <span class="keywordflow">if</span> (status &gt; 0) {</div>
<div class="line">            <span class="keywordflow">if</span> (callback_accept_status != -2) {</div>
<div class="line">                <span class="keywordflow">if</span> (callback_accept_status != 0) {</div>
<div class="line">                    status=-41; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">                }</div>
<div class="line">                <span class="keywordflow">if</span> (callback_accept_key != skey) {</div>
<div class="line">                    status=-42; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">                }</div>
<div class="line">                <span class="keywordflow">if</span> (callback_accept_op != &amp;accept_op) {</div>
<div class="line">                    status=-43; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">                }</div>
<div class="line">                callback_accept_status = -2;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (callback_connect_status != -2) {</div>
<div class="line">                <span class="keywordflow">if</span> (callback_connect_status != 0) {</div>
<div class="line">                    status=-50; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">                }</div>
<div class="line">                <span class="keywordflow">if</span> (callback_connect_key != ckey1) {</div>
<div class="line">                    status=-51; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">                }</div>
<div class="line">                callback_connect_status = -2;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (status &gt; pending_op) {</div>
<div class="line">                <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,</div>
<div class="line">                          <span class="stringliteral">&quot;...error: pj_ioqueue_poll() returned %d &quot;</span></div>
<div class="line">                          <span class="stringliteral">&quot;(only expecting %d)&quot;</span>,</div>
<div class="line">                          status, pending_op));</div>
<div class="line">                <span class="keywordflow">return</span> -52;</div>
<div class="line">            }</div>
<div class="line">            pending_op -= status;</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (pending_op == 0) {</div>
<div class="line">                status = 0;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// There&#39;s no pending operation.</span></div>
<div class="line">    <span class="comment">// When we poll the ioqueue, there must not be events.</span></div>
<div class="line">    <span class="keywordflow">if</span> (pending_op == 0) {</div>
<div class="line">        <span class="keywordtype">unsigned</span> i;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (i=0; i&lt;10; ++i) {</div>
<div class="line">            <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = {0, 50};</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">            status = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">            status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">            <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line">                status=-60; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Check accepted socket.</span></div>
<div class="line">    <span class="keywordflow">if</span> (csock0 == <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">        status = -69;</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...accept() error&quot;</span>, <a class="code hl_function" href="group__pj__errno.htm#gab55e3d49c25f27e8353a8dd385f97942">pj_get_os_error</a>());</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register newly accepted socket.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock0, NULL, </div>
<div class="line">                                  &amp;test_cb, &amp;ckey0);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock&quot;</span>, rc);</div>
<div class="line">        status = -70;</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Test send and receive.</span></div>
<div class="line">    t_elapsed.<a class="code hl_variable" href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">u32</a>.<a class="code hl_variable" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;</div>
<div class="line">    status = send_recv_test(ioque, ckey0, ckey1, send_buf, </div>
<div class="line">                            recv_buf, bufsize, &amp;t_elapsed);</div>
<div class="line">    <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Success</span></div>
<div class="line">    status = 0;</div>
<div class="line"> </div>
<div class="line">on_error:</div>
<div class="line">    <span class="keywordflow">if</span> (skey != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(skey);</div>
<div class="line">    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ssock != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (ckey1 != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey1);</div>
<div class="line">    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock1 != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock1);</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (ckey0 != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey0);</div>
<div class="line">    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock0 != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock0);</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (ioque != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line">    <span class="keywordflow">return</span> status;</div>
<div class="line"> </div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Compliance test for failed scenario.</span></div>
<div class="line"><span class="comment"> * In this case, the client connects to a non-existant service.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test_1(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> csock1=<a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">    <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *ckey1 = NULL;</div>
<div class="line">    <span class="keywordtype">int</span> status = -1;</div>
<div class="line">    <span class="keywordtype">int</span> pending_op = 0;</div>
<div class="line">    <a class="code hl_struct" href="structpj__str__t.htm">pj_str_t</a> s;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create pool.</span></div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create I/O Queue.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, <a class="code hl_define" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, cfg, &amp;ioque);</div>
<div class="line">    <span class="keywordflow">if</span> (!ioque) {</div>
<div class="line">        status=-20; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create client socket</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;csock1);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_socket()&quot;</span>, rc);</div>
<div class="line">        status=-1; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register client socket.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock1, NULL, </div>
<div class="line">                                  &amp;test_cb, &amp;ckey1);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock()&quot;</span>, rc);</div>
<div class="line">        status=-23; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Initialize remote address.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr, <a class="code hl_function" href="group__PJ__PSTR.htm#gac34ba480d390a5652092da2fc29b4493">pj_cstr</a>(&amp;s, <span class="stringliteral">&quot;127.0.0.1&quot;</span>), NON_EXISTANT_PORT);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Client socket connect()</span></div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a>(ckey1, &amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line">    <span class="keywordflow">if</span> (status==<a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        <span class="comment">// unexpectedly success!</span></div>
<div class="line">        status = -30;</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        <span class="comment">// success</span></div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        ++pending_op;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    callback_connect_status = -2;</div>
<div class="line">    callback_connect_key = NULL;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Poll until we&#39;ve got result</span></div>
<div class="line">    <span class="keywordflow">while</span> (pending_op) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">        callback_call_count = 0;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line">        status = callback_call_count;</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">        <span class="keywordflow">if</span> (status &gt; 0) {</div>
<div class="line">            <span class="keywordflow">if</span> (callback_connect_key==ckey1) {</div>
<div class="line">                <span class="keywordflow">if</span> (callback_connect_status == 0) {</div>
<div class="line">                    <span class="comment">// unexpectedly connected!</span></div>
<div class="line">                    status = -50;</div>
<div class="line">                    <span class="keywordflow">goto</span> on_error;</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (status &gt; pending_op) {</div>
<div class="line">                <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,</div>
<div class="line">                          <span class="stringliteral">&quot;...error: pj_ioqueue_poll() returned %d &quot;</span></div>
<div class="line">                          <span class="stringliteral">&quot;(only expecting %d)&quot;</span>,</div>
<div class="line">                          status, pending_op));</div>
<div class="line">                <span class="keywordflow">return</span> -552;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            pending_op -= status;</div>
<div class="line">            <span class="keywordflow">if</span> (pending_op == 0) {</div>
<div class="line">                status = 0;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// There&#39;s no pending operation.</span></div>
<div class="line">    <span class="comment">// When we poll the ioqueue, there must not be events.</span></div>
<div class="line">    <span class="keywordflow">if</span> (pending_op == 0) {</div>
<div class="line">        <span class="keywordtype">unsigned</span> i;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (i=0; i&lt;10; ++i) {</div>
<div class="line">            <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = {0, 50};</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">            status = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">            status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">            <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line">                status=-60; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Success</span></div>
<div class="line">    status = 0;</div>
<div class="line"> </div>
<div class="line">on_error:</div>
<div class="line">    <span class="keywordflow">if</span> (ckey1 != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey1);</div>
<div class="line">    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock1 != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock1);</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (ioque != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line">    <span class="keywordflow">return</span> status;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Repeated connect/accept on the same listener socket.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test_2(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line"><span class="preprocessor">#if defined(PJ_SYMBIAN) &amp;&amp; PJ_SYMBIAN!=0</span></div>
<div class="line">    <span class="keyword">enum</span> { MAX_PAIR = 1, TEST_LOOP = 2 };</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">    <span class="keyword">enum</span> { MAX_PAIR = 4, TEST_LOOP = 2 };</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line">    <span class="keyword">struct </span>listener</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>            sock;</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>    *key;</div>
<div class="line">        <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>       addr;</div>
<div class="line">        <span class="keywordtype">int</span>                  addr_len;</div>
<div class="line">    } listener;</div>
<div class="line"> </div>
<div class="line">    <span class="keyword">struct </span>server</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>            sock;</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>    *key;</div>
<div class="line">        <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>       local_addr;</div>
<div class="line">        <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>       rem_addr;</div>
<div class="line">        <span class="keywordtype">int</span>                  rem_addr_len;</div>
<div class="line">        <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>  accept_op;</div>
<div class="line">    } server[MAX_PAIR];</div>
<div class="line"> </div>
<div class="line">    <span class="keyword">struct </span>client</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>            sock;</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>    *key;</div>
<div class="line">    } client[MAX_PAIR];</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;</div>
<div class="line">    <span class="keywordtype">char</span> *send_buf, *recv_buf;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;</div>
<div class="line">    <span class="keywordtype">unsigned</span> i, bufsize = BUF_MIN_SIZE;</div>
<div class="line">    <span class="keywordtype">int</span> status;</div>
<div class="line">    <span class="keywordtype">int</span> test_loop, pending_op = 0;</div>
<div class="line">    <a class="code hl_union" href="unionpj__timestamp.htm">pj_timestamp</a> t_elapsed;</div>
<div class="line">    <a class="code hl_struct" href="structpj__str__t.htm">pj_str_t</a> s;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line"> </div>
<div class="line">    listener.sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">    listener.key = NULL;</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {</div>
<div class="line">        server[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">        server[i].key = NULL;</div>
<div class="line">    }</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {</div>
<div class="line">        client[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">        client[i].key = NULL;   </div>
<div class="line">    }</div>
<div class="line">    </div>
<div class="line">    <span class="comment">// Create pool.</span></div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create I/O Queue.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, <a class="code hl_define" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, cfg, &amp;ioque);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_create()&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">return</span> -10;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Allocate buffers for send and receive.</span></div>
<div class="line">    send_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line">    recv_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create listener socket</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;listener.sock);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);</div>
<div class="line">        status=-20; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Bind listener socket.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;listener.addr, 0, 0);</div>
<div class="line">    <span class="keywordflow">if</span> ((rc=<a class="code hl_function" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(listener.sock, &amp;listener.addr, <span class="keyword">sizeof</span>(listener.addr))) != 0 ) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...bind error&quot;</span>, rc);</div>
<div class="line">        status=-30; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Get listener address.</span></div>
<div class="line">    listener.addr_len = <span class="keyword">sizeof</span>(listener.addr);</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(listener.sock, &amp;listener.addr, &amp;listener.addr_len);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_getsockname()&quot;</span>, rc);</div>
<div class="line">        status=-40; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line">    listener.addr.sin_addr = <a class="code hl_function" href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a>(<a class="code hl_function" href="group__PJ__PSTR.htm#gac34ba480d390a5652092da2fc29b4493">pj_cstr</a>(&amp;s, <span class="stringliteral">&quot;127.0.0.1&quot;</span>));</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register listener socket.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, listener.sock, NULL, &amp;test_cb, </div>
<div class="line">                                  &amp;listener.key);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR&quot;</span>, rc);</div>
<div class="line">        status=-50; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Listener socket listen().</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_function" href="group__PJ__SOCK.htm#ga6ca05fa6aa8db88c19a60d793fa0cc6b">pj_sock_listen</a>(listener.sock, 5)) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_listen()&quot;</span>, rc);</div>
<div class="line">        status=-60; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (test_loop=0; test_loop &lt; TEST_LOOP; ++test_loop) {</div>
<div class="line">        <span class="comment">// Client connect and server accept.</span></div>
<div class="line">        <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {</div>
<div class="line">            rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;client[i].sock);</div>
<div class="line">            <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);</div>
<div class="line">                status=-70; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, client[i].sock, NULL, </div>
<div class="line">                                          &amp;test_cb, &amp;client[i].key);</div>
<div class="line">            <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...error &quot;</span>, rc);</div>
<div class="line">                status=-80; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Server socket accept()</span></div>
<div class="line">            <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;server[i].accept_op, </div>
<div class="line">                                   <span class="keyword">sizeof</span>(server[i].accept_op));</div>
<div class="line">            server[i].rem_addr_len = <span class="keyword">sizeof</span>(<a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>);</div>
<div class="line">            status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gaf7505cc18b3031e43e68c5fd4a7a388e">pj_ioqueue_accept</a>(listener.key, &amp;server[i].accept_op, </div>
<div class="line">                                       &amp;server[i].sock, &amp;server[i].local_addr, </div>
<div class="line">                                       &amp;server[i].rem_addr, </div>
<div class="line">                                       &amp;server[i].rem_addr_len);</div>
<div class="line">            <span class="keywordflow">if</span> (status!=<a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_accept()&quot;</span>, rc);</div>
<div class="line">                status=-90; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (status==<a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">                ++pending_op;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Client socket connect()</span></div>
<div class="line">            status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a>(client[i].key, &amp;listener.addr, </div>
<div class="line">                                        <span class="keyword">sizeof</span>(listener.addr));</div>
<div class="line">            <span class="keywordflow">if</span> (status!=<a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_connect()&quot;</span>, rc);</div>
<div class="line">                status=-100; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (status==<a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">                ++pending_op;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Poll until connection of this pair established</span></div>
<div class="line">            <span class="keywordflow">while</span> (pending_op) {</div>
<div class="line">                <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">                status = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">                status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">                <span class="keywordflow">if</span> (status &gt; 0) {</div>
<div class="line">                    <span class="keywordflow">if</span> (status &gt; pending_op) {</div>
<div class="line">                        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,</div>
<div class="line">                                  <span class="stringliteral">&quot;...error: pj_ioqueue_poll() returned %d &quot;</span></div>
<div class="line">                                  <span class="stringliteral">&quot;(only expecting %d)&quot;</span>,</div>
<div class="line">                                  status, pending_op));</div>
<div class="line">                        <span class="keywordflow">return</span> -110;</div>
<div class="line">                    }</div>
<div class="line">                    pending_op -= status;</div>
<div class="line"> </div>
<div class="line">                    <span class="keywordflow">if</span> (pending_op == 0) {</div>
<div class="line">                        status = 0;</div>
<div class="line">                    }</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// There&#39;s no pending operation.</span></div>
<div class="line">        <span class="comment">// When we poll the ioqueue, there must not be events.</span></div>
<div class="line">        <span class="keywordflow">if</span> (pending_op == 0) {</div>
<div class="line">            <span class="keywordflow">for</span> (i=0; i&lt;10; ++i) {</div>
<div class="line">                <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = {0, 50};</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">                status = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">                status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">                <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line">                    status=-120; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {</div>
<div class="line">            <span class="comment">// Check server socket.</span></div>
<div class="line">            <span class="keywordflow">if</span> (server[i].sock == <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">                status = -130;</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...accept() error&quot;</span>, <a class="code hl_function" href="group__pj__errno.htm#gab55e3d49c25f27e8353a8dd385f97942">pj_get_os_error</a>());</div>
<div class="line">                <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Check addresses</span></div>
<div class="line">            <span class="keywordflow">if</span> (server[i].local_addr.sin_family != <a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>() ||</div>
<div class="line">                server[i].local_addr.sin_addr.s_addr == 0 ||</div>
<div class="line">                server[i].local_addr.sin_port == 0)</div>
<div class="line">            {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...ERROR address not set&quot;</span>, rc);</div>
<div class="line">                status = -140;</div>
<div class="line">                <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (server[i].rem_addr.sin_family != <a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>() ||</div>
<div class="line">                server[i].rem_addr.sin_addr.s_addr == 0 ||</div>
<div class="line">                server[i].rem_addr.sin_port == 0)</div>
<div class="line">            {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...ERROR address not set&quot;</span>, rc);</div>
<div class="line">                status = -150;</div>
<div class="line">                <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Register newly accepted socket.</span></div>
<div class="line">            rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, server[i].sock, NULL,</div>
<div class="line">                                          &amp;test_cb, &amp;server[i].key);</div>
<div class="line">            <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock&quot;</span>, rc);</div>
<div class="line">                status = -160;</div>
<div class="line">                <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Test send and receive.</span></div>
<div class="line">            t_elapsed.<a class="code hl_variable" href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">u32</a>.<a class="code hl_variable" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;</div>
<div class="line">            status = send_recv_test(ioque, server[i].key, client[i].key, </div>
<div class="line">                                    send_buf, recv_buf, bufsize, &amp;t_elapsed);</div>
<div class="line">            <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line">                <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Success</span></div>
<div class="line">        status = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {</div>
<div class="line">            <span class="keywordflow">if</span> (server[i].key != NULL) {</div>
<div class="line">                <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(server[i].key);</div>
<div class="line">                server[i].key = NULL;</div>
<div class="line">                server[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (server[i].sock != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">                <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(server[i].sock);</div>
<div class="line">                server[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (client[i].key != NULL) {</div>
<div class="line">                <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(client[i].key);</div>
<div class="line">                client[i].key = NULL;</div>
<div class="line">                client[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (client[i].sock != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">                <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(client[i].sock);</div>
<div class="line">                client[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    status = 0;</div>
<div class="line"> </div>
<div class="line">on_error:</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {</div>
<div class="line">        <span class="keywordflow">if</span> (server[i].key != NULL) {</div>
<div class="line">            <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(server[i].key);</div>
<div class="line">            server[i].key = NULL;</div>
<div class="line">            server[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (server[i].sock != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">            <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(server[i].sock);</div>
<div class="line">            server[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (client[i].key != NULL) {</div>
<div class="line">            <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(client[i].key);</div>
<div class="line">            client[i].key = NULL;</div>
<div class="line">            server[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (client[i].sock != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">            <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(client[i].sock);</div>
<div class="line">            client[i].sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (listener.key) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(listener.key);</div>
<div class="line">        listener.key = NULL;</div>
<div class="line">    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (listener.sock != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(listener.sock);</div>
<div class="line">        listener.sock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (ioque != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line">    <span class="keywordflow">return</span> status;</div>
<div class="line"> </div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> tcp_ioqueue_test_impl(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> status;</div>
<div class="line">    <span class="keywordtype">char</span> title[64];</div>
<div class="line"> </div>
<div class="line">    pj_ansi_snprintf(title, <span class="keyword">sizeof</span>(title), <span class="stringliteral">&quot;%s (concur:%d, epoll_flags:0x%x)&quot;</span>,</div>
<div class="line">                     <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a>(), cfg-&gt;<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">default_concurrency</a>,</div>
<div class="line">                     cfg-&gt;<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a>);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s compliance test 0 (success scenario)&quot;</span>,</div>
<div class="line">               title));</div>
<div class="line">    <span class="keywordflow">if</span> ((status=compliance_test_0(cfg)) != 0) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1, (THIS_FILE, <span class="stringliteral">&quot;....FAILED (status=%d)\n&quot;</span>, status));</div>
<div class="line">        <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s compliance test 1 (failed scenario)&quot;</span>,</div>
<div class="line">               title));</div>
<div class="line">    <span class="keywordflow">if</span> ((status=compliance_test_1(cfg)) != 0) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1, (THIS_FILE, <span class="stringliteral">&quot;....FAILED (status=%d)\n&quot;</span>, status));</div>
<div class="line">        <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s compliance test 2 (repeated accept)&quot;</span>,</div>
<div class="line">               title));</div>
<div class="line">    <span class="keywordflow">if</span> ((status=compliance_test_2(cfg)) != 0) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1, (THIS_FILE, <span class="stringliteral">&quot;....FAILED (status=%d)\n&quot;</span>, status));</div>
<div class="line">        <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> tcp_ioqueue_test()</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_enumeration" href="group__PJ__IOQUEUE.htm#ga2bcdc50ba1dc268a9a8c7749d18c9252">pj_ioqueue_epoll_flag</a> epoll_flags[] = {</div>
<div class="line">        <a class="code hl_enumvalue" href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a15e5f1dda79bcc01a771455c0abcff96">PJ_IOQUEUE_EPOLL_AUTO</a>,</div>
<div class="line"><span class="preprocessor">#if PJ_HAS_LINUX_EPOLL</span></div>
<div class="line">        <a class="code hl_enumvalue" href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252aae582ec72fab68f1d5d64d0c5f6d634a">PJ_IOQUEUE_EPOLL_EXCLUSIVE</a>,</div>
<div class="line">        <a class="code hl_enumvalue" href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a537548522bcf5f41a7983f6d36aa1442">PJ_IOQUEUE_EPOLL_ONESHOT</a>,</div>
<div class="line">        0</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">    };</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> concurs[] = { <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a>, <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a> };</div>
<div class="line">    <span class="keywordtype">int</span> i, rc;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code hl_define" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(epoll_flags); ++i) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> cfg;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7f8ea5160ad41ac46770594888579dca">pj_ioqueue_cfg_default</a>(&amp;cfg);</div>
<div class="line">        cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a> = epoll_flags[i];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s TCP compliance test, epoll_flags=0x%x&quot;</span>,</div>
<div class="line">                   <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a>(), cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a>));</div>
<div class="line"> </div>
<div class="line">        rc = tcp_ioqueue_test_impl(&amp;cfg);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != 0)</div>
<div class="line">            <span class="keywordflow">return</span> rc;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code hl_define" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(concurs); ++i) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> cfg;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7f8ea5160ad41ac46770594888579dca">pj_ioqueue_cfg_default</a>(&amp;cfg);</div>
<div class="line">        cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">default_concurrency</a> = concurs[i];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s TCP compliance test, concurrency=%d&quot;</span>,</div>
<div class="line">                   <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a>(), cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">default_concurrency</a>));</div>
<div class="line"> </div>
<div class="line">        rc = tcp_ioqueue_test_impl(&amp;cfg);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != 0)</div>
<div class="line">            <span class="keywordflow">return</span> rc;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* PJ_HAS_TCP */</span><span class="preprocessor"></span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div>
<div class="line"><span class="comment"> * when this test is disabled. </span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keywordtype">int</span> dummy_uiq_tcp;</div>
<div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_TCP_IOQUEUE_TEST */</span><span class="preprocessor"></span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga173588cd6381f3ad354c23c26929093a"><div class="ttname"><a href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a></div><div class="ttdeci">long pj_ssize_t</div><div class="ttdef"><b>Definition:</b> types.h:64</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga1dc7a356fb36bd2dee2bc7d6c7e817e4"><div class="ttname"><a href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a></div><div class="ttdeci">int pj_bool_t</div><div class="ttdef"><b>Definition:</b> types.h:71</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga26ca218655d86b00d807e1407854128e"><div class="ttname"><a href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a></div><div class="ttdeci">struct pj_ioqueue_t pj_ioqueue_t</div><div class="ttdef"><b>Definition:</b> types.h:210</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga5ccc87de27d1236bc31ae3673d153984"><div class="ttname"><a href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a></div><div class="ttdeci">long pj_sock_t</div><div class="ttdef"><b>Definition:</b> types.h:263</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga89da69533fa1109f3a11ef91c489d9ad"><div class="ttname"><a href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a></div><div class="ttdeci">struct pj_ioqueue_key_t pj_ioqueue_key_t</div><div class="ttdef"><b>Definition:</b> types.h:216</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gab43ba3167bd2a2ab4580509dbf79200e"><div class="ttname"><a href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a></div><div class="ttdeci">int pj_status_t</div><div class="ttdef"><b>Definition:</b> types.h:68</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gacd8459212a1e5175eeb04e3a6cd76659"><div class="ttname"><a href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a></div><div class="ttdeci">#define PJ_ARRAY_SIZE(a)</div><div class="ttdef"><b>Definition:</b> types.h:281</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935"><div class="ttname"><a href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a></div><div class="ttdeci">@ PJ_SUCCESS</div><div class="ttdef"><b>Definition:</b> types.h:93</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0"><div class="ttname"><a href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a></div><div class="ttdeci">@ PJ_TRUE</div><div class="ttdef"><b>Definition:</b> types.h:96</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e"><div class="ttname"><a href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a></div><div class="ttdeci">@ PJ_FALSE</div><div class="ttdef"><b>Definition:</b> types.h:99</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga2bcdc50ba1dc268a9a8c7749d18c9252"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga2bcdc50ba1dc268a9a8c7749d18c9252">pj_ioqueue_epoll_flag</a></div><div class="ttdeci">pj_ioqueue_epoll_flag</div><div class="ttdef"><b>Definition:</b> ioqueue.h:337</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga2ef6f3b6077c716793e2b4a488e03fe4"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a></div><div class="ttdeci">void pj_ioqueue_op_key_init(pj_ioqueue_op_key_t *op_key, pj_size_t size)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga4b4a5609d565d1ea4ccc0cd5d666200f"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a></div><div class="ttdeci">pj_status_t pj_ioqueue_create2(pj_pool_t *pool, pj_size_t max_fd, const pj_ioqueue_cfg *cfg, pj_ioqueue_t **ioqueue)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga59f004632b9ae20e43fa573e6b6cb237"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a></div><div class="ttdeci">pj_status_t pj_ioqueue_destroy(pj_ioqueue_t *ioque)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga71e08c6414a6f0cd1c1d2fde267bccbe"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a></div><div class="ttdeci">pj_status_t pj_ioqueue_recv(pj_ioqueue_key_t *key, pj_ioqueue_op_key_t *op_key, void *buffer, pj_ssize_t *length, pj_uint32_t flags)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga7c05e3b02e71e7680679c90c2adbe230"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a></div><div class="ttdeci">pj_status_t pj_ioqueue_unregister(pj_ioqueue_key_t *key)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga7f8ea5160ad41ac46770594888579dca"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga7f8ea5160ad41ac46770594888579dca">pj_ioqueue_cfg_default</a></div><div class="ttdeci">void pj_ioqueue_cfg_default(pj_ioqueue_cfg *cfg)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gabf96d153949aeda0e7b9dbb742ffcda7"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send</a></div><div class="ttdeci">pj_status_t pj_ioqueue_send(pj_ioqueue_key_t *key, pj_ioqueue_op_key_t *op_key, const void *data, pj_ssize_t *length, pj_uint32_t flags)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gac65cc5cb9a04f2008d1fa62709ba2d91"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a></div><div class="ttdeci">int pj_ioqueue_poll(pj_ioqueue_t *ioque, const pj_time_val *timeout)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gada2faae3ca27a917b90f6fa39b758355"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a></div><div class="ttdeci">pj_status_t pj_ioqueue_register_sock(pj_pool_t *pool, pj_ioqueue_t *ioque, pj_sock_t sock, void *user_data, const pj_ioqueue_callback *cb, pj_ioqueue_key_t **key)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gae6041c1ae18fb855e252eb0df49440eb"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a></div><div class="ttdeci">const char * pj_ioqueue_name(void)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gaf73fd64e7fbfa50b2c9ca7b00ceaea0b"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a></div><div class="ttdeci">pj_status_t pj_ioqueue_connect(pj_ioqueue_key_t *key, const pj_sockaddr_t *addr, int addrlen)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gaf7505cc18b3031e43e68c5fd4a7a388e"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gaf7505cc18b3031e43e68c5fd4a7a388e">pj_ioqueue_accept</a></div><div class="ttdeci">pj_status_t pj_ioqueue_accept(pj_ioqueue_key_t *key, pj_ioqueue_op_key_t *op_key, pj_sock_t *new_sock, pj_sockaddr_t *local, pj_sockaddr_t *remote, int *addrlen)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gga2bcdc50ba1dc268a9a8c7749d18c9252a15e5f1dda79bcc01a771455c0abcff96"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a15e5f1dda79bcc01a771455c0abcff96">PJ_IOQUEUE_EPOLL_AUTO</a></div><div class="ttdeci">@ PJ_IOQUEUE_EPOLL_AUTO</div><div class="ttdef"><b>Definition:</b> ioqueue.h:351</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gga2bcdc50ba1dc268a9a8c7749d18c9252a537548522bcf5f41a7983f6d36aa1442"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a537548522bcf5f41a7983f6d36aa1442">PJ_IOQUEUE_EPOLL_ONESHOT</a></div><div class="ttdeci">@ PJ_IOQUEUE_EPOLL_ONESHOT</div><div class="ttdef"><b>Definition:</b> ioqueue.h:344</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gga2bcdc50ba1dc268a9a8c7749d18c9252aae582ec72fab68f1d5d64d0c5f6d634a"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252aae582ec72fab68f1d5d64d0c5f6d634a">PJ_IOQUEUE_EPOLL_EXCLUSIVE</a></div><div class="ttdeci">@ PJ_IOQUEUE_EPOLL_EXCLUSIVE</div><div class="ttdef"><b>Definition:</b> ioqueue.h:340</div></div>
<div class="ttc" id="agroup__PJ__LOG_htm_ga767b9231bf7c2b57274771cdc4bca818"><div class="ttname"><a href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a></div><div class="ttdeci">#define PJ_LOG(level, arg)</div><div class="ttdef"><b>Definition:</b> log.h:106</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_ga14798f6ba0d0858e4f36cc8a4904bbd9"><div class="ttname"><a href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a></div><div class="ttdeci">void * pj_pool_alloc(pj_pool_t *pool, pj_size_t size)</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_ga4634b31af5eb0a0178481536986f1d15"><div class="ttname"><a href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a></div><div class="ttdeci">pj_pool_t * pj_pool_create(pj_pool_factory *factory, const char *name, pj_size_t initial_size, pj_size_t increment_size, pj_pool_callback *callback)</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_gade0f14f6635ecfccb576ec41c57fede5"><div class="ttname"><a href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a></div><div class="ttdeci">void pj_pool_release(pj_pool_t *pool)</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_ga81417b253e8d0f658d2fe73e9eeb6bb5"><div class="ttname"><a href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a></div><div class="ttdeci">int pj_memcmp(const void *buf1, const void *buf2, pj_size_t size)</div><div class="ttdef"><b>Definition:</b> string.h:823</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_gaa89224d869eb10610c4c63617dcbb752"><div class="ttname"><a href="group__PJ__PSTR.htm#gaa89224d869eb10610c4c63617dcbb752">pj_create_random_string</a></div><div class="ttdeci">char * pj_create_random_string(char *str, pj_size_t length)</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_gac34ba480d390a5652092da2fc29b4493"><div class="ttname"><a href="group__PJ__PSTR.htm#gac34ba480d390a5652092da2fc29b4493">pj_cstr</a></div><div class="ttdeci">const pj_str_t * pj_cstr(pj_str_t *str, const char *s)</div><div class="ttdef"><b>Definition:</b> string.h:100</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga173d6da92ef0a4f0df062bf377b4d626"><div class="ttname"><a href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a></div><div class="ttdeci">pj_status_t pj_sock_bind(pj_sock_t sockfd, const pj_sockaddr_t *my_addr, int addrlen)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga2f8faea76a64620b13a720227df927bb"><div class="ttname"><a href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a></div><div class="ttdeci">pj_status_t pj_sock_close(pj_sock_t sockfd)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga6ca05fa6aa8db88c19a60d793fa0cc6b"><div class="ttname"><a href="group__PJ__SOCK.htm#ga6ca05fa6aa8db88c19a60d793fa0cc6b">pj_sock_listen</a></div><div class="ttdeci">pj_status_t pj_sock_listen(pj_sock_t sockfd, int backlog)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga8ea303b95fe973432a361e47e0459086"><div class="ttname"><a href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a></div><div class="ttdeci">#define pj_AF_INET()</div><div class="ttdef"><b>Definition:</b> sock.h:113</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gab44152e660cc3fd044afd590eeea78bc"><div class="ttname"><a href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a></div><div class="ttdeci">#define PJ_INVALID_SOCKET</div><div class="ttdef"><b>Definition:</b> sock.h:485</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gabcef38a6393a6c8e398b7e3ee2dac7d1"><div class="ttname"><a href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a></div><div class="ttdeci">pj_in_addr pj_inet_addr(const pj_str_t *cp)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gad483f4c00174b4b2eef7e66b96804b1c"><div class="ttname"><a href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a></div><div class="ttdeci">pj_status_t pj_sock_getsockname(pj_sock_t sockfd, pj_sockaddr_t *addr, int *namelen)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gae224fbf8e8bd55b40030fcd8f9645291"><div class="ttname"><a href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a></div><div class="ttdeci">#define pj_SOCK_STREAM()</div><div class="ttdef"><b>Definition:</b> sock.h:160</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gae6169f27eb956287681a46ca9fecdafc"><div class="ttname"><a href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a></div><div class="ttdeci">pj_status_t pj_sockaddr_in_init(pj_sockaddr_in *addr, const pj_str_t *cp, pj_uint16_t port)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gaeec96c063aafa1d7c19b33590997bcff"><div class="ttname"><a href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a></div><div class="ttdeci">pj_status_t pj_sock_socket(int family, int type, int protocol, pj_sock_t *sock)</div></div>
<div class="ttc" id="agroup__PJ__SYMBIAN__OS_htm_ga275984ae4a88fbf747275284fee70f62"><div class="ttname"><a href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a></div><div class="ttdeci">pj_bool_t pj_symbianos_poll(int priority, int ms_timeout)</div></div>
<div class="ttc" id="agroup__PJ__TIMESTAMP_htm_gaa419b8448d1cb55db85aeac2e86fe11c"><div class="ttname"><a href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a></div><div class="ttdeci">pj_status_t pj_get_timestamp(pj_timestamp *ts)</div></div>
<div class="ttc" id="agroup__PJ__TIME_htm_gad015d440803cb8f62ff73878f35badaa"><div class="ttname"><a href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a></div><div class="ttdeci">#define PJ_TIME_VAL_MSEC(t)</div><div class="ttdef"><b>Definition:</b> types.h:421</div></div>
<div class="ttc" id="agroup__pj__config_htm_ga0b0fdd6e70bdbe412c1a3337ce3ff5ee"><div class="ttname"><a href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a></div><div class="ttdeci">#define PJ_IOQUEUE_MAX_HANDLES</div><div class="ttdef"><b>Definition:</b> config.h:681</div></div>
<div class="ttc" id="agroup__pj__config_htm_ga7523f8576efd271c22b188eab05d7870"><div class="ttname"><a href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a></div><div class="ttdeci">#define PJ_UNUSED_ARG(arg)</div><div class="ttdef"><b>Definition:</b> config.h:1343</div></div>
<div class="ttc" id="agroup__pj__errno_htm_gab55e3d49c25f27e8353a8dd385f97942"><div class="ttname"><a href="group__pj__errno.htm#gab55e3d49c25f27e8353a8dd385f97942">pj_get_os_error</a></div><div class="ttdeci">pj_status_t pj_get_os_error(void)</div></div>
<div class="ttc" id="agroup__pj__errnum_htm_ga8706796879339b5dc875e2af631d6fe7"><div class="ttname"><a href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a></div><div class="ttdeci">#define PJ_EPENDING</div><div class="ttdef"><b>Definition:</b> errno.h:322</div></div>
<div class="ttc" id="astructop__key_htm"><div class="ttname"><a href="structop__key.htm">op_key</a></div><div class="ttdef"><b>Definition:</b> udp_echo_srv_ioqueue.c:27</div></div>
<div class="ttc" id="astructpj__ioqueue__callback_htm"><div class="ttname"><a href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a></div><div class="ttdef"><b>Definition:</b> ioqueue.h:219</div></div>
<div class="ttc" id="astructpj__ioqueue__cfg_htm"><div class="ttname"><a href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a></div><div class="ttdef"><b>Definition:</b> ioqueue.h:362</div></div>
<div class="ttc" id="astructpj__ioqueue__cfg_htm_ab85803d52ec881318a395a72abe1ce33"><div class="ttname"><a href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">pj_ioqueue_cfg::epoll_flags</a></div><div class="ttdeci">unsigned epoll_flags</div><div class="ttdef"><b>Definition:</b> ioqueue.h:370</div></div>
<div class="ttc" id="astructpj__ioqueue__cfg_htm_acb27aaeadf5fa65adff56b68c250c81d"><div class="ttname"><a href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">pj_ioqueue_cfg::default_concurrency</a></div><div class="ttdeci">pj_bool_t default_concurrency</div><div class="ttdef"><b>Definition:</b> ioqueue.h:379</div></div>
<div class="ttc" id="astructpj__ioqueue__op__key__t_htm"><div class="ttname"><a href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a></div><div class="ttdef"><b>Definition:</b> ioqueue.h:208</div></div>
<div class="ttc" id="astructpj__pool__t_htm"><div class="ttname"><a href="structpj__pool__t.htm">pj_pool_t</a></div><div class="ttdef"><b>Definition:</b> pool.h:310</div></div>
<div class="ttc" id="astructpj__sockaddr__in_htm"><div class="ttname"><a href="structpj__sockaddr__in.htm">pj_sockaddr_in</a></div><div class="ttdef"><b>Definition:</b> sock.h:534</div></div>
<div class="ttc" id="astructpj__sockaddr__in_htm_ad1ed5a34d99da0d23e65b3b3b5fad228"><div class="ttname"><a href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">pj_sockaddr_in::sin_addr</a></div><div class="ttdeci">pj_in_addr sin_addr</div><div class="ttdef"><b>Definition:</b> sock.h:542</div></div>
<div class="ttc" id="astructpj__str__t_htm"><div class="ttname"><a href="structpj__str__t.htm">pj_str_t</a></div><div class="ttdef"><b>Definition:</b> types.h:120</div></div>
<div class="ttc" id="astructpj__time__val_htm"><div class="ttname"><a href="structpj__time__val.htm">pj_time_val</a></div><div class="ttdef"><b>Definition:</b> types.h:397</div></div>
<div class="ttc" id="astructpj__time__val_htm_ab9cc04663b258dd3dcb449a3110e0d82"><div class="ttname"><a href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">pj_time_val::msec</a></div><div class="ttdeci">long msec</div><div class="ttdef"><b>Definition:</b> types.h:402</div></div>
<div class="ttc" id="astructpj__time__val_htm_af2739d0c2189e9c902281c04fd1f4502"><div class="ttname"><a href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">pj_time_val::sec</a></div><div class="ttdeci">long sec</div><div class="ttdef"><b>Definition:</b> types.h:399</div></div>
<div class="ttc" id="aunionpj__sockaddr_htm"><div class="ttname"><a href="unionpj__sockaddr.htm">pj_sockaddr</a></div><div class="ttdef"><b>Definition:</b> sock.h:633</div></div>
<div class="ttc" id="aunionpj__timestamp_htm"><div class="ttname"><a href="unionpj__timestamp.htm">pj_timestamp</a></div><div class="ttdef"><b>Definition:</b> types.h:134</div></div>
<div class="ttc" id="aunionpj__timestamp_htm_a2108e6b2a0b25129da1dbaef8076c218"><div class="ttname"><a href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">pj_timestamp::lo</a></div><div class="ttdeci">pj_uint32_t lo</div><div class="ttdef"><b>Definition:</b> types.h:142</div></div>
<div class="ttc" id="aunionpj__timestamp_htm_aff0c07d99e2c40a8ab1fb2d34276d81d"><div class="ttname"><a href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">pj_timestamp::u32</a></div><div class="ttdeci">struct pj_timestamp::@9 u32</div></div>
</div><!-- fragment --> </div></div><!-- contents -->
</div><!-- PageDoc -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
