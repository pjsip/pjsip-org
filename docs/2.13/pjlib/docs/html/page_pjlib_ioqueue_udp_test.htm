<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: I/O Queue (UDP) (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div><div class="header">
  <div class="headertitle"><div class="title">Test: I/O Queue (UDP) </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p >This file provides implementation to test the functionality of the I/O queue when UDP socket is used.</p>
<p >This file is <b>pjlib-test/ioq_udp.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* </span></div>
<div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div>
<div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div>
<div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div>
<div class="line"><span class="comment"> * (at your option) any later version.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div>
<div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><span class="comment"> * GNU General Public License for more details.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div>
<div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div>
<div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if INCLUDE_UDP_IOQUEUE_TEST</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;pj/compat/socket.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define THIS_FILE           &quot;test_udp&quot;</span></div>
<div class="line"><span class="preprocessor">#define PORT                51233</span></div>
<div class="line"><span class="preprocessor">#define LOOP                2</span></div>
<div class="line"><span class="preprocessor">#define BUF_MIN_SIZE        32</span></div>
<div class="line"><span class="preprocessor">#define BUF_MAX_SIZE        2048</span></div>
<div class="line"><span class="preprocessor">#define SOCK_INACTIVE_MIN   (1)</span></div>
<div class="line"><span class="preprocessor">#define SOCK_INACTIVE_MAX   (PJ_IOQUEUE_MAX_HANDLES - 2)</span></div>
<div class="line"><span class="preprocessor">#define POOL_SIZE           (2*BUF_MAX_SIZE + SOCK_INACTIVE_MAX*128 + 2048)</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#undef TRACE_</span></div>
<div class="line"><span class="preprocessor">#define TRACE_(msg)         PJ_LOG(3,(THIS_FILE,&quot;.....&quot;</span> msg))</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if 0</span></div>
<div class="line"><span class="preprocessor">#  define TRACE__(args)     PJ_LOG(3,args)</span></div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor">#  define TRACE__(args)</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>            callback_read_size,</div>
<div class="line">                             callback_write_size,</div>
<div class="line">                             callback_accept_status,</div>
<div class="line">                             callback_connect_status;</div>
<div class="line"><span class="keyword">static</span> <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>     *callback_read_key,</div>
<div class="line">                            *callback_write_key,</div>
<div class="line">                            *callback_accept_key,</div>
<div class="line">                            *callback_connect_key;</div>
<div class="line"><span class="keyword">static</span> <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>  *callback_read_op,</div>
<div class="line">                            *callback_write_op,</div>
<div class="line">                            *callback_accept_op;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_read(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div>
<div class="line">                            <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>,</div>
<div class="line">                            <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)</div>
<div class="line">{</div>
<div class="line">    callback_read_key = key;</div>
<div class="line">    callback_read_op = <a class="code hl_struct" href="structop__key.htm">op_key</a>;</div>
<div class="line">    callback_read_size = bytes_read;</div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;     callback_read_key = %p, bytes=%d&quot;</span>, </div>
<div class="line">             key, bytes_read));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_write(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div>
<div class="line">                             <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>,</div>
<div class="line">                             <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_written)</div>
<div class="line">{</div>
<div class="line">    callback_write_key = key;</div>
<div class="line">    callback_write_op = <a class="code hl_struct" href="structop__key.htm">op_key</a>;</div>
<div class="line">    callback_write_size = bytes_written;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_accept(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div>
<div class="line">                              <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>,</div>
<div class="line">                              <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock, <span class="keywordtype">int</span> status)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_define" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(sock);</div>
<div class="line">    callback_accept_key = key;</div>
<div class="line">    callback_accept_op = <a class="code hl_struct" href="structop__key.htm">op_key</a>;</div>
<div class="line">    callback_accept_status = status;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_connect(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <span class="keywordtype">int</span> status)</div>
<div class="line">{</div>
<div class="line">    callback_connect_key = key;</div>
<div class="line">    callback_connect_status = status;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_struct" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> test_cb = </div>
<div class="line">{</div>
<div class="line">    &amp;on_ioqueue_read,</div>
<div class="line">    &amp;on_ioqueue_write,</div>
<div class="line">    &amp;on_ioqueue_accept,</div>
<div class="line">    &amp;on_ioqueue_connect,</div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if defined(PJ_WIN32) || defined(PJ_WIN64)</span></div>
<div class="line"><span class="preprocessor">#  define S_ADDR S_un.S_addr</span></div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor">#  define S_ADDR s_addr</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * compliance_test()</span></div>
<div class="line"><span class="comment"> * To test that the basic IOQueue functionality works. It will just exchange</span></div>
<div class="line"><span class="comment"> * data between two sockets.</span></div>
<div class="line"><span class="comment"> */</span> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock=-1, csock=-1;</div>
<div class="line">    <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr, dst_addr;</div>
<div class="line">    <span class="keywordtype">int</span> addrlen;</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;</div>
<div class="line">    <span class="keywordtype">char</span> *send_buf, *recv_buf;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey = NULL, *ckey = NULL;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> read_op, write_op;</div>
<div class="line">    <span class="keywordtype">int</span> bufsize = BUF_MIN_SIZE;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;</div>
<div class="line">    <span class="keywordtype">int</span> status = -1;</div>
<div class="line">    <a class="code hl_struct" href="structpj__str__t.htm">pj_str_t</a> temp;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> send_pending, recv_pending;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__pj__errno.htm#ga902af234ceebf60443561fb2dd26649e">pj_set_os_error</a>(<a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create pool.</span></div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Allocate buffers for send and receive.</span></div>
<div class="line">    send_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line">    recv_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Allocate sockets for sending and receiving.</span></div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;creating sockets...&quot;</span>);</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;ssock);</div>
<div class="line">    <span class="keywordflow">if</span> (rc==<a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;csock);</div>
<div class="line">    <span class="keywordflow">else</span></div>
<div class="line">        csock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_socket()&quot;</span>, rc);</div>
<div class="line">        status=-1; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Bind server socket.</span></div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;bind socket...&quot;</span>);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line">    addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();</div>
<div class="line">    addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="code hl_function" href="group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>(PORT);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_function" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(ssock, &amp;addr, <span class="keyword">sizeof</span>(addr))) {</div>
<div class="line">        status=-10; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create I/O Queue.</span></div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;create ioqueue...&quot;</span>);</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, <a class="code hl_define" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, cfg, &amp;ioque);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        status=-20; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register server and client socket.</span></div>
<div class="line">    <span class="comment">// We put this after inactivity socket, hopefully this can represent the</span></div>
<div class="line">    <span class="comment">// worst waiting time.</span></div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;registering first sockets...&quot;</span>);</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, ssock, NULL, </div>
<div class="line">                                  &amp;test_cb, &amp;skey);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error(10): ioqueue_register error&quot;</span>, rc);</div>
<div class="line">        status=-25; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;registering second sockets...&quot;</span>);</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>( pool, ioque, csock, NULL, </div>
<div class="line">                                   &amp;test_cb, &amp;ckey);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error(11): ioqueue_register error&quot;</span>, rc);</div>
<div class="line">        status=-26; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Randomize send_buf.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gaa89224d869eb10610c4c63617dcbb752">pj_create_random_string</a>(send_buf, bufsize);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Init operation keys.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;read_op, <span class="keyword">sizeof</span>(read_op));</div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;write_op, <span class="keyword">sizeof</span>(write_op));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register reading from ioqueue.</span></div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;start recvfrom...&quot;</span>);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line">    addrlen = <span class="keyword">sizeof</span>(addr);</div>
<div class="line">    bytes = bufsize;</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom</a>(skey, &amp;read_op, recv_buf, &amp;bytes, 0,</div>
<div class="line">                             &amp;addr, &amp;addrlen);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_recvfrom&quot;</span>, rc);</div>
<div class="line">        status=-28; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc == <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        recv_pending = 1;</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, </div>
<div class="line">                   <span class="stringliteral">&quot;......ok: recvfrom returned pending&quot;</span>));</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, </div>
<div class="line">                   <span class="stringliteral">&quot;......error: recvfrom returned immediate ok!&quot;</span>));</div>
<div class="line">        status=-29; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Set destination address to send the packet.</span></div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;set destination address...&quot;</span>);</div>
<div class="line">    temp = <a class="code hl_function" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;127.0.0.1&quot;</span>);</div>
<div class="line">    <span class="keywordflow">if</span> ((rc=<a class="code hl_function" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;dst_addr, &amp;temp, PORT)) != 0) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to resolve 127.0.0.1&quot;</span>, rc);</div>
<div class="line">        status=-290; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Write must return the number of bytes.</span></div>
<div class="line">    TRACE_(<span class="stringliteral">&quot;start sendto...&quot;</span>);</div>
<div class="line">    bytes = bufsize;</div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gad9eaa7c7b2668255d6ee1a0bf3afb007">pj_ioqueue_sendto</a>(ckey, &amp;write_op, send_buf, &amp;bytes, 0, &amp;dst_addr, </div>
<div class="line">                           <span class="keyword">sizeof</span>(dst_addr));</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_sendto&quot;</span>, rc);</div>
<div class="line">        status=-30; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc == <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        send_pending = 1;</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, </div>
<div class="line">                   <span class="stringliteral">&quot;......ok: sendto returned pending&quot;</span>));</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        send_pending = 0;</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, </div>
<div class="line">                   <span class="stringliteral">&quot;......ok: sendto returned immediate success&quot;</span>));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// reset callback variables.</span></div>
<div class="line">    callback_read_size = callback_write_size = 0;</div>
<div class="line">    callback_accept_status = callback_connect_status = -2;</div>
<div class="line">    callback_read_key = callback_write_key = </div>
<div class="line">        callback_accept_key = callback_connect_key = NULL;</div>
<div class="line">    callback_read_op = callback_write_op = NULL;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Poll if pending.</span></div>
<div class="line">    <span class="keywordflow">while</span> (send_pending || recv_pending) {</div>
<div class="line">        <span class="keywordtype">int</span> ret;</div>
<div class="line">        <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = { 5, 0 };</div>
<div class="line"> </div>
<div class="line">        TRACE_(<span class="stringliteral">&quot;poll...&quot;</span>);</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">        ret = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        ret = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (ret == 0) {</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: timed out...&quot;</span>));</div>
<div class="line">            status=-45; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ret &lt; 0) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...ERROR in ioqueue_poll()&quot;</span>, -ret);</div>
<div class="line">            status=-50; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (callback_read_key != NULL) {</div>
<div class="line">            <span class="keywordflow">if</span> (callback_read_size != bufsize) {</div>
<div class="line">                status=-61; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (callback_read_key != skey) {</div>
<div class="line">                status=-65; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (callback_read_op != &amp;read_op) {</div>
<div class="line">                status=-66; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (<a class="code hl_function" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(send_buf, recv_buf, bufsize) != 0) {</div>
<div class="line">                status=-67; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (addrlen != <span class="keyword">sizeof</span>(<a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>)) {</div>
<div class="line">                status=-68; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> != <a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>()) {</div>
<div class="line">                status=-69; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">            recv_pending = 0;</div>
<div class="line">        } </div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (callback_write_key != NULL) {</div>
<div class="line">            <span class="keywordflow">if</span> (callback_write_size != bufsize) {</div>
<div class="line">                status=-73; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (callback_write_key != ckey) {</div>
<div class="line">                status=-75; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">if</span> (callback_write_op != &amp;write_op) {</div>
<div class="line">                status=-76; <span class="keywordflow">goto</span> on_error;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            send_pending = 0;</div>
<div class="line">        }</div>
<div class="line">    } </div>
<div class="line">    </div>
<div class="line">    <span class="comment">// Success</span></div>
<div class="line">    status = 0;</div>
<div class="line"> </div>
<div class="line">on_error:</div>
<div class="line">    <span class="keywordflow">if</span> (skey)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(skey);</div>
<div class="line">    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ssock != -1)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (ckey)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey);</div>
<div class="line">    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock != -1)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock);</div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (ioque != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line">    <span class="keywordflow">return</span> status;</div>
<div class="line"> </div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_read_complete(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div>
<div class="line">                             <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>, </div>
<div class="line">                             <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">unsigned</span> *p_packet_cnt = (<span class="keywordtype">unsigned</span>*) <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7291c776b40b0e0fffbaaf74c70aaded">pj_ioqueue_get_user_data</a>(key);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(<a class="code hl_struct" href="structop__key.htm">op_key</a>);</div>
<div class="line">    <a class="code hl_define" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(bytes_read);</div>
<div class="line"> </div>
<div class="line">    (*p_packet_cnt)++;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * unregister_test()</span></div>
<div class="line"><span class="comment"> * Check if callback is still called after socket has been unregistered or </span></div>
<div class="line"><span class="comment"> * closed.</span></div>
<div class="line"><span class="comment"> */</span> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> unregister_test(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <span class="keyword">enum</span> { RPORT = 50000, SPORT = 50001 };</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> rsock, rsock2;</div>
<div class="line">    <span class="keywordtype">int</span> i, addrlen;</div>
<div class="line">    <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, *key2;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> opkey;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> cb;</div>
<div class="line">    <span class="keywordtype">unsigned</span> packet_cnt;</div>
<div class="line">    <span class="keywordtype">char</span> sendbuf[10], recvbuf[10];</div>
<div class="line">    <span class="keywordtype">void</span> *user_data2 = (<span class="keywordtype">void</span>*)(<span class="keywordtype">long</span>)2;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;</div>
<div class="line">    <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div>
<div class="line"> </div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, <span class="stringliteral">&quot;test&quot;</span>, 4000, 4000, NULL);</div>
<div class="line">    <span class="keywordflow">if</span> (!pool) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Unable to create pool&quot;</span>, <a class="code hl_define" href="group__pj__errnum.htm#ga9a16214b8d54a8ee9d6bce378d116beb">PJ_ENOMEM</a>);</div>
<div class="line">        <span class="keywordflow">return</span> -100;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, 1, cfg, &amp;ioqueue);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Error creating ioqueue&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -110;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Create sender socket */</span></div>
<div class="line">    status = app_socket(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, SPORT, &amp;ssock);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Error initializing socket&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -120;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Create receiver socket. */</span></div>
<div class="line">    status = app_socket(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, RPORT, &amp;rsock);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Error initializing socket&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -130;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Register rsock to ioqueue. */</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;cb, <span class="keyword">sizeof</span>(cb));</div>
<div class="line">    cb.<a class="code hl_variable" href="structpj__ioqueue__callback.htm#aaf564626f7a74bc96fa6ef96f72cb6e1">on_read_complete</a> = &amp;on_read_complete;</div>
<div class="line">    packet_cnt = 0;</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, rsock, &amp;packet_cnt,</div>
<div class="line">                                      &amp;cb, &amp;key);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Error registering to ioqueue&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -140;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Init operation key. */</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;opkey, <span class="keyword">sizeof</span>(opkey));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Start reading. */</span></div>
<div class="line">    bytes = <span class="keyword">sizeof</span>(recvbuf);</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>( key, &amp;opkey, recvbuf, &amp;bytes, 0);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Expecting PJ_EPENDING, but got this&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -150;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Init destination address. */</span></div>
<div class="line">    addrlen = <span class="keyword">sizeof</span>(addr);</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(rsock, &amp;addr, &amp;addrlen);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;getsockname error&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -160;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Override address with 127.0.0.1, since getsockname will return</span></div>
<div class="line"><span class="comment">     * zero in the address field.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a> = <a class="code hl_function" href="group__PJ__SOCK.htm#ga323567f1eb0a1cd7b4a832706309358a">pj_inet_addr2</a>(<span class="stringliteral">&quot;127.0.0.1&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Init buffer to send */</span></div>
<div class="line">    pj_ansi_strcpy(sendbuf, <span class="stringliteral">&quot;Hello0123&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Send one packet. */</span></div>
<div class="line">    bytes = <span class="keyword">sizeof</span>(sendbuf);</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a>(ssock, sendbuf, &amp;bytes, 0,</div>
<div class="line">                            &amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;sendto error&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -170;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Check if packet is received. */</span></div>
<div class="line">    timeout.<a class="code hl_variable" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 1; timeout.<a class="code hl_variable" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 1000);</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioqueue, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (packet_cnt != 1) {</div>
<div class="line">        <span class="keywordflow">return</span> -180;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Just to make sure things are settled.. */</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(100);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Start reading again. */</span></div>
<div class="line">    bytes = <span class="keyword">sizeof</span>(recvbuf);</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>( key, &amp;opkey, recvbuf, &amp;bytes, 0);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Expecting PJ_EPENDING, but got this&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -190;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Reset packet counter */</span></div>
<div class="line">    packet_cnt = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Send one packet. */</span></div>
<div class="line">    bytes = <span class="keyword">sizeof</span>(sendbuf);</div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a>(ssock, sendbuf, &amp;bytes, 0,</div>
<div class="line">                            &amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;sendto error&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -200;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Now unregister and close socket. */</span></div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(key);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;pj_ioqueue_unregister error&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -201;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Poll ioqueue. */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;10; ++i) {</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">        <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 100);</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        timeout.<a class="code hl_variable" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 0; timeout.<a class="code hl_variable" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 100;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioqueue, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Must NOT receive any packets after socket is closed! */</span></div>
<div class="line">    <span class="keywordflow">if</span> (packet_cnt &gt; 0) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....errror: not expecting to receive packet &quot;</span></div>
<div class="line">                             <span class="stringliteral">&quot;after socket has been closed&quot;</span>));</div>
<div class="line">        <span class="keywordflow">return</span> -210;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Now unregister again, immediately and after PJ_IOQUEUE_KEY_FREE_DELAY.</span></div>
<div class="line"><span class="comment">     * It should return error, and most importantly, it must not crash.. */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;2; ++i) {</div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(key);</div>
<div class="line">        <span class="comment">/*</span></div>
<div class="line"><span class="comment">         * as it turns out, double unregistration returns PJ_SUCCESS</span></div>
<div class="line"><span class="comment">        if (status == PJ_SUCCESS) {</span></div>
<div class="line"><span class="comment">            PJ_LOG(1, (THIS_FILE,</span></div>
<div class="line"><span class="comment">                   &quot;Expecting pj_ioqueue_unregister() error (i=%d)&quot;, i));</span></div>
<div class="line"><span class="comment">            return -220;</span></div>
<div class="line"><span class="comment">        }</span></div>
<div class="line"><span class="comment">        */</span></div>
<div class="line">        <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(<a class="code hl_define" href="group__pj__config.htm#ga5db550a999ee6b65533854093bf43fce">PJ_IOQUEUE_KEY_FREE_DELAY</a> + 100);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/*</span></div>
<div class="line"><span class="comment">     * Second stage of the test. Register another socket. Then unregister using</span></div>
<div class="line"><span class="comment">     * the previous key.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    status = app_socket(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, RPORT, &amp;rsock2);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Error initializing socket (2)&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -330;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Register rsock to ioqueue. */</span></div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, rsock2, user_data2,</div>
<div class="line">                                      &amp;cb, &amp;key2);</div>
<div class="line">    <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Error registering to ioqueue (2)&quot;</span>, status);</div>
<div class="line">        <span class="keywordflow">return</span> -340;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* We shouldn&#39;t be able to unregister using the first key. Or should we?</span></div>
<div class="line"><span class="comment">     *</span></div>
<div class="line"><span class="comment">     * So basically we&#39;re simulating buggy application that is unregistering</span></div>
<div class="line"><span class="comment">     * an old key.</span></div>
<div class="line"><span class="comment">     *</span></div>
<div class="line"><span class="comment">     * With current ioqueue implementation, it will return success because</span></div>
<div class="line"><span class="comment">     * &quot;key&quot; is the same as &quot;key2&quot; (because ioueue&#39;s max_handles is 1 and due to</span></div>
<div class="line"><span class="comment">     * PJ_IOQUEUE_HAS_SAFE_UNREG in ioqueue). But what is the expected status</span></div>
<div class="line"><span class="comment">     * anyway? Should it return an error? Ideally, I think so. But since we</span></div>
<div class="line"><span class="comment">     * can&#39;t do that, I&#39;m putting this as an INFO to remind us about this</span></div>
<div class="line"><span class="comment">     * behavior.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(key);</div>
<div class="line">    <span class="keywordflow">if</span> (status == <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....info: unregistering dead key was successful&quot;</span>));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Success */</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioqueue);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Testing with many handles.</span></div>
<div class="line"><span class="comment"> * This will just test registering PJ_IOQUEUE_MAX_HANDLES count</span></div>
<div class="line"><span class="comment"> * of sockets to the ioqueue.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> many_handles_test(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <span class="keyword">enum</span> { MAX = <a class="code hl_define" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a> };</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> *sock;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> **key;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div>
<div class="line">    <span class="keywordtype">int</span> count, i; <span class="comment">/* must be signed */</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,<span class="stringliteral">&quot;...testing with so many handles&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, 4000, 4000, NULL);</div>
<div class="line">    <span class="keywordflow">if</span> (!pool)</div>
<div class="line">        <span class="keywordflow">return</span> <a class="code hl_define" href="group__pj__errnum.htm#ga9a16214b8d54a8ee9d6bce378d116beb">PJ_ENOMEM</a>;</div>
<div class="line"> </div>
<div class="line">    key = (<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>**) </div>
<div class="line">          <a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, MAX*<span class="keyword">sizeof</span>(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>*));</div>
<div class="line">    sock = (<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>*) <a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, MAX*<span class="keyword">sizeof</span>(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>));</div>
<div class="line">    </div>
<div class="line">    <span class="comment">/* Create IOQueue */</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, MAX, cfg, &amp;ioqueue);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || ioqueue == NULL) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error in pj_ioqueue_create&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">return</span> -10;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Register as many sockets. */</span></div>
<div class="line">    <span class="keywordflow">for</span> (count=0; count&lt;MAX; ++count) {</div>
<div class="line">        sock[count] = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;sock[count]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || sock[count] == <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....unable to create %d-th socket, rc=%d&quot;</span>, </div>
<div class="line">                                 count, rc));</div>
<div class="line">            <span class="keywordflow">break</span>;</div>
<div class="line">        }</div>
<div class="line">        key[count] = NULL;</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, sock[count],</div>
<div class="line">                                      NULL, &amp;test_cb, &amp;key[count]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || key[count] == NULL) {</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....unable to register %d-th socket, rc=%d&quot;</span>, </div>
<div class="line">                                 count, rc));</div>
<div class="line">            <span class="keywordflow">return</span> -30;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Test complete. */</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Now deregister and close all handles. */</span> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* NOTE for RTEMS:</span></div>
<div class="line"><span class="comment">     *  It seems that the order of close(sock) is pretty important here.</span></div>
<div class="line"><span class="comment">     *  If we close the sockets with the same order as when they were created,</span></div>
<div class="line"><span class="comment">     *  RTEMS doesn&#39;t seem to reuse the sockets, thus next socket created</span></div>
<div class="line"><span class="comment">     *  will have descriptor higher than the last socket created.</span></div>
<div class="line"><span class="comment">     *  If we close the sockets in the reverse order, then the descriptor will</span></div>
<div class="line"><span class="comment">     *  get reused.</span></div>
<div class="line"><span class="comment">     *  This used to cause problem with select ioqueue, since the ioqueue</span></div>
<div class="line"><span class="comment">     *  always gives FD_SETSIZE for the first select() argument. This ioqueue</span></div>
<div class="line"><span class="comment">     *  behavior can be changed with setting PJ_SELECT_NEEDS_NFDS macro.</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=count-1; i&gt;=0; --i) {</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(key[i]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error in pj_ioqueue_unregister&quot;</span>, rc);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioqueue);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error in pj_ioqueue_destroy&quot;</span>, rc);</div>
<div class="line">    }</div>
<div class="line">    </div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,<span class="stringliteral">&quot;....many_handles_test() ok&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if PJ_HAS_THREADS</span></div>
<div class="line"><span class="keyword">typedef</span> <span class="keyword">struct </span>parallel_recv_data</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">unsigned</span>   buffer;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> len;</div>
<div class="line">} parallel_recv_data;</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_read_complete2(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key,</div>
<div class="line">                             <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="code hl_struct" href="structop__key.htm">op_key</a>,</div>
<div class="line">                             <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">unsigned</span> *p_packet_cnt = (<span class="keywordtype">unsigned</span>*) <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7291c776b40b0e0fffbaaf74c70aaded">pj_ioqueue_get_user_data</a>(key);</div>
<div class="line">    parallel_recv_data *ud = (parallel_recv_data*)<a class="code hl_struct" href="structop__key.htm">op_key</a>-&gt;user_data;</div>
<div class="line"> </div>
<div class="line">    if (bytes_read &lt; 0) {</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status = (<a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>)-bytes_read;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (status==<a class="code hl_define" href="group__pj__errno.htm#gaf21ec2038ae010661eb50c56696278c9">PJ_STATUS_FROM_OS</a>(PJ_BLOCKING_ERROR_VAL)) {</div>
<div class="line">            TRACE__((THIS_FILE, <span class="stringliteral">&quot;......recv() fail with status=%d, retrying&quot;</span>,</div>
<div class="line">                     status));</div>
<div class="line">            ud-&gt;len = bytes_read = <span class="keyword">sizeof</span>(ud-&gt;buffer);</div>
<div class="line">            status = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(key, <a class="code hl_struct" href="structop__key.htm">op_key</a>, &amp;ud-&gt;buffer, &amp;ud-&gt;len, 0);</div>
<div class="line">            <span class="keywordflow">if</span> (status == <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>)</div>
<div class="line">                <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            <a class="code hl_define" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR</a>(3,(THIS_FILE, status, <span class="stringliteral">&quot;......status=%d&quot;</span>, status));</div>
<div class="line">            <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">    assert (bytes_read==<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span>));</div>
<div class="line">    <span class="keywordflow">if</span> (ud-&gt;buffer != *p_packet_cnt) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;......error: invalid packet sequence &quot;</span></div>
<div class="line">                             <span class="stringliteral">&quot;(expecting %d, got %d)&quot;</span>,</div>
<div class="line">                             *p_packet_cnt, ud-&gt;buffer));</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        TRACE__((THIS_FILE, <span class="stringliteral">&quot;......recv() sequence %d&quot;</span>, ud-&gt;buffer));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    (*p_packet_cnt)++;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">typedef</span> <span class="keyword">struct </span>parallel_thread_data</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>    quit_flag;</div>
<div class="line">    <span class="keywordtype">unsigned</span> id, timeout, wakeup_cnt, event_cnt, err_cnt;</div>
<div class="line">} parallel_thread_data;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> parallel_worker_thread(<span class="keywordtype">void</span> *p)</div>
<div class="line">{</div>
<div class="line">    parallel_thread_data *arg = (parallel_thread_data*)p;</div>
<div class="line">    <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> t_end;</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__TIMESTAMP.htm#ga29b19ea0c334403aea47efe76476f10c">pj_gettickcount</a>(&amp;t_end);</div>
<div class="line">    t_end.<a class="code hl_variable" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> += arg-&gt;timeout;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">while</span> (!arg-&gt;quit_flag) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = {0, 0};</div>
<div class="line">        <span class="keywordtype">int</span> rc;</div>
<div class="line"> </div>
<div class="line">        timeout.<a class="code hl_variable" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = arg-&gt;timeout;</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(arg-&gt;ioqueue, &amp;timeout);</div>
<div class="line">        <span class="keywordflow">if</span> (rc &gt;= 1) {</div>
<div class="line">            assert(rc==1); <span class="comment">/* we should receive packet one by one! */</span></div>
<div class="line">            TRACE__((THIS_FILE, <span class="stringliteral">&quot;......thread %d got event (total=%d)&quot;</span>,</div>
<div class="line">                     arg-&gt;id, arg-&gt;wakeup_cnt));</div>
<div class="line">            ++arg-&gt;wakeup_cnt;</div>
<div class="line">            arg-&gt;event_cnt += rc;</div>
<div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc == 0) {</div>
<div class="line">            <span class="keywordflow">if</span> (!arg-&gt;quit_flag) {</div>
<div class="line">                TRACE__((THIS_FILE, <span class="stringliteral">&quot;......thread %d wakeup, no event (total=%d)&quot;</span>,</div>
<div class="line">                         arg-&gt;id, arg-&gt;wakeup_cnt));</div>
<div class="line">                ++arg-&gt;wakeup_cnt;</div>
<div class="line">            }</div>
<div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc &lt; 0) {</div>
<div class="line">            TRACE__((THIS_FILE, <span class="stringliteral">&quot;......thread %d got error&quot;</span>, arg-&gt;id));</div>
<div class="line">            ++arg-&gt;wakeup_cnt;</div>
<div class="line">            ++arg-&gt;err_cnt;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Parallel recv test. Test this scenario:</span></div>
<div class="line"><span class="comment"> * - create socket</span></div>
<div class="line"><span class="comment"> * - spawn N ioqueue_recv() operations on N threads</span></div>
<div class="line"><span class="comment"> * - repeat N times:</span></div>
<div class="line"><span class="comment"> *    - send one packet to the socket</span></div>
<div class="line"><span class="comment"> *    - on recv callback, do not re-invoke ioqueue_recv()</span></div>
<div class="line"><span class="comment"> * Expected result: we should receive N packets</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> parallel_recv_test(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>, csock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue = NULL;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey = NULL;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> cb;</div>
<div class="line">    <span class="keyword">enum</span> {</div>
<div class="line">        ASYNC_CNT = 16,</div>
<div class="line">        PKT_SIZE = 16,</div>
<div class="line">        SEND_DELAY_MSECS = 250,</div>
<div class="line">        TIMEOUT_SECS = (SEND_DELAY_MSECS*ASYNC_CNT/1000)+2,</div>
<div class="line">    };</div>
<div class="line">    <span class="keyword">typedef</span> <span class="keywordtype">int</span> packet_t;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *threads[ASYNC_CNT];</div>
<div class="line">    parallel_thread_data thread_datas[ASYNC_CNT], threads_total;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> recv_ops[ASYNC_CNT];</div>
<div class="line">    parallel_recv_data recv_datas[ASYNC_CNT];</div>
<div class="line">    <span class="keywordtype">unsigned</span> i, async_send = 0, recv_packet_count = 0;</div>
<div class="line">    <span class="keywordtype">int</span> retcode;</div>
<div class="line"> </div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, <span class="stringliteral">&quot;test&quot;</span>, 4000, 4000, NULL);</div>
<div class="line">    <span class="keywordflow">if</span> (!pool) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;Unable to create pool&quot;</span>, <a class="code hl_define" href="group__pj__errnum.htm#ga9a16214b8d54a8ee9d6bce378d116beb">PJ_ENOMEM</a>);</div>
<div class="line">        <span class="keywordflow">return</span> -100;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    CHECK(-110, app_socketpair(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0,</div>
<div class="line">          &amp;ssock, &amp;csock));</div>
<div class="line">    CHECK(-120, <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, 2, cfg, &amp;ioqueue));</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;cb, <span class="keyword">sizeof</span>(cb));</div>
<div class="line">    cb.<a class="code hl_variable" href="structpj__ioqueue__callback.htm#aaf564626f7a74bc96fa6ef96f72cb6e1">on_read_complete</a> = &amp;on_read_complete2;</div>
<div class="line">    CHECK(-130, <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, ssock, &amp;recv_packet_count,</div>
<div class="line">                                         &amp;cb, &amp;skey));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* spawn parallel recv()s */</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(recv_datas, <span class="keyword">sizeof</span>(recv_datas));</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ASYNC_CNT; ++i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;recv_ops[i], <span class="keyword">sizeof</span>(<a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>));</div>
<div class="line">        recv_ops[i].<a class="code hl_variable" href="structpj__ioqueue__op__key__t.htm#ab06c131ab29b37c027f2400bd5be6045">user_data</a> = &amp;recv_datas[i];</div>
<div class="line">        recv_datas[i].len = <span class="keyword">sizeof</span>(packet_t);</div>
<div class="line">        CHECK(-140, <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(skey, &amp;recv_ops[i], &amp;recv_datas[i].buffer,</div>
<div class="line">                                    &amp;recv_datas[i].len, 0));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* spawn polling threads */</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(thread_datas, <span class="keyword">sizeof</span>(thread_datas));</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ASYNC_CNT; ++i) {</div>
<div class="line">        parallel_thread_data *arg = &amp;thread_datas[i];</div>
<div class="line">        arg-&gt;ioqueue = ioqueue;</div>
<div class="line">        arg-&gt;id = i;</div>
<div class="line">        arg-&gt;timeout = TIMEOUT_SECS;</div>
<div class="line"> </div>
<div class="line">        CHECK(-150, <a class="code hl_function" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>(pool, <span class="stringliteral">&quot;parallel_thread&quot;</span>,</div>
<div class="line">                                     parallel_worker_thread, arg,</div>
<div class="line">                                     0, 0,&amp;threads[i]));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* now slowly send packet one by one. Let&#39;s hope the OS doesn&#39;t drop</span></div>
<div class="line"><span class="comment">     * our packet, since it&#39;s UDP</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(100); <span class="comment">/* allow thread to start */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ASYNC_CNT; ++i) {</div>
<div class="line">        packet_t send_buf = i;</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> len = <span class="keyword">sizeof</span>(send_buf);</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_function" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>((i&gt;0)*SEND_DELAY_MSECS);</div>
<div class="line">        TRACE__((THIS_FILE, <span class="stringliteral">&quot;....sending&quot;</span>));</div>
<div class="line">        status = <a class="code hl_function" href="group__PJ__SOCK.htm#ga21be8c2a1eb582bd13a801d4285f3ef9">pj_sock_send</a>(csock, &amp;send_buf, &amp;len, 0);</div>
<div class="line">        <span class="keywordflow">if</span> (status==<a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">            ++async_send;</div>
<div class="line">            TRACE__((THIS_FILE, <span class="stringliteral">&quot;......(was async sent)&quot;</span>));</div>
<div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (status != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            <a class="code hl_define" href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR</a>(1,(THIS_FILE, status, <span class="stringliteral">&quot;......send error&quot;</span>));</div>
<div class="line">            retcode = -160;</div>
<div class="line">            <span class="keywordflow">goto</span> on_return;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Signal threads that it&#39;s done */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ASYNC_CNT; ++i) {</div>
<div class="line">        parallel_thread_data *arg = &amp;thread_datas[i];</div>
<div class="line">        arg-&gt;quit_flag = 1;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Wait until all threads quits */</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ASYNC_CNT; ++i) {</div>
<div class="line">        CHECK(-170, <a class="code hl_function" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(threads[i]));</div>
<div class="line">        CHECK(-180, <a class="code hl_function" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(threads[i]));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Display thread statistics */</span></div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....Threads statistics:&quot;</span>));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;      =============================&quot;</span>));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;      Thread Wakeups Events  Errors&quot;</span>));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;      =============================&quot;</span>));</div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;threads_total, <span class="keyword">sizeof</span>(threads_total));</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ASYNC_CNT; ++i) {</div>
<div class="line">        parallel_thread_data *arg = &amp;thread_datas[i];</div>
<div class="line"> </div>
<div class="line">        threads_total.wakeup_cnt += arg-&gt;wakeup_cnt;</div>
<div class="line">        threads_total.event_cnt += arg-&gt;event_cnt;</div>
<div class="line">        threads_total.err_cnt += arg-&gt;err_cnt;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   %6d  %6d  %6d  %6d&quot;</span>,</div>
<div class="line">                  arg-&gt;id, arg-&gt;wakeup_cnt, arg-&gt;event_cnt, arg-&gt;err_cnt));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    retcode = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* Analyze results */</span></div>
<div class="line">    <span class="comment">//assert(threads_total.event_cnt == recv_packet_count);</span></div>
<div class="line">    <span class="keywordflow">if</span> (recv_packet_count != ASYNC_CNT) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;....error: rx packet count is %d (expecting %d)&quot;</span>,</div>
<div class="line">                  recv_packet_count, ASYNC_CNT));</div>
<div class="line">        retcode = -500;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (threads_total.wakeup_cnt &gt; ASYNC_CNT+async_send) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....info: total wakeup count is %d &quot;</span></div>
<div class="line">                             <span class="stringliteral">&quot;(the perfect count is %d). This shows that &quot;</span></div>
<div class="line">                             <span class="stringliteral">&quot;threads are woken up without getting any events&quot;</span>,</div>
<div class="line">                  threads_total.wakeup_cnt, ASYNC_CNT+async_send));</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (threads_total.err_cnt &gt; 0) {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....info: total error count is %d &quot;</span></div>
<div class="line">                             <span class="stringliteral">&quot;(it should be 0)&quot;</span>,</div>
<div class="line">                  threads_total.err_cnt));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (retcode==0)</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....success&quot;</span>));</div>
<div class="line"> </div>
<div class="line">on_return:</div>
<div class="line">    <span class="keywordflow">if</span> (skey)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(skey);</div>
<div class="line">    <span class="keywordflow">if</span> (csock != <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock);</div>
<div class="line">    <span class="keywordflow">if</span> (ioqueue)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioqueue);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div>
<div class="line">    <span class="keywordflow">return</span> retcode;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#endif </span><span class="comment">/* PJ_HAS_THREADS */</span><span class="preprocessor"></span></div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Multi-operation test.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Benchmarking IOQueue</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> bench_test(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg, <span class="keywordtype">int</span> bufsize,</div>
<div class="line">                      <span class="keywordtype">int</span> inactive_sock_count)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock=-1, csock=-1;</div>
<div class="line">    <a class="code hl_struct" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;</div>
<div class="line">    <a class="code hl_struct" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> *inactive_sock=NULL;</div>
<div class="line">    <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *inactive_read_op;</div>
<div class="line">    <span class="keywordtype">char</span> *send_buf, *recv_buf;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey, *ckey, *keys[SOCK_INACTIVE_MAX+2];</div>
<div class="line">    <a class="code hl_union" href="unionpj__timestamp.htm">pj_timestamp</a> t1, t2, t_elapsed;</div>
<div class="line">    <span class="keywordtype">int</span> rc=0, i;    <span class="comment">/* i must be signed */</span></div>
<div class="line">    <a class="code hl_struct" href="structpj__str__t.htm">pj_str_t</a> temp;</div>
<div class="line">    <span class="keywordtype">char</span> errbuf[<a class="code hl_define" href="group__pj__errno.htm#ga314a8edfdcec54a086a401e97b5b0bd0">PJ_ERR_MSG_SIZE</a>];</div>
<div class="line"> </div>
<div class="line">    TRACE__((THIS_FILE, <span class="stringliteral">&quot;   bench test %d&quot;</span>, inactive_sock_count));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create pool.</span></div>
<div class="line">    pool = <a class="code hl_function" href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Allocate buffers for send and receive.</span></div>
<div class="line">    send_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line">    recv_buf = (<span class="keywordtype">char</span>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, bufsize);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Allocate sockets for sending and receiving.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;ssock);</div>
<div class="line">    <span class="keywordflow">if</span> (rc == <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;csock);</div>
<div class="line">    } <span class="keywordflow">else</span></div>
<div class="line">        csock = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error: pj_sock_socket()&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Bind server socket.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line">    addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();</div>
<div class="line">    addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="code hl_function" href="group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>(PORT);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_function" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(ssock, &amp;addr, <span class="keyword">sizeof</span>(addr)))</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(inactive_sock_count+2 &lt;= <a class="code hl_define" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create I/O Queue.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a>(pool, <a class="code hl_define" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, cfg, &amp;ioque);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_create()&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Allocate inactive sockets, and bind them to some arbitrary address.</span></div>
<div class="line">    <span class="comment">// Then register them to the I/O queue, and start a read operation.</span></div>
<div class="line">    inactive_sock = (<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool, </div>
<div class="line">                                    inactive_sock_count*<span class="keyword">sizeof</span>(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>));</div>
<div class="line">    inactive_read_op = (<a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>*)<a class="code hl_function" href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a>(pool,</div>
<div class="line">                              inactive_sock_count*<span class="keyword">sizeof</span>(<a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>));</div>
<div class="line">    <a class="code hl_function" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line">    addr.<a class="code hl_variable" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;inactive_sock_count; ++i) {</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;</div>
<div class="line"> </div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code hl_define" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code hl_define" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;inactive_sock[i]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || inactive_sock[i] &lt; 0) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error: pj_sock_socket()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">goto</span> on_error;</div>
<div class="line">        }</div>
<div class="line">        <span class="keywordflow">if</span> ((rc=<a class="code hl_function" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(inactive_sock[i], &amp;addr, <span class="keyword">sizeof</span>(addr))) != 0) {</div>
<div class="line">            <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);</div>
<div class="line">            inactive_sock[i] = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error: pj_sock_bind()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">goto</span> on_error;</div>
<div class="line">        }</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, inactive_sock[i], </div>
<div class="line">                                      NULL, &amp;test_cb, &amp;keys[i]);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);</div>
<div class="line">            inactive_sock[i] = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error(1): pj_ioqueue_register_sock()&quot;</span>, rc);</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....i=%d&quot;</span>, i));</div>
<div class="line">            <span class="keywordflow">goto</span> on_error;</div>
<div class="line">        }</div>
<div class="line">        bytes = bufsize;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;inactive_read_op[i],</div>
<div class="line">                               <span class="keyword">sizeof</span>(inactive_read_op[i]));</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(keys[i], &amp;inactive_read_op[i], recv_buf, &amp;bytes, 0);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">            <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);</div>
<div class="line">            inactive_sock[i] = <a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_read()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">goto</span> on_error;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register server and client socket.</span></div>
<div class="line">    <span class="comment">// We put this after inactivity socket, hopefully this can represent the</span></div>
<div class="line">    <span class="comment">// worst waiting time.</span></div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, ssock, NULL, </div>
<div class="line">                                  &amp;test_cb, &amp;skey);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error(2): pj_ioqueue_register_sock()&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock, NULL, </div>
<div class="line">                                  &amp;test_cb, &amp;ckey);</div>
<div class="line">    <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">        app_perror(<span class="stringliteral">&quot;...error(3): pj_ioqueue_register_sock()&quot;</span>, rc);</div>
<div class="line">        <span class="keywordflow">goto</span> on_error;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Set destination address to send the packet.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr, <a class="code hl_function" href="group__PJ__PSTR.htm#gac34ba480d390a5652092da2fc29b4493">pj_cstr</a>(&amp;temp, <span class="stringliteral">&quot;127.0.0.1&quot;</span>), PORT);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Test loop.</span></div>
<div class="line">    t_elapsed.u64 = 0;</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;</div>
<div class="line">        <a class="code hl_struct" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> read_op, write_op;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Randomize send buffer.</span></div>
<div class="line">        <a class="code hl_function" href="group__PJ__PSTR.htm#gaa89224d869eb10610c4c63617dcbb752">pj_create_random_string</a>(send_buf, bufsize);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Init operation keys.</span></div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;read_op, <span class="keyword">sizeof</span>(read_op));</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;write_op, <span class="keyword">sizeof</span>(write_op));</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Start reading on the server side.</span></div>
<div class="line">        bytes = bufsize;</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(skey, &amp;read_op, recv_buf, &amp;bytes, 0);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_read()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">break</span>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Starts send on the client side.</span></div>
<div class="line">        bytes = bufsize;</div>
<div class="line">        rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gad9eaa7c7b2668255d6ee1a0bf3afb007">pj_ioqueue_sendto</a>(ckey, &amp;write_op, send_buf, &amp;bytes, 0,</div>
<div class="line">                               &amp;addr, <span class="keyword">sizeof</span>(addr));</div>
<div class="line">        <span class="keywordflow">if</span> (rc != <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code hl_define" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_write()&quot;</span>, rc);</div>
<div class="line">            <span class="keywordflow">break</span>;</div>
<div class="line">        }</div>
<div class="line">        <span class="keywordflow">if</span> (rc == <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div>
<div class="line">            <span class="keywordflow">if</span> (bytes &lt; 0) {</div>
<div class="line">                app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_sendto()&quot;</span>,(<a class="code hl_typedef" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>)-bytes);</div>
<div class="line">                <span class="keywordflow">break</span>;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Begin time.</span></div>
<div class="line">        <a class="code hl_function" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Poll the queue until we&#39;ve got completion event in the server side.</span></div>
<div class="line">        callback_read_key = NULL;</div>
<div class="line">        callback_read_size = 0;</div>
<div class="line">        TRACE__((THIS_FILE, <span class="stringliteral">&quot;     waiting for key = %p&quot;</span>, skey));</div>
<div class="line">        <span class="keywordflow">do</span> {</div>
<div class="line">            <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = { 1, 0 };</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">            rc = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code hl_define" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">            rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">            TRACE__((THIS_FILE, <span class="stringliteral">&quot;     poll rc=%d&quot;</span>, rc));</div>
<div class="line">        } <span class="keywordflow">while</span> (rc &gt;= 0 &amp;&amp; callback_read_key != skey);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// End time.</span></div>
<div class="line">        <a class="code hl_function" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);</div>
<div class="line">        t_elapsed.u64 += (t2.u64 - t1.u64);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (rc &lt; 0) {</div>
<div class="line">            app_perror(<span class="stringliteral">&quot;   error: pj_ioqueue_poll&quot;</span>, -rc);</div>
<div class="line">            <span class="keywordflow">break</span>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Compare recv buffer with send buffer.</span></div>
<div class="line">        <span class="keywordflow">if</span> (callback_read_size != bufsize || </div>
<div class="line">            <a class="code hl_function" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(send_buf, recv_buf, bufsize)) </div>
<div class="line">        {</div>
<div class="line">            rc = -10;</div>
<div class="line">            <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   error: size/buffer mismatch&quot;</span>));</div>
<div class="line">            <span class="keywordflow">break</span>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Poll until all events are exhausted, before we start the next loop.</span></div>
<div class="line">        <span class="keywordflow">do</span> {</div>
<div class="line">            <a class="code hl_struct" href="structpj__time__val.htm">pj_time_val</a> timeout = { 0, 10 };</div>
<div class="line"><span class="preprocessor">#ifdef PJ_SYMBIAN</span></div>
<div class="line">            <a class="code hl_define" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(timeout);</div>
<div class="line">            rc = <a class="code hl_function" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 100);</div>
<div class="line"><span class="preprocessor">#else       </span></div>
<div class="line">            rc = <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">        } <span class="keywordflow">while</span> (rc&gt;0);</div>
<div class="line"> </div>
<div class="line">        rc = 0;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Print results</span></div>
<div class="line">    <span class="keywordflow">if</span> (rc == 0) {</div>
<div class="line">        <a class="code hl_union" href="unionpj__timestamp.htm">pj_timestamp</a> tzero;</div>
<div class="line">        <a class="code hl_typedef" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> usec_delay;</div>
<div class="line"> </div>
<div class="line">        tzero.<a class="code hl_variable" href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">u32</a>.<a class="code hl_variable" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> = tzero.<a class="code hl_variable" href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">u32</a>.<a class="code hl_variable" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;</div>
<div class="line">        usec_delay = <a class="code hl_function" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a>( &amp;tzero, &amp;t_elapsed);</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...%10d %15d  % 9d&quot;</span>, </div>
<div class="line">                   bufsize, inactive_sock_count, usec_delay));</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(2, (THIS_FILE, <span class="stringliteral">&quot;...ERROR rc=%d (buf:%d, fds:%d)&quot;</span>, </div>
<div class="line">                              rc, bufsize, inactive_sock_count+2));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Cleaning up.</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=inactive_sock_count-1; i&gt;=0; --i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(keys[i]);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(skey);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>( pool);</div>
<div class="line">    <span class="keywordflow">return</span> rc;</div>
<div class="line"> </div>
<div class="line">on_error:</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: %s&quot;</span>, </div>
<div class="line">              <a class="code hl_function" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a>(<a class="code hl_function" href="group__pj__errno.htm#gaf32783cbca43d14cfc7e29694ba9057c">pj_get_netos_error</a>(), errbuf, <span class="keyword">sizeof</span>(errbuf))));</div>
<div class="line">    <span class="keywordflow">if</span> (ssock)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);</div>
<div class="line">    <span class="keywordflow">if</span> (csock)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock);</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;inactive_sock_count &amp;&amp; inactive_sock &amp;&amp; </div>
<div class="line">              inactive_sock[i]!=<a class="code hl_define" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>; ++i) </div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (ioque != NULL)</div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>( pool);</div>
<div class="line">    <span class="keywordflow">return</span> -1;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> udp_ioqueue_test_imp(<span class="keyword">const</span> <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> *cfg)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> status;</div>
<div class="line">    <span class="keywordtype">int</span> bufsize, sock_count;</div>
<div class="line">    <span class="keywordtype">char</span> title[64];</div>
<div class="line"> </div>
<div class="line">    pj_ansi_snprintf(title, <span class="keyword">sizeof</span>(title), <span class="stringliteral">&quot;%s (concur:%d, epoll_flags:0x%x)&quot;</span>,</div>
<div class="line">                     <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a>(), cfg-&gt;<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">default_concurrency</a>,</div>
<div class="line">                     cfg-&gt;<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//goto pass1;</span></div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...compliance test (%s)&quot;</span>, title));</div>
<div class="line">    <span class="keywordflow">if</span> ((status=compliance_test(cfg)) != 0) {</div>
<div class="line">        <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;....compliance test ok&quot;</span>));</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...unregister test (%s)&quot;</span>, title));</div>
<div class="line">    <span class="keywordflow">if</span> ((status=unregister_test(cfg)) != 0) {</div>
<div class="line">        <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;....unregister test ok&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> ((status=many_handles_test(cfg)) != 0) {</div>
<div class="line">        <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line">    </div>
<div class="line">    <span class="comment">//return 0;</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, <span class="stringliteral">&quot;...benchmarking different buffer size:&quot;</span>));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, <span class="stringliteral">&quot;... note: buf=bytes sent, fds=# of fds, &quot;</span></div>
<div class="line">                          <span class="stringliteral">&quot;elapsed=in timer ticks&quot;</span>));</div>
<div class="line"> </div>
<div class="line"><span class="comment">//pass1:</span></div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...Benchmarking poll times for %s:&quot;</span>, title));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...=====================================&quot;</span>));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...Buf.size   #inactive-socks  Time/poll&quot;</span>));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;... (bytes)                    (nanosec)&quot;</span>));</div>
<div class="line">    <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...=====================================&quot;</span>));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//goto pass2;</span></div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (bufsize=BUF_MIN_SIZE; bufsize &lt;= BUF_MAX_SIZE; bufsize *= 2) {</div>
<div class="line">        <span class="keywordflow">if</span> ((status=bench_test(cfg, bufsize, SOCK_INACTIVE_MIN)) != 0)</div>
<div class="line">            <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line"><span class="comment">//pass2:</span></div>
<div class="line">    bufsize = 512;</div>
<div class="line">    <span class="keywordflow">for</span> (sock_count=SOCK_INACTIVE_MIN+2; </div>
<div class="line">         sock_count&lt;=SOCK_INACTIVE_MAX+2; </div>
<div class="line">         sock_count *= 2) </div>
<div class="line">    {</div>
<div class="line">        <span class="comment">//PJ_LOG(3,(THIS_FILE, &quot;...testing with %d fds&quot;, sock_count));</span></div>
<div class="line">        <span class="keywordflow">if</span> ((status=bench_test(cfg, bufsize, sock_count-2)) != 0)</div>
<div class="line">            <span class="keywordflow">return</span> status;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> udp_ioqueue_test()</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_enumeration" href="group__PJ__IOQUEUE.htm#ga2bcdc50ba1dc268a9a8c7749d18c9252">pj_ioqueue_epoll_flag</a> epoll_flags[] = {</div>
<div class="line"><span class="preprocessor">#if PJ_HAS_LINUX_EPOLL</span></div>
<div class="line">        <a class="code hl_enumvalue" href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a15e5f1dda79bcc01a771455c0abcff96">PJ_IOQUEUE_EPOLL_AUTO</a>,</div>
<div class="line">        <a class="code hl_enumvalue" href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252aae582ec72fab68f1d5d64d0c5f6d634a">PJ_IOQUEUE_EPOLL_EXCLUSIVE</a>,</div>
<div class="line">        <a class="code hl_enumvalue" href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a537548522bcf5f41a7983f6d36aa1442">PJ_IOQUEUE_EPOLL_ONESHOT</a>,</div>
<div class="line">        0,</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        <a class="code hl_enumvalue" href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a15e5f1dda79bcc01a771455c0abcff96">PJ_IOQUEUE_EPOLL_AUTO</a>,</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">    };</div>
<div class="line">    <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> concurs[] = { <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a>, <a class="code hl_enumvalue" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a> };</div>
<div class="line">    <span class="keywordtype">int</span> i, rc, err = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code hl_define" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(epoll_flags); ++i) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> cfg;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7f8ea5160ad41ac46770594888579dca">pj_ioqueue_cfg_default</a>(&amp;cfg);</div>
<div class="line">        cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a> = epoll_flags[i];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s UDP compliance test, epoll_flags=0x%x&quot;</span>,</div>
<div class="line">                   <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a>(), cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a>));</div>
<div class="line"> </div>
<div class="line">        rc = udp_ioqueue_test_imp(&amp;cfg);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != 0 &amp;&amp; err==0)</div>
<div class="line">            err = rc;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code hl_define" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(concurs); ++i) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> cfg;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7f8ea5160ad41ac46770594888579dca">pj_ioqueue_cfg_default</a>(&amp;cfg);</div>
<div class="line">        cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">default_concurrency</a> = concurs[i];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s UDP compliance test, concurrency=%d&quot;</span>,</div>
<div class="line">                   <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a>(), cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">default_concurrency</a>));</div>
<div class="line"> </div>
<div class="line">        rc = udp_ioqueue_test_imp(&amp;cfg);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != 0 &amp;&amp; err==0)</div>
<div class="line">            err = rc;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if PJ_HAS_THREADS</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code hl_define" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(epoll_flags); ++i) {</div>
<div class="line">        <a class="code hl_struct" href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a> cfg;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_function" href="group__PJ__IOQUEUE.htm#ga7f8ea5160ad41ac46770594888579dca">pj_ioqueue_cfg_default</a>(&amp;cfg);</div>
<div class="line">        cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a> = epoll_flags[i];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_define" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s UDP parallel compliance test, epoll_flags=0x%x&quot;</span>,</div>
<div class="line">                   <a class="code hl_function" href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a>(), cfg.<a class="code hl_variable" href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">epoll_flags</a>));</div>
<div class="line"> </div>
<div class="line">        rc = parallel_recv_test(&amp;cfg);</div>
<div class="line">        <span class="keywordflow">if</span> (rc != 0 &amp;&amp; err==0)</div>
<div class="line">            err = rc;</div>
<div class="line"> </div>
<div class="line">    }</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> err;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div>
<div class="line"><span class="comment"> * when this test is disabled. </span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keywordtype">int</span> dummy_uiq_udp;</div>
<div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_UDP_IOQUEUE_TEST */</span><span class="preprocessor"></span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga173588cd6381f3ad354c23c26929093a"><div class="ttname"><a href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a></div><div class="ttdeci">long pj_ssize_t</div><div class="ttdef"><b>Definition:</b> types.h:64</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga1dc7a356fb36bd2dee2bc7d6c7e817e4"><div class="ttname"><a href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a></div><div class="ttdeci">int pj_bool_t</div><div class="ttdef"><b>Definition:</b> types.h:71</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga26ca218655d86b00d807e1407854128e"><div class="ttname"><a href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a></div><div class="ttdeci">struct pj_ioqueue_t pj_ioqueue_t</div><div class="ttdef"><b>Definition:</b> types.h:210</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga5ccc87de27d1236bc31ae3673d153984"><div class="ttname"><a href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a></div><div class="ttdeci">long pj_sock_t</div><div class="ttdef"><b>Definition:</b> types.h:263</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga89da69533fa1109f3a11ef91c489d9ad"><div class="ttname"><a href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a></div><div class="ttdeci">struct pj_ioqueue_key_t pj_ioqueue_key_t</div><div class="ttdef"><b>Definition:</b> types.h:216</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gab43ba3167bd2a2ab4580509dbf79200e"><div class="ttname"><a href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a></div><div class="ttdeci">int pj_status_t</div><div class="ttdef"><b>Definition:</b> types.h:68</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gacb9d46aed6813bf142efc1c3db7a2d17"><div class="ttname"><a href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a></div><div class="ttdeci">struct pj_thread_t pj_thread_t</div><div class="ttdef"><b>Definition:</b> types.h:236</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gacd8459212a1e5175eeb04e3a6cd76659"><div class="ttname"><a href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a></div><div class="ttdeci">#define PJ_ARRAY_SIZE(a)</div><div class="ttdef"><b>Definition:</b> types.h:281</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gafbfd2fd08c6041ea3cb217310c0b5b48"><div class="ttname"><a href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a></div><div class="ttdeci">unsigned int pj_uint32_t</div><div class="ttdef"><b>Definition:</b> types.h:43</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935"><div class="ttname"><a href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a></div><div class="ttdeci">@ PJ_SUCCESS</div><div class="ttdef"><b>Definition:</b> types.h:93</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0"><div class="ttname"><a href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a></div><div class="ttdeci">@ PJ_TRUE</div><div class="ttdef"><b>Definition:</b> types.h:96</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e"><div class="ttname"><a href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a></div><div class="ttdeci">@ PJ_FALSE</div><div class="ttdef"><b>Definition:</b> types.h:99</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga2bcdc50ba1dc268a9a8c7749d18c9252"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga2bcdc50ba1dc268a9a8c7749d18c9252">pj_ioqueue_epoll_flag</a></div><div class="ttdeci">pj_ioqueue_epoll_flag</div><div class="ttdef"><b>Definition:</b> ioqueue.h:337</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga2ef6f3b6077c716793e2b4a488e03fe4"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a></div><div class="ttdeci">void pj_ioqueue_op_key_init(pj_ioqueue_op_key_t *op_key, pj_size_t size)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga374d409596460c721e6c185e4a13f25d"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom</a></div><div class="ttdeci">pj_status_t pj_ioqueue_recvfrom(pj_ioqueue_key_t *key, pj_ioqueue_op_key_t *op_key, void *buffer, pj_ssize_t *length, pj_uint32_t flags, pj_sockaddr_t *addr, int *addrlen)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga4b4a5609d565d1ea4ccc0cd5d666200f"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga4b4a5609d565d1ea4ccc0cd5d666200f">pj_ioqueue_create2</a></div><div class="ttdeci">pj_status_t pj_ioqueue_create2(pj_pool_t *pool, pj_size_t max_fd, const pj_ioqueue_cfg *cfg, pj_ioqueue_t **ioqueue)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga59f004632b9ae20e43fa573e6b6cb237"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a></div><div class="ttdeci">pj_status_t pj_ioqueue_destroy(pj_ioqueue_t *ioque)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga71e08c6414a6f0cd1c1d2fde267bccbe"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a></div><div class="ttdeci">pj_status_t pj_ioqueue_recv(pj_ioqueue_key_t *key, pj_ioqueue_op_key_t *op_key, void *buffer, pj_ssize_t *length, pj_uint32_t flags)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga7291c776b40b0e0fffbaaf74c70aaded"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga7291c776b40b0e0fffbaaf74c70aaded">pj_ioqueue_get_user_data</a></div><div class="ttdeci">void * pj_ioqueue_get_user_data(pj_ioqueue_key_t *key)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga7c05e3b02e71e7680679c90c2adbe230"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a></div><div class="ttdeci">pj_status_t pj_ioqueue_unregister(pj_ioqueue_key_t *key)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_ga7f8ea5160ad41ac46770594888579dca"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#ga7f8ea5160ad41ac46770594888579dca">pj_ioqueue_cfg_default</a></div><div class="ttdeci">void pj_ioqueue_cfg_default(pj_ioqueue_cfg *cfg)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gac65cc5cb9a04f2008d1fa62709ba2d91"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a></div><div class="ttdeci">int pj_ioqueue_poll(pj_ioqueue_t *ioque, const pj_time_val *timeout)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gad9eaa7c7b2668255d6ee1a0bf3afb007"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gad9eaa7c7b2668255d6ee1a0bf3afb007">pj_ioqueue_sendto</a></div><div class="ttdeci">pj_status_t pj_ioqueue_sendto(pj_ioqueue_key_t *key, pj_ioqueue_op_key_t *op_key, const void *data, pj_ssize_t *length, pj_uint32_t flags, const pj_sockaddr_t *addr, int addrlen)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gada2faae3ca27a917b90f6fa39b758355"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a></div><div class="ttdeci">pj_status_t pj_ioqueue_register_sock(pj_pool_t *pool, pj_ioqueue_t *ioque, pj_sock_t sock, void *user_data, const pj_ioqueue_callback *cb, pj_ioqueue_key_t **key)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gae6041c1ae18fb855e252eb0df49440eb"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gae6041c1ae18fb855e252eb0df49440eb">pj_ioqueue_name</a></div><div class="ttdeci">const char * pj_ioqueue_name(void)</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gga2bcdc50ba1dc268a9a8c7749d18c9252a15e5f1dda79bcc01a771455c0abcff96"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a15e5f1dda79bcc01a771455c0abcff96">PJ_IOQUEUE_EPOLL_AUTO</a></div><div class="ttdeci">@ PJ_IOQUEUE_EPOLL_AUTO</div><div class="ttdef"><b>Definition:</b> ioqueue.h:351</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gga2bcdc50ba1dc268a9a8c7749d18c9252a537548522bcf5f41a7983f6d36aa1442"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252a537548522bcf5f41a7983f6d36aa1442">PJ_IOQUEUE_EPOLL_ONESHOT</a></div><div class="ttdeci">@ PJ_IOQUEUE_EPOLL_ONESHOT</div><div class="ttdef"><b>Definition:</b> ioqueue.h:344</div></div>
<div class="ttc" id="agroup__PJ__IOQUEUE_htm_gga2bcdc50ba1dc268a9a8c7749d18c9252aae582ec72fab68f1d5d64d0c5f6d634a"><div class="ttname"><a href="group__PJ__IOQUEUE.htm#gga2bcdc50ba1dc268a9a8c7749d18c9252aae582ec72fab68f1d5d64d0c5f6d634a">PJ_IOQUEUE_EPOLL_EXCLUSIVE</a></div><div class="ttdeci">@ PJ_IOQUEUE_EPOLL_EXCLUSIVE</div><div class="ttdef"><b>Definition:</b> ioqueue.h:340</div></div>
<div class="ttc" id="agroup__PJ__LOG_htm_ga767b9231bf7c2b57274771cdc4bca818"><div class="ttname"><a href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a></div><div class="ttdeci">#define PJ_LOG(level, arg)</div><div class="ttdef"><b>Definition:</b> log.h:106</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_ga14798f6ba0d0858e4f36cc8a4904bbd9"><div class="ttname"><a href="group__PJ__POOL.htm#ga14798f6ba0d0858e4f36cc8a4904bbd9">pj_pool_alloc</a></div><div class="ttdeci">void * pj_pool_alloc(pj_pool_t *pool, pj_size_t size)</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_ga4634b31af5eb0a0178481536986f1d15"><div class="ttname"><a href="group__PJ__POOL.htm#ga4634b31af5eb0a0178481536986f1d15">pj_pool_create</a></div><div class="ttdeci">pj_pool_t * pj_pool_create(pj_pool_factory *factory, const char *name, pj_size_t initial_size, pj_size_t increment_size, pj_pool_callback *callback)</div></div>
<div class="ttc" id="agroup__PJ__POOL_htm_gade0f14f6635ecfccb576ec41c57fede5"><div class="ttname"><a href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a></div><div class="ttdeci">void pj_pool_release(pj_pool_t *pool)</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_ga20fa0c4d9ccddd0822a775730cf4a867"><div class="ttname"><a href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a></div><div class="ttdeci">pj_str_t pj_str(char *str)</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_ga81417b253e8d0f658d2fe73e9eeb6bb5"><div class="ttname"><a href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a></div><div class="ttdeci">int pj_memcmp(const void *buf1, const void *buf2, pj_size_t size)</div><div class="ttdef"><b>Definition:</b> string.h:823</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_gaa89224d869eb10610c4c63617dcbb752"><div class="ttname"><a href="group__PJ__PSTR.htm#gaa89224d869eb10610c4c63617dcbb752">pj_create_random_string</a></div><div class="ttdeci">char * pj_create_random_string(char *str, pj_size_t length)</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_gac34ba480d390a5652092da2fc29b4493"><div class="ttname"><a href="group__PJ__PSTR.htm#gac34ba480d390a5652092da2fc29b4493">pj_cstr</a></div><div class="ttdeci">const pj_str_t * pj_cstr(pj_str_t *str, const char *s)</div><div class="ttdef"><b>Definition:</b> string.h:100</div></div>
<div class="ttc" id="agroup__PJ__PSTR_htm_gafa92001573289c87313c660146369fa3"><div class="ttname"><a href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a></div><div class="ttdeci">void pj_bzero(void *dst, pj_size_t size)</div><div class="ttdef"><b>Definition:</b> string.h:762</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga173d6da92ef0a4f0df062bf377b4d626"><div class="ttname"><a href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a></div><div class="ttdeci">pj_status_t pj_sock_bind(pj_sock_t sockfd, const pj_sockaddr_t *my_addr, int addrlen)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga21be8c2a1eb582bd13a801d4285f3ef9"><div class="ttname"><a href="group__PJ__SOCK.htm#ga21be8c2a1eb582bd13a801d4285f3ef9">pj_sock_send</a></div><div class="ttdeci">pj_status_t pj_sock_send(pj_sock_t sockfd, const void *buf, pj_ssize_t *len, unsigned flags)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga25ce2f95b79d3556375804123a5eb77e"><div class="ttname"><a href="group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a></div><div class="ttdeci">pj_uint16_t pj_htons(pj_uint16_t hostshort)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga2f8faea76a64620b13a720227df927bb"><div class="ttname"><a href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a></div><div class="ttdeci">pj_status_t pj_sock_close(pj_sock_t sockfd)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga323567f1eb0a1cd7b4a832706309358a"><div class="ttname"><a href="group__PJ__SOCK.htm#ga323567f1eb0a1cd7b4a832706309358a">pj_inet_addr2</a></div><div class="ttdeci">pj_in_addr pj_inet_addr2(const char *cp)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga8ea303b95fe973432a361e47e0459086"><div class="ttname"><a href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a></div><div class="ttdeci">#define pj_AF_INET()</div><div class="ttdef"><b>Definition:</b> sock.h:113</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_ga9a84c286a4b7061503628b02d62f249a"><div class="ttname"><a href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a></div><div class="ttdeci">pj_status_t pj_sock_sendto(pj_sock_t sockfd, const void *buf, pj_ssize_t *len, unsigned flags, const pj_sockaddr_t *to, int tolen)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gaaa5fa1293ffc11d0970811819b3828dc"><div class="ttname"><a href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a></div><div class="ttdeci">#define pj_SOCK_DGRAM()</div><div class="ttdef"><b>Definition:</b> sock.h:162</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gab44152e660cc3fd044afd590eeea78bc"><div class="ttname"><a href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a></div><div class="ttdeci">#define PJ_INVALID_SOCKET</div><div class="ttdef"><b>Definition:</b> sock.h:485</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gad483f4c00174b4b2eef7e66b96804b1c"><div class="ttname"><a href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a></div><div class="ttdeci">pj_status_t pj_sock_getsockname(pj_sock_t sockfd, pj_sockaddr_t *addr, int *namelen)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gae224fbf8e8bd55b40030fcd8f9645291"><div class="ttname"><a href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a></div><div class="ttdeci">#define pj_SOCK_STREAM()</div><div class="ttdef"><b>Definition:</b> sock.h:160</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gae6169f27eb956287681a46ca9fecdafc"><div class="ttname"><a href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a></div><div class="ttdeci">pj_status_t pj_sockaddr_in_init(pj_sockaddr_in *addr, const pj_str_t *cp, pj_uint16_t port)</div></div>
<div class="ttc" id="agroup__PJ__SOCK_htm_gaeec96c063aafa1d7c19b33590997bcff"><div class="ttname"><a href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a></div><div class="ttdeci">pj_status_t pj_sock_socket(int family, int type, int protocol, pj_sock_t *sock)</div></div>
<div class="ttc" id="agroup__PJ__SYMBIAN__OS_htm_ga275984ae4a88fbf747275284fee70f62"><div class="ttname"><a href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a></div><div class="ttdeci">pj_bool_t pj_symbianos_poll(int priority, int ms_timeout)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga5435f79ad044f9ce2113af311bf2b777"><div class="ttname"><a href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a></div><div class="ttdeci">pj_status_t pj_thread_destroy(pj_thread_t *thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga60d90ce08d2f7e92dcaa0443cf87912f"><div class="ttname"><a href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a></div><div class="ttdeci">pj_status_t pj_thread_join(pj_thread_t *thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_ga7b63533cf4f3ba0cba68cab49a22d722"><div class="ttname"><a href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a></div><div class="ttdeci">pj_status_t pj_thread_create(pj_pool_t *pool, const char *thread_name, pj_thread_proc *proc, void *arg, pj_size_t stack_size, unsigned flags, pj_thread_t **thread)</div></div>
<div class="ttc" id="agroup__PJ__THREAD_htm_gad59cd6fd7390711758afcc0bde375d68"><div class="ttname"><a href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a></div><div class="ttdeci">pj_status_t pj_thread_sleep(unsigned msec)</div></div>
<div class="ttc" id="agroup__PJ__TIMESTAMP_htm_ga29b19ea0c334403aea47efe76476f10c"><div class="ttname"><a href="group__PJ__TIMESTAMP.htm#ga29b19ea0c334403aea47efe76476f10c">pj_gettickcount</a></div><div class="ttdeci">pj_status_t pj_gettickcount(pj_time_val *tv)</div></div>
<div class="ttc" id="agroup__PJ__TIMESTAMP_htm_gaa419b8448d1cb55db85aeac2e86fe11c"><div class="ttname"><a href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a></div><div class="ttdeci">pj_status_t pj_get_timestamp(pj_timestamp *ts)</div></div>
<div class="ttc" id="agroup__PJ__TIMESTAMP_htm_gad5a0323beb04de52474b59693b4b12ac"><div class="ttname"><a href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a></div><div class="ttdeci">pj_uint32_t pj_elapsed_usec(const pj_timestamp *start, const pj_timestamp *stop)</div></div>
<div class="ttc" id="agroup__PJ__TIME_htm_gad015d440803cb8f62ff73878f35badaa"><div class="ttname"><a href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a></div><div class="ttdeci">#define PJ_TIME_VAL_MSEC(t)</div><div class="ttdef"><b>Definition:</b> types.h:421</div></div>
<div class="ttc" id="agroup__pj__assert_htm_ga981d47a5e9d7e9655473244839f0f5d3"><div class="ttname"><a href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a></div><div class="ttdeci">#define pj_assert(expr)</div><div class="ttdef"><b>Definition:</b> assert.h:48</div></div>
<div class="ttc" id="agroup__pj__config_htm_ga0b0fdd6e70bdbe412c1a3337ce3ff5ee"><div class="ttname"><a href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a></div><div class="ttdeci">#define PJ_IOQUEUE_MAX_HANDLES</div><div class="ttdef"><b>Definition:</b> config.h:681</div></div>
<div class="ttc" id="agroup__pj__config_htm_ga5db550a999ee6b65533854093bf43fce"><div class="ttname"><a href="group__pj__config.htm#ga5db550a999ee6b65533854093bf43fce">PJ_IOQUEUE_KEY_FREE_DELAY</a></div><div class="ttdeci">#define PJ_IOQUEUE_KEY_FREE_DELAY</div><div class="ttdef"><b>Definition:</b> config.h:742</div></div>
<div class="ttc" id="agroup__pj__config_htm_ga7523f8576efd271c22b188eab05d7870"><div class="ttname"><a href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a></div><div class="ttdeci">#define PJ_UNUSED_ARG(arg)</div><div class="ttdef"><b>Definition:</b> config.h:1343</div></div>
<div class="ttc" id="agroup__pj__errno_htm_ga314a8edfdcec54a086a401e97b5b0bd0"><div class="ttname"><a href="group__pj__errno.htm#ga314a8edfdcec54a086a401e97b5b0bd0">PJ_ERR_MSG_SIZE</a></div><div class="ttdeci">#define PJ_ERR_MSG_SIZE</div><div class="ttdef"><b>Definition:</b> errno.h:84</div></div>
<div class="ttc" id="agroup__pj__errno_htm_ga7d2616aded0d61924fb31f4fd6ee45c0"><div class="ttname"><a href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a></div><div class="ttdeci">pj_str_t pj_strerror(pj_status_t statcode, char *buf, pj_size_t bufsize)</div></div>
<div class="ttc" id="agroup__pj__errno_htm_ga902af234ceebf60443561fb2dd26649e"><div class="ttname"><a href="group__pj__errno.htm#ga902af234ceebf60443561fb2dd26649e">pj_set_os_error</a></div><div class="ttdeci">void pj_set_os_error(pj_status_t code)</div></div>
<div class="ttc" id="agroup__pj__errno_htm_gacb73514c3158bdeda93488e8624e7b42"><div class="ttname"><a href="group__pj__errno.htm#gacb73514c3158bdeda93488e8624e7b42">PJ_PERROR</a></div><div class="ttdeci">#define PJ_PERROR(level, arg)</div><div class="ttdef"><b>Definition:</b> errno.h:175</div></div>
<div class="ttc" id="agroup__pj__errno_htm_gaf21ec2038ae010661eb50c56696278c9"><div class="ttname"><a href="group__pj__errno.htm#gaf21ec2038ae010661eb50c56696278c9">PJ_STATUS_FROM_OS</a></div><div class="ttdeci">#define PJ_STATUS_FROM_OS(e)</div><div class="ttdef"><b>Definition:</b> errno.h:275</div></div>
<div class="ttc" id="agroup__pj__errno_htm_gaf32783cbca43d14cfc7e29694ba9057c"><div class="ttname"><a href="group__pj__errno.htm#gaf32783cbca43d14cfc7e29694ba9057c">pj_get_netos_error</a></div><div class="ttdeci">pj_status_t pj_get_netos_error(void)</div></div>
<div class="ttc" id="agroup__pj__errnum_htm_ga8706796879339b5dc875e2af631d6fe7"><div class="ttname"><a href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a></div><div class="ttdeci">#define PJ_EPENDING</div><div class="ttdef"><b>Definition:</b> errno.h:322</div></div>
<div class="ttc" id="agroup__pj__errnum_htm_ga9a16214b8d54a8ee9d6bce378d116beb"><div class="ttname"><a href="group__pj__errnum.htm#ga9a16214b8d54a8ee9d6bce378d116beb">PJ_ENOMEM</a></div><div class="ttdeci">#define PJ_ENOMEM</div><div class="ttdef"><b>Definition:</b> errno.h:347</div></div>
<div class="ttc" id="astructop__key_htm"><div class="ttname"><a href="structop__key.htm">op_key</a></div><div class="ttdef"><b>Definition:</b> udp_echo_srv_ioqueue.c:27</div></div>
<div class="ttc" id="astructpj__ioqueue__callback_htm"><div class="ttname"><a href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a></div><div class="ttdef"><b>Definition:</b> ioqueue.h:219</div></div>
<div class="ttc" id="astructpj__ioqueue__callback_htm_aaf564626f7a74bc96fa6ef96f72cb6e1"><div class="ttname"><a href="structpj__ioqueue__callback.htm#aaf564626f7a74bc96fa6ef96f72cb6e1">pj_ioqueue_callback::on_read_complete</a></div><div class="ttdeci">void(* on_read_complete)(pj_ioqueue_key_t *key, pj_ioqueue_op_key_t *op_key, pj_ssize_t bytes_read)</div><div class="ttdef"><b>Definition:</b> ioqueue.h:231</div></div>
<div class="ttc" id="astructpj__ioqueue__cfg_htm"><div class="ttname"><a href="structpj__ioqueue__cfg.htm">pj_ioqueue_cfg</a></div><div class="ttdef"><b>Definition:</b> ioqueue.h:362</div></div>
<div class="ttc" id="astructpj__ioqueue__cfg_htm_ab85803d52ec881318a395a72abe1ce33"><div class="ttname"><a href="structpj__ioqueue__cfg.htm#ab85803d52ec881318a395a72abe1ce33">pj_ioqueue_cfg::epoll_flags</a></div><div class="ttdeci">unsigned epoll_flags</div><div class="ttdef"><b>Definition:</b> ioqueue.h:370</div></div>
<div class="ttc" id="astructpj__ioqueue__cfg_htm_acb27aaeadf5fa65adff56b68c250c81d"><div class="ttname"><a href="structpj__ioqueue__cfg.htm#acb27aaeadf5fa65adff56b68c250c81d">pj_ioqueue_cfg::default_concurrency</a></div><div class="ttdeci">pj_bool_t default_concurrency</div><div class="ttdef"><b>Definition:</b> ioqueue.h:379</div></div>
<div class="ttc" id="astructpj__ioqueue__op__key__t_htm"><div class="ttname"><a href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a></div><div class="ttdef"><b>Definition:</b> ioqueue.h:208</div></div>
<div class="ttc" id="astructpj__ioqueue__op__key__t_htm_ab06c131ab29b37c027f2400bd5be6045"><div class="ttname"><a href="structpj__ioqueue__op__key__t.htm#ab06c131ab29b37c027f2400bd5be6045">pj_ioqueue_op_key_t::user_data</a></div><div class="ttdeci">void * user_data</div><div class="ttdef"><b>Definition:</b> ioqueue.h:211</div></div>
<div class="ttc" id="astructpj__pool__t_htm"><div class="ttname"><a href="structpj__pool__t.htm">pj_pool_t</a></div><div class="ttdef"><b>Definition:</b> pool.h:310</div></div>
<div class="ttc" id="astructpj__sockaddr__in_htm"><div class="ttname"><a href="structpj__sockaddr__in.htm">pj_sockaddr_in</a></div><div class="ttdef"><b>Definition:</b> sock.h:534</div></div>
<div class="ttc" id="astructpj__sockaddr__in_htm_a0e60b93d03fa052211bb6131e64bdda1"><div class="ttname"><a href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">pj_sockaddr_in::sin_port</a></div><div class="ttdeci">pj_uint16_t sin_port</div><div class="ttdef"><b>Definition:</b> sock.h:541</div></div>
<div class="ttc" id="astructpj__sockaddr__in_htm_ab298fd61a3f2bf3036fe414740a53cc6"><div class="ttname"><a href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">pj_sockaddr_in::sin_family</a></div><div class="ttdeci">pj_uint16_t sin_family</div><div class="ttdef"><b>Definition:</b> sock.h:539</div></div>
<div class="ttc" id="astructpj__sockaddr__in_htm_ad1ed5a34d99da0d23e65b3b3b5fad228"><div class="ttname"><a href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">pj_sockaddr_in::sin_addr</a></div><div class="ttdeci">pj_in_addr sin_addr</div><div class="ttdef"><b>Definition:</b> sock.h:542</div></div>
<div class="ttc" id="astructpj__str__t_htm"><div class="ttname"><a href="structpj__str__t.htm">pj_str_t</a></div><div class="ttdef"><b>Definition:</b> types.h:120</div></div>
<div class="ttc" id="astructpj__time__val_htm"><div class="ttname"><a href="structpj__time__val.htm">pj_time_val</a></div><div class="ttdef"><b>Definition:</b> types.h:397</div></div>
<div class="ttc" id="astructpj__time__val_htm_ab9cc04663b258dd3dcb449a3110e0d82"><div class="ttname"><a href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">pj_time_val::msec</a></div><div class="ttdeci">long msec</div><div class="ttdef"><b>Definition:</b> types.h:402</div></div>
<div class="ttc" id="astructpj__time__val_htm_af2739d0c2189e9c902281c04fd1f4502"><div class="ttname"><a href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">pj_time_val::sec</a></div><div class="ttdeci">long sec</div><div class="ttdef"><b>Definition:</b> types.h:399</div></div>
<div class="ttc" id="aunionpj__timestamp_htm"><div class="ttname"><a href="unionpj__timestamp.htm">pj_timestamp</a></div><div class="ttdef"><b>Definition:</b> types.h:134</div></div>
<div class="ttc" id="aunionpj__timestamp_htm_a2108e6b2a0b25129da1dbaef8076c218"><div class="ttname"><a href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">pj_timestamp::lo</a></div><div class="ttdeci">pj_uint32_t lo</div><div class="ttdef"><b>Definition:</b> types.h:142</div></div>
<div class="ttc" id="aunionpj__timestamp_htm_ad8d7dc97c37ef8ee2a7fac9960c85039"><div class="ttname"><a href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">pj_timestamp::hi</a></div><div class="ttdeci">pj_uint32_t hi</div><div class="ttdef"><b>Definition:</b> types.h:141</div></div>
<div class="ttc" id="aunionpj__timestamp_htm_aff0c07d99e2c40a8ab1fb2d34276d81d"><div class="ttname"><a href="unionpj__timestamp.htm#aff0c07d99e2c40a8ab1fb2d34276d81d">pj_timestamp::u32</a></div><div class="ttdeci">struct pj_timestamp::@9 u32</div></div>
</div><!-- fragment --> </div></div><!-- contents -->
</div><!-- PageDoc -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
