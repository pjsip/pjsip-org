<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj_stun_sock_cb Struct Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle"><div class="title">pj_stun_sock_cb Struct Reference<div class="ingroups"><a class="el" href="group__PJNATH.htm">NAT Traversal Helper Library</a> &raquo; <a class="el" href="group__PJNATH__STUN.htm">STUN: Session Traversal Utilities for NAT</a> &raquo; <a class="el" href="group__PJNATH__STUN__SOCK.htm">STUN-aware socket transport</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="stun__sock_8h_source.htm">stun_sock.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a302b042815dcf9d4e96e7b22f87759cf"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__sock__cb.htm#a302b042815dcf9d4e96e7b22f87759cf">on_rx_data</a> )(<a class="el" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, void *pkt, unsigned pkt_len, const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *src_addr, unsigned addr_len)</td></tr>
<tr class="separator:a302b042815dcf9d4e96e7b22f87759cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6d379fde5529c06c3756d859b0cca0e"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__sock__cb.htm#ae6d379fde5529c06c3756d859b0cca0e">on_data_sent</a> )(<a class="el" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, <a class="elRef" href="../../../pjlib/docs/html/structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="elRef" href="../../../pjlib/docs/html/structsend__key.htm">send_key</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent)</td></tr>
<tr class="separator:ae6d379fde5529c06c3756d859b0cca0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26bfef8bdef5c47eba53bb66269d78cd"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__sock__cb.htm#a26bfef8bdef5c47eba53bb66269d78cd">on_status</a> )(<a class="el" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, <a class="el" href="group__PJNATH__STUN__SOCK.htm#gae063dc49f90e760f150785b67407341b">pj_stun_sock_op</a> op, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td></tr>
<tr class="separator:a26bfef8bdef5c47eba53bb66269d78cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >This structure contains callbacks that will be called by the STUN transport to notify application about various events. </p>
</div><h2 class="groupheader">Field Documentation</h2>
<a id="ae6d379fde5529c06c3756d859b0cca0e" name="ae6d379fde5529c06c3756d859b0cca0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6d379fde5529c06c3756d859b0cca0e">&#9670;&nbsp;</a></span>on_data_sent</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(* pj_stun_sock_cb::on_data_sent) (<a class="el" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, <a class="elRef" href="../../../pjlib/docs/html/structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="elRef" href="../../../pjlib/docs/html/structsend__key.htm">send_key</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Notifification when asynchronous send operation has completed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stun_sock</td><td>The STUN transport. </td></tr>
    <tr><td class="paramname"><a class="elRef" href="../../../pjlib/docs/html/structsend__key.htm">send_key</a></td><td>The send operation key that was given in <a class="el" href="group__PJNATH__STUN__SOCK.htm#ga7b1ad63c5e8a8f0fa5667d2eb3b9e81a">pj_stun_sock_sendto()</a>. </td></tr>
    <tr><td class="paramname">sent</td><td>If value is positive non-zero it indicates the number of data sent. When the value is negative, it contains the error code which can be retrieved by negating the value (i.e. status=-sent).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Application should normally return PJ_TRUE to let the STUN transport continue its operation. However it must return PJ_FALSE if it has destroyed the STUN transport in this callback. </dd></dl>

</div>
</div>
<a id="a302b042815dcf9d4e96e7b22f87759cf" name="a302b042815dcf9d4e96e7b22f87759cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a302b042815dcf9d4e96e7b22f87759cf">&#9670;&nbsp;</a></span>on_rx_data</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(* pj_stun_sock_cb::on_rx_data) (<a class="el" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, void *pkt, unsigned pkt_len, const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *src_addr, unsigned addr_len)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Notification when incoming packet has been received.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stun_sock</td><td>The STUN transport. </td></tr>
    <tr><td class="paramname">data</td><td>The packet. </td></tr>
    <tr><td class="paramname">data_len</td><td>Length of the packet. </td></tr>
    <tr><td class="paramname">src_addr</td><td>The source address of the packet. </td></tr>
    <tr><td class="paramname">addr_len</td><td>The length of the source address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Application should normally return PJ_TRUE to let the STUN transport continue its operation. However it must return PJ_FALSE if it has destroyed the STUN transport in this callback. </dd></dl>

</div>
</div>
<a id="a26bfef8bdef5c47eba53bb66269d78cd" name="a26bfef8bdef5c47eba53bb66269d78cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26bfef8bdef5c47eba53bb66269d78cd">&#9670;&nbsp;</a></span>on_status</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(* pj_stun_sock_cb::on_status) (<a class="el" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, <a class="el" href="group__PJNATH__STUN__SOCK.htm#gae063dc49f90e760f150785b67407341b">pj_stun_sock_op</a> op, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Notification when the status of the STUN transport has changed. This callback may be called for the following conditions:</p><ul>
<li>the first time the publicly mapped address has been resolved from the STUN server, this callback will be called with <em>op</em> argument set to PJ_STUN_SOCK_BINDING_OP <em>status</em> argument set to PJ_SUCCESS.</li>
<li>anytime when the transport has detected that the publicly mapped address has changed, this callback will be called with <em>op</em> argument set to PJ_STUN_SOCK_KEEP_ALIVE_OP and <em>status</em> argument set to PJ_SUCCESS. On this case and the case above, application will get the resolved public address in the <a class="el" href="structpj__stun__sock__info.htm">pj_stun_sock_info</a> structure.</li>
<li>for any terminal error (such as STUN time-out, DNS resolution failure, or keep-alive failure), this callback will be called with the <em>status</em> argument set to non-PJ_SUCCESS.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stun_sock</td><td>The STUN transport. </td></tr>
    <tr><td class="paramname">op</td><td>The operation that triggers the callback. </td></tr>
    <tr><td class="paramname">status</td><td>The status.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Must return PJ_FALSE if it has destroyed the STUN transport in this callback. Application should normally destroy the socket and return PJ_FALSE upon encountering terminal error, otherwise it should return PJ_TRUE to let the STUN socket operation continues. </dd></dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li><a class="el" href="stun__sock_8h_source.htm">stun_sock.h</a></li>
</ul>
</div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
