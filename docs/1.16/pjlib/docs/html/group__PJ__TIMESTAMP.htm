<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: High Resolution Timestamp (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>High Resolution Timestamp<br/>
<small>
[<a class="el" href="group__PJ__SYS__INFO.htm">System Information</a>,&nbsp;<a class="el" href="group__PJ__OS.htm">Operating System Dependent Functionality.</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#ga29b19ea0c334403aea47efe76476f10c">pj_gettickcount</a> (<a class="el" href="structpj__time__val.htm">pj_time_val</a> *tv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a> (<a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *ts)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq</a> (<a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *freq)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gaa0b82903eaf90ffcb037e78733a6cf74">pj_set_timestamp32</a> (<a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> hi, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> lo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gaedd6c8cbb9b6a7b8c92bf9b7812effd7">pj_cmp_timestamp</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t1, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#ga77cfa0f58ddb0845500f48592fc391bd">pj_add_timestamp</a> (<a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t1, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#ga8301f48c29cae0d00cad160c77bcd035">pj_add_timestamp32</a> (<a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t1, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> t2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gac1235ac74c27acc3e9b14b17000ef7c3">pj_sub_timestamp</a> (<a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t1, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gaccc524197573d872d5126b988f09f02c">pj_sub_timestamp32</a> (<a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t1, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> t2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gac65eeb4771a6fc34225302fee5bcb7e2">pj_int32_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gabb58dd38416a07ec116ae790a2174b1f">pj_timestamp_diff32</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t1, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *t2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__time__val.htm">pj_time_val</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *start, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *stop)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#ga2e09f4da6b04d417e1acd11b477ed6a2">pj_elapsed_msec</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *start, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *stop)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_uint64_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gafe7df1c7f5ef2405f262795174e07035">pj_elapsed_msec64</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *start, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *stop)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *start, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *stop)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#ga272200d5c07ce72f685c0600f60369b2">pj_elapsed_nanosec</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *start, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *stop)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TIMESTAMP.htm#gabc3085b0db4efd753db831d425e28eb4">pj_elapsed_cycle</a> (const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *start, const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *stop)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>PJLIB provides <b>High Resolution Timestamp</b> API to access highest resolution timestamp value provided by the platform. The API is usefull to measure precise elapsed time, and can be used in applications such as profiling.</p>
<p>The timestamp value is represented in cycles, and can be related to normal time (in seconds or sub-seconds) using various functions provided.</p>
<h2><a class="anchor" id="pj_timestamp_examples_sec"></a>
Examples</h2>
<p>For examples, please see:</p>
<ul>
<li><a class="el" href="page_pjlib_sleep_test.htm">Test: Sleep, Time, and Timestamp</a></li>
<li><a class="el" href="page_pjlib_timestamp_test.htm">Test: Timestamp</a> </li>
</ul>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga77cfa0f58ddb0845500f48592fc391bd"></a><!-- doxytag: member="os.h::pj_add_timestamp" ref="ga77cfa0f58ddb0845500f48592fc391bd" args="(pj_timestamp *t1, const pj_timestamp *t2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_add_timestamp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add timestamp t2 to t1. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t1</em>&nbsp;</td><td>t1. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>t2</em>&nbsp;</td><td>t2. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8301f48c29cae0d00cad160c77bcd035"></a><!-- doxytag: member="os.h::pj_add_timestamp32" ref="ga8301f48c29cae0d00cad160c77bcd035" args="(pj_timestamp *t1, pj_uint32_t t2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_add_timestamp32 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>t2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add timestamp t2 to t1. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t1</em>&nbsp;</td><td>t1. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>t2</em>&nbsp;</td><td>t2. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaedd6c8cbb9b6a7b8c92bf9b7812effd7"></a><!-- doxytag: member="os.h::pj_cmp_timestamp" ref="gaedd6c8cbb9b6a7b8c92bf9b7812effd7" args="(const pj_timestamp *t1, const pj_timestamp *t2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_cmp_timestamp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare timestamp t1 and t2. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t1</em>&nbsp;</td><td>t1. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>t2</em>&nbsp;</td><td>t2. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>-1 if (t1 &lt; t2), 1 if (t1 &gt; t2), or 0 if (t1 == t2) </dd></dl>

</div>
</div>
<a class="anchor" id="gabc3085b0db4efd753db831d425e28eb4"></a><!-- doxytag: member="os.h::pj_elapsed_cycle" ref="gabc3085b0db4efd753db831d425e28eb4" args="(const pj_timestamp *start, const pj_timestamp *stop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> pj_elapsed_cycle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>stop</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the elapsed time in 32-bit cycles. This function calculates the elapsed time using highest precision calculation that is available for current platform, considering whether floating point or 64-bit precision arithmetic is available. For maximum portability, application should prefer to use this function rather than calculating the elapsed time by itself.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>start</em>&nbsp;</td><td>The starting timestamp. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>stop</em>&nbsp;</td><td>The end timestamp.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Elapsed time in cycles.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#ga272200d5c07ce72f685c0600f60369b2">pj_elapsed_nanosec()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga2e09f4da6b04d417e1acd11b477ed6a2"></a><!-- doxytag: member="os.h::pj_elapsed_msec" ref="ga2e09f4da6b04d417e1acd11b477ed6a2" args="(const pj_timestamp *start, const pj_timestamp *stop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> pj_elapsed_msec </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>stop</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the elapsed time as 32-bit miliseconds. This function calculates the elapsed time using highest precision calculation that is available for current platform, considering whether floating point or 64-bit precision arithmetic is available. For maximum portability, application should prefer to use this function rather than calculating the elapsed time by itself.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>start</em>&nbsp;</td><td>The starting timestamp. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>stop</em>&nbsp;</td><td>The end timestamp.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Elapsed time in milisecond.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#gabc3085b0db4efd753db831d425e28eb4">pj_elapsed_cycle()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#ga272200d5c07ce72f685c0600f60369b2">pj_elapsed_nanosec()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gafe7df1c7f5ef2405f262795174e07035"></a><!-- doxytag: member="os.h::pj_elapsed_msec64" ref="gafe7df1c7f5ef2405f262795174e07035" args="(const pj_timestamp *start, const pj_timestamp *stop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_uint64_t pj_elapsed_msec64 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>stop</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Variant of <a class="el" href="group__PJ__TIMESTAMP.htm#ga2e09f4da6b04d417e1acd11b477ed6a2">pj_elapsed_msec()</a> which returns 64bit value. </p>

</div>
</div>
<a class="anchor" id="ga272200d5c07ce72f685c0600f60369b2"></a><!-- doxytag: member="os.h::pj_elapsed_nanosec" ref="ga272200d5c07ce72f685c0600f60369b2" args="(const pj_timestamp *start, const pj_timestamp *stop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> pj_elapsed_nanosec </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>stop</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the elapsed time in 32-bit nanoseconds. This function calculates the elapsed time using highest precision calculation that is available for current platform, considering whether floating point or 64-bit precision arithmetic is available. For maximum portability, application should prefer to use this function rather than calculating the elapsed time by itself.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>start</em>&nbsp;</td><td>The starting timestamp. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>stop</em>&nbsp;</td><td>The end timestamp.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Elapsed time in nanoseconds.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#gabc3085b0db4efd753db831d425e28eb4">pj_elapsed_cycle()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gad4cb75af00fbf3a55a5e6a4825624dff"></a><!-- doxytag: member="os.h::pj_elapsed_time" ref="gad4cb75af00fbf3a55a5e6a4825624dff" args="(const pj_timestamp *start, const pj_timestamp *stop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__time__val.htm">pj_time_val</a> pj_elapsed_time </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>stop</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the elapsed time, and store it in <a class="el" href="structpj__time__val.htm">pj_time_val</a>. This function calculates the elapsed time using highest precision calculation that is available for current platform, considering whether floating point or 64-bit precision arithmetic is available. For maximum portability, application should prefer to use this function rather than calculating the elapsed time by itself.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>start</em>&nbsp;</td><td>The starting timestamp. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>stop</em>&nbsp;</td><td>The end timestamp.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Elapsed time as <a class="el" href="structpj__time__val.htm">pj_time_val</a>.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#gabc3085b0db4efd753db831d425e28eb4">pj_elapsed_cycle()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#ga272200d5c07ce72f685c0600f60369b2">pj_elapsed_nanosec()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gad5a0323beb04de52474b59693b4b12ac"></a><!-- doxytag: member="os.h::pj_elapsed_usec" ref="gad5a0323beb04de52474b59693b4b12ac" args="(const pj_timestamp *start, const pj_timestamp *stop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> pj_elapsed_usec </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>stop</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the elapsed time in 32-bit microseconds. This function calculates the elapsed time using highest precision calculation that is available for current platform, considering whether floating point or 64-bit precision arithmetic is available. For maximum portability, application should prefer to use this function rather than calculating the elapsed time by itself.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>start</em>&nbsp;</td><td>The starting timestamp. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>stop</em>&nbsp;</td><td>The end timestamp.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Elapsed time in microsecond.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#gabc3085b0db4efd753db831d425e28eb4">pj_elapsed_cycle()</a>, <a class="el" href="group__PJ__TIMESTAMP.htm#ga272200d5c07ce72f685c0600f60369b2">pj_elapsed_nanosec()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gaa419b8448d1cb55db85aeac2e86fe11c"></a><!-- doxytag: member="os.h::pj_get_timestamp" ref="gaa419b8448d1cb55db85aeac2e86fe11c" args="(pj_timestamp *ts)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_get_timestamp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>ts</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Acquire high resolution timer value. The time value are stored in cycles.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ts</em>&nbsp;</td><td>High resolution timer value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS or the appropriate error code.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq()</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ga08e3e11a5e8f68f3111e5ecf3bff0ac1"></a><!-- doxytag: member="os.h::pj_get_timestamp_freq" ref="ga08e3e11a5e8f68f3111e5ecf3bff0ac1" args="(pj_timestamp *freq)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_get_timestamp_freq </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>freq</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get high resolution timer frequency, in cycles per second.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>freq</em>&nbsp;</td><td>Timer frequency, in cycles per second. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="ga29b19ea0c334403aea47efe76476f10c"></a><!-- doxytag: member="os.h::pj_gettickcount" ref="ga29b19ea0c334403aea47efe76476f10c" args="(pj_time_val *tv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_gettickcount </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__time__val.htm">pj_time_val</a> *&nbsp;</td>
          <td class="paramname"> <em>tv</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get monotonic time since some unspecified starting point.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tv</em>&nbsp;</td><td>Variable to store the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if successful. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa0b82903eaf90ffcb037e78733a6cf74"></a><!-- doxytag: member="os.h::pj_set_timestamp32" ref="gaa0b82903eaf90ffcb037e78733a6cf74" args="(pj_timestamp *t, pj_uint32_t hi, pj_uint32_t lo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_set_timestamp32 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>hi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>lo</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set timestamp from 32bit values. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t</em>&nbsp;</td><td>The timestamp to be set. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hi</em>&nbsp;</td><td>The high 32bit part. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lo</em>&nbsp;</td><td>The low 32bit part. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac1235ac74c27acc3e9b14b17000ef7c3"></a><!-- doxytag: member="os.h::pj_sub_timestamp" ref="gac1235ac74c27acc3e9b14b17000ef7c3" args="(pj_timestamp *t1, const pj_timestamp *t2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_sub_timestamp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Substract timestamp t2 from t1. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t1</em>&nbsp;</td><td>t1. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>t2</em>&nbsp;</td><td>t2. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaccc524197573d872d5126b988f09f02c"></a><!-- doxytag: member="os.h::pj_sub_timestamp32" ref="gaccc524197573d872d5126b988f09f02c" args="(pj_timestamp *t1, pj_uint32_t t2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_sub_timestamp32 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>t2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Substract timestamp t2 from t1. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t1</em>&nbsp;</td><td>t1. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>t2</em>&nbsp;</td><td>t2. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gabb58dd38416a07ec116ae790a2174b1f"></a><!-- doxytag: member="os.h::pj_timestamp_diff32" ref="gabb58dd38416a07ec116ae790a2174b1f" args="(const pj_timestamp *t1, const pj_timestamp *t2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gac65eeb4771a6fc34225302fee5bcb7e2">pj_int32_t</a> pj_timestamp_diff32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="unionpj__timestamp.htm">pj_timestamp</a> *&nbsp;</td>
          <td class="paramname"> <em>t2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the timestamp difference between t2 and t1 (that is t2 minus t1), and return a 32bit signed integer difference. </p>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
