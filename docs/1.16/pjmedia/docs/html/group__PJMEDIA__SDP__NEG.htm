<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJMEDIA Reference: SDP Negotiation State Machine (Offer/Answer Model, RFC 3264) (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->

	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJMEDIA Reference</p>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>SDP Negotiation State Machine (Offer/Answer Model, RFC 3264)<br/>
<small>
[<a class="el" href="group__PJMEDIA__SESSION.htm">Media Sessions</a>]</small>
</h1>  </div>
</div>
<div class="contents">

<p>SDP Negotiation State Machine (Offer/Answer Model, RFC 3264).  
<a href="#_details">More...</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef enum <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gaaae429353d358c61aaacaa4443279278">pjmedia_sdp_neg_state</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a> { <br/>
&nbsp;&nbsp;<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ggab0e41ab86540d4a377fae42d36fb37bba611ebfbc0663f15dd710f0938e5fb468">PJMEDIA_SDP_NEG_STATE_NULL</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ggab0e41ab86540d4a377fae42d36fb37bba9dcc1ecbcdf728266477a9588e419829">PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ggab0e41ab86540d4a377fae42d36fb37bba7f69a876c0d4ee465f54a48e47e38121">PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ggab0e41ab86540d4a377fae42d36fb37bbab7848f9dae6a40c895764446d27f5f65">PJMEDIA_SDP_NEG_STATE_WAIT_NEGO</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ggab0e41ab86540d4a377fae42d36fb37bba302d8b72a32bae53e54c49c288915036">PJMEDIA_SDP_NEG_STATE_DONE</a>
<br/>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab5dd67bf5f5a9ba24b05a6971feb7d14">pjmedia_sdp_neg_state_str</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a> state)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga12447906e491d5e33ba8534c1162fc69">pjmedia_sdp_neg_create_w_local_offer</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *local, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> **p_neg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga634e774f4faac08c29bc65c883088e2c">pjmedia_sdp_neg_create_w_remote_offer</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *initial, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *remote, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> **p_neg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gaa82b906995c8668568effce5f4289b77">pjmedia_sdp_neg_set_prefer_remote_codec_order</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> prefer_remote)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gad2ee6d1a7bf2976c1ac9642b70b9a2fc">pjmedia_sdp_neg_get_state</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gaa5fc5d38e7f2d9284ad352f251beecb3">pjmedia_sdp_neg_get_active_local</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **local)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0ad3a803c7b2bf4ac840126619ff8ed">pjmedia_sdp_neg_get_active_remote</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **remote)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga86557cce0d6db9e67d17f1b2554bbce6">pjmedia_sdp_neg_was_answer_remote</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga0e7fa3577dc2f110e3a3b6878b3f3844">pjmedia_sdp_neg_get_neg_remote</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **remote)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab4060fee61fa37b45695001701e59c34">pjmedia_sdp_neg_get_neg_local</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **local)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gae7adc2c160a9346c781bc3e6fbc59e84">pjmedia_sdp_neg_modify_local_offer</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *local)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga886009be022957d2881daacbfc4fdb46">pjmedia_sdp_neg_send_local_offer</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **offer)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga266b9740c9929e197689d37e9c2a7ed5">pjmedia_sdp_neg_set_remote_answer</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *remote)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga27fd1aa20e665af04bb4365713386bbe">pjmedia_sdp_neg_set_remote_offer</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *remote)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gad5b669927170e4111563a8fb75fbed56">pjmedia_sdp_neg_set_local_answer</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *local)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gae1a0927fcd0f2fc90b814e58b2f85d02">pjmedia_sdp_neg_has_local_answer</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga969c9d7fdc02d1bc85ff83740e9af05d">pjmedia_sdp_neg_cancel_offer</a> (<a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *neg, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_asym)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>The header file <b>&lt;<a class="el" href="sdp__neg_8h.htm" title="SDP negotiator header file.">pjmedia/sdp_neg.h</a>&gt;</b> contains the declaration of SDP offer and answer negotiator. SDP offer and answer model is described in RFC 3264 <b>"An Offer/Answer Model with Session Description Protocol 
 (SDP)"</b>.</p>
<p>The SDP negotiator is represented with opaque type <em>pjmedia_sdp_neg</em>. This structure contains negotiation state and several SDP session descriptors currently being used in the negotiation.</p>
<h2><a class="anchor" id="sdpneg_state_dia"></a>
SDP Negotiator State Diagram</h2>
<p>The following diagram describes the state transition diagram of the SDP negotiator.</p>
<pre></pre><pre>                                              modify_local_offer()
     create_w_local_offer()  +-------------+  send_local_offer()
     -----------------------&gt;| LOCAL_OFFER |&lt;-----------------------
    |                        +-------------+______                  |
    |                               |              cancel()  |
    |           set_remote_answer() |                        |
    |                               V                            \  |
 +--+---+                     +-----------+     negotiate()     +-~----+
 | NULL |                     | WAIT_NEGO |--------------------&gt;| DONE |
 +------+                     +-----------+                     +------+
    |                               A                               |
    |            set_local_answer() |                               |
    |                               |                               |
    |                        +--------------+   set_remote_offer()  |
     -----------------------&gt;| REMOTE_OFFER |&lt;----------------------
     create_w_remote_offer() +--------------+</pre><pre> </pre><h2><a class="anchor" id="sdpneg_offer_answer"></a>
SDP Offer/Answer Model with Negotiator</h2>
<h3><a class="anchor" id="sdpneg_create_offer"></a>
Creating Initial Offer</h3>
<p>Application creates an offer by manualy building the SDP session descriptor (<a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a>), or request PJMEDIA endpoint (pjmedia_endpt) to create SDP session descriptor based on capabilities that present in the endpoint by calling <a class="el" href="group__PJMED__ENDPT.htm#gaa49360a690c292dddd722b39c2f8c8bb">pjmedia_endpt_create_sdp()</a>.</p>
<p>Application then creates SDP negotiator instance by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga12447906e491d5e33ba8534c1162fc69">pjmedia_sdp_neg_create_w_local_offer()</a>, passing the SDP offer in the function arguments. The SDP negotiator keeps a copy of current local offer, and update its state to PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER.</p>
<p>Application can then send the initial SDP offer that it creates to remote peer using signaling protocol such as SIP.</p>
<h3><a class="anchor" id="sdpneg_subseq_offer"></a>
Generating Subsequent Offer</h3>
<p>The negotiator can only create subsequent offer after it has finished the negotiation process of previous offer/answer session (i.e. the negotiator state is PJMEDIA_SDP_NEG_STATE_DONE).</p>
<p>If any previous negotiation process was successfull (i.e. the return value of <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a> was PJ_SUCCESS), the negotiator keeps both active local and active remote SDP.</p>
<p>If application does not want send modified offer, it can just send the active local SDP as the offer. In this case, application calls <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga886009be022957d2881daacbfc4fdb46">pjmedia_sdp_neg_send_local_offer()</a> to get the active local SDP.</p>
<p>If application wants to modify it's local offer, it MUST inform the negotiator about the modified SDP by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gae7adc2c160a9346c781bc3e6fbc59e84">pjmedia_sdp_neg_modify_local_offer()</a>.</p>
<p>In both cases, the negotiator will internally create a copy of the offer, and move it's state to PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER, where it waits until application passes the remote answer.</p>
<h3><a class="anchor" id="sdpneg_receive_offer"></a>
Receiving Initial Offer</h3>
<p>Application receives an offer in the incoming request from remote to establish multimedia session, such as incoming INVITE message with SDP body.</p>
<p>Initially, when the initial offer is received, application creates the SDP negotiator by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga634e774f4faac08c29bc65c883088e2c">pjmedia_sdp_neg_create_w_remote_offer()</a>, specifying the remote SDP offer in one of the argument.</p>
<p>At this stage, application may or may not ready to create an answer. For example, a SIP B2BUA needs to make outgoing call and receive SDP from the outgoing call leg in order to create a SDP answer to the incoming call leg.</p>
<p>If application is not ready to create an answer, it passes NULL as the local SDP when it calls <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga634e774f4faac08c29bc65c883088e2c">pjmedia_sdp_neg_create_w_remote_offer()</a>.</p>
<p>The section <a class="el" href="group__PJMEDIA__SDP__NEG.htm#sdpneg_create_answer">Generating SDP Answer</a> describes the case when application is ready to create a SDP answer.</p>
<h3><a class="anchor" id="sdpneg_subseq_offer"></a>
Generating Subsequent Offer</h3>
<p>Application passes subsequent SDP offer received from remote by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga27fd1aa20e665af04bb4365713386bbe">pjmedia_sdp_neg_set_remote_offer()</a>.</p>
<p>The negotiator can only receive subsequent offer after it has finished the negotiation process of previous offer/answer session (i.e. the negotiator state is PJMEDIA_SDP_NEG_STATE_DONE).</p>
<h3><a class="anchor" id="sdpneg_recv_answer"></a>
Receiving SDP Answer</h3>
<p>When application receives SDP answer from remote, it informs the negotiator by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga266b9740c9929e197689d37e9c2a7ed5">pjmedia_sdp_neg_set_remote_answer()</a>. The negotiator validates the answer (<a class="el" href="group__PJMEDIA__SDP.htm#ga4a5d8813207a21dbf23a8165de62dfd0">pjmedia_sdp_validate()</a>), and if succeeds, it moves it's state to PJMEDIA_SDP_NEG_STATE_WAIT_NEGO.</p>
<p>Application then instruct the negotiator to negotiate the remote answer by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a>. The purpose of this negotiation is to verify remote answer, and update the initial offer according to the answer. For example, the initial offer may specify that a stream is <em>sendrecv</em>, while the answer specifies that remote stream is <em>inactive</em>. In this case, the negotiator will update the stream in the local active media as <em>inactive</em> too.</p>
<p>If <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a> returns PJ_SUCCESS, the negotiator will keep the updated local answer and remote answer internally. These two SDPs are called active local SDP and active remote SDP, as it describes currently active session.</p>
<p>Application can retrieve the active local SDP by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gaa5fc5d38e7f2d9284ad352f251beecb3">pjmedia_sdp_neg_get_active_local()</a>, and active remote SDP by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0ad3a803c7b2bf4ac840126619ff8ed">pjmedia_sdp_neg_get_active_remote()</a>.</p>
<p>If <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a> returns failure (i.e. not PJ_SUCCESS), it WILL NOT update its active local and active remote SDP.</p>
<p>Regardless of the return status of the <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a>, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_DONE.</p>
<h3><a class="anchor" id="sdpneg_cancel_offer"></a>
Cancelling an Offer</h3>
<p>In other case, after an offer is generated (negotiator state is in PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER), the answer may not be received, and application wants the negotiator to reset itself to its previous state. Consider this example:</p>
<ul>
<li>media has been established, and negotiator state is PJMEDIA_SDP_NEG_STATE_DONE.</li>
<li>application generates a new offer for re-INVITE, so in this case it would either call <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga886009be022957d2881daacbfc4fdb46">pjmedia_sdp_neg_send_local_offer()</a> or <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gae7adc2c160a9346c781bc3e6fbc59e84">pjmedia_sdp_neg_modify_local_offer()</a></li>
<li>the negotiator state moves to PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER</li>
<li>the re-INVITE was rejected with an error</li>
</ul>
<p>Since an answer is not received, it is necessary to reset the negotiator state back to PJMEDIA_SDP_NEG_STATE_DONE so that the negotiator can create or receive new offer.</p>
<p>This can be accomplished by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga969c9d7fdc02d1bc85ff83740e9af05d">pjmedia_sdp_neg_cancel_offer()</a>, to reset the negotiator state back to PJMEDIA_SDP_NEG_STATE_DONE. In this case, both active local and active remote will not be modified.</p>
<h3><a class="anchor" id="sdpneg_create_answer"></a>
Generating SDP Answer</h3>
<p>After remote offer has been set in the negotiator, application can request the SDP negotiator to generate appropriate answer based on local capability.</p>
<p>To do this, first the application MUST have an SDP describing its local capabilities. This SDP can be built manually, or application can generate SDP to describe local media endpoint capability by calling <a class="el" href="group__PJMED__ENDPT.htm#gaa49360a690c292dddd722b39c2f8c8bb">pjmedia_endpt_create_sdp()</a>. When the application is a SIP B2BUA, application can treat the SDP received from the outgoing call leg as if it was it's local capability.</p>
<p>The local SDP session descriptor DOES NOT have to match the SDP offer. For example, it can have more or less media lines than the offer, or their order may be different than the offer. The negotiator is capable to match and reorder local SDP according to remote offer, and create an answer that is suitable for the offer.</p>
<p>After local SDP capability has been acquired, application can create a SDP answer.</p>
<p>If application does not already have the negotiator instance, it creates one by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga634e774f4faac08c29bc65c883088e2c">pjmedia_sdp_neg_create_w_remote_offer()</a>, specifying both remote SDP offer and local SDP as the arguments. The SDP negotiator validates both remote and local SDP by calling <a class="el" href="group__PJMEDIA__SDP.htm#ga4a5d8813207a21dbf23a8165de62dfd0">pjmedia_sdp_validate()</a>, and if both SDPs are valid, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_WAIT_NEGO where it is ready to negotiate the offer and answer.</p>
<p>If application already has the negotiator instance, it sets the local SDP in the negotiator by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gad5b669927170e4111563a8fb75fbed56">pjmedia_sdp_neg_set_local_answer()</a>. The SDP negotiator then validates local SDP (<a class="el" href="group__PJMEDIA__SDP.htm#ga4a5d8813207a21dbf23a8165de62dfd0">pjmedia_sdp_validate()</a> ), and if it is valid, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_WAIT_NEGO where it is ready to negotiate the offer and answer.</p>
<p>After the SDP negotiator state has moved to PJMEDIA_SDP_NEG_STATE_WAIT_NEGO, application calls <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a> to instruct the SDP negotiator to negotiate both offer and answer. This function returns PJ_SUCCESS if an answer can be generated AND at least one media stream is active in the session.</p>
<p>If <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a> returns PJ_SUCCESS, the negotiator will keep the remote offer and local answer internally. These two SDPs are called active local SDP and active remote SDP, as it describes currently active session.</p>
<p>Application can retrieve the active local SDP by calling <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gaa5fc5d38e7f2d9284ad352f251beecb3">pjmedia_sdp_neg_get_active_local()</a>, and send this SDP to remote as the SDP answer.</p>
<p>If <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a> returns failure (i.e. not PJ_SUCCESS), it WILL NOT update its active local and active remote SDP.</p>
<p>Regardless of the return status of the <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a>, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_DONE. </p>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="gaaae429353d358c61aaacaa4443279278"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_state" ref="gaaae429353d358c61aaacaa4443279278" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef enum <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a> <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gaaae429353d358c61aaacaa4443279278">pjmedia_sdp_neg_state</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga2ff29664b9664783164672496c39d062"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg" ref="ga2ff29664b9664783164672496c39d062" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Opaque declaration of SDP negotiator. </p>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="gab0e41ab86540d4a377fae42d36fb37bb"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_state" ref="gab0e41ab86540d4a377fae42d36fb37bb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This enumeration describes SDP negotiation state. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ggab0e41ab86540d4a377fae42d36fb37bba611ebfbc0663f15dd710f0938e5fb468"></a><!-- doxytag: member="PJMEDIA_SDP_NEG_STATE_NULL" ref="ggab0e41ab86540d4a377fae42d36fb37bba611ebfbc0663f15dd710f0938e5fb468" args="" -->PJMEDIA_SDP_NEG_STATE_NULL</em>&nbsp;</td><td>
<p>This is the state of SDP negoator before it is initialized. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab0e41ab86540d4a377fae42d36fb37bba9dcc1ecbcdf728266477a9588e419829"></a><!-- doxytag: member="PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER" ref="ggab0e41ab86540d4a377fae42d36fb37bba9dcc1ecbcdf728266477a9588e419829" args="" -->PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER</em>&nbsp;</td><td>
<p>This state occurs when SDP negotiator has sent our offer to remote and it is waiting for answer. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab0e41ab86540d4a377fae42d36fb37bba7f69a876c0d4ee465f54a48e47e38121"></a><!-- doxytag: member="PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER" ref="ggab0e41ab86540d4a377fae42d36fb37bba7f69a876c0d4ee465f54a48e47e38121" args="" -->PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER</em>&nbsp;</td><td>
<p>This state occurs when SDP negotiator has received offer from remote and currently waiting for local answer. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab0e41ab86540d4a377fae42d36fb37bbab7848f9dae6a40c895764446d27f5f65"></a><!-- doxytag: member="PJMEDIA_SDP_NEG_STATE_WAIT_NEGO" ref="ggab0e41ab86540d4a377fae42d36fb37bbab7848f9dae6a40c895764446d27f5f65" args="" -->PJMEDIA_SDP_NEG_STATE_WAIT_NEGO</em>&nbsp;</td><td>
<p>This state occurs when an offer (either local or remote) has been provided with answer. The SDP negotiator is ready to negotiate both session descriptors. Application can call <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a> immediately to begin negotiation process. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab0e41ab86540d4a377fae42d36fb37bba302d8b72a32bae53e54c49c288915036"></a><!-- doxytag: member="PJMEDIA_SDP_NEG_STATE_DONE" ref="ggab0e41ab86540d4a377fae42d36fb37bba302d8b72a32bae53e54c49c288915036" args="" -->PJMEDIA_SDP_NEG_STATE_DONE</em>&nbsp;</td><td>
<p>This state occurs when SDP negotiation has completed, either successfully or not. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gab5dd67bf5f5a9ba24b05a6971feb7d14"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_state_str" ref="gab5dd67bf5f5a9ba24b05a6971feb7d14" args="(pjmedia_sdp_neg_state state)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* pjmedia_sdp_neg_state_str </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a>&nbsp;</td>
          <td class="paramname"> <em>state</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the state string description of the specified state.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>state</em>&nbsp;</td><td>Negotiator state.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>String description of the state. </dd></dl>

</div>
</div>
<a class="anchor" id="ga12447906e491d5e33ba8534c1162fc69"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_create_w_local_offer" ref="ga12447906e491d5e33ba8534c1162fc69" args="(pj_pool_t *pool, const pjmedia_sdp_session *local, pjmedia_sdp_neg **p_neg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_create_w_local_offer </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&nbsp;</td>
          <td class="paramname"> <em>local</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> **&nbsp;</td>
          <td class="paramname"> <em>p_neg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create the SDP negotiator with local offer. The SDP negotiator then will move to PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER state, where it waits until it receives answer from remote. When SDP answer from remote is received, application must call <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga266b9740c9929e197689d37e9c2a7ed5">pjmedia_sdp_neg_set_remote_answer()</a>.</p>
<p>After calling this function, application should send the local SDP offer to remote party using signaling protocol such as SIP and wait for SDP answer.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>local</em>&nbsp;</td><td>The initial local capability. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p_neg</em>&nbsp;</td><td>Pointer to receive the negotiator instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="ga634e774f4faac08c29bc65c883088e2c"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_create_w_remote_offer" ref="ga634e774f4faac08c29bc65c883088e2c" args="(pj_pool_t *pool, const pjmedia_sdp_session *initial, const pjmedia_sdp_session *remote, pjmedia_sdp_neg **p_neg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_create_w_remote_offer </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&nbsp;</td>
          <td class="paramname"> <em>initial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&nbsp;</td>
          <td class="paramname"> <em>remote</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> **&nbsp;</td>
          <td class="paramname"> <em>p_neg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Initialize the SDP negotiator with remote offer, and optionally specify the initial local capability, if known. Application normally calls this function when it receives initial offer from remote.</p>
<p>If local media capability is specified, this capability will be set as initial local capability of the negotiator, and after this function is called, the SDP negotiator state will move to state PJMEDIA_SDP_NEG_STATE_WAIT_NEGO, and the negotiation function can be called.</p>
<p>If local SDP is not specified, the negotiator will not have initial local capability, and after this function is called the negotiator state will move to PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER state. Application MUST supply local answer later with <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gad5b669927170e4111563a8fb75fbed56">pjmedia_sdp_neg_set_local_answer()</a>, before calling the negotiation function.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>initial</em>&nbsp;</td><td>Optional initial local capability. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>remote</em>&nbsp;</td><td>The remote offer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p_neg</em>&nbsp;</td><td>Pointer to receive the negotiator instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa82b906995c8668568effce5f4289b77"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_set_prefer_remote_codec_order" ref="gaa82b906995c8668568effce5f4289b77" args="(pjmedia_sdp_neg *neg, pj_bool_t prefer_remote)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_set_prefer_remote_codec_order </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td>
          <td class="paramname"> <em>prefer_remote</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This specifies the behavior of the SDP negotiator when responding to an offer, whether it should rather use the codec preference as set by remote, or should it rather use the codec preference as specified by local endpoint.</p>
<p>For example, suppose incoming call has codec order "8 0 3", while local codec order is "3 0 8". If remote codec order is preferable, the selected codec will be 8, while if local codec order is preferable, the selected codec will be 3.</p>
<p>By default, the value in PJMEDIA_SDP_NEG_PREFER_REMOTE_CODEC_ORDER will be used.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prefer_remote</em>&nbsp;</td><td>If non-zero, the negotiator will use the codec order as specified in remote offer. If zero, it will prefer to use the local codec order. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad2ee6d1a7bf2976c1ac9642b70b9a2fc"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_get_state" ref="gad2ee6d1a7bf2976c1ac9642b70b9a2fc" args="(pjmedia_sdp_neg *neg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#gab0e41ab86540d4a377fae42d36fb37bb">pjmedia_sdp_neg_state</a> pjmedia_sdp_neg_get_state </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get SDP negotiator state.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The negotiator state. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa5fc5d38e7f2d9284ad352f251beecb3"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_get_active_local" ref="gaa5fc5d38e7f2d9284ad352f251beecb3" args="(pjmedia_sdp_neg *neg, const pjmedia_sdp_session **local)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_get_active_local </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **&nbsp;</td>
          <td class="paramname"> <em>local</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the currently active local SDP. Application can only call this function after negotiation has been done, or otherwise there won't be active SDPs. Calling this function will not change the state of the negotiator.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>local</em>&nbsp;</td><td>Pointer to receive the local active SDP.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if local active SDP is present. </dd></dl>

</div>
</div>
<a class="anchor" id="gab0ad3a803c7b2bf4ac840126619ff8ed"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_get_active_remote" ref="gab0ad3a803c7b2bf4ac840126619ff8ed" args="(pjmedia_sdp_neg *neg, const pjmedia_sdp_session **remote)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_get_active_remote </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **&nbsp;</td>
          <td class="paramname"> <em>remote</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the currently active remote SDP. Application can only call this function after negotiation has been done, or otherwise there won't be active SDPs. Calling this function will not change the state of the negotiator.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>remote</em>&nbsp;</td><td>Pointer to receive the remote active SDP.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if remote active SDP is present. </dd></dl>

</div>
</div>
<a class="anchor" id="ga86557cce0d6db9e67d17f1b2554bbce6"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_was_answer_remote" ref="ga86557cce0d6db9e67d17f1b2554bbce6" args="(pjmedia_sdp_neg *neg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pjmedia_sdp_neg_was_answer_remote </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Determine whether remote sent answer (as opposed to offer) on the last negotiation. This function can only be called in state PJMEDIA_SDP_NEG_STATE_DONE.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Non-zero if it was remote who sent answer, otherwise zero if it was local who supplied answer. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0e7fa3577dc2f110e3a3b6878b3f3844"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_get_neg_remote" ref="ga0e7fa3577dc2f110e3a3b6878b3f3844" args="(pjmedia_sdp_neg *neg, const pjmedia_sdp_session **remote)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_get_neg_remote </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **&nbsp;</td>
          <td class="paramname"> <em>remote</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the current remote SDP offer or answer. Application can only call this function in state PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER or PJMEDIA_SDP_NEG_STATE_WAIT_NEGO, or otherwise there won't be remote SDP offer/answer. Calling this function will not change the state of the negotiator.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>remote</em>&nbsp;</td><td>Pointer to receive the current remote offer or answer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the negotiator currently has remote offer or answer. </dd></dl>

</div>
</div>
<a class="anchor" id="gab4060fee61fa37b45695001701e59c34"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_get_neg_local" ref="gab4060fee61fa37b45695001701e59c34" args="(pjmedia_sdp_neg *neg, const pjmedia_sdp_session **local)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_get_neg_local </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **&nbsp;</td>
          <td class="paramname"> <em>local</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the current local SDP offer or answer. Application can only call this function in state PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER or PJMEDIA_SDP_NEG_STATE_WAIT_NEGO, or otherwise there won't be local SDP offer/answer. Calling this function will not change the state of the negotiator.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>local</em>&nbsp;</td><td>Pointer to receive the current local offer or answer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the negotiator currently has local offer or answer. </dd></dl>

</div>
</div>
<a class="anchor" id="gae7adc2c160a9346c781bc3e6fbc59e84"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_modify_local_offer" ref="gae7adc2c160a9346c781bc3e6fbc59e84" args="(pj_pool_t *pool, pjmedia_sdp_neg *neg, const pjmedia_sdp_session *local)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_modify_local_offer </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&nbsp;</td>
          <td class="paramname"> <em>local</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Modify local session with a new SDP and treat this as a new offer. This function can only be called in state PJMEDIA_SDP_NEG_STATE_DONE. After calling this function, application can send the SDP as offer to remote party, using signaling protocol such as SIP. The negotiator state will move to PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER, where it waits for SDP answer from remote.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>local</em>&nbsp;</td><td>The new local SDP.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="ga886009be022957d2881daacbfc4fdb46"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_send_local_offer" ref="ga886009be022957d2881daacbfc4fdb46" args="(pj_pool_t *pool, pjmedia_sdp_neg *neg, const pjmedia_sdp_session **offer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_send_local_offer </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **&nbsp;</td>
          <td class="paramname"> <em>offer</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This function can only be called in PJMEDIA_SDP_NEG_STATE_DONE state. Application calls this function to retrieve currently active local SDP, and then send the SDP to remote as an offer. The negotiator state will then move to PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER, where it waits for SDP answer from remote.</p>
<p>When SDP answer has been received from remote, application must call <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga266b9740c9929e197689d37e9c2a7ed5">pjmedia_sdp_neg_set_remote_answer()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>offer</em>&nbsp;</td><td>Pointer to receive active local SDP to be offered to remote.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if local offer can be created. </dd></dl>

</div>
</div>
<a class="anchor" id="ga266b9740c9929e197689d37e9c2a7ed5"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_set_remote_answer" ref="ga266b9740c9929e197689d37e9c2a7ed5" args="(pj_pool_t *pool, pjmedia_sdp_neg *neg, const pjmedia_sdp_session *remote)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_set_remote_answer </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&nbsp;</td>
          <td class="paramname"> <em>remote</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This function can only be called in PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER state, i.e. after application calls <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga886009be022957d2881daacbfc4fdb46">pjmedia_sdp_neg_send_local_offer()</a> function. Application calls this function when it receives SDP answer from remote. After this function is called, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_WAIT_NEGO, and application can call the negotiation function <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>remote</em>&nbsp;</td><td>The remote answer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success. </dd></dl>

</div>
</div>
<a class="anchor" id="ga27fd1aa20e665af04bb4365713386bbe"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_set_remote_offer" ref="ga27fd1aa20e665af04bb4365713386bbe" args="(pj_pool_t *pool, pjmedia_sdp_neg *neg, const pjmedia_sdp_session *remote)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_set_remote_offer </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&nbsp;</td>
          <td class="paramname"> <em>remote</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This function can only be called in PJMEDIA_SDP_NEG_STATE_DONE state. Application calls this function when it receives SDP offer from remote. After this function is called, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER, and application MUST call the <a class="el" href="group__PJMEDIA__SDP__NEG.htm#gad5b669927170e4111563a8fb75fbed56">pjmedia_sdp_neg_set_local_answer()</a> to set local answer before it can call the negotiation function.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>remote</em>&nbsp;</td><td>The remote offer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success. </dd></dl>

</div>
</div>
<a class="anchor" id="gad5b669927170e4111563a8fb75fbed56"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_set_local_answer" ref="gad5b669927170e4111563a8fb75fbed56" args="(pj_pool_t *pool, pjmedia_sdp_neg *neg, const pjmedia_sdp_session *local)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_set_local_answer </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&nbsp;</td>
          <td class="paramname"> <em>local</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This function can only be called in PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER state, i.e. after application calls <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga27fd1aa20e665af04bb4365713386bbe">pjmedia_sdp_neg_set_remote_offer()</a> function. After this function is called, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_WAIT_NEGO, and application can call the negotiation function <a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>local</em>&nbsp;</td><td>Optional local answer. If negotiator has initial local capability, application can specify NULL on this argument; in this case, the negotiator will create answer by by negotiating remote offer with initial local capability. If negotiator doesn't have initial local capability, application MUST specify local answer here.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success. </dd></dl>

</div>
</div>
<a class="anchor" id="gae1a0927fcd0f2fc90b814e58b2f85d02"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_has_local_answer" ref="gae1a0927fcd0f2fc90b814e58b2f85d02" args="(pjmedia_sdp_neg *neg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pjmedia_sdp_neg_has_local_answer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Call this function when the negotiator is in PJMEDIA_SDP_NEG_STATE_WAIT_NEGO state to see if it was local who is answering the offer (instead of remote).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The negotiator.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_TRUE if it is local is answering an offer, PJ_FALSE if remote has answered local offer. </dd></dl>

</div>
</div>
<a class="anchor" id="ga969c9d7fdc02d1bc85ff83740e9af05d"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_cancel_offer" ref="ga969c9d7fdc02d1bc85ff83740e9af05d" args="(pjmedia_sdp_neg *neg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_cancel_offer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Cancel any pending offer, whether the offer is initiated by local or remote, and move negotiator state back to previous stable state (PJMEDIA_SDP_NEG_STATE_DONE). The negotiator must be in PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER or PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER state.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The negotiator.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="ga994a5de52f98b1ea7fc931a21f58e4ca"></a><!-- doxytag: member="sdp_neg.h::pjmedia_sdp_neg_negotiate" ref="ga994a5de52f98b1ea7fc931a21f58e4ca" args="(pj_pool_t *pool, pjmedia_sdp_neg *neg, pj_bool_t allow_asym)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_sdp_neg_negotiate </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__SDP__NEG.htm#ga2ff29664b9664783164672496c39d062">pjmedia_sdp_neg</a> *&nbsp;</td>
          <td class="paramname"> <em>neg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td>
          <td class="paramname"> <em>allow_asym</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Negotiate local and remote answer. Before calling this function, the SDP negotiator must be in PJMEDIA_SDP_NEG_STATE_WAIT_NEGO state. After calling this function, the negotiator state will move to PJMEDIA_SDP_NEG_STATE_DONE regardless whether the negotiation has been successfull or not.</p>
<p>If the negotiation succeeds (i.e. the return value is PJ_SUCCESS), the active local and remote SDP will be replaced with the new SDP from the negotiation process.</p>
<p>If the negotiation fails, the active local and remote SDP will not change.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory. The pool's lifetime needs to be valid for the duration of the negotiator. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neg</em>&nbsp;</td><td>The SDP negotiator instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>allow_asym</em>&nbsp;</td><td>Should be zero.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS when there is at least one media is actuve common in both offer and answer, or failure code when negotiation has failed. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJMEDIA small footprint Open Source media stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
