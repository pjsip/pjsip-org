<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: Linked List (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div><div class="header">
  <div class="headertitle"><div class="title">Test: Linked List </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p >This file provides implementation of <b>list_test()</b>. It tests the functionality of the linked-list API.</p>
<h1><a class="anchor" id="list_test_sec"></a>
Scope of the Test</h1>
<p >API tested:</p><ul>
<li><a class="el" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga64e9ace6bdf9ec204a52e88ae339bbfd">pj_list_insert_after()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#gaa362db05b7c9337b4159548dff385980">pj_list_merge_last()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga45a5b9503ce73660eac3ad6872acf167">pj_list_insert_nodes_before()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga2781509d8fc3708b88f897482bf85207">pj_list_erase()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#gaae8ffce1153d38b9f81e821be08f6d0d">pj_list_find_node()</a></li>
<li><a class="el" href="group__PJ__LIST.htm#ga8849a46165110baee288e1cbcfe248b6">pj_list_search()</a></li>
</ul>
<p >This file is <b>pjlib-test/list.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* </span></div>
<div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div>
<div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div>
<div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div>
<div class="line"><span class="comment"> * (at your option) any later version.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div>
<div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><span class="comment"> * GNU General Public License for more details.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div>
<div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div>
<div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if INCLUDE_LIST_TEST</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code hl_struct" href="structlist__node.htm">list_node</a></div>
<div class="line">{</div>
<div class="line">    PJ_DECL_LIST_MEMBER(<span class="keyword">struct</span> <a class="code hl_struct" href="structlist__node.htm">list_node</a>);</div>
<div class="line">    <span class="keywordtype">int</span> value;</div>
<div class="line">} <a class="code hl_struct" href="structlist__node.htm">list_node</a>;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> compare_node(<span class="keywordtype">void</span> *value, <span class="keyword">const</span> <a class="code hl_typedef" href="group__PJ__BASIC.htm#ga56842cba859dc628f0b2f8ba4754062d">pj_list_type</a> *nd)</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_struct" href="structlist__node.htm">list_node</a> *node = (<a class="code hl_struct" href="structlist__node.htm">list_node</a>*)nd;</div>
<div class="line">    <span class="keywordflow">return</span> ((<span class="keywordtype">long</span>)(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>)value == node-&gt;value) ? 0 : -1;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define PJ_SIGNED_ARRAY_SIZE(a) ((int)PJ_ARRAY_SIZE(a))</span></div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> list_test()</div>
<div class="line">{</div>
<div class="line">    <a class="code hl_struct" href="structlist__node.htm">list_node</a> nodes[4];    <span class="comment">// must be even number of nodes</span></div>
<div class="line">    <a class="code hl_struct" href="structlist__node.htm">list_node</a> list;</div>
<div class="line">    <a class="code hl_struct" href="structlist__node.htm">list_node</a> list2;</div>
<div class="line">    <a class="code hl_struct" href="structlist__node.htm">list_node</a> *p;</div>
<div class="line">    <span class="keywordtype">int</span> i; <span class="comment">// don&#39;t change to unsigned!</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <span class="comment">// Test insert_before().</span></div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    list.value = (unsigned)-1;</div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {</div>
<div class="line">        nodes[i].value = i;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// check.</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {</div>
<div class="line">        <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);</div>
<div class="line">        <span class="keywordflow">if</span> (p-&gt;value != i) {</div>
<div class="line">            <span class="keywordflow">return</span> -1;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <span class="comment">// Test insert_after()</span></div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);</div>
<div class="line">    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)-1; i&gt;=0; --i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#ga64e9ace6bdf9ec204a52e88ae339bbfd">pj_list_insert_after</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// check.</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {</div>
<div class="line">        <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);</div>
<div class="line">        <span class="keywordflow">if</span> (p-&gt;value != i) {</div>
<div class="line">            <span class="keywordflow">return</span> -1;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <span class="comment">// Test merge_last()</span></div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <span class="comment">// Init lists</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list2);</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes)/2; ++i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)/2; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list2, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// merge</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#gaa362db05b7c9337b4159548dff385980">pj_list_merge_last</a>(&amp;list, &amp;list2);</div>
<div class="line">    <span class="comment">// check.</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {</div>
<div class="line">        <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);</div>
<div class="line">        <span class="keywordflow">if</span> (p-&gt;value != i) {</div>
<div class="line">            <span class="keywordflow">return</span> -1;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// check list is empty</span></div>
<div class="line">    <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( <a class="code hl_function" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list2) );</div>
<div class="line">    <span class="keywordflow">if</span> (!<a class="code hl_function" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list2)) {</div>
<div class="line">        <span class="keywordflow">return</span> -1;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// </span></div>
<div class="line">    <span class="comment">// Check merge_first()</span></div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);</div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list2);</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes)/2; ++i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)/2; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list2, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// merge</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga32f9998ff249bf9733ac9f9e9a6d8cd5">pj_list_merge_first</a>(&amp;list2, &amp;list);</div>
<div class="line">    <span class="comment">// check (list2).</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0, p=list2.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {</div>
<div class="line">        <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);</div>
<div class="line">        <span class="keywordflow">if</span> (p-&gt;value != i) {</div>
<div class="line">            <span class="keywordflow">return</span> -1;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// check list is empty</span></div>
<div class="line">    <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( <a class="code hl_function" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list) );</div>
<div class="line">    <span class="keywordflow">if</span> (!<a class="code hl_function" href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a>(&amp;list)) {</div>
<div class="line">        <span class="keywordflow">return</span> -1;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <span class="comment">// Test insert_nodes_before()</span></div>
<div class="line">    <span class="comment">//</span></div>
<div class="line">    <span class="comment">// init list</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes)/2; ++i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// chain remaining nodes</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;nodes[PJ_SIGNED_ARRAY_SIZE(nodes)/2]);</div>
<div class="line">    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)/2+1; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;nodes[PJ_SIGNED_ARRAY_SIZE(nodes)/2], &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// insert nodes</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga45a5b9503ce73660eac3ad6872acf167">pj_list_insert_nodes_before</a>(&amp;list, &amp;nodes[PJ_SIGNED_ARRAY_SIZE(nodes)/2]);</div>
<div class="line">    <span class="comment">// check</span></div>
<div class="line">    <span class="keywordflow">for</span> (i=0, p=list.next; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i, p=p-&gt;next) {</div>
<div class="line">        <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == i);</div>
<div class="line">        <span class="keywordflow">if</span> (p-&gt;value != i) {</div>
<div class="line">            <span class="keywordflow">return</span> -1;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// erase test.</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {</div>
<div class="line">        nodes[i].value = i;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">for</span> (i=PJ_SIGNED_ARRAY_SIZE(nodes)-1; i&gt;=0; --i) {</div>
<div class="line">        <span class="keywordtype">int</span> j;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#ga2781509d8fc3708b88f897482bf85207">pj_list_erase</a>(&amp;nodes[i]);</div>
<div class="line">        <span class="keywordflow">for</span> (j=0, p=list.next; j&lt;i; ++j, p=p-&gt;next) {</div>
<div class="line">            <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(p-&gt;value == j);</div>
<div class="line">            <span class="keywordflow">if</span> (p-&gt;value != j) {</div>
<div class="line">                <span class="keywordflow">return</span> -1;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// find and search</span></div>
<div class="line">    <a class="code hl_function" href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a>(&amp;list);</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {</div>
<div class="line">        nodes[i].value = i;</div>
<div class="line">        <a class="code hl_function" href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;PJ_SIGNED_ARRAY_SIZE(nodes); ++i) {</div>
<div class="line">        p = (<a class="code hl_struct" href="structlist__node.htm">list_node</a>*) <a class="code hl_function" href="group__PJ__LIST.htm#gaae8ffce1153d38b9f81e821be08f6d0d">pj_list_find_node</a>(&amp;list, &amp;nodes[i]);</div>
<div class="line">        <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( p == &amp;nodes[i] );</div>
<div class="line">        <span class="keywordflow">if</span> (p != &amp;nodes[i]) {</div>
<div class="line">            <span class="keywordflow">return</span> -1;</div>
<div class="line">        }</div>
<div class="line">        p = (<a class="code hl_struct" href="structlist__node.htm">list_node</a>*) <a class="code hl_function" href="group__PJ__LIST.htm#ga8849a46165110baee288e1cbcfe248b6">pj_list_search</a>(&amp;list, (<span class="keywordtype">void</span>*)(<a class="code hl_typedef" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>)i, </div>
<div class="line">                                        &amp;compare_node);</div>
<div class="line">        <a class="code hl_define" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>( p == &amp;nodes[i] );</div>
<div class="line">        <span class="keywordflow">if</span> (p != &amp;nodes[i]) {</div>
<div class="line">            <span class="keywordflow">return</span> -1;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div>
<div class="line"><span class="comment"> * when this test is disabled. </span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keywordtype">int</span> dummy_list_test;</div>
<div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_LIST_TEST */</span><span class="preprocessor"></span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga173588cd6381f3ad354c23c26929093a"><div class="ttname"><a href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a></div><div class="ttdeci">long pj_ssize_t</div><div class="ttdef"><b>Definition:</b> types.h:64</div></div>
<div class="ttc" id="agroup__PJ__BASIC_htm_ga56842cba859dc628f0b2f8ba4754062d"><div class="ttname"><a href="group__PJ__BASIC.htm#ga56842cba859dc628f0b2f8ba4754062d">pj_list_type</a></div><div class="ttdeci">void pj_list_type</div><div class="ttdef"><b>Definition:</b> types.h:157</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_ga0f39ad164f2124e6d42d1c2e7a5926dc"><div class="ttname"><a href="group__PJ__LIST.htm#ga0f39ad164f2124e6d42d1c2e7a5926dc">pj_list_init</a></div><div class="ttdeci">void pj_list_init(pj_list_type *node)</div><div class="ttdef"><b>Definition:</b> list.h:87</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_ga2781509d8fc3708b88f897482bf85207"><div class="ttname"><a href="group__PJ__LIST.htm#ga2781509d8fc3708b88f897482bf85207">pj_list_erase</a></div><div class="ttdeci">void pj_list_erase(pj_list_type *node)</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_ga32f9998ff249bf9733ac9f9e9a6d8cd5"><div class="ttname"><a href="group__PJ__LIST.htm#ga32f9998ff249bf9733ac9f9e9a6d8cd5">pj_list_merge_first</a></div><div class="ttdeci">void pj_list_merge_first(pj_list_type *list1, pj_list_type *list2)</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_ga45a5b9503ce73660eac3ad6872acf167"><div class="ttname"><a href="group__PJ__LIST.htm#ga45a5b9503ce73660eac3ad6872acf167">pj_list_insert_nodes_before</a></div><div class="ttdeci">void pj_list_insert_nodes_before(pj_list_type *lst, pj_list_type *nodes)</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_ga64e9ace6bdf9ec204a52e88ae339bbfd"><div class="ttname"><a href="group__PJ__LIST.htm#ga64e9ace6bdf9ec204a52e88ae339bbfd">pj_list_insert_after</a></div><div class="ttdeci">void pj_list_insert_after(pj_list_type *pos, pj_list_type *node)</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_ga73af60d46c342d0f4f837fffcd327ded"><div class="ttname"><a href="group__PJ__LIST.htm#ga73af60d46c342d0f4f837fffcd327ded">pj_list_empty</a></div><div class="ttdeci">int pj_list_empty(const pj_list_type *node)</div><div class="ttdef"><b>Definition:</b> list.h:101</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_ga8849a46165110baee288e1cbcfe248b6"><div class="ttname"><a href="group__PJ__LIST.htm#ga8849a46165110baee288e1cbcfe248b6">pj_list_search</a></div><div class="ttdeci">pj_list_type * pj_list_search(pj_list_type *list, void *value, int(*comp)(void *value, const pj_list_type *node))</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_gaa362db05b7c9337b4159548dff385980"><div class="ttname"><a href="group__PJ__LIST.htm#gaa362db05b7c9337b4159548dff385980">pj_list_merge_last</a></div><div class="ttdeci">void pj_list_merge_last(pj_list_type *list1, pj_list_type *list2)</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_gaae8ffce1153d38b9f81e821be08f6d0d"><div class="ttname"><a href="group__PJ__LIST.htm#gaae8ffce1153d38b9f81e821be08f6d0d">pj_list_find_node</a></div><div class="ttdeci">pj_list_type * pj_list_find_node(pj_list_type *list, pj_list_type *node)</div></div>
<div class="ttc" id="agroup__PJ__LIST_htm_gace71471e1fecac2cef8416c144925176"><div class="ttname"><a href="group__PJ__LIST.htm#gace71471e1fecac2cef8416c144925176">pj_list_insert_before</a></div><div class="ttdeci">void pj_list_insert_before(pj_list_type *pos, pj_list_type *node)</div></div>
<div class="ttc" id="agroup__pj__assert_htm_ga981d47a5e9d7e9655473244839f0f5d3"><div class="ttname"><a href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a></div><div class="ttdeci">#define pj_assert(expr)</div><div class="ttdef"><b>Definition:</b> assert.h:48</div></div>
<div class="ttc" id="astructlist__node_htm"><div class="ttname"><a href="structlist__node.htm">list_node</a></div><div class="ttdef"><b>Definition:</b> pjlib-test/list.c:51</div></div>
</div><!-- fragment --> </div></div><!-- contents -->
</div><!-- PageDoc -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
