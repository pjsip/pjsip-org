<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj_ioqueue_callback Struct Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle"><div class="title">pj_ioqueue_callback Struct Reference<div class="ingroups"><a class="el" href="group__PJ__OS.htm">Operating System Dependent Functionality.</a> &raquo; <a class="el" href="group__PJ__IO.htm">Input/Output</a> &raquo; <a class="el" href="group__PJ__IOQUEUE.htm">IOQueue: I/O Event Dispatching with Proactor Pattern</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="ioqueue_8h_source.htm">ioqueue.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:aaf564626f7a74bc96fa6ef96f72cb6e1"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ioqueue__callback.htm#aaf564626f7a74bc96fa6ef96f72cb6e1">on_read_complete</a> )(<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structop__key.htm">op_key</a>, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)</td></tr>
<tr class="separator:aaf564626f7a74bc96fa6ef96f72cb6e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70ec522e331bee4a8ed0798358b62ffe"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ioqueue__callback.htm#a70ec522e331bee4a8ed0798358b62ffe">on_write_complete</a> )(<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structop__key.htm">op_key</a>, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_sent)</td></tr>
<tr class="separator:a70ec522e331bee4a8ed0798358b62ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9714df67d050f0190d2a110a574fcf4"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ioqueue__callback.htm#ad9714df67d050f0190d2a110a574fcf4">on_accept_complete</a> )(<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structop__key.htm">op_key</a>, <a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock, <a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td></tr>
<tr class="separator:ad9714df67d050f0190d2a110a574fcf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd3126bf25fc3a5ad1dd6cff36df1452"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ioqueue__callback.htm#afd3126bf25fc3a5ad1dd6cff36df1452">on_connect_complete</a> )(<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td></tr>
<tr class="separator:afd3126bf25fc3a5ad1dd6cff36df1452"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >This structure describes the callbacks to be called when I/O operation completes. </p>
</div><h2 class="groupheader">Field Documentation</h2>
<a id="ad9714df67d050f0190d2a110a574fcf4" name="ad9714df67d050f0190d2a110a574fcf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9714df67d050f0190d2a110a574fcf4">&#9670;&nbsp;</a></span>on_accept_complete</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pj_ioqueue_callback::on_accept_complete) (<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structop__key.htm">op_key</a>, <a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock, <a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when <a class="el" href="group__PJ__IOQUEUE.htm#gaf7505cc18b3031e43e68c5fd4a7a388e">pj_ioqueue_accept</a> completes.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>The key. </td></tr>
    <tr><td class="paramname"><a class="el" href="structop__key.htm">op_key</a></td><td>Operation key. </td></tr>
    <tr><td class="paramname">sock</td><td>Newly connected socket. </td></tr>
    <tr><td class="paramname">status</td><td>Zero if the operation completes successfully. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="afd3126bf25fc3a5ad1dd6cff36df1452" name="afd3126bf25fc3a5ad1dd6cff36df1452"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd3126bf25fc3a5ad1dd6cff36df1452">&#9670;&nbsp;</a></span>on_connect_complete</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pj_ioqueue_callback::on_connect_complete) (<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when <a class="el" href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a> completes.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>The key. </td></tr>
    <tr><td class="paramname">status</td><td>PJ_SUCCESS if the operation completes successfully. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aaf564626f7a74bc96fa6ef96f72cb6e1" name="aaf564626f7a74bc96fa6ef96f72cb6e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf564626f7a74bc96fa6ef96f72cb6e1">&#9670;&nbsp;</a></span>on_read_complete</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pj_ioqueue_callback::on_read_complete) (<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structop__key.htm">op_key</a>, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when <a class="el" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a> or <a class="el" href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom</a> completes.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>The key. </td></tr>
    <tr><td class="paramname"><a class="el" href="structop__key.htm">op_key</a></td><td>Operation key. </td></tr>
    <tr><td class="paramname">bytes_read</td><td>&gt;= 0 to indicate the amount of data read, otherwise negative value containing the error code. To obtain the pj_status_t error code, use (pj_status_t code = -bytes_read). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a70ec522e331bee4a8ed0798358b62ffe" name="a70ec522e331bee4a8ed0798358b62ffe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70ec522e331bee4a8ed0798358b62ffe">&#9670;&nbsp;</a></span>on_write_complete</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pj_ioqueue_callback::on_write_complete) (<a class="el" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structop__key.htm">op_key</a>, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_sent)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when <a class="el" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send</a> or <a class="el" href="group__PJ__IOQUEUE.htm#gad9eaa7c7b2668255d6ee1a0bf3afb007">pj_ioqueue_sendto</a> completes.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>The key. </td></tr>
    <tr><td class="paramname"><a class="el" href="structop__key.htm">op_key</a></td><td>Operation key. </td></tr>
    <tr><td class="paramname">bytes_sent</td><td>&gt;= 0 to indicate the amount of data written, otherwise negative value containing the error code. To obtain the pj_status_t error code, use (pj_status_t code = -bytes_sent). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li><a class="el" href="ioqueue_8h_source.htm">ioqueue.h</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
