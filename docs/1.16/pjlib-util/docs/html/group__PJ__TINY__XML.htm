<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB-UTIL Reference: Mini/Tiny XML Parser/Helper (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB-UTIL Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>Mini/Tiny XML Parser/Helper<br/>
<small>
[<a class="el" href="group__PJ__FILE__FMT.htm">File Formats</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__xml__attr.htm">pj_xml_attr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__xml__node__head.htm">pj_xml_node_head</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga08d03b3d1d92aa03b6a999e6ca903cab">pj_xml_parse</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, char *msg, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga917ce39bdfc063a11b1ef0ff56c4846c">pj_xml_print</a> (const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *node, char *buf, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> prolog)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#gac20664ee986c1b5be305a14690010a69">pj_xml_clone</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *rhs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga65fe66287a2b810e18487f2323634dae">pj_xml_node_new</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__attr.htm">pj_xml_attr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga0c92f267a95e76b1c53d42c858228a93">pj_xml_attr_new</a> (<a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#gad0dd8dc1fe0d03922256ae5781ef4bbe">pj_xml_add_node</a> (<a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *parent, <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga9b419ff34d9cf18bfd9271cca9f22f49">pj_xml_add_attr</a> (<a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *node, <a class="el" href="structpj__xml__attr.htm">pj_xml_attr</a> *attr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#gaa05bd61537526fcf27374739e2b590a1">pj_xml_find_node</a> (const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *parent, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga81fc49cbf32b8f0dd02fe6165e94c452">pj_xml_find_next_node</a> (const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *parent, const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *node, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#gadb562fc4fccffb871eaa5837bebd2873">pj_xml_find_node_rec</a> (const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *parent, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__attr.htm">pj_xml_attr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#gaae7499bc30d6f3af991650b0ac898399">pj_xml_find_attr</a> (const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *node, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga5b2ae82035ee9e0d98092e5986e0747c">pj_xml_find</a> (const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *parent, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name, const void *data, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*match)(const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *, const void *))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__TINY__XML.htm#ga5c8266688c4bf89bba0d42a70c24e8f0">pj_xml_find_rec</a> (const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *parent, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *name, const void *data, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*match)(const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *, const void *))</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga9b419ff34d9cf18bfd9271cca9f22f49"></a><!-- doxytag: member="xml.h::pj_xml_add_attr" ref="ga9b419ff34d9cf18bfd9271cca9f22f49" args="(pj_xml_node *node, pj_xml_attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_xml_add_attr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__xml__attr.htm">pj_xml_attr</a> *&nbsp;</td>
          <td class="paramname"> <em>attr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add attribute to a node.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>Node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>attr</em>&nbsp;</td><td>Attribute to add to node. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad0dd8dc1fe0d03922256ae5781ef4bbe"></a><!-- doxytag: member="xml.h::pj_xml_add_node" ref="gad0dd8dc1fe0d03922256ae5781ef4bbe" args="(pj_xml_node *parent, pj_xml_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_xml_add_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add node to another node.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>parent</em>&nbsp;</td><td>Parent node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>Node to be added to parent. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga0c92f267a95e76b1c53d42c858228a93"></a><!-- doxytag: member="xml.h::pj_xml_attr_new" ref="ga0c92f267a95e76b1c53d42c858228a93" args="(pj_pool_t *pool, const pj_str_t *name, const pj_str_t *value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__attr.htm">pj_xml_attr</a>* pj_xml_attr_new </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create new XML attribute.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Attribute name. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Attribute value.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The new XML attribute. </dd></dl>

</div>
</div>
<a class="anchor" id="gac20664ee986c1b5be305a14690010a69"></a><!-- doxytag: member="xml.h::pj_xml_clone" ref="gac20664ee986c1b5be305a14690010a69" args="(pj_pool_t *pool, const pj_xml_node *rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_clone </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>rhs</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Clone XML node and all subnodes.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory for new nodes. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rhs</em>&nbsp;</td><td>The node to clone.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Cloned XML node, or NULL on fail. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5b2ae82035ee9e0d98092e5986e0747c"></a><!-- doxytag: member="xml.h::pj_xml_find" ref="ga5b2ae82035ee9e0d98092e5986e0747c" args="(const pj_xml_node *parent, const pj_str_t *name, const void *data, pj_bool_t(*match)(const pj_xml_node *, const void *))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_find </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*)(const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *, const void *)&nbsp;</td>
          <td class="paramname"> <em>match</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find a direct child node with the specified name and match the function.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>parent</em>&nbsp;</td><td>Parent node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Optional name. If this is NULL, the name will not be matched. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Data to be passed to matching function. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>match</em>&nbsp;</td><td>Optional matching function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The first matched node, or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="gaae7499bc30d6f3af991650b0ac898399"></a><!-- doxytag: member="xml.h::pj_xml_find_attr" ref="gaae7499bc30d6f3af991650b0ac898399" args="(const pj_xml_node *node, const pj_str_t *name, const pj_str_t *value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__attr.htm">pj_xml_attr</a>* pj_xml_find_attr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find first attribute within a node with the specified name and optional value.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>XML Node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Attribute name to find. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>Optional value to match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>XML attribute found, or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="ga81fc49cbf32b8f0dd02fe6165e94c452"></a><!-- doxytag: member="xml.h::pj_xml_find_next_node" ref="ga81fc49cbf32b8f0dd02fe6165e94c452" args="(const pj_xml_node *parent, const pj_xml_node *node, const pj_str_t *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_find_next_node </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find next direct child node with the specified name.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>parent</em>&nbsp;</td><td>Parent node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>node-&gt;next is the starting point. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Node name to find.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>XML node found or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa05bd61537526fcf27374739e2b590a1"></a><!-- doxytag: member="xml.h::pj_xml_find_node" ref="gaa05bd61537526fcf27374739e2b590a1" args="(const pj_xml_node *parent, const pj_str_t *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_find_node </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find first direct child node with the specified name.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>parent</em>&nbsp;</td><td>Parent node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Node name to find.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>XML node found or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="gadb562fc4fccffb871eaa5837bebd2873"></a><!-- doxytag: member="xml.h::pj_xml_find_node_rec" ref="gadb562fc4fccffb871eaa5837bebd2873" args="(const pj_xml_node *parent, const pj_str_t *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_find_node_rec </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Recursively find the first node with the specified name in the child nodes and their children.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>parent</em>&nbsp;</td><td>Parent node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Node name to find.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>XML node found or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5c8266688c4bf89bba0d42a70c24e8f0"></a><!-- doxytag: member="xml.h::pj_xml_find_rec" ref="ga5c8266688c4bf89bba0d42a70c24e8f0" args="(const pj_xml_node *parent, const pj_str_t *name, const void *data, pj_bool_t(*match)(const pj_xml_node *, const void *))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_find_rec </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*)(const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *, const void *)&nbsp;</td>
          <td class="paramname"> <em>match</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Recursively find a child node with the specified name and match the function.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>parent</em>&nbsp;</td><td>Parent node. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Optional name. If this is NULL, the name will not be matched. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>Data to be passed to matching function. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>match</em>&nbsp;</td><td>Optional matching function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The first matched node, or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="ga65fe66287a2b810e18487f2323634dae"></a><!-- doxytag: member="xml.h::pj_xml_node_new" ref="ga65fe66287a2b810e18487f2323634dae" args="(pj_pool_t *pool, const pj_str_t *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_node_new </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>name</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create an empty node.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Node name.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The new node. </dd></dl>

</div>
</div>
<a class="anchor" id="ga08d03b3d1d92aa03b6a999e6ca903cab"></a><!-- doxytag: member="xml.h::pj_xml_parse" ref="ga08d03b3d1d92aa03b6a999e6ca903cab" args="(pj_pool_t *pool, char *msg, pj_size_t len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__xml__node.htm">pj_xml_node</a>* pj_xml_parse </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Parse XML message into XML document with a single root node. The parser is capable of parsing XML processing instruction construct ("&lt;?") and XML comments ("&lt;!--"), however such constructs will be ignored and will not be included in the resulted XML node tree.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool to allocate memory from. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msg</em>&nbsp;</td><td>The XML message to parse. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>The length of the message.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>XML root node, or NULL if the XML document can not be parsed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga917ce39bdfc063a11b1ef0ff56c4846c"></a><!-- doxytag: member="xml.h::pj_xml_print" ref="ga917ce39bdfc063a11b1ef0ff56c4846c" args="(const pj_xml_node *node, char *buf, pj_size_t len, pj_bool_t prolog)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> pj_xml_print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__xml__node.htm">pj_xml_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td>
          <td class="paramname"> <em>prolog</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print XML into XML message. Note that the function WILL NOT NULL terminate the output.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>The XML node to print. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>Buffer to hold the output message. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>len</em>&nbsp;</td><td>The length of the buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prolog</em>&nbsp;</td><td>If set to nonzero, will print XML prolog ("&lt;?xml..")</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The size of the printed message, or -1 if there is not sufficient space in the buffer to print the message. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB-UTIL Open Source, small footprint, and portable asynchronous/caching DNS resolver, text scanner, STUN client, and XML library<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
