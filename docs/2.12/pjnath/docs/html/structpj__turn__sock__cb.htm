<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj_turn_sock_cb Struct Reference (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">pj_turn_sock_cb Struct Reference<div class="ingroups"><a class="el" href="group__PJNATH.htm">NAT Traversal Helper Library</a> &raquo; <a class="el" href="group__PJNATH__TURN.htm">TURN: Traversal Using Relays around NAT</a> &raquo; <a class="el" href="group__PJNATH__TURN__SOCK.htm">TURN client transport</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a9918c2bb3d0547f44586cc0183ce61e8"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__sock__cb.htm#a9918c2bb3d0547f44586cc0183ce61e8">on_rx_data</a> )(<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, void *pkt, unsigned pkt_len, const <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td></tr>
<tr class="separator:a9918c2bb3d0547f44586cc0183ce61e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0966a0646a8cf330d37c6b83a8a50337"><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__sock__cb.htm#a0966a0646a8cf330d37c6b83a8a50337">on_data_sent</a> )(<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *sock, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent)</td></tr>
<tr class="separator:a0966a0646a8cf330d37c6b83a8a50337"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59cd3ff28bcb31db125288a821b738e2"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__sock__cb.htm#a59cd3ff28bcb31db125288a821b738e2">on_state</a> )(<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> old_state, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> new_state)</td></tr>
<tr class="separator:a59cd3ff28bcb31db125288a821b738e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a624ab4c2cd28a143c1167af2e8fdcf7d"><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__sock__cb.htm#a624ab4c2cd28a143c1167af2e8fdcf7d">on_connection_attempt</a> )(<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> conn_id, const <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td></tr>
<tr class="separator:a624ab4c2cd28a143c1167af2e8fdcf7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6feb4359ff53a5bd0bddbe39659e3468"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__sock__cb.htm#a6feb4359ff53a5bd0bddbe39659e3468">on_connection_status</a> )(<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> conn_id, const <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td></tr>
<tr class="separator:a6feb4359ff53a5bd0bddbe39659e3468"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This structure contains callbacks that will be called by the TURN transport. </p>
</div><h2 class="groupheader">Field Documentation</h2>
<a id="a624ab4c2cd28a143c1167af2e8fdcf7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a624ab4c2cd28a143c1167af2e8fdcf7d">&#9670;&nbsp;</a></span>on_connection_attempt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>(* pj_turn_sock_cb::on_connection_attempt) (<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> conn_id, const <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Notification when TURN client received a ConnectionAttempt Indication from the TURN server, which indicates that peer initiates a TCP connection to allocated slot in the TURN server. Application should implement this callback if it uses RFC 6062 (TURN TCP allocations), otherwise TURN client will automatically accept it.</p>
<p>If application accepts the peer connection attempt (i.e: by returning PJ_SUCCESS or not implementing this callback), the TURN socket will initiate a new connection to the TURN server and send ConnectionBind request, and eventually will notify application via on_connection_status callback, if implemented.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">turn_sock</td><td>The TURN client transport. </td></tr>
    <tr><td class="paramname">conn_id</td><td>The connection ID assigned by TURN server. </td></tr>
    <tr><td class="paramname">peer_addr</td><td>Peer address that tried to connect to the TURN server. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of the peer address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The callback must return PJ_SUCCESS to accept the connection attempt. </dd></dl>

</div>
</div>
<a id="a6feb4359ff53a5bd0bddbe39659e3468"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6feb4359ff53a5bd0bddbe39659e3468">&#9670;&nbsp;</a></span>on_connection_status</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pj_turn_sock_cb::on_connection_status) (<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> conn_id, const <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Notification for initiated TCP data connection to peer (RFC 6062), for example after peer connection attempt is accepted.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">turn_sock</td><td>The TURN client transport. </td></tr>
    <tr><td class="paramname">status</td><td>The status code. </td></tr>
    <tr><td class="paramname">conn_id</td><td>The connection ID. </td></tr>
    <tr><td class="paramname">peer_addr</td><td>Peer address. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of the peer address. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0966a0646a8cf330d37c6b83a8a50337"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0966a0646a8cf330d37c6b83a8a50337">&#9670;&nbsp;</a></span>on_data_sent</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(* pj_turn_sock_cb::on_data_sent) (<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *sock, <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Notifification when asynchronous send operation has completed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">turn_sock</td><td>The TURN transport. </td></tr>
    <tr><td class="paramname">sent</td><td>If value is positive non-zero it indicates the number of data sent. When the value is negative, it contains the error code which can be retrieved by negating the value (i.e. status=-sent).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Application should normally return PJ_TRUE to let the TURN transport continue its operation. However it must return PJ_FALSE if it has destroyed the TURN transport in this callback. </dd></dl>

</div>
</div>
<a id="a9918c2bb3d0547f44586cc0183ce61e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9918c2bb3d0547f44586cc0183ce61e8">&#9670;&nbsp;</a></span>on_rx_data</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pj_turn_sock_cb::on_rx_data) (<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, void *pkt, unsigned pkt_len, const <a class="elRef" doxygen="/home/nn/projects/pjproject/pjlib/docs/pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Notification when incoming data has been received from the remote peer via the TURN server. The data reported in this callback will be the exact data as sent by the peer (e.g. the TURN encapsulation such as Data Indication or ChannelData will be removed before this function is called).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">turn_sock</td><td>The TURN client transport. </td></tr>
    <tr><td class="paramname">data</td><td>The data as received from the peer. </td></tr>
    <tr><td class="paramname">data_len</td><td>Length of the data. </td></tr>
    <tr><td class="paramname">peer_addr</td><td>The peer address. </td></tr>
    <tr><td class="paramname">addr_len</td><td>The length of the peer address. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a59cd3ff28bcb31db125288a821b738e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59cd3ff28bcb31db125288a821b738e2">&#9670;&nbsp;</a></span>on_state</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pj_turn_sock_cb::on_state) (<a class="el" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *turn_sock, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> old_state, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> new_state)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Notification when TURN session state has changed. Application should implement this callback to monitor the progress of the TURN session.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">turn_sock</td><td>The TURN client transport. </td></tr>
    <tr><td class="paramname">old_state</td><td>Previous state. </td></tr>
    <tr><td class="paramname">new_state</td><td>Current state. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li><a class="el" href="turn__sock_8h_source.htm">turn_sock.h</a></li>
</ul>
</div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
