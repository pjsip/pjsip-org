<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB-UTIL Reference: getopt.h Source File (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB-UTIL Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>getopt.h</h1>  </div>
</div>
<div class="contents">
<a href="getopt_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: getopt.h 2037 2008-06-20 21:39:02Z bennylp $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* This file has now become GPL. */</span>
<a name="l00003"></a>00003 <span class="comment">/* Declarations for pj_getopt.</span>
<a name="l00004"></a>00004 <span class="comment">   Copyright (C) 1989,90,91,92,93,94,96,97,98 Free Software Foundation, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">   This file is part of the GNU C Library.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">   The GNU C Library is free software; you can redistribute it and/or</span>
<a name="l00008"></a>00008 <span class="comment">   modify it under the terms of the GNU Library General Public License as</span>
<a name="l00009"></a>00009 <span class="comment">   published by the Free Software Foundation; either version 2 of the</span>
<a name="l00010"></a>00010 <span class="comment">   License, or (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">   The GNU C Library is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">   Library General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">   You should have received a copy of the GNU Library General Public</span>
<a name="l00018"></a>00018 <span class="comment">   License along with the GNU C Library; see the file COPYING.LIB.  If not,</span>
<a name="l00019"></a>00019 <span class="comment">   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00020"></a>00020 <span class="comment">   Boston, MA 02111-1307, USA.  */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef __PJ_GETOPT_H__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define __PJ_GETOPT_H__ 1</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="preprocessor">#ifdef  __cplusplus</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00038"></a>00038 <span class="preprocessor">#endif</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00040"></a>00040 <span class="comment">/* For communication from `pj_getopt&#39; to the caller.</span>
<a name="l00041"></a>00041 <span class="comment">   When `pj_getopt&#39; finds an option that takes an argument,</span>
<a name="l00042"></a>00042 <span class="comment">   the argument value is returned here.</span>
<a name="l00043"></a>00043 <span class="comment">   Also, when `ordering&#39; is RETURN_IN_ORDER,</span>
<a name="l00044"></a>00044 <span class="comment">   each non-option ARGV-element is returned here.  */</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="keyword">extern</span> <span class="keywordtype">char</span> *pj_optarg;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">/* Index in ARGV of the next element to be scanned.</span>
<a name="l00049"></a>00049 <span class="comment">   This is used for communication to and from the caller</span>
<a name="l00050"></a>00050 <span class="comment">   and for communication between successive calls to `pj_getopt&#39;.</span>
<a name="l00051"></a>00051 <span class="comment"></span>
<a name="l00052"></a>00052 <span class="comment">   On entry to `pj_getopt&#39;, zero means this is the first call; initialize.</span>
<a name="l00053"></a>00053 <span class="comment"></span>
<a name="l00054"></a>00054 <span class="comment">   When `pj_getopt&#39; returns -1, this is the index of the first of the</span>
<a name="l00055"></a>00055 <span class="comment">   non-option elements that the caller should itself scan.</span>
<a name="l00056"></a>00056 <span class="comment"></span>
<a name="l00057"></a>00057 <span class="comment">   Otherwise, `pj_optind&#39; communicates from one call to the next</span>
<a name="l00058"></a>00058 <span class="comment">   how much of ARGV has been scanned so far.  */</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="keyword">extern</span> <span class="keywordtype">int</span> pj_optind;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">/* Set to an option character which was unrecognized.  */</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="keyword">extern</span> <span class="keywordtype">int</span> pj_optopt;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">/* Describe the long-named options requested by the application.</span>
<a name="l00067"></a>00067 <span class="comment">   The LONG_OPTIONS argument to pj_getopt_long or pj_getopt_long_only is a vector</span>
<a name="l00068"></a>00068 <span class="comment">   of `struct pj_getopt_option&#39; terminated by an element containing a name which is</span>
<a name="l00069"></a>00069 <span class="comment">   zero.</span>
<a name="l00070"></a>00070 <span class="comment"></span>
<a name="l00071"></a>00071 <span class="comment">   The field `has_arg&#39; is:</span>
<a name="l00072"></a>00072 <span class="comment">   no_argument          (or 0) if the option does not take an argument,</span>
<a name="l00073"></a>00073 <span class="comment">   required_argument    (or 1) if the option requires an argument,</span>
<a name="l00074"></a>00074 <span class="comment">   optional_argument    (or 2) if the option takes an optional argument.</span>
<a name="l00075"></a>00075 <span class="comment"></span>
<a name="l00076"></a>00076 <span class="comment">   If the field `flag&#39; is not NULL, it points to a variable that is set</span>
<a name="l00077"></a>00077 <span class="comment">   to the value given in the field `val&#39; when the option is found, but</span>
<a name="l00078"></a>00078 <span class="comment">   left unchanged if the option is not found.</span>
<a name="l00079"></a>00079 <span class="comment"></span>
<a name="l00080"></a>00080 <span class="comment">   To have a long-named option do something other than set an `int&#39; to</span>
<a name="l00081"></a>00081 <span class="comment">   a compiled-in constant, such as set a value from `pj_optarg&#39;, set the</span>
<a name="l00082"></a>00082 <span class="comment">   option&#39;s `flag&#39; field to zero and its `val&#39; field to a nonzero</span>
<a name="l00083"></a>00083 <span class="comment">   value (the equivalent single-letter option character, if there is</span>
<a name="l00084"></a>00084 <span class="comment">   one).  For long options that have a zero `flag&#39; field, `pj_getopt&#39;</span>
<a name="l00085"></a>00085 <span class="comment">   returns the contents of the `val&#39; field.  */</span>
<a name="l00086"></a>00086 
<a name="l00087"></a><a class="code" href="structpj__getopt__option.htm">00087</a> <span class="keyword">struct </span><a class="code" href="structpj__getopt__option.htm">pj_getopt_option</a>
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089   <span class="keyword">const</span> <span class="keywordtype">char</span> *name;
<a name="l00090"></a>00090   <span class="comment">/* has_arg can&#39;t be an enum because some compilers complain about</span>
<a name="l00091"></a>00091 <span class="comment">     type mismatches in all the code that assumes it is an int.  */</span>
<a name="l00092"></a>00092   <span class="keywordtype">int</span> has_arg;
<a name="l00093"></a>00093   <span class="keywordtype">int</span> *flag;
<a name="l00094"></a>00094   <span class="keywordtype">int</span> val;
<a name="l00095"></a>00095 };
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/* Names for the values of the `has_arg&#39; field of `struct pj_getopt_option&#39;.  */</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="preprocessor"># define no_argument            0</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor"># define required_argument      1</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span><span class="preprocessor"># define optional_argument      2</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">/* Get definitions and prototypes for functions to process the</span>
<a name="l00105"></a>00105 <span class="comment">   arguments in ARGV (ARGC of them, minus the program name) for</span>
<a name="l00106"></a>00106 <span class="comment">   options given in OPTS.</span>
<a name="l00107"></a>00107 <span class="comment"></span>
<a name="l00108"></a>00108 <span class="comment">   Return the option character from OPTS just read.  Return -1 when</span>
<a name="l00109"></a>00109 <span class="comment">   there are no more options.  For unrecognized options, or options</span>
<a name="l00110"></a>00110 <span class="comment">   missing arguments, `pj_optopt&#39; is set to the option letter, and &#39;?&#39; is</span>
<a name="l00111"></a>00111 <span class="comment">   returned.</span>
<a name="l00112"></a>00112 <span class="comment"></span>
<a name="l00113"></a>00113 <span class="comment">   The OPTS string is a list of characters which are recognized option</span>
<a name="l00114"></a>00114 <span class="comment">   letters, optionally followed by colons, specifying that that letter</span>
<a name="l00115"></a>00115 <span class="comment">   takes an argument, to be placed in `pj_optarg&#39;.</span>
<a name="l00116"></a>00116 <span class="comment"></span>
<a name="l00117"></a>00117 <span class="comment">   If a letter in OPTS is followed by two colons, its argument is</span>
<a name="l00118"></a>00118 <span class="comment">   optional.  This behavior is specific to the GNU `pj_getopt&#39;.</span>
<a name="l00119"></a>00119 <span class="comment"></span>
<a name="l00120"></a>00120 <span class="comment">   The argument `--&#39; causes premature termination of argument</span>
<a name="l00121"></a>00121 <span class="comment">   scanning, explicitly telling `pj_getopt&#39; that there are no more</span>
<a name="l00122"></a>00122 <span class="comment">   options.</span>
<a name="l00123"></a>00123 <span class="comment"></span>
<a name="l00124"></a>00124 <span class="comment">   If OPTS begins with `--&#39;, then non-option arguments are treated as</span>
<a name="l00125"></a>00125 <span class="comment">   arguments to the option &#39;\0&#39;.  This behavior is specific to the GNU</span>
<a name="l00126"></a>00126 <span class="comment">   `pj_getopt&#39;.  */</span>
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="keywordtype">int</span> pj_getopt (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *<span class="keyword">const</span> *argv, <span class="keyword">const</span> <span class="keywordtype">char</span> *shortopts);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 <span class="keywordtype">int</span> pj_getopt_long (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *<span class="keyword">const</span> *argv, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structapp__t_1_1options.htm">options</a>,
<a name="l00131"></a>00131                         <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structpj__getopt__option.htm">pj_getopt_option</a> *longopts, <span class="keywordtype">int</span> *longind);
<a name="l00132"></a>00132 <span class="keywordtype">int</span> pj_getopt_long_only (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *<span class="keyword">const</span> *argv,
<a name="l00133"></a>00133                              <span class="keyword">const</span> <span class="keywordtype">char</span> *shortopts,
<a name="l00134"></a>00134                              <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structpj__getopt__option.htm">pj_getopt_option</a> *longopts, <span class="keywordtype">int</span> *longind);
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 <span class="preprocessor">#ifdef  __cplusplus</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span>}
<a name="l00139"></a>00139 <span class="preprocessor">#endif</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span>
<a name="l00145"></a>00145 <span class="preprocessor">#endif </span><span class="comment">/* pj_getopt.h */</span>
<a name="l00146"></a>00146 
</pre></div></div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB-UTIL Open Source, small footprint, and portable asynchronous/caching DNS resolver, text scanner, STUN client, and XML library<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
