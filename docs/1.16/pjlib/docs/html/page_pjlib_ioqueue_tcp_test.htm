<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: I/O Queue (TCP) (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: I/O Queue (TCP) </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation to test the functionality of the I/O queue when TCP socket is used.</p>
<p>This file is <b>pjlib-test/ioq_tcp.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: ioq_tcp.c 4387 2013-02-27 10:16:08Z ming $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>

<span class="preprocessor">#if INCLUDE_TCP_IOQUEUE_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>

<span class="preprocessor">#if PJ_HAS_TCP</span>
<span class="preprocessor"></span>
<span class="preprocessor">#define THIS_FILE           &quot;test_tcp&quot;</span>
<span class="preprocessor"></span><span class="preprocessor">#define NON_EXISTANT_PORT   50123</span>
<span class="preprocessor"></span><span class="preprocessor">#define LOOP                100</span>
<span class="preprocessor"></span><span class="preprocessor">#define BUF_MIN_SIZE        32</span>
<span class="preprocessor"></span><span class="preprocessor">#define BUF_MAX_SIZE        2048</span>
<span class="preprocessor"></span><span class="preprocessor">#define SOCK_INACTIVE_MIN   (4-2)</span>
<span class="preprocessor"></span><span class="preprocessor">#define SOCK_INACTIVE_MAX   (PJ_IOQUEUE_MAX_HANDLES - 2)</span>
<span class="preprocessor"></span><span class="preprocessor">#define POOL_SIZE           (2*BUF_MAX_SIZE + SOCK_INACTIVE_MAX*128 + 2048)</span>
<span class="preprocessor"></span>
<span class="keyword">static</span> <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>            callback_read_size,
                             callback_write_size,
                             callback_accept_status,
                             callback_connect_status;
<span class="keyword">static</span> <span class="keywordtype">unsigned</span>              callback_call_count;
<span class="keyword">static</span> <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>     *callback_read_key,
                            *callback_write_key,
                            *callback_accept_key,
                            *callback_connect_key;
<span class="keyword">static</span> <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>  *callback_read_op,
                            *callback_write_op,
                            *callback_accept_op;

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_read(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, 
                            <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,
                            <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)
{
    callback_read_key = key;
    callback_read_op = op_key;
    callback_read_size = bytes_read;
    callback_call_count++;
}

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_write(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, 
                             <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,
                             <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_written)
{
    callback_write_key = key;
    callback_write_op = op_key;
    callback_write_size = bytes_written;
    callback_call_count++;
}

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_accept(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, 
                              <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,
                              <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock, 
                              <span class="keywordtype">int</span> status)
{
    <span class="keywordflow">if</span> (sock == <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {

        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            <span class="comment">/* Ignore. Could be blocking error */</span>
            app_perror(<span class="stringliteral">&quot;.....warning: received error in on_ioqueue_accept() callback&quot;</span>,
                       status);
        } <span class="keywordflow">else</span> {
            callback_accept_status = -61;
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;..... on_ioqueue_accept() callback was given &quot;</span>
                          <span class="stringliteral">&quot;invalid socket and status is %d&quot;</span>, status));
        }
    } <span class="keywordflow">else</span> {
        <a class="code" href="unionpj__sockaddr.htm">pj_sockaddr</a> addr;
        <span class="keywordtype">int</span> client_addr_len;

        client_addr_len = <span class="keyword">sizeof</span>(addr);
        status = <a class="code" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(sock, &amp;addr, &amp;client_addr_len);
        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_getsockname()&quot;</span>, status);
        }

        callback_accept_key = key;
        callback_accept_op = op_key;
        callback_accept_status = status;
        callback_call_count++;
    }
}

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_connect(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <span class="keywordtype">int</span> status)
{
    callback_connect_key = key;
    callback_connect_status = status;
    callback_call_count++;
}

<span class="keyword">static</span> <a class="code" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> test_cb = 
{
    &amp;on_ioqueue_read,
    &amp;on_ioqueue_write,
    &amp;on_ioqueue_accept,
    &amp;on_ioqueue_connect,
};

<span class="keyword">static</span> <span class="keywordtype">int</span> send_recv_test(<a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque,
                          <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey,
                          <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *ckey,
                          <span class="keywordtype">void</span> *send_buf,
                          <span class="keywordtype">void</span> *recv_buf,
                          <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bufsize,
                          <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> *t_elapsed)
{
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;
    <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout;
    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t1, t2;
    <span class="keywordtype">int</span> pending_op = 0;
    <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> read_op, write_op;

    <span class="comment">// Start reading on the server side.</span>
    bytes = bufsize;
    status = <a class="code" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(skey, &amp;read_op, recv_buf, &amp;bytes, 0);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        app_perror(<span class="stringliteral">&quot;...pj_ioqueue_recv error&quot;</span>, status);
        <span class="keywordflow">return</span> -100;
    }
    
    <span class="keywordflow">if</span> (status == <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>)
        ++pending_op;
    <span class="keywordflow">else</span> {
        <span class="comment">/* Does not expect to return error or immediate data. */</span>
        <span class="keywordflow">return</span> -115;
    }

    <span class="comment">// Randomize send buffer.</span>
    <a class="code" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a>((<span class="keywordtype">char</span>*)send_buf, bufsize);

    <span class="comment">// Starts send on the client side.</span>
    bytes = bufsize;
    status = <a class="code" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send</a>(ckey, &amp;write_op, send_buf, &amp;bytes, 0);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; bytes != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        <span class="keywordflow">return</span> -120;
    }
    <span class="keywordflow">if</span> (status == <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        ++pending_op;
    }

    <span class="comment">// Begin time.</span>
    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);

    <span class="comment">// Reset indicators</span>
    callback_read_size = callback_write_size = 0;
    callback_read_key = callback_write_key = NULL;
    callback_read_op = callback_write_op = NULL;

    <span class="comment">// Poll the queue until we&#39;ve got completion event in the server side.</span>
    status = 0;
    <span class="keywordflow">while</span> (pending_op &gt; 0) {
        timeout.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 1; timeout.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>        <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(ioque);
        status = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 1000);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>        status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">if</span> (status &gt; 0) {
            <span class="keywordflow">if</span> (callback_read_size) {
                <span class="keywordflow">if</span> (callback_read_size != bufsize)
                    <span class="keywordflow">return</span> -160;
                <span class="keywordflow">if</span> (callback_read_key != skey)
                    <span class="keywordflow">return</span> -161;
                <span class="keywordflow">if</span> (callback_read_op != &amp;read_op)
                    <span class="keywordflow">return</span> -162;
            }
            <span class="keywordflow">if</span> (callback_write_size) {
                <span class="keywordflow">if</span> (callback_write_key != ckey)
                    <span class="keywordflow">return</span> -163;
                <span class="keywordflow">if</span> (callback_write_op != &amp;write_op)
                    <span class="keywordflow">return</span> -164;
            }
            pending_op -= status;
        }
        <span class="keywordflow">if</span> (status == 0) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: timed out&quot;</span>));
        }
        <span class="keywordflow">if</span> (status &lt; 0) {
            <span class="keywordflow">return</span> -170;
        }
    }

    <span class="comment">// Pending op is zero.</span>
    <span class="comment">// Subsequent poll should yield zero too.</span>
    timeout.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = timeout.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>    status = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 1);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>    status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>    <span class="keywordflow">if</span> (status != 0)
        <span class="keywordflow">return</span> -173;

    <span class="comment">// End time.</span>
    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);
    t_elapsed-&gt;<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);

    <span class="comment">// Compare recv buffer with send buffer.</span>
    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(send_buf, recv_buf, bufsize) != 0) {
        <span class="keywordflow">return</span> -180;
    }

    <span class="comment">// Success</span>
    <span class="keywordflow">return</span> 0;
}


<span class="comment">/*</span>
<span class="comment"> * Compliance test for success scenario.</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test_0(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock=-1, csock0=-1, csock1=-1;
    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr, client_addr, rmt_addr;
    <span class="keywordtype">int</span> client_addr_len;
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;
    <span class="keywordtype">char</span> *send_buf, *recv_buf;
    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;
    <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey=NULL, *ckey0=NULL, *ckey1=NULL;
    <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> accept_op;
    <span class="keywordtype">int</span> bufsize = BUF_MIN_SIZE;
    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> status = -1;
    <span class="keywordtype">int</span> pending_op = 0;
    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t_elapsed;
    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    <span class="comment">// Create pool.</span>
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);

    <span class="comment">// Allocate buffers for send and receive.</span>
    send_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);
    recv_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);

    <span class="comment">// Create server socket and client socket for connecting</span>
    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;ssock);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);
        status=-1; <span class="keywordflow">goto</span> on_error;
    }

    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;csock1);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);
        status=-1; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Bind server socket.</span>
    <a class="code" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr, 0, 0);
    <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(ssock, &amp;addr, <span class="keyword">sizeof</span>(addr))) != 0 ) {
        app_perror(<span class="stringliteral">&quot;...bind error&quot;</span>, rc);
        status=-10; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Get server address.</span>
    client_addr_len = <span class="keyword">sizeof</span>(addr);
    rc = <a class="code" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(ssock, &amp;addr, &amp;client_addr_len);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_getsockname()&quot;</span>, rc);
        status=-15; <span class="keywordflow">goto</span> on_error;
    }
    addr.<a class="code" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a> = <a class="code" href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a>(<a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;s, <span class="stringliteral">&quot;127.0.0.1&quot;</span>));

    <span class="comment">// Create I/O Queue.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, <a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, &amp;ioque);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_create()&quot;</span>, rc);
        status=-20; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Concurrency</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioque, allow_concur);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_set_default_concurrency()&quot;</span>, rc);
        status=-21; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Register server socket and client socket.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, ssock, NULL, &amp;test_cb, &amp;skey);
    <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>)
        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock1, NULL, &amp;test_cb, 
                                      &amp;ckey1);
    <span class="keywordflow">else</span>
        ckey1 = NULL;
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock()&quot;</span>, rc);
        status=-23; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Server socket listen().</span>
    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga6ca05fa6aa8db88c19a60d793fa0cc6b">pj_sock_listen</a>(ssock, 5)) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_listen()&quot;</span>, rc);
        status=-25; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Server socket accept()</span>
    client_addr_len = <span class="keyword">sizeof</span>(<a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>);
    status = <a class="code" href="group__PJ__IOQUEUE.htm#gaf7505cc18b3031e43e68c5fd4a7a388e">pj_ioqueue_accept</a>(skey, &amp;accept_op, &amp;csock0, 
                               &amp;client_addr, &amp;rmt_addr, &amp;client_addr_len);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_accept()&quot;</span>, rc);
        status=-30; <span class="keywordflow">goto</span> on_error;
    }
    <span class="keywordflow">if</span> (status==<a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        ++pending_op;
    }

    <span class="comment">// Client socket connect()</span>
    status = <a class="code" href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a>(ckey1, &amp;addr, <span class="keyword">sizeof</span>(addr));
    <span class="keywordflow">if</span> (status!=<a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_connect()&quot;</span>, rc);
        status=-40; <span class="keywordflow">goto</span> on_error;
    }
    <span class="keywordflow">if</span> (status==<a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        ++pending_op;
    }

    <span class="comment">// Poll until connected</span>
    callback_read_size = callback_write_size = 0;
    callback_accept_status = callback_connect_status = -2;
    callback_call_count = 0;

    callback_read_key = callback_write_key = 
        callback_accept_key = callback_connect_key = NULL;
    callback_accept_op = callback_read_op = callback_write_op = NULL;

    <span class="keywordflow">while</span> (pending_op) {
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};

<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>        callback_call_count = 0;
        <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
        status = callback_call_count;
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>        status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">if</span> (status &gt; 0) {
            <span class="keywordflow">if</span> (callback_accept_status != -2) {
                <span class="keywordflow">if</span> (callback_accept_status != 0) {
                    status=-41; <span class="keywordflow">goto</span> on_error;
                }
                <span class="keywordflow">if</span> (callback_accept_key != skey) {
                    status=-42; <span class="keywordflow">goto</span> on_error;
                }
                <span class="keywordflow">if</span> (callback_accept_op != &amp;accept_op) {
                    status=-43; <span class="keywordflow">goto</span> on_error;
                }
                callback_accept_status = -2;
            }

            <span class="keywordflow">if</span> (callback_connect_status != -2) {
                <span class="keywordflow">if</span> (callback_connect_status != 0) {
                    status=-50; <span class="keywordflow">goto</span> on_error;
                }
                <span class="keywordflow">if</span> (callback_connect_key != ckey1) {
                    status=-51; <span class="keywordflow">goto</span> on_error;
                }
                callback_connect_status = -2;
            }

            <span class="keywordflow">if</span> (status &gt; pending_op) {
                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,
                          <span class="stringliteral">&quot;...error: pj_ioqueue_poll() returned %d &quot;</span>
                          <span class="stringliteral">&quot;(only expecting %d)&quot;</span>,
                          status, pending_op));
                <span class="keywordflow">return</span> -52;
            }
            pending_op -= status;

            <span class="keywordflow">if</span> (pending_op == 0) {
                status = 0;
            }
        }
    }

    <span class="comment">// There&#39;s no pending operation.</span>
    <span class="comment">// When we poll the ioqueue, there must not be events.</span>
    <span class="keywordflow">if</span> (pending_op == 0) {
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>        status = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>        status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">if</span> (status != 0) {
            status=-60; <span class="keywordflow">goto</span> on_error;
        }
    }

    <span class="comment">// Check accepted socket.</span>
    <span class="keywordflow">if</span> (csock0 == <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
        status = -69;
        app_perror(<span class="stringliteral">&quot;...accept() error&quot;</span>, <a class="code" href="group__pj__errno.htm#gab55e3d49c25f27e8353a8dd385f97942">pj_get_os_error</a>());
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Register newly accepted socket.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock0, NULL, 
                                  &amp;test_cb, &amp;ckey0);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock&quot;</span>, rc);
        status = -70;
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Test send and receive.</span>
    t_elapsed.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;
    status = send_recv_test(ioque, ckey0, ckey1, send_buf, 
                            recv_buf, bufsize, &amp;t_elapsed);
    <span class="keywordflow">if</span> (status != 0) {
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Success</span>
    status = 0;

on_error:
    <span class="keywordflow">if</span> (skey != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(skey);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ssock != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);
    
    <span class="keywordflow">if</span> (ckey1 != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey1);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock1 != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock1);
    
    <span class="keywordflow">if</span> (ckey0 != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey0);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock0 != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock0);
    
    <span class="keywordflow">if</span> (ioque != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> status;

}

<span class="comment">/*</span>
<span class="comment"> * Compliance test for failed scenario.</span>
<span class="comment"> * In this case, the client connects to a non-existant service.</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test_1(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> csock1=PJ_INVALID_SOCKET;
    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;
    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;
    <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *ckey1 = NULL;
    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> status = -1;
    <span class="keywordtype">int</span> pending_op = 0;
    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    <span class="comment">// Create pool.</span>
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);

    <span class="comment">// Create I/O Queue.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, <a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, &amp;ioque);
    <span class="keywordflow">if</span> (!ioque) {
        status=-20; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Concurrency</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioque, allow_concur);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        status=-21; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Create client socket</span>
    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;csock1);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_socket()&quot;</span>, rc);
        status=-1; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Register client socket.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock1, NULL, 
                                  &amp;test_cb, &amp;ckey1);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock()&quot;</span>, rc);
        status=-23; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Initialize remote address.</span>
    <a class="code" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr, <a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;s, <span class="stringliteral">&quot;127.0.0.1&quot;</span>), NON_EXISTANT_PORT);

    <span class="comment">// Client socket connect()</span>
    status = <a class="code" href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a>(ckey1, &amp;addr, <span class="keyword">sizeof</span>(addr));
    <span class="keywordflow">if</span> (status==<a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        <span class="comment">// unexpectedly success!</span>
        status = -30;
        <span class="keywordflow">goto</span> on_error;
    }
    <span class="keywordflow">if</span> (status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        <span class="comment">// success</span>
    } <span class="keywordflow">else</span> {
        ++pending_op;
    }

    callback_connect_status = -2;
    callback_connect_key = NULL;

    <span class="comment">// Poll until we&#39;ve got result</span>
    <span class="keywordflow">while</span> (pending_op) {
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};

<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>        callback_call_count = 0;
        <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
        status = callback_call_count;
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>        status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">if</span> (status &gt; 0) {
            <span class="keywordflow">if</span> (callback_connect_key==ckey1) {
                <span class="keywordflow">if</span> (callback_connect_status == 0) {
                    <span class="comment">// unexpectedly connected!</span>
                    status = -50;
                    <span class="keywordflow">goto</span> on_error;
                }
            }

            <span class="keywordflow">if</span> (status &gt; pending_op) {
                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,
                          <span class="stringliteral">&quot;...error: pj_ioqueue_poll() returned %d &quot;</span>
                          <span class="stringliteral">&quot;(only expecting %d)&quot;</span>,
                          status, pending_op));
                <span class="keywordflow">return</span> -552;
            }

            pending_op -= status;
            <span class="keywordflow">if</span> (pending_op == 0) {
                status = 0;
            }
        }
    }

    <span class="comment">// There&#39;s no pending operation.</span>
    <span class="comment">// When we poll the ioqueue, there must not be events.</span>
    <span class="keywordflow">if</span> (pending_op == 0) {
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>        status = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>        status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">if</span> (status != 0) {
            status=-60; <span class="keywordflow">goto</span> on_error;
        }
    }

    <span class="comment">// Success</span>
    status = 0;

on_error:
    <span class="keywordflow">if</span> (ckey1 != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey1);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock1 != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock1);
    
    <span class="keywordflow">if</span> (ioque != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> status;
}


<span class="comment">/*</span>
<span class="comment"> * Repeated connect/accept on the same listener socket.</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test_2(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
<span class="preprocessor">#if defined(PJ_SYMBIAN) &amp;&amp; PJ_SYMBIAN!=0</span>
<span class="preprocessor"></span>    <span class="keyword">enum</span> { MAX_PAIR = 1, TEST_LOOP = 2 };
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>    <span class="keyword">enum</span> { MAX_PAIR = 4, TEST_LOOP = 2 };
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
    <span class="keyword">struct </span>listener
    {
        <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>            sock;
        <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>    *key;
        <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>       addr;
        <span class="keywordtype">int</span>                  addr_len;
    } listener;

    <span class="keyword">struct </span>server
    {
        <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>            sock;
        <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>    *key;
        <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>       local_addr;
        <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>       rem_addr;
        <span class="keywordtype">int</span>                  rem_addr_len;
        <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>  accept_op;
    } server[MAX_PAIR];

    <span class="keyword">struct </span>client
    {
        <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>            sock;
        <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>    *key;
    } client[MAX_PAIR];

    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;
    <span class="keywordtype">char</span> *send_buf, *recv_buf;
    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;
    <span class="keywordtype">int</span> i, bufsize = BUF_MIN_SIZE;
    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> status;
    <span class="keywordtype">int</span> test_loop, pending_op = 0;
    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t_elapsed;
    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    listener.sock = PJ_INVALID_SOCKET;
    listener.key = NULL;
    
    <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {
        server[i].sock = PJ_INVALID_SOCKET;
        server[i].key = NULL;
    }
    
    <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {
        client[i].sock = PJ_INVALID_SOCKET;
        client[i].key = NULL;   
    }
    
    <span class="comment">// Create pool.</span>
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);


    <span class="comment">// Create I/O Queue.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, <a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, &amp;ioque);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_create()&quot;</span>, rc);
        <span class="keywordflow">return</span> -10;
    }


    <span class="comment">// Concurrency</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioque, allow_concur);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_set_default_concurrency()&quot;</span>, rc);
        <span class="keywordflow">return</span> -11;
    }

    <span class="comment">// Allocate buffers for send and receive.</span>
    send_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);
    recv_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);

    <span class="comment">// Create listener socket</span>
    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;listener.sock);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);
        status=-20; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Bind listener socket.</span>
    <a class="code" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;listener.addr, 0, 0);
    <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(listener.sock, &amp;listener.addr, <span class="keyword">sizeof</span>(listener.addr))) != 0 ) {
        app_perror(<span class="stringliteral">&quot;...bind error&quot;</span>, rc);
        status=-30; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Get listener address.</span>
    listener.addr_len = <span class="keyword">sizeof</span>(listener.addr);
    rc = <a class="code" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(listener.sock, &amp;listener.addr, &amp;listener.addr_len);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_getsockname()&quot;</span>, rc);
        status=-40; <span class="keywordflow">goto</span> on_error;
    }
    listener.addr.sin_addr = <a class="code" href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a>(<a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;s, <span class="stringliteral">&quot;127.0.0.1&quot;</span>));


    <span class="comment">// Register listener socket.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, listener.sock, NULL, &amp;test_cb, 
                                  &amp;listener.key);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR&quot;</span>, rc);
        status=-50; <span class="keywordflow">goto</span> on_error;
    }


    <span class="comment">// Listener socket listen().</span>
    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga6ca05fa6aa8db88c19a60d793fa0cc6b">pj_sock_listen</a>(listener.sock, 5)) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_listen()&quot;</span>, rc);
        status=-60; <span class="keywordflow">goto</span> on_error;
    }


    <span class="keywordflow">for</span> (test_loop=0; test_loop &lt; TEST_LOOP; ++test_loop) {
        <span class="comment">// Client connect and server accept.</span>
        <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {
            rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;client[i].sock);
            <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
                app_perror(<span class="stringliteral">&quot;...error creating socket&quot;</span>, rc);
                status=-70; <span class="keywordflow">goto</span> on_error;
            }

            rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, client[i].sock, NULL, 
                                          &amp;test_cb, &amp;client[i].key);
            <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
                app_perror(<span class="stringliteral">&quot;...error &quot;</span>, rc);
                status=-80; <span class="keywordflow">goto</span> on_error;
            }

            <span class="comment">// Server socket accept()</span>
            <a class="code" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;server[i].accept_op, 
                                   <span class="keyword">sizeof</span>(server[i].accept_op));
            server[i].rem_addr_len = <span class="keyword">sizeof</span>(<a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>);
            status = <a class="code" href="group__PJ__IOQUEUE.htm#gaf7505cc18b3031e43e68c5fd4a7a388e">pj_ioqueue_accept</a>(listener.key, &amp;server[i].accept_op, 
                                       &amp;server[i].sock, &amp;server[i].local_addr, 
                                       &amp;server[i].rem_addr, 
                                       &amp;server[i].rem_addr_len);
            <span class="keywordflow">if</span> (status!=<a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
                app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_accept()&quot;</span>, rc);
                status=-90; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (status==<a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
                ++pending_op;
            }


            <span class="comment">// Client socket connect()</span>
            status = <a class="code" href="group__PJ__IOQUEUE.htm#gaf73fd64e7fbfa50b2c9ca7b00ceaea0b">pj_ioqueue_connect</a>(client[i].key, &amp;listener.addr, 
                                        <span class="keyword">sizeof</span>(listener.addr));
            <span class="keywordflow">if</span> (status!=<a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
                app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_connect()&quot;</span>, rc);
                status=-100; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (status==<a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
                ++pending_op;
            }

            <span class="comment">// Poll until connection of this pair established</span>
            <span class="keywordflow">while</span> (pending_op) {
                <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};

<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>                status = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>                status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>                <span class="keywordflow">if</span> (status &gt; 0) {
                    <span class="keywordflow">if</span> (status &gt; pending_op) {
                        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,
                                  <span class="stringliteral">&quot;...error: pj_ioqueue_poll() returned %d &quot;</span>
                                  <span class="stringliteral">&quot;(only expecting %d)&quot;</span>,
                                  status, pending_op));
                        <span class="keywordflow">return</span> -110;
                    }
                    pending_op -= status;

                    <span class="keywordflow">if</span> (pending_op == 0) {
                        status = 0;
                    }
                }
            }
        }

        <span class="comment">// There&#39;s no pending operation.</span>
        <span class="comment">// When we poll the ioqueue, there must not be events.</span>
        <span class="keywordflow">if</span> (pending_op == 0) {
            <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = {1, 0};
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>            status = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>            status = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>            <span class="keywordflow">if</span> (status != 0) {
                status=-120; <span class="keywordflow">goto</span> on_error;
            }
        }

        <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {
            <span class="comment">// Check server socket.</span>
            <span class="keywordflow">if</span> (server[i].sock == <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
                status = -130;
                app_perror(<span class="stringliteral">&quot;...accept() error&quot;</span>, <a class="code" href="group__pj__errno.htm#gab55e3d49c25f27e8353a8dd385f97942">pj_get_os_error</a>());
                <span class="keywordflow">goto</span> on_error;
            }

            <span class="comment">// Check addresses</span>
            <span class="keywordflow">if</span> (server[i].local_addr.sin_family != <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>() ||
                server[i].local_addr.sin_addr.s_addr == 0 ||
                server[i].local_addr.sin_port == 0)
            {
                app_perror(<span class="stringliteral">&quot;...ERROR address not set&quot;</span>, rc);
                status = -140;
                <span class="keywordflow">goto</span> on_error;
            }

            <span class="keywordflow">if</span> (server[i].rem_addr.sin_family != <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>() ||
                server[i].rem_addr.sin_addr.s_addr == 0 ||
                server[i].rem_addr.sin_port == 0)
            {
                app_perror(<span class="stringliteral">&quot;...ERROR address not set&quot;</span>, rc);
                status = -150;
                <span class="keywordflow">goto</span> on_error;
            }


            <span class="comment">// Register newly accepted socket.</span>
            rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, server[i].sock, NULL,
                                          &amp;test_cb, &amp;server[i].key);
            <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
                app_perror(<span class="stringliteral">&quot;...ERROR in pj_ioqueue_register_sock&quot;</span>, rc);
                status = -160;
                <span class="keywordflow">goto</span> on_error;
            }

            <span class="comment">// Test send and receive.</span>
            t_elapsed.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;
            status = send_recv_test(ioque, server[i].key, client[i].key, 
                                    send_buf, recv_buf, bufsize, &amp;t_elapsed);
            <span class="keywordflow">if</span> (status != 0) {
                <span class="keywordflow">goto</span> on_error;
            }
        }

        <span class="comment">// Success</span>
        status = 0;

        <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {
            <span class="keywordflow">if</span> (server[i].key != NULL) {
                <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(server[i].key);
                server[i].key = NULL;
                server[i].sock = PJ_INVALID_SOCKET;
            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (server[i].sock != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
                <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(server[i].sock);
                server[i].sock = PJ_INVALID_SOCKET;
            }

            <span class="keywordflow">if</span> (client[i].key != NULL) {
                <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(client[i].key);
                client[i].key = NULL;
                client[i].sock = PJ_INVALID_SOCKET;
            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (client[i].sock != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
                <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(client[i].sock);
                client[i].sock = PJ_INVALID_SOCKET;
            }
        }
    }

    status = 0;

on_error:
    <span class="keywordflow">for</span> (i=0; i&lt;MAX_PAIR; ++i) {
        <span class="keywordflow">if</span> (server[i].key != NULL) {
            <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(server[i].key);
            server[i].key = NULL;
            server[i].sock = PJ_INVALID_SOCKET;
        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (server[i].sock != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
            <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(server[i].sock);
            server[i].sock = PJ_INVALID_SOCKET;
        }

        <span class="keywordflow">if</span> (client[i].key != NULL) {
            <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(client[i].key);
            client[i].key = NULL;
            server[i].sock = PJ_INVALID_SOCKET;
        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (client[i].sock != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
            <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(client[i].sock);
            client[i].sock = PJ_INVALID_SOCKET;
        }
    }

    <span class="keywordflow">if</span> (listener.key) {
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(listener.key);
        listener.key = NULL;
    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (listener.sock != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(listener.sock);
        listener.sock = PJ_INVALID_SOCKET;
    }

    <span class="keywordflow">if</span> (ioque != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> status;

}


<span class="keyword">static</span> <span class="keywordtype">int</span> tcp_ioqueue_test_impl(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
    <span class="keywordtype">int</span> status;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..testing with concurency=%d&quot;</span>, allow_concur));

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s compliance test 0 (success scenario)&quot;</span>,
               <a class="code" href="group__PJ__IOQUEUE.htm#ga6179808511eccf51f35944c4b7de679e">pj_ioqueue_name</a>()));
    <span class="keywordflow">if</span> ((status=compliance_test_0(allow_concur)) != 0) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1, (THIS_FILE, <span class="stringliteral">&quot;....FAILED (status=%d)\n&quot;</span>, status));
        <span class="keywordflow">return</span> status;
    }
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s compliance test 1 (failed scenario)&quot;</span>,
               <a class="code" href="group__PJ__IOQUEUE.htm#ga6179808511eccf51f35944c4b7de679e">pj_ioqueue_name</a>()));
    <span class="keywordflow">if</span> ((status=compliance_test_1(allow_concur)) != 0) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1, (THIS_FILE, <span class="stringliteral">&quot;....FAILED (status=%d)\n&quot;</span>, status));
        <span class="keywordflow">return</span> status;
    }

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;..%s compliance test 2 (repeated accept)&quot;</span>,
               <a class="code" href="group__PJ__IOQUEUE.htm#ga6179808511eccf51f35944c4b7de679e">pj_ioqueue_name</a>()));
    <span class="keywordflow">if</span> ((status=compliance_test_2(allow_concur)) != 0) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1, (THIS_FILE, <span class="stringliteral">&quot;....FAILED (status=%d)\n&quot;</span>, status));
        <span class="keywordflow">return</span> status;
    }

    <span class="keywordflow">return</span> 0;
}

<span class="keywordtype">int</span> tcp_ioqueue_test()
{
    <span class="keywordtype">int</span> rc;

    rc = tcp_ioqueue_test_impl(<a class="code" href="group__PJ__BASIC.htm#gac8d6a18466c2489aae935c44f15edb5b">PJ_TRUE</a>);
    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    rc = tcp_ioqueue_test_impl(<a class="code" href="group__PJ__BASIC.htm#ga211deece8bfa6b5b508a4b1d172928f2">PJ_FALSE</a>);
    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    <span class="keywordflow">return</span> 0;
}

<span class="preprocessor">#endif  </span><span class="comment">/* PJ_HAS_TCP */</span>


<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_uiq_tcp;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_TCP_IOQUEUE_TEST */</span>


</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
