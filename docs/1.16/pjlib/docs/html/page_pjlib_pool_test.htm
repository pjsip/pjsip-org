<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Pool (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Pool </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation of <b>pool_test()</b>. It tests the functionality of the memory pool.</p>
<p>This file is <b>pjlib-test/pool.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: pool.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &lt;<a class="code" href="pool_8h.htm" title="Memory Pool.">pj/pool.h</a>&gt;</span>
<span class="preprocessor">#include &lt;pj/pool_buf.h&gt;</span>
<span class="preprocessor">#include &lt;<a class="code" href="rand_8h.htm" title="Random Number Generator.">pj/rand.h</a>&gt;</span>
<span class="preprocessor">#include &lt;<a class="code" href="log_8h.htm" title="Logging Utility.">pj/log.h</a>&gt;</span>
<span class="preprocessor">#include &lt;<a class="code" href="except_8h.htm" title="Exception Handling in C.">pj/except.h</a>&gt;</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>

<span class="preprocessor">#if INCLUDE_POOL_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#define SIZE    4096</span>
<span class="preprocessor"></span>
<span class="comment">/* Normally we should throw exception when memory alloc fails.</span>
<span class="comment"> * Here we do nothing so that the flow will go back to original caller,</span>
<span class="comment"> * which will test the result using NULL comparison. Normally caller will</span>
<span class="comment"> * catch the exception instead of checking for NULLs.</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">void</span> null_callback(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)
{
    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(pool);
    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(size);
}

<span class="preprocessor">#define GET_FREE(p)     (pj_pool_get_capacity(p)-pj_pool_get_used_size(p))</span>
<span class="preprocessor"></span>
<span class="comment">/* Test that the capacity and used size reported by the pool is correct. </span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> capacity_test(<span class="keywordtype">void</span>)
{
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, SIZE, 0, &amp;null_callback);
    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> freesize;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...capacity_test()&quot;</span>));

    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -200;

    freesize = GET_FREE(pool);

    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, freesize) == NULL) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: wrong freesize %u reported&quot;</span>,
                          freesize));
        <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
        <span class="keywordflow">return</span> -210;
    }

    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> 0;
}

<span class="comment">/* Test that the alignment works. */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> pool_alignment_test(<span class="keywordtype">void</span>)
{
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <span class="keywordtype">void</span> *ptr;
    <span class="keyword">enum</span> { MEMSIZE = 64, LOOP = 100 };
    <span class="keywordtype">unsigned</span> i;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...alignment test&quot;</span>));

    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, <a class="code" href="group__PJ__POOL.htm#ga1c2e8be344e0e510145d5888636538be">PJ_POOL_SIZE</a>+MEMSIZE, MEMSIZE, NULL);
    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -300;

<span class="preprocessor">#define IS_ALIGNED(p)   ((((unsigned long)p) &amp; (PJ_POOL_ALIGNMENT-1)) == 0)</span>
<span class="preprocessor"></span>
    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {
        <span class="comment">/* Test first allocation */</span>
        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);
        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {
            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
            <span class="keywordflow">return</span> -310;
        }

        <span class="comment">/* Test subsequent allocation */</span>
        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);
        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {
            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
            <span class="keywordflow">return</span> -320;
        }

        <span class="comment">/* Test allocation after new block is created */</span>
        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, MEMSIZE*2+1);
        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {
            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
            <span class="keywordflow">return</span> -330;
        }

        <span class="comment">/* Reset the pool */</span>
        <a class="code" href="group__PJ__POOL.htm#ga8bfe679642e35ec7f1f6704f55a1610c">pj_pool_reset</a>(pool);
    }

    <span class="comment">/* Done */</span>
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);

    <span class="keywordflow">return</span> 0;
}

<span class="comment">/* Test that the alignment works for pool on buf. */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> pool_buf_alignment_test(<span class="keywordtype">void</span>)
{
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <span class="keywordtype">char</span> buf[512];
    <span class="keywordtype">void</span> *ptr;
    <span class="keyword">enum</span> { LOOP = 100 };
    <span class="keywordtype">unsigned</span> i;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...pool_buf alignment test&quot;</span>));

    pool = <a class="code" href="group__PJ__POOL__BUFFER.htm#ga57c62164684222744367e6ed93bb0253">pj_pool_create_on_buf</a>(NULL, buf, <span class="keyword">sizeof</span>(buf));
    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -400;

    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {
        <span class="comment">/* Test first allocation */</span>
        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);
        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {
            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
            <span class="keywordflow">return</span> -410;
        }

        <span class="comment">/* Test subsequent allocation */</span>
        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);
        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {
            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
            <span class="keywordflow">return</span> -420;
        }

        <span class="comment">/* Reset the pool */</span>
        <a class="code" href="group__PJ__POOL.htm#ga8bfe679642e35ec7f1f6704f55a1610c">pj_pool_reset</a>(pool);
    }

    <span class="comment">/* Done */</span>
    <span class="keywordflow">return</span> 0;
}

<span class="comment">/* Test function to drain the pool&#39;s space. </span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> drain_test(<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> increment)
{
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, size, increment, 
                                     &amp;null_callback);
    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> freesize;
    <span class="keywordtype">void</span> *p;
    <span class="keywordtype">int</span> status = 0;
    
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...drain_test(%d,%d)&quot;</span>, size, increment));

    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -10;

    <span class="comment">/* Get free size */</span>
    freesize = GET_FREE(pool);
    <span class="keywordflow">if</span> (freesize &lt; 1) {
        status=-15; 
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">/* Drain the pool until there&#39;s nothing left. */</span>
    <span class="keywordflow">while</span> (freesize &gt; 0) {
        <span class="keywordtype">int</span> size;

        <span class="keywordflow">if</span> (freesize &gt; 255)
            size = ((<a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() &amp; 0x000000FF) + <a class="code" href="group__PJ__POOL.htm#ga83e2da94131c06db0b620d4fc65c6abb">PJ_POOL_ALIGNMENT</a>) &amp; 
                   ~(<a class="code" href="group__PJ__POOL.htm#ga83e2da94131c06db0b620d4fc65c6abb">PJ_POOL_ALIGNMENT</a> - 1);
        <span class="keywordflow">else</span>
            size = freesize;

        p = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, size);
        <span class="keywordflow">if</span> (!p) {
            status=-20; <span class="keywordflow">goto</span> on_error;
        }

        freesize -= size;
    }

    <span class="comment">/* Check that capacity is zero. */</span>
    <span class="keywordflow">if</span> (GET_FREE(pool) != 0) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....error: returned free=%u (expecting 0)&quot;</span>,
                  GET_FREE(pool)));
        status=-30; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">/* Try to allocate once more */</span>
    p = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 257);
    <span class="keywordflow">if</span> (!p) {
        status=-40; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">/* Check that capacity is NOT zero. */</span>
    <span class="keywordflow">if</span> (GET_FREE(pool) == 0) {
        status=-50; <span class="keywordflow">goto</span> on_error;
    }


on_error:
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> status;
}

<span class="comment">/* Test the buffer based pool */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> pool_buf_test(<span class="keywordtype">void</span>)
{
    <span class="keyword">enum</span> { STATIC_BUF_SIZE = 40 };
    <span class="comment">/* 16 is the internal struct in pool_buf */</span>
    <span class="keyword">static</span> <span class="keywordtype">char</span> buf[ STATIC_BUF_SIZE + <span class="keyword">sizeof</span>(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a>) + 
                     <span class="keyword">sizeof</span>(<a class="code" href="structpj__pool__block.htm">pj_pool_block</a>) + 2 * PJ_POOL_ALIGNMENT];
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <span class="keywordtype">void</span> *p;
    PJ_USE_EXCEPTION;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...pool_buf test&quot;</span>));

    pool = <a class="code" href="group__PJ__POOL__BUFFER.htm#ga57c62164684222744367e6ed93bb0253">pj_pool_create_on_buf</a>(<span class="stringliteral">&quot;no name&quot;</span>, buf, <span class="keyword">sizeof</span>(buf));
    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> -70;

    <span class="comment">/* Drain the pool */</span>
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        <span class="keywordflow">if</span> ((p=<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, STATIC_BUF_SIZE/2)) == NULL)
            <span class="keywordflow">return</span> -75;

        <span class="keywordflow">if</span> ((p=<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, STATIC_BUF_SIZE/2)) == NULL)
            <span class="keywordflow">return</span> -76;
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="keywordflow">return</span> -77;
    }
    PJ_END;

    <span class="comment">/* On the next alloc, exception should be thrown */</span>
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        p = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, STATIC_BUF_SIZE);
        <span class="keywordflow">if</span> (p != NULL) {
            <span class="comment">/* This is unexpected, the alloc should fail */</span>
            <span class="keywordflow">return</span> -78;
        }
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="comment">/* This is the expected result */</span>
    }
    PJ_END;

    <span class="comment">/* Done */</span>
    <span class="keywordflow">return</span> 0;
}


<span class="keywordtype">int</span> pool_test(<span class="keywordtype">void</span>)
{
    <span class="keyword">enum</span> { LOOP = 2 };
    <span class="keywordtype">int</span> loop;
    <span class="keywordtype">int</span> rc;

    rc = capacity_test();
    <span class="keywordflow">if</span> (rc) <span class="keywordflow">return</span> rc;

    rc = pool_alignment_test();
    <span class="keywordflow">if</span> (rc) <span class="keywordflow">return</span> rc;

    rc = pool_buf_alignment_test();
    <span class="keywordflow">if</span> (rc) <span class="keywordflow">return</span> rc;

    <span class="keywordflow">for</span> (loop=0; loop&lt;LOOP; ++loop) {
        <span class="comment">/* Test that the pool should grow automaticly. */</span>
        rc = drain_test(SIZE, SIZE);
        <span class="keywordflow">if</span> (rc != 0) <span class="keywordflow">return</span> rc;

        <span class="comment">/* Test situation where pool is not allowed to grow. </span>
<span class="comment">         * We expect the test to return correct error.</span>
<span class="comment">         */</span>
        rc = drain_test(SIZE, 0);
        <span class="keywordflow">if</span> (rc != -40) <span class="keywordflow">return</span> rc;
    }

    rc = pool_buf_test();
    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;


    <span class="keywordflow">return</span> 0;
}

<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_pool_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_POOL_TEST */</span>

</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
