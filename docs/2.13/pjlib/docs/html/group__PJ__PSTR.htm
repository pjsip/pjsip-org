<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>String Operations (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">String Operations<div class="ingroups"><a class="el" href="group__PJ__DS.htm">Data Structure.</a></div></div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="define-members" name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga71af3582b0568c781a6b166b780e0dff"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga71af3582b0568c781a6b166b780e0dff">PJ_CHECK_TRUNC_STR</a>(ret,  str,  len)&#160;&#160;&#160;    if ((ret) &gt;= (len) || (ret) &lt; 0) pj_ansi_strcpy((str) + (len) - 3, &quot;..&quot;)</td></tr>
<tr class="separator:ga71af3582b0568c781a6b166b780e0dff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9eafbfcc5e991749803c1e1b2f5e27b7"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga9eafbfcc5e991749803c1e1b2f5e27b7">strnicmp_alnum</a>&#160;&#160;&#160;pj_ansi_strnicmp</td></tr>
<tr class="separator:ga9eafbfcc5e991749803c1e1b2f5e27b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab812f5bf3536395fc0fbb2e4f0b5c025"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab812f5bf3536395fc0fbb2e4f0b5c025">pj_stricmp_alnum</a>&#160;&#160;&#160;<a class="el" href="group__PJ__PSTR.htm#gac6f28fa3462c129b73ca4572f0049be6">pj_stricmp</a></td></tr>
<tr class="separator:gab812f5bf3536395fc0fbb2e4f0b5c025"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga20fa0c4d9ccddd0822a775730cf4a867"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a> (char *str)</td></tr>
<tr class="separator:ga20fa0c4d9ccddd0822a775730cf4a867"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac34ba480d390a5652092da2fc29b4493"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gac34ba480d390a5652092da2fc29b4493">pj_cstr</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const char *s)</td></tr>
<tr class="separator:gac34ba480d390a5652092da2fc29b4493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3da7258c6309331ebdd32e6cef6f5a2a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga3da7258c6309331ebdd32e6cef6f5a2a">pj_strset</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, char *ptr, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> length)</td></tr>
<tr class="separator:ga3da7258c6309331ebdd32e6cef6f5a2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad0c54d6d5326005d28338a2866f60f3f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gad0c54d6d5326005d28338a2866f60f3f">pj_strset2</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, char *src)</td></tr>
<tr class="separator:gad0c54d6d5326005d28338a2866f60f3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2568c73d6b4088356f8afba9a059e01f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga2568c73d6b4088356f8afba9a059e01f">pj_strset3</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, char *begin, char *end)</td></tr>
<tr class="separator:ga2568c73d6b4088356f8afba9a059e01f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga14cabf65b4df8f16683c626a2a30939c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga14cabf65b4df8f16683c626a2a30939c">pj_strassign</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr class="separator:ga14cabf65b4df8f16683c626a2a30939c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga92619637a1678cf5a86e400862f77e46"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga92619637a1678cf5a86e400862f77e46">pj_strcpy</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr class="separator:ga92619637a1678cf5a86e400862f77e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0ec5ad9814a6758bc4a311b36ed3eb3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaa0ec5ad9814a6758bc4a311b36ed3eb3">pj_strcpy2</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr class="separator:gaa0ec5ad9814a6758bc4a311b36ed3eb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60570693b3f4509153ea4de2f98ce39f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga60570693b3f4509153ea4de2f98ce39f">pj_strncpy</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> max)</td></tr>
<tr class="separator:ga60570693b3f4509153ea4de2f98ce39f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57b8997903191a9f48b11d67fc603048"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga57b8997903191a9f48b11d67fc603048">pj_strncpy_with_null</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> max)</td></tr>
<tr class="separator:ga57b8997903191a9f48b11d67fc603048"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea790c59c9724e6d938837a2a56249dc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaea790c59c9724e6d938837a2a56249dc">pj_strdup</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr class="separator:gaea790c59c9724e6d938837a2a56249dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fee3b08672dc495eb5873a5bc172332"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga7fee3b08672dc495eb5873a5bc172332">pj_strdup_with_null</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr class="separator:ga7fee3b08672dc495eb5873a5bc172332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga27a110e8cc56be7eb1d7ca509afcd64e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga27a110e8cc56be7eb1d7ca509afcd64e">pj_strdup2</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr class="separator:ga27a110e8cc56be7eb1d7ca509afcd64e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2fce72c3ca50acdc5aff962f0b2b753"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gac2fce72c3ca50acdc5aff962f0b2b753">pj_strdup2_with_null</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr class="separator:gac2fce72c3ca50acdc5aff962f0b2b753"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3f0542aaac9be1884b5da2031d62ab7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gac3f0542aaac9be1884b5da2031d62ab7">pj_strdup3</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const char *src)</td></tr>
<tr class="separator:gac3f0542aaac9be1884b5da2031d62ab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8b91334e749e1c4aa6bebec6ec7fc81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab8b91334e749e1c4aa6bebec6ec7fc81">pj_strlen</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:gab8b91334e749e1c4aa6bebec6ec7fc81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d0b384e6c7b5e72d7c1e75f5590e6f3"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga1d0b384e6c7b5e72d7c1e75f5590e6f3">pj_strbuf</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:ga1d0b384e6c7b5e72d7c1e75f5590e6f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga521ddd312725bf6fa77e91d0dd4aec34"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2)</td></tr>
<tr class="separator:ga521ddd312725bf6fa77e91d0dd4aec34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3321b5cee71785a7b450ad29afe0895b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga3321b5cee71785a7b450ad29afe0895b">pj_strcmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2)</td></tr>
<tr class="separator:ga3321b5cee71785a7b450ad29afe0895b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab83273533b1b136a66fb453b905bedf4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab83273533b1b136a66fb453b905bedf4">pj_strncmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr class="separator:gab83273533b1b136a66fb453b905bedf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5a4821adde187cd914620f89c7bc0779"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga5a4821adde187cd914620f89c7bc0779">pj_strncmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr class="separator:ga5a4821adde187cd914620f89c7bc0779"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6f28fa3462c129b73ca4572f0049be6"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gac6f28fa3462c129b73ca4572f0049be6">pj_stricmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2)</td></tr>
<tr class="separator:gac6f28fa3462c129b73ca4572f0049be6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga508848e33f034d920be8333ccdf7e077"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga508848e33f034d920be8333ccdf7e077">pj_stricmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2)</td></tr>
<tr class="separator:ga508848e33f034d920be8333ccdf7e077"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2e4ec6d2005b66d5c97abde02404c443"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga2e4ec6d2005b66d5c97abde02404c443">pj_strnicmp</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr class="separator:ga2e4ec6d2005b66d5c97abde02404c443"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d098decc316cec1798a1b9de0a0a4d4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga7d098decc316cec1798a1b9de0a0a4d4">pj_strnicmp2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str1, const char *str2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)</td></tr>
<tr class="separator:ga7d098decc316cec1798a1b9de0a0a4d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7851384cbdcf51404c7ef6f43c3a9c47"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga7851384cbdcf51404c7ef6f43c3a9c47">pj_strcat</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *src)</td></tr>
<tr class="separator:ga7851384cbdcf51404c7ef6f43c3a9c47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga101dde22d40c234fad3da7d0abde436a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga101dde22d40c234fad3da7d0abde436a">pj_strcat2</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *dst, const char *src)</td></tr>
<tr class="separator:ga101dde22d40c234fad3da7d0abde436a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae91f330845bdeffa31397a7ecb7651f0"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gae91f330845bdeffa31397a7ecb7651f0">pj_strchr</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, int chr)</td></tr>
<tr class="separator:gae91f330845bdeffa31397a7ecb7651f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace014c2ca0d4ee4cc1f3079fd1fea7cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gace014c2ca0d4ee4cc1f3079fd1fea7cf">pj_strspn</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *set_char)</td></tr>
<tr class="separator:gace014c2ca0d4ee4cc1f3079fd1fea7cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a284646e733bac38c6620750a121851"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga0a284646e733bac38c6620750a121851">pj_strspn2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const char *set_char)</td></tr>
<tr class="separator:ga0a284646e733bac38c6620750a121851"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga058001484bc4ec8b56accfbe577bc544"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga058001484bc4ec8b56accfbe577bc544">pj_strcspn</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *set_char)</td></tr>
<tr class="separator:ga058001484bc4ec8b56accfbe577bc544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebc4f54910e68b0fad688aa884a31d65"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaebc4f54910e68b0fad688aa884a31d65">pj_strcspn2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const char *set_char)</td></tr>
<tr class="separator:gaebc4f54910e68b0fad688aa884a31d65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafcf15022cae7140d77d47d254bd16f62"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gafcf15022cae7140d77d47d254bd16f62">pj_strtok</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *delim, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *tok, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> start_idx)</td></tr>
<tr class="separator:gafcf15022cae7140d77d47d254bd16f62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1af04cade03db309cb6ef3c9c2bc7ebe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga1af04cade03db309cb6ef3c9c2bc7ebe">pj_strtok2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const char *delim, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *tok, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> start_idx)</td></tr>
<tr class="separator:ga1af04cade03db309cb6ef3c9c2bc7ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga82fc2a768dc10f1d947c7d8dd61454a5"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga82fc2a768dc10f1d947c7d8dd61454a5">pj_strstr</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *substr)</td></tr>
<tr class="separator:ga82fc2a768dc10f1d947c7d8dd61454a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5aa88da09cdb568de512105742269698"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga5aa88da09cdb568de512105742269698">pj_stristr</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *substr)</td></tr>
<tr class="separator:ga5aa88da09cdb568de512105742269698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf07a24b02a191f9cbc1d6f314e47c4ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaf07a24b02a191f9cbc1d6f314e47c4ae">pj_strltrim</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:gaf07a24b02a191f9cbc1d6f314e47c4ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga060888e5c7a8753c3e4ec7d8530f784c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga060888e5c7a8753c3e4ec7d8530f784c">pj_strrtrim</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:ga060888e5c7a8753c3e4ec7d8530f784c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1a1f5d112f26080c56229a406b51fd7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaa1a1f5d112f26080c56229a406b51fd7">pj_strtrim</a> (<a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:gaa1a1f5d112f26080c56229a406b51fd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa89224d869eb10610c4c63617dcbb752"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaa89224d869eb10610c4c63617dcbb752">pj_create_random_string</a> (char *str, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> length)</td></tr>
<tr class="separator:gaa89224d869eb10610c4c63617dcbb752"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba5f101f76a30bbf55c0bf24b528ae09"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaba5f101f76a30bbf55c0bf24b528ae09">pj_strtol</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:gaba5f101f76a30bbf55c0bf24b528ae09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaa4efaf61387e8de1c9471d98a662f6b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaaa4efaf61387e8de1c9471d98a662f6b">pj_strtol2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, long *value)</td></tr>
<tr class="separator:gaaa4efaf61387e8de1c9471d98a662f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b12a5cc98e05ff6993aa02436246999"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga0b12a5cc98e05ff6993aa02436246999">pj_strtoul</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:ga0b12a5cc98e05ff6993aa02436246999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c8b52cb93c5e002921fd393441b7c66"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, <a class="el" href="structpj__str__t.htm">pj_str_t</a> *endptr, unsigned base)</td></tr>
<tr class="separator:ga9c8b52cb93c5e002921fd393441b7c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1e491c1fe8122b251b41fe4662372c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gab1e491c1fe8122b251b41fe4662372c8">pj_strtoul3</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str, unsigned long *value, unsigned base)</td></tr>
<tr class="separator:gab1e491c1fe8122b251b41fe4662372c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad959f066f2915364a97b667a36f34eff"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gad959f066f2915364a97b667a36f34eff">pj_strtof</a> (const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *str)</td></tr>
<tr class="separator:gad959f066f2915364a97b667a36f34eff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60c21f277b9d2aab493712856972946b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga60c21f277b9d2aab493712856972946b">pj_utoa</a> (unsigned long val, char *buf)</td></tr>
<tr class="separator:ga60c21f277b9d2aab493712856972946b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3bd8a27e248674b4f506de841c623276"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga3bd8a27e248674b4f506de841c623276">pj_utoa_pad</a> (unsigned long val, char *buf, int min_dig, int pad)</td></tr>
<tr class="separator:ga3bd8a27e248674b4f506de841c623276"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa92001573289c87313c660146369fa3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a> (void *dst, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:gafa92001573289c87313c660146369fa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7671ba904f0bd754922d8c7617819be"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#gaf7671ba904f0bd754922d8c7617819be">pj_memset</a> (void *dst, int c, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:gaf7671ba904f0bd754922d8c7617819be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e46ff41f3a185d176aa73beb2766e2e"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga0e46ff41f3a185d176aa73beb2766e2e">pj_memcpy</a> (void *dst, const void *src, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:ga0e46ff41f3a185d176aa73beb2766e2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47332452c0d62b07f421390f35e87732"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga47332452c0d62b07f421390f35e87732">pj_memmove</a> (void *dst, const void *src, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:ga47332452c0d62b07f421390f35e87732"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga81417b253e8d0f658d2fe73e9eeb6bb5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a> (const void *buf1, const void *buf2, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:ga81417b253e8d0f658d2fe73e9eeb6bb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60cdf4e931847be4769c3717dbb3d5c9"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__PSTR.htm#ga60cdf4e931847be4769c3717dbb3d5c9">pj_memchr</a> (const void *buf, int c, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:ga60cdf4e931847be4769c3717dbb3d5c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >This module provides string manipulation API.</p>
<h1><a class="anchor" id="pj_pstr_not_null_sec"></a>
PJLIB String is NOT Null Terminated!</h1>
<p >That is the first information that developers need to know. Instead of using normal C string, strings in PJLIB are represented as <a class="el" href="structpj__str__t.htm">pj_str_t</a> structure below:</p>
<pre>
  typedef struct <a class="el" href="structpj__str__t.htm">pj_str_t</a>
  {
      char      *ptr;
      pj_ssize_t  slen;
  } <a class="el" href="structpj__str__t.htm">pj_str_t</a>;
</pre><p >There are some advantages of using this approach:</p><ul>
<li>the string can point to arbitrary location in memory even if the string in that location is not null terminated. This is most usefull for text parsing, where the parsed text can just point to the original text in the input. If we use C string, then we will have to copy the text portion from the input to a string variable.</li>
<li>because the length of the string is known, string copy operation can be made more efficient.</li>
</ul>
<p >Most of APIs in PJLIB that expect or return string will represent the string as <a class="el" href="structpj__str__t.htm">pj_str_t</a> instead of normal C string.</p>
<h1><a class="anchor" id="pj_pstr_examples_sec"></a>
Examples</h1>
<p >For some examples, please see:</p><ul>
<li><a class="el" href="page_pjlib_string_test.htm">Test: String</a> </li>
</ul>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga71af3582b0568c781a6b166b780e0dff" name="ga71af3582b0568c781a6b166b780e0dff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga71af3582b0568c781a6b166b780e0dff">&#9670;&nbsp;</a></span>PJ_CHECK_TRUNC_STR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_CHECK_TRUNC_STR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ret, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">str, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">len&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;    if ((ret) &gt;= (len) || (ret) &lt; 0) pj_ansi_strcpy((str) + (len) - 3, &quot;..&quot;)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if a string is truncated and if yes, put a suffix of ".." to indicate the truncation. This macro is used to check the result of pj_ansi_snprintf().</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ret</td><td>The return value of pj_ansi_snprintf(). </td></tr>
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">len</td><td>The length of the string buffer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gab812f5bf3536395fc0fbb2e4f0b5c025" name="gab812f5bf3536395fc0fbb2e4f0b5c025"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab812f5bf3536395fc0fbb2e4f0b5c025">&#9670;&nbsp;</a></span>pj_stricmp_alnum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define pj_stricmp_alnum&#160;&#160;&#160;<a class="el" href="group__PJ__PSTR.htm#gac6f28fa3462c129b73ca4572f0049be6">pj_stricmp</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Perform lowercase comparison to the strings which consists of only alnum characters. More over, it will only return non-zero if both strings are not equal, not the usual negative or positive value.</p>
<p >If non-alnum inputs are given, then the function may mistakenly treat two strings as equal.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>0 if str1 is equal to str2</li>
<li>(-1) if not equal. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga9eafbfcc5e991749803c1e1b2f5e27b7" name="ga9eafbfcc5e991749803c1e1b2f5e27b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9eafbfcc5e991749803c1e1b2f5e27b7">&#9670;&nbsp;</a></span>strnicmp_alnum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define strnicmp_alnum&#160;&#160;&#160;pj_ansi_strnicmp</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Perform lowercase comparison to the strings which consists of only alnum characters. More over, it will only return non-zero if both strings are not equal, not the usual negative or positive value.</p>
<p >If non-alnum inputs are given, then the function may mistakenly treat two strings as equal.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">len</td><td>The length to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>0 if str1 is equal to str2</li>
<li>(-1) if not equal. </li>
</ul>
</dd></dl>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="gafa92001573289c87313c660146369fa3" name="gafa92001573289c87313c660146369fa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafa92001573289c87313c660146369fa3">&#9670;&nbsp;</a></span>pj_bzero()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_bzero </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Fill the memory location with zero.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The destination buffer. </td></tr>
    <tr><td class="paramname">size</td><td>The number of bytes. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">Referenced by <a class="el" href="group__pj__ip__helper.htm#ga888e22f667d0751ec4b7ea96864e5e15">pj_enum_ip_option_default()</a>, and <a class="el" href="group__pj__math.htm#gaa8a95eefaca81c25e82d2f806c9839d0">pj_math_stat_init()</a>.</p>

</div>
</div>
<a id="gaa89224d869eb10610c4c63617dcbb752" name="gaa89224d869eb10610c4c63617dcbb752"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa89224d869eb10610c4c63617dcbb752">&#9670;&nbsp;</a></span>pj_create_random_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char * pj_create_random_string </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initialize the buffer with some random string. Note that the generated string is not NULL terminated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to store the result. </td></tr>
    <tr><td class="paramname">length</td><td>the length of the random string to generate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string. </dd></dl>

</div>
</div>
<a id="gac34ba480d390a5652092da2fc29b4493" name="gac34ba480d390a5652092da2fc29b4493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac34ba480d390a5652092da2fc29b4493">&#9670;&nbsp;</a></span>pj_cstr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_cstr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create constant string from normal C string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string to be initialized. </td></tr>
    <tr><td class="paramname">s</td><td>Null terminated string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="structpj__str__t.htm">pj_str_t</a>. </dd></dl>

<p class="reference">References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>, and <a class="el" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">pj_str_t::slen</a>.</p>

</div>
</div>
<a id="ga60cdf4e931847be4769c3717dbb3d5c9" name="ga60cdf4e931847be4769c3717dbb3d5c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga60cdf4e931847be4769c3717dbb3d5c9">&#9670;&nbsp;</a></span>pj_memchr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * pj_memchr </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find character in the buffer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>The buffer. </td></tr>
    <tr><td class="paramname">c</td><td>The character to find. </td></tr>
    <tr><td class="paramname">size</td><td>The size to check.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the pointer to location where the character is found, or NULL if not found. </dd></dl>

</div>
</div>
<a id="ga81417b253e8d0f658d2fe73e9eeb6bb5" name="ga81417b253e8d0f658d2fe73e9eeb6bb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga81417b253e8d0f658d2fe73e9eeb6bb5">&#9670;&nbsp;</a></span>pj_memcmp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_memcmp </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>buf1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>buf2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Compare buffers.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">buf1</td><td>The first buffer. </td></tr>
    <tr><td class="paramname">buf2</td><td>The second buffer. </td></tr>
    <tr><td class="paramname">size</td><td>The size to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>negative, zero, or positive value. </dd></dl>

</div>
</div>
<a id="ga0e46ff41f3a185d176aa73beb2766e2e" name="ga0e46ff41f3a185d176aa73beb2766e2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0e46ff41f3a185d176aa73beb2766e2e">&#9670;&nbsp;</a></span>pj_memcpy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * pj_memcpy </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Copy buffer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The destination buffer. </td></tr>
    <tr><td class="paramname">src</td><td>The source buffer. </td></tr>
    <tr><td class="paramname">size</td><td>The size to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the destination buffer. </dd></dl>

</div>
</div>
<a id="ga47332452c0d62b07f421390f35e87732" name="ga47332452c0d62b07f421390f35e87732"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga47332452c0d62b07f421390f35e87732">&#9670;&nbsp;</a></span>pj_memmove()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * pj_memmove </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Move memory.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The destination buffer. </td></tr>
    <tr><td class="paramname">src</td><td>The source buffer. </td></tr>
    <tr><td class="paramname">size</td><td>The size to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the destination buffer. </dd></dl>

</div>
</div>
<a id="gaf7671ba904f0bd754922d8c7617819be" name="gaf7671ba904f0bd754922d8c7617819be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf7671ba904f0bd754922d8c7617819be">&#9670;&nbsp;</a></span>pj_memset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * pj_memset </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Fill the memory location with value.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The destination buffer. </td></tr>
    <tr><td class="paramname">c</td><td>Character to set. </td></tr>
    <tr><td class="paramname">size</td><td>The number of characters.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the value of dst. </dd></dl>

</div>
</div>
<a id="ga20fa0c4d9ccddd0822a775730cf4a867" name="ga20fa0c4d9ccddd0822a775730cf4a867"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga20fa0c4d9ccddd0822a775730cf4a867">&#9670;&nbsp;</a></span>pj_str()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> pj_str </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Create string initializer from a normal C string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>Null terminated string to be stored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="structpj__str__t.htm">pj_str_t</a>. </dd></dl>

</div>
</div>
<a id="ga14cabf65b4df8f16683c626a2a30939c" name="ga14cabf65b4df8f16683c626a2a30939c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga14cabf65b4df8f16683c626a2a30939c">&#9670;&nbsp;</a></span>pj_strassign()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strassign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Assign string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The target string. </td></tr>
    <tr><td class="paramname">src</td><td>The source string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the target string. </dd></dl>

</div>
</div>
<a id="ga1d0b384e6c7b5e72d7c1e75f5590e6f3" name="ga1d0b384e6c7b5e72d7c1e75f5590e6f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1d0b384e6c7b5e72d7c1e75f5590e6f3">&#9670;&nbsp;</a></span>pj_strbuf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * pj_strbuf </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Return the pointer to the string data.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the pointer to the string buffer. </dd></dl>

<p class="reference">References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>.</p>

</div>
</div>
<a id="ga7851384cbdcf51404c7ef6f43c3a9c47" name="ga7851384cbdcf51404c7ef6f43c3a9c47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7851384cbdcf51404c7ef6f43c3a9c47">&#9670;&nbsp;</a></span>pj_strcat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_strcat </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Concatenate strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The destination string. </td></tr>
    <tr><td class="paramname">src</td><td>The source string. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga101dde22d40c234fad3da7d0abde436a" name="ga101dde22d40c234fad3da7d0abde436a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga101dde22d40c234fad3da7d0abde436a">&#9670;&nbsp;</a></span>pj_strcat2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_strcat2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Concatenate strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The destination string. </td></tr>
    <tr><td class="paramname">src</td><td>The source string. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gae91f330845bdeffa31397a7ecb7651f0" name="gae91f330845bdeffa31397a7ecb7651f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae91f330845bdeffa31397a7ecb7651f0">&#9670;&nbsp;</a></span>pj_strchr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char * pj_strchr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>chr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Finds a character in a string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">chr</td><td>The character to find.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the pointer to first character found, or NULL. </dd></dl>

<p class="reference">References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>, and <a class="el" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">pj_str_t::slen</a>.</p>

</div>
</div>
<a id="ga521ddd312725bf6fa77e91d0dd4aec34" name="ga521ddd312725bf6fa77e91d0dd4aec34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga521ddd312725bf6fa77e91d0dd4aec34">&#9670;&nbsp;</a></span>pj_strcmp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strcmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Compare strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga3321b5cee71785a7b450ad29afe0895b" name="ga3321b5cee71785a7b450ad29afe0895b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3321b5cee71785a7b450ad29afe0895b">&#9670;&nbsp;</a></span>pj_strcmp2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strcmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Compare strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga92619637a1678cf5a86e400862f77e46" name="ga92619637a1678cf5a86e400862f77e46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga92619637a1678cf5a86e400862f77e46">&#9670;&nbsp;</a></span>pj_strcpy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strcpy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Copy string contents.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The target string. </td></tr>
    <tr><td class="paramname">src</td><td>The source string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the target string. </dd></dl>

</div>
</div>
<a id="gaa0ec5ad9814a6758bc4a311b36ed3eb3" name="gaa0ec5ad9814a6758bc4a311b36ed3eb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa0ec5ad9814a6758bc4a311b36ed3eb3">&#9670;&nbsp;</a></span>pj_strcpy2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strcpy2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Copy string contents.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The target string. </td></tr>
    <tr><td class="paramname">src</td><td>The source string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the target string. </dd></dl>

</div>
</div>
<a id="ga058001484bc4ec8b56accfbe577bc544" name="ga058001484bc4ec8b56accfbe577bc544"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga058001484bc4ec8b56accfbe577bc544">&#9670;&nbsp;</a></span>pj_strcspn()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_strcspn </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>set_char</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find the first index of character, in a string, that belong to a set of characters.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">set_char</td><td>The string containing the set of characters.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the index of the first character in the str that belong to set_char. If no match is found, return the length of str. </dd></dl>

</div>
</div>
<a id="gaebc4f54910e68b0fad688aa884a31d65" name="gaebc4f54910e68b0fad688aa884a31d65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaebc4f54910e68b0fad688aa884a31d65">&#9670;&nbsp;</a></span>pj_strcspn2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_strcspn2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>set_char</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find the first index of character, in a string, that belong to a set of characters.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">set_char</td><td>The string containing the set of characters.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the index of the first character in the str that belong to set_char. If no match is found, return the length of str. </dd></dl>

</div>
</div>
<a id="gaea790c59c9724e6d938837a2a56249dc" name="gaea790c59c9724e6d938837a2a56249dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaea790c59c9724e6d938837a2a56249dc">&#9670;&nbsp;</a></span>pj_strdup()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strdup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Duplicate string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">dst</td><td>The string result. </td></tr>
    <tr><td class="paramname">src</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string result. </dd></dl>

</div>
</div>
<a id="ga27a110e8cc56be7eb1d7ca509afcd64e" name="ga27a110e8cc56be7eb1d7ca509afcd64e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga27a110e8cc56be7eb1d7ca509afcd64e">&#9670;&nbsp;</a></span>pj_strdup2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strdup2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Duplicate string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">dst</td><td>The string result. </td></tr>
    <tr><td class="paramname">src</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string result. </dd></dl>

</div>
</div>
<a id="gac2fce72c3ca50acdc5aff962f0b2b753" name="gac2fce72c3ca50acdc5aff962f0b2b753"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac2fce72c3ca50acdc5aff962f0b2b753">&#9670;&nbsp;</a></span>pj_strdup2_with_null()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strdup2_with_null </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Duplicate string and NULL terminate the destination string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">dst</td><td>The string result. </td></tr>
    <tr><td class="paramname">src</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string result. </dd></dl>

</div>
</div>
<a id="gac3f0542aaac9be1884b5da2031d62ab7" name="gac3f0542aaac9be1884b5da2031d62ab7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac3f0542aaac9be1884b5da2031d62ab7">&#9670;&nbsp;</a></span>pj_strdup3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> pj_strdup3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Duplicate string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">src</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string result. </dd></dl>

</div>
</div>
<a id="ga7fee3b08672dc495eb5873a5bc172332" name="ga7fee3b08672dc495eb5873a5bc172332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7fee3b08672dc495eb5873a5bc172332">&#9670;&nbsp;</a></span>pj_strdup_with_null()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strdup_with_null </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Duplicate string and NULL terminate the destination string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>The pool. </td></tr>
    <tr><td class="paramname">dst</td><td>The string result. </td></tr>
    <tr><td class="paramname">src</td><td>The string to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string result. </dd></dl>

</div>
</div>
<a id="gac6f28fa3462c129b73ca4572f0049be6" name="gac6f28fa3462c129b73ca4572f0049be6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac6f28fa3462c129b73ca4572f0049be6">&#9670;&nbsp;</a></span>pj_stricmp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_stricmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Perform case-insensitive comparison to the strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is equal to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga508848e33f034d920be8333ccdf7e077" name="ga508848e33f034d920be8333ccdf7e077"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga508848e33f034d920be8333ccdf7e077">&#9670;&nbsp;</a></span>pj_stricmp2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_stricmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Perform case-insensitive comparison to the strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga5aa88da09cdb568de512105742269698" name="ga5aa88da09cdb568de512105742269698"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5aa88da09cdb568de512105742269698">&#9670;&nbsp;</a></span>pj_stristr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char * pj_stristr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>substr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Performs substring lookup like <a class="el" href="group__PJ__PSTR.htm#ga82fc2a768dc10f1d947c7d8dd61454a5">pj_strstr()</a> but ignores the case of both strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string to search. </td></tr>
    <tr><td class="paramname">substr</td><td>The string to search fo.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the pointer to the position of substr in str, or NULL. Note that if str is not NULL terminated, the returned pointer is pointing to non-NULL terminated string. </dd></dl>

</div>
</div>
<a id="gab8b91334e749e1c4aa6bebec6ec7fc81" name="gab8b91334e749e1c4aa6bebec6ec7fc81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab8b91334e749e1c4aa6bebec6ec7fc81">&#9670;&nbsp;</a></span>pj_strlen()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> pj_strlen </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Return the length of the string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the length of the string. </dd></dl>

<p class="reference">References <a class="el" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">pj_str_t::slen</a>.</p>

</div>
</div>
<a id="gaf07a24b02a191f9cbc1d6f314e47c4ae" name="gaf07a24b02a191f9cbc1d6f314e47c4ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf07a24b02a191f9cbc1d6f314e47c4ae">&#9670;&nbsp;</a></span>pj_strltrim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strltrim </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Remove (trim) leading whitespaces from the string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string. </dd></dl>

</div>
</div>
<a id="gab83273533b1b136a66fb453b905bedf4" name="gab83273533b1b136a66fb453b905bedf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab83273533b1b136a66fb453b905bedf4">&#9670;&nbsp;</a></span>pj_strncmp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strncmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Compare strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">len</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga5a4821adde187cd914620f89c7bc0779" name="ga5a4821adde187cd914620f89c7bc0779"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5a4821adde187cd914620f89c7bc0779">&#9670;&nbsp;</a></span>pj_strncmp2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strncmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Compare strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">len</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga60570693b3f4509153ea4de2f98ce39f" name="ga60570693b3f4509153ea4de2f98ce39f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga60570693b3f4509153ea4de2f98ce39f">&#9670;&nbsp;</a></span>pj_strncpy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strncpy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Copy source string to destination up to the specified max length.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The target string. </td></tr>
    <tr><td class="paramname">src</td><td>The source string. </td></tr>
    <tr><td class="paramname">max</td><td>Maximum characters to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the target string. </dd></dl>

</div>
</div>
<a id="ga57b8997903191a9f48b11d67fc603048" name="ga57b8997903191a9f48b11d67fc603048"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga57b8997903191a9f48b11d67fc603048">&#9670;&nbsp;</a></span>pj_strncpy_with_null()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strncpy_with_null </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Copy source string to destination up to the specified max length, and NULL terminate the destination. If source string length is greater than or equal to max, then max-1 will be copied.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>The target string. </td></tr>
    <tr><td class="paramname">src</td><td>The source string. </td></tr>
    <tr><td class="paramname">max</td><td>Maximum characters to copy.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the target string. </dd></dl>

</div>
</div>
<a id="ga2e4ec6d2005b66d5c97abde02404c443" name="ga2e4ec6d2005b66d5c97abde02404c443"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2e4ec6d2005b66d5c97abde02404c443">&#9670;&nbsp;</a></span>pj_strnicmp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strnicmp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Perform case-insensitive comparison to the strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">len</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga7d098decc316cec1798a1b9de0a0a4d4" name="ga7d098decc316cec1798a1b9de0a0a4d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7d098decc316cec1798a1b9de0a0a4d4">&#9670;&nbsp;</a></span>pj_strnicmp2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_strnicmp2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Perform case-insensitive comparison to the strings.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str1</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">str2</td><td>The string to compare. </td></tr>
    <tr><td class="paramname">len</td><td>The maximum number of characters to compare.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><ul>
<li>&lt; 0 if str1 is less than str2</li>
<li>0 if str1 is identical to str2</li>
<li>&gt; 0 if str1 is greater than str2 </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga060888e5c7a8753c3e4ec7d8530f784c" name="ga060888e5c7a8753c3e4ec7d8530f784c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga060888e5c7a8753c3e4ec7d8530f784c">&#9670;&nbsp;</a></span>pj_strrtrim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strrtrim </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Remove (trim) the trailing whitespaces from the string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string. </dd></dl>

</div>
</div>
<a id="ga3da7258c6309331ebdd32e6cef6f5a2a" name="ga3da7258c6309331ebdd32e6cef6f5a2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3da7258c6309331ebdd32e6cef6f5a2a">&#9670;&nbsp;</a></span>pj_strset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set the pointer and length to the specified value.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string. </td></tr>
    <tr><td class="paramname">ptr</td><td>pointer to set. </td></tr>
    <tr><td class="paramname">length</td><td>length to set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string. </dd></dl>

<p class="reference">References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>, and <a class="el" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">pj_str_t::slen</a>.</p>

</div>
</div>
<a id="gad0c54d6d5326005d28338a2866f60f3f" name="gad0c54d6d5326005d28338a2866f60f3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad0c54d6d5326005d28338a2866f60f3f">&#9670;&nbsp;</a></span>pj_strset2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strset2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set the pointer and length of the string to the source string, which must be NULL terminated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string. </td></tr>
    <tr><td class="paramname">src</td><td>pointer to set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string. </dd></dl>

<p class="reference">References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>, and <a class="el" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">pj_str_t::slen</a>.</p>

</div>
</div>
<a id="ga2568c73d6b4088356f8afba9a059e01f" name="ga2568c73d6b4088356f8afba9a059e01f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2568c73d6b4088356f8afba9a059e01f">&#9670;&nbsp;</a></span>pj_strset3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strset3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set the pointer and the length of the string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The target string. </td></tr>
    <tr><td class="paramname">begin</td><td>The start of the string. </td></tr>
    <tr><td class="paramname">end</td><td>The end of the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the target string. </dd></dl>

<p class="reference">References <a class="el" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">pj_str_t::ptr</a>, and <a class="el" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">pj_str_t::slen</a>.</p>

</div>
</div>
<a id="gace014c2ca0d4ee4cc1f3079fd1fea7cf" name="gace014c2ca0d4ee4cc1f3079fd1fea7cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gace014c2ca0d4ee4cc1f3079fd1fea7cf">&#9670;&nbsp;</a></span>pj_strspn()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_strspn </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>set_char</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find the first index of character, in a string, that does not belong to a set of characters.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">set_char</td><td>The string containing the set of characters.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the index of the first character in the str that doesn't belong to set_char. If str starts with a character not in set_char, return 0. </dd></dl>

</div>
</div>
<a id="ga0a284646e733bac38c6620750a121851" name="ga0a284646e733bac38c6620750a121851"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0a284646e733bac38c6620750a121851">&#9670;&nbsp;</a></span>pj_strspn2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_strspn2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>set_char</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find the first index of character, in a string, that does not belong to a set of characters.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">set_char</td><td>The string containing the set of characters.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the index of the first character in the str that doesn't belong to set_char. If str starts with a character not in set_char, return 0. </dd></dl>

</div>
</div>
<a id="ga82fc2a768dc10f1d947c7d8dd61454a5" name="ga82fc2a768dc10f1d947c7d8dd61454a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga82fc2a768dc10f1d947c7d8dd61454a5">&#9670;&nbsp;</a></span>pj_strstr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char * pj_strstr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>substr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find the occurence of a substring substr in string str.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string to search. </td></tr>
    <tr><td class="paramname">substr</td><td>The string to search fo.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the pointer to the position of substr in str, or NULL. Note that if str is not NULL terminated, the returned pointer is pointing to non-NULL terminated string. </dd></dl>

</div>
</div>
<a id="gad959f066f2915364a97b667a36f34eff" name="gad959f066f2915364a97b667a36f34eff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad959f066f2915364a97b667a36f34eff">&#9670;&nbsp;</a></span>pj_strtof()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float pj_strtof </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Convert string to float.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the value. </dd></dl>

</div>
</div>
<a id="gafcf15022cae7140d77d47d254bd16f62" name="gafcf15022cae7140d77d47d254bd16f62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafcf15022cae7140d77d47d254bd16f62">&#9670;&nbsp;</a></span>pj_strtok()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_strtok </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>delim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>tok</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>start_idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find tokens from a string using the delimiter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">delim</td><td>The string containing the delimiter. It might contain multiple character treated as unique set. If same character was found on the set, it will be skipped. </td></tr>
    <tr><td class="paramname">tok</td><td>The string containing the token. </td></tr>
    <tr><td class="paramname">start_idx</td><td>The search will start from this index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the index of token from the str, or the length of the str if the token is not found. </dd></dl>

</div>
</div>
<a id="ga1af04cade03db309cb6ef3c9c2bc7ebe" name="ga1af04cade03db309cb6ef3c9c2bc7ebe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1af04cade03db309cb6ef3c9c2bc7ebe">&#9670;&nbsp;</a></span>pj_strtok2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_strtok2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>delim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>tok</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>start_idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Find tokens from a string using the delimiter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string. </td></tr>
    <tr><td class="paramname">delim</td><td>The string containing the delimiter. It might contain multiple character treated as unique set. If same character was found on the set, it will be skipped. </td></tr>
    <tr><td class="paramname">tok</td><td>The string containing the token. </td></tr>
    <tr><td class="paramname">start_idx</td><td>The search will start from this index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the index of token from the str, or the length of the str if the token is not found. </dd></dl>

</div>
</div>
<a id="gaba5f101f76a30bbf55c0bf24b528ae09" name="gaba5f101f76a30bbf55c0bf24b528ae09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaba5f101f76a30bbf55c0bf24b528ae09">&#9670;&nbsp;</a></span>pj_strtol()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long pj_strtol </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Convert string to signed integer. The conversion will stop as soon as non-digit character is found or all the characters have been processed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the integer. </dd></dl>

</div>
</div>
<a id="gaaa4efaf61387e8de1c9471d98a662f6b" name="gaaa4efaf61387e8de1c9471d98a662f6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaaa4efaf61387e8de1c9471d98a662f6b">&#9670;&nbsp;</a></span>pj_strtol2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_strtol2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long *&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Convert string to signed long integer. The conversion will stop as soon as non-digit character is found or all the characters have been processed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string. </td></tr>
    <tr><td class="paramname">value</td><td>Pointer to a long to receive the value.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if successful. Otherwise: PJ_ETOOSMALL if the value was an impossibly long negative number. In this case *value will be set to LONG_MIN. <br  />
 PJ_ETOOBIG if the value was an impossibly long positive number. In this case, *value will be set to LONG_MAX. <br  />
 PJ_EINVAL if the input string was NULL, the value pointer was NULL or the input string could not be parsed at all such as starting with a character other than a '+', '-' or not in the '0' - '9' range. In this case, *value will be left untouched. </dd></dl>

</div>
</div>
<a id="ga0b12a5cc98e05ff6993aa02436246999" name="ga0b12a5cc98e05ff6993aa02436246999"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0b12a5cc98e05ff6993aa02436246999">&#9670;&nbsp;</a></span>pj_strtoul()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long pj_strtoul </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Convert string to unsigned integer. The conversion will stop as soon as non-digit character is found or all the characters have been processed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the unsigned integer. </dd></dl>

</div>
</div>
<a id="ga9c8b52cb93c5e002921fd393441b7c66" name="ga9c8b52cb93c5e002921fd393441b7c66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9c8b52cb93c5e002921fd393441b7c66">&#9670;&nbsp;</a></span>pj_strtoul2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long pj_strtoul2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>endptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>base</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Convert strings to an unsigned long-integer value. This function stops reading the string input either when the number of characters has exceeded the length of the input or it has read the first character it cannot recognize as part of a number, that is a character greater than or equal to base.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The input string. </td></tr>
    <tr><td class="paramname">endptr</td><td>Optional pointer to receive the remainder/unparsed portion of the input. </td></tr>
    <tr><td class="paramname">base</td><td>Number base to use.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the unsigned integer number. </dd></dl>

</div>
</div>
<a id="gab1e491c1fe8122b251b41fe4662372c8" name="gab1e491c1fe8122b251b41fe4662372c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab1e491c1fe8122b251b41fe4662372c8">&#9670;&nbsp;</a></span>pj_strtoul3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_strtoul3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>base</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Convert string to unsigned long integer. The conversion will stop as soon as non-digit character is found or all the characters have been processed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The input string. </td></tr>
    <tr><td class="paramname">value</td><td>Pointer to an unsigned long to receive the value. </td></tr>
    <tr><td class="paramname">base</td><td>Number base to use.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS if successful. Otherwise: PJ_ETOOBIG if the value was an impossibly long positive number. In this case, *value will be set to ULONG_MAX. <br  />
 PJ_EINVAL if the input string was NULL, the value pointer was NULL or the input string could not be parsed at all such as starting with a character outside the base character range. In this case, *value will be left untouched. </dd></dl>

</div>
</div>
<a id="gaa1a1f5d112f26080c56229a406b51fd7" name="gaa1a1f5d112f26080c56229a406b51fd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa1a1f5d112f26080c56229a406b51fd7">&#9670;&nbsp;</a></span>pj_strtrim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__str__t.htm">pj_str_t</a> * pj_strtrim </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Remove (trim) leading and trailing whitespaces from the string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string. </dd></dl>

</div>
</div>
<a id="ga60c21f277b9d2aab493712856972946b" name="ga60c21f277b9d2aab493712856972946b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga60c21f277b9d2aab493712856972946b">&#9670;&nbsp;</a></span>pj_utoa()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_utoa </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Utility to convert unsigned integer to string. Note that the string will be NULL terminated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>the unsigned integer value. </td></tr>
    <tr><td class="paramname">buf</td><td>the buffer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of characters written </dd></dl>

</div>
</div>
<a id="ga3bd8a27e248674b4f506de841c623276" name="ga3bd8a27e248674b4f506de841c623276"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3bd8a27e248674b4f506de841c623276">&#9670;&nbsp;</a></span>pj_utoa_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_utoa_pad </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>min_dig</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pad</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Convert unsigned integer to string with minimum digits. Note that the string will be NULL terminated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>The unsigned integer value. </td></tr>
    <tr><td class="paramname">buf</td><td>The buffer. </td></tr>
    <tr><td class="paramname">min_dig</td><td>Minimum digits to be printed, or zero to specify no minimum digit. </td></tr>
    <tr><td class="paramname">pad</td><td>The padding character to be put in front of the string when the digits is less than minimum.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of characters written. </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
