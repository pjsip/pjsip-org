<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pjsip_inv_callback Struct Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle"><div class="title">pjsip_inv_callback Struct Reference<div class="ingroups"><a class="el" href="group__PJSIP__HIGH__UA.htm">User Agent Library</a> &raquo; <a class="el" href="group__PJSIP__INV.htm">INVITE Session</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;sip_inv.h&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:aa56cc5637ee68ea6d7c32f1eb3cbba55"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#aa56cc5637ee68ea6d7c32f1eb3cbba55">on_state_changed</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
<tr class="separator:aa56cc5637ee68ea6d7c32f1eb3cbba55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a198399f405e563720c2084dc62a6e2a5"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#a198399f405e563720c2084dc62a6e2a5">on_new_session</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
<tr class="separator:a198399f405e563720c2084dc62a6e2a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1147e98c41d74e29fd6d49179a5fc220"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#a1147e98c41d74e29fd6d49179a5fc220">on_tsx_state_changed</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__transaction.htm">pjsip_transaction</a> *tsx, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
<tr class="separator:a1147e98c41d74e29fd6d49179a5fc220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa2004efb807a99ba471d7232dd6a11a"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#afa2004efb807a99ba471d7232dd6a11a">on_rx_offer</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *offer)</td></tr>
<tr class="separator:afa2004efb807a99ba471d7232dd6a11a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf0ea1b9dfc5c67d2f1b1d90e79bfcdc"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#aaf0ea1b9dfc5c67d2f1b1d90e79bfcdc">on_rx_offer2</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, struct <a class="el" href="structpjsip__inv__on__rx__offer__cb__param.htm">pjsip_inv_on_rx_offer_cb_param</a> *param)</td></tr>
<tr class="separator:aaf0ea1b9dfc5c67d2f1b1d90e79bfcdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6e96ef3edc2b842e7dc4bbcf2d789bb"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#ab6e96ef3edc2b842e7dc4bbcf2d789bb">on_rx_reinvite</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *offer, <a class="el" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata)</td></tr>
<tr class="separator:ab6e96ef3edc2b842e7dc4bbcf2d789bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a42a46a745525e3fd67d00d5e9490b"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#a92a42a46a745525e3fd67d00d5e9490b">on_create_offer</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **p_offer)</td></tr>
<tr class="separator:a92a42a46a745525e3fd67d00d5e9490b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3cfa106326745a01c9324581c7d29c8"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#ad3cfa106326745a01c9324581c7d29c8">on_media_update</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv_ses, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td></tr>
<tr class="separator:ad3cfa106326745a01c9324581c7d29c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3965dbcb6367a27460be24ea5d8b50f"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#ab3965dbcb6367a27460be24ea5d8b50f">on_send_ack</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata)</td></tr>
<tr class="separator:ab3965dbcb6367a27460be24ea5d8b50f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa736898abaa5b3095189086af21f4a69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#aa736898abaa5b3095189086af21f4a69">on_redirected</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="el" href="structpjsip__uri.htm">pjsip_uri</a> *target, const <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
<tr class="separator:aa736898abaa5b3095189086af21f4a69"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >This structure contains callbacks to be registered by application to receive notifications from the framework about various events in the invite session. </p>
</div><h2 class="groupheader">Field Documentation</h2>
<a id="aa56cc5637ee68ea6d7c32f1eb3cbba55" name="aa56cc5637ee68ea6d7c32f1eb3cbba55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa56cc5637ee68ea6d7c32f1eb3cbba55">&#9670;&nbsp;</a></span>on_state_changed</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_state_changed) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when the invite sesion state has changed. Application should inspect the session state (inv_sess-&gt;state) to get the current state of the session.</p>
<p >This callback is mandatory.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">e</td><td>The event which has caused the invite session's state to change. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a198399f405e563720c2084dc62a6e2a5" name="a198399f405e563720c2084dc62a6e2a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a198399f405e563720c2084dc62a6e2a5">&#9670;&nbsp;</a></span>on_new_session</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_new_session) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when the invite usage module has created a new dialog and invite because of forked outgoing request.</p>
<p >Currently the invite session does not create a new dialog in forking scenario, so this callback will never be invoked.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The new invite session. </td></tr>
    <tr><td class="paramname">e</td><td>The event which has caused the dialog to fork. The type of this event can be either PJSIP_EVENT_RX_MSG or PJSIP_EVENT_RX_200_MSG. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1147e98c41d74e29fd6d49179a5fc220" name="a1147e98c41d74e29fd6d49179a5fc220"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1147e98c41d74e29fd6d49179a5fc220">&#9670;&nbsp;</a></span>on_tsx_state_changed</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_tsx_state_changed) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__transaction.htm">pjsip_transaction</a> *tsx, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called whenever any transactions within the session has changed their state. Application MAY implement this callback, e.g. to monitor the progress of an outgoing request, or to send response to unhandled incoming request (such as INFO).</p>
<p >This callback is optional.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">tsx</td><td>The transaction, which state has changed. </td></tr>
    <tr><td class="paramname">e</td><td>The event which has caused the transation state's to change. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="afa2004efb807a99ba471d7232dd6a11a" name="afa2004efb807a99ba471d7232dd6a11a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa2004efb807a99ba471d7232dd6a11a">&#9670;&nbsp;</a></span>on_rx_offer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_rx_offer) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *offer)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when the invite session has received new offer from peer. Application can inspect the remote offer in "offer", and set the SDP answer with <a class="el" href="group__PJSIP__INV.htm#gaaeb5c21d71241a68497079cf9c4c2af5">pjsip_inv_set_sdp_answer()</a>. When the application sends a SIP message to send the answer, this SDP answer will be negotiated with the offer, and the result will be sent with the SIP message.</p>
<p >Note: if callback <a class="el" href="structpjsip__inv__callback.htm#aaf0ea1b9dfc5c67d2f1b1d90e79bfcdc">on_rx_offer2()</a> is implemented, this callback will not be called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">offer</td><td>Remote offer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aaf0ea1b9dfc5c67d2f1b1d90e79bfcdc" name="aaf0ea1b9dfc5c67d2f1b1d90e79bfcdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf0ea1b9dfc5c67d2f1b1d90e79bfcdc">&#9670;&nbsp;</a></span>on_rx_offer2</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_rx_offer2) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, struct <a class="el" href="structpjsip__inv__on__rx__offer__cb__param.htm">pjsip_inv_on_rx_offer_cb_param</a> *param)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when the invite session has received new offer from peer. Variant of <a class="el" href="structpjsip__inv__callback.htm#afa2004efb807a99ba471d7232dd6a11a">on_rx_offer()</a> callback.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">param</td><td>The callback parameters. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab6e96ef3edc2b842e7dc4bbcf2d789bb" name="ab6e96ef3edc2b842e7dc4bbcf2d789bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6e96ef3edc2b842e7dc4bbcf2d789bb">&#9670;&nbsp;</a></span>on_rx_reinvite</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>(* pjsip_inv_callback::on_rx_reinvite) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *offer, <a class="el" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is optional, and is called when the invite session has received a re-INVITE from the peer. It will be called after <a class="el" href="structpjsip__inv__callback.htm#afa2004efb807a99ba471d7232dd6a11a">on_rx_offer()</a> callback and works only for re-INVITEs. It allows more fine-grained control over the response to a re-INVITE, e.g. sending a provisional response first. Application can return PJ_SUCCESS and send a reply using the function <a class="el" href="group__PJSIP__INV.htm#ga7dbf4062678f4a75c3ba15f5b7a81ebf">pjsip_inv_initial_answer()</a> or <a class="el" href="group__PJSIP__INV.htm#gad2ec8b6d5c6b02f65c979eea05f82f61">pjsip_inv_answer()</a>, as with the initial INVITE. If application returns non-PJ_SUCCESS, it needs to set the SDP answer with <a class="el" href="group__PJSIP__INV.htm#gaaeb5c21d71241a68497079cf9c4c2af5">pjsip_inv_set_sdp_answer()</a> and the re-INVITE will be answered automatically.</p>
<p >Remarks: Application may need to monitor <a class="el" href="structpjsip__inv__callback.htm#a1147e98c41d74e29fd6d49179a5fc220">on_tsx_state_changed()</a> callback to check whether the re-INVITE is already answered automatically with 487 due to being cancelled.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">offer</td><td>Remote offer. </td></tr>
    <tr><td class="paramname">rdata</td><td>The received re-INVITE request.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- PJ_SUCCESS: application will answer the re-INVITE manually<ul>
<li>non-PJ_SUCCESS: answer the re-INVITE automatically using the SDP set via <a class="el" href="group__PJSIP__INV.htm#gaaeb5c21d71241a68497079cf9c4c2af5">pjsip_inv_set_sdp_answer()</a> </li>
</ul>
</dd></dl>

</div>
</div>
<a id="a92a42a46a745525e3fd67d00d5e9490b" name="a92a42a46a745525e3fd67d00d5e9490b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92a42a46a745525e3fd67d00d5e9490b">&#9670;&nbsp;</a></span>on_create_offer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_create_offer) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **p_offer)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is optional, and it is used to ask the application to create a fresh offer, when the invite session has received re-INVITE without offer. This offer then will be sent in the 200/OK response to the re-INVITE request.</p>
<p >If application doesn't implement this callback, the invite session will send the currently active SDP as the offer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">p_offer</td><td>Pointer to receive the SDP offer created by application. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad3cfa106326745a01c9324581c7d29c8" name="ad3cfa106326745a01c9324581c7d29c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3cfa106326745a01c9324581c7d29c8">&#9670;&nbsp;</a></span>on_media_update</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_media_update) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv_ses, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called after SDP offer/answer session has completed. The status argument specifies the status of the offer/answer, as returned by <a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a>.</p>
<p >This callback is optional (from the point of view of the framework), but all useful applications normally need to implement this callback.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">status</td><td>The negotiation status. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab3965dbcb6367a27460be24ea5d8b50f" name="ab3965dbcb6367a27460be24ea5d8b50f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3965dbcb6367a27460be24ea5d8b50f">&#9670;&nbsp;</a></span>on_send_ack</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* pjsip_inv_callback::on_send_ack) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when the framework needs to send ACK request after it receives incoming 2xx response for INVITE. It allows application to manually handle the transmission of ACK request, which is required by some 3PCC scenarios. If this callback is not implemented, the framework will handle the ACK transmission automatically.</p>
<p >When this callback is overridden, application may delay the sending of the ACK request (for example, when it needs to wait for answer from the other call leg, in 3PCC scenarios).</p>
<p >Application MUST create the ACK request using <a class="el" href="group__PJSIP__INV.htm#ga4b60e9a2057483db3816ccbd4bf2d945">pjsip_inv_create_ack()</a> and send it using <a class="el" href="group__PJSIP__INV.htm#ga0b80fd8a5a89df2228b681f141c1ebd9">pjsip_inv_send_msg()</a>.</p>
<p >Once it has sent the ACK request, the framework will keep this ACK request in the cache. Subsequent receipt of 2xx response will not cause this callback to be called (but see exception below), and instead automatic retransmission of this ACK request from the cache will be done by the framework. Exception: if app has created the ACK but has not sent it, while it receives a retransmission of 2xx response, this callback will be called again.</p>
<p >This callback is optional. </p>

</div>
</div>
<a id="aa736898abaa5b3095189086af21f4a69" name="aa736898abaa5b3095189086af21f4a69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa736898abaa5b3095189086af21f4a69">&#9670;&nbsp;</a></span>on_redirected</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a>(* pjsip_inv_callback::on_redirected) (<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="el" href="structpjsip__uri.htm">pjsip_uri</a> *target, const <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This callback is called when the session is about to resend the INVITE request to the specified target, following the previously received redirection response.</p>
<p >Application may accept the redirection to the specified target (the default behavior if this callback is implemented), reject this target only and make the session continue to try the next target in the list if such target exists, stop the whole redirection process altogether and cause the session to be disconnected, or defer the decision to ask for user confirmation.</p>
<p >This callback is optional. If this callback is not implemented, the default behavior is to NOT follow the redirection response.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inv</td><td>The invite session. </td></tr>
    <tr><td class="paramname">target</td><td>The current target to be tried. </td></tr>
    <tr><td class="paramname">e</td><td>The event that caused this callback to be called. This could be the receipt of 3xx response, or 4xx/5xx response received for the INVITE sent to subsequent targets, or NULL if this callback is called from within <a class="el" href="group__PJSIP__INV.htm#gabbba2ef44235adfc49911b729010073f">pjsip_inv_process_redirect()</a> context.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Action to be performed for the target. Set this parameter to one of the value below:<ul>
<li>PJSIP_REDIRECT_ACCEPT: immediately accept the redirection to this target. When set, the session will immediately resend INVITE request to the target after this callback returns.</li>
<li>PJSIP_REDIRECT_REJECT: immediately reject this target. The session will continue retrying with next target if present, or disconnect the call if there is no more target to try.</li>
<li>PJSIP_REDIRECT_STOP: stop the whole redirection process and immediately disconnect the call. The <a class="el" href="structpjsip__inv__callback.htm#aa56cc5637ee68ea6d7c32f1eb3cbba55">on_state_changed()</a> callback will be called with PJSIP_INV_STATE_DISCONNECTED state immediately after this callback returns.</li>
<li>PJSIP_REDIRECT_PENDING: set to this value if no decision can be made immediately (for example to request confirmation from user). Application then MUST call <a class="el" href="group__PJSIP__INV.htm#gabbba2ef44235adfc49911b729010073f">pjsip_inv_process_redirect()</a> to either accept or reject the redirection upon getting user decision. </li>
</ul>
</dd></dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li><a class="el" href="sip__inv_8h.htm">sip_inv.h</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
