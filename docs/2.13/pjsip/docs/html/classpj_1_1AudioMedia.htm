<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj::AudioMedia Class Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacepj.htm">pj</a></li><li class="navelem"><a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle"><div class="title">pj::AudioMedia Class Reference<div class="ingroups"><a class="el" href="group__PJSUA2__Ref.htm">pjsua2 API Reference</a> &raquo; <a class="el" href="group__PJSUA2__MED.htm">Media</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;media.hpp&gt;</code></p>
<div class="dynheader">
Inheritance diagram for pj::AudioMedia:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classpj_1_1AudioMedia.png" usemap="#pj::AudioMedia_map" alt=""/>
  <map id="pj::AudioMedia_map" name="pj::AudioMedia_map">
<area href="classpj_1_1Media.htm" alt="pj::Media" shape="rect" coords="238,0,387,24"/>
<area href="classpj_1_1AudioMediaPlayer.htm" alt="pj::AudioMediaPlayer" shape="rect" coords="0,112,149,136"/>
<area href="classpj_1_1AudioMediaRecorder.htm" alt="pj::AudioMediaRecorder" shape="rect" coords="159,112,308,136"/>
<area href="classpj_1_1ExtraAudioDevice.htm" alt="pj::ExtraAudioDevice" shape="rect" coords="318,112,467,136"/>
<area href="classpj_1_1ToneGenerator.htm" alt="pj::ToneGenerator" shape="rect" coords="477,112,626,136"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aedefd069090192192a7fddff7e8a6112"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1ConfPortInfo.htm">ConfPortInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#aedefd069090192192a7fddff7e8a6112">getPortInfo</a> () const  throw (Error)</td></tr>
<tr class="separator:aedefd069090192192a7fddff7e8a6112"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba08735cc7c5c88e8a13105499e4d4d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#acba08735cc7c5c88e8a13105499e4d4d">getPortId</a> () const</td></tr>
<tr class="separator:acba08735cc7c5c88e8a13105499e4d4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a26c7478a0dbe7d7e6719f04156954d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a7a26c7478a0dbe7d7e6719f04156954d">startTransmit</a> (const <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;sink) const  throw (Error)</td></tr>
<tr class="separator:a7a26c7478a0dbe7d7e6719f04156954d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00c9bd1391b275180128b6aabbce2d72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a00c9bd1391b275180128b6aabbce2d72">startTransmit2</a> (const <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;sink, const <a class="el" href="structpj_1_1AudioMediaTransmitParam.htm">AudioMediaTransmitParam</a> &amp;param) const  throw (Error)</td></tr>
<tr class="separator:a00c9bd1391b275180128b6aabbce2d72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a397acb2a61103af40c28504f1d8ea8cd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a397acb2a61103af40c28504f1d8ea8cd">stopTransmit</a> (const <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;sink) const  throw (Error)</td></tr>
<tr class="separator:a397acb2a61103af40c28504f1d8ea8cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf541502614d847f117817cd12cbcdc4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#acf541502614d847f117817cd12cbcdc4">adjustRxLevel</a> (float level)  throw (Error)</td></tr>
<tr class="separator:acf541502614d847f117817cd12cbcdc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6e4a58251e2fc3e9a5ec05cabe83d65"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#af6e4a58251e2fc3e9a5ec05cabe83d65">adjustTxLevel</a> (float level)  throw (Error)</td></tr>
<tr class="separator:af6e4a58251e2fc3e9a5ec05cabe83d65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afefc996b2a9856ddb959d82a6ad2bca0"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#afefc996b2a9856ddb959d82a6ad2bca0">getRxLevel</a> () const  throw (Error)</td></tr>
<tr class="separator:afefc996b2a9856ddb959d82a6ad2bca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ad447d8342428fe0efd33d23c935afc"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a0ad447d8342428fe0efd33d23c935afc">getTxLevel</a> () const  throw (Error)</td></tr>
<tr class="separator:a0ad447d8342428fe0efd33d23c935afc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb8c3e0627bee0da72464ce2d22e0cf4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#adb8c3e0627bee0da72464ce2d22e0cf4">AudioMedia</a> ()</td></tr>
<tr class="separator:adb8c3e0627bee0da72464ce2d22e0cf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a312e47a9aef75e3ff4a5a18e46d3cd3b"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a312e47a9aef75e3ff4a5a18e46d3cd3b">~AudioMedia</a> ()</td></tr>
<tr class="separator:a312e47a9aef75e3ff4a5a18e46d3cd3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpj_1_1Media"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classpj_1_1Media')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classpj_1_1Media.htm">pj::Media</a></td></tr>
<tr class="memitem:adfd0fc9150679ad14cc1e8fde8635f6b inherit pub_methods_classpj_1_1Media"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Media.htm#adfd0fc9150679ad14cc1e8fde8635f6b">~Media</a> ()</td></tr>
<tr class="separator:adfd0fc9150679ad14cc1e8fde8635f6b inherit pub_methods_classpj_1_1Media"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cad0cc7f003cd48c818f6025d10d514 inherit pub_methods_classpj_1_1Media"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__TYPES.htm#ga90c297eda05c19355635cecb9e7d9323">pjmedia_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Media.htm#a0cad0cc7f003cd48c818f6025d10d514">getType</a> () const</td></tr>
<tr class="separator:a0cad0cc7f003cd48c818f6025d10d514 inherit pub_methods_classpj_1_1Media"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab1d32b450a9ec00326cb579ab6bbb2ab"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structpj_1_1ConfPortInfo.htm">ConfPortInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#ab1d32b450a9ec00326cb579ab6bbb2ab">getPortInfoFromId</a> (int port_id)  throw (Error)</td></tr>
<tr class="separator:ab1d32b450a9ec00326cb579ab6bbb2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affeeb7a43efcc3f2a84b1800a83bcee7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#affeeb7a43efcc3f2a84b1800a83bcee7">typecastFromMedia</a> (<a class="el" href="classpj_1_1Media.htm">Media</a> *media)</td></tr>
<tr class="separator:affeeb7a43efcc3f2a84b1800a83bcee7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a549cf4047c9c28ce1b3eb10b80aa9f1c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a549cf4047c9c28ce1b3eb10b80aa9f1c">registerMediaPort</a> (<a class="el" href="group__PJSUA2__MED.htm#gaae8a1276b7bf130aa2e1969f9ec1e150">MediaPort</a> port)  throw (Error)</td></tr>
<tr class="separator:a549cf4047c9c28ce1b3eb10b80aa9f1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea5af793a07d39bd17facaaa359c2a23"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#aea5af793a07d39bd17facaaa359c2a23">registerMediaPort2</a> (<a class="el" href="group__PJSUA2__MED.htm#gaae8a1276b7bf130aa2e1969f9ec1e150">MediaPort</a> port, <a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool)  throw (Error)</td></tr>
<tr class="separator:aea5af793a07d39bd17facaaa359c2a23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3abeee69b2c0bb298479806fe8cd7950"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a3abeee69b2c0bb298479806fe8cd7950">unregisterMediaPort</a> ()</td></tr>
<tr class="separator:a3abeee69b2c0bb298479806fe8cd7950"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpj_1_1Media"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classpj_1_1Media')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classpj_1_1Media.htm">pj::Media</a></td></tr>
<tr class="memitem:a3d3155407213b989382a4ffc031f336d inherit pro_methods_classpj_1_1Media"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Media.htm#a3d3155407213b989382a4ffc031f336d">Media</a> (<a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__TYPES.htm#ga90c297eda05c19355635cecb9e7d9323">pjmedia_type</a> med_type)</td></tr>
<tr class="separator:a3d3155407213b989382a4ffc031f336d inherit pro_methods_classpj_1_1Media"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a404619f68d02593a2dc6fc09100327fa"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudioMedia.htm#a404619f68d02593a2dc6fc09100327fa">id</a></td></tr>
<tr class="separator:a404619f68d02593a2dc6fc09100327fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >Audio <a class="el" href="classpj_1_1Media.htm">Media</a>. This is a lite wrapper class for audio conference bridge port, i.e: this class only maintains one data member, conference slot ID, and the methods are simply proxies for conference bridge operations.</p>
<p >Application can create a derived class and use <a class="el" href="classpj_1_1AudioMedia.htm#aea5af793a07d39bd17facaaa359c2a23">registerMediaPort2()</a>/ <a class="el" href="classpj_1_1AudioMedia.htm#a3abeee69b2c0bb298479806fe8cd7950">unregisterMediaPort()</a> to register/unregister a media port to/from the conference bridge.</p>
<p >The library will not keep a list of <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> instances, so any <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> (descendant) instances instantiated by application must be maintained and destroyed by the application itself.</p>
<p >Note that any PJSUA2 APIs that return <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> instance(s) such as <a class="el" href="classpj_1_1Endpoint.htm#ae075f2c4ec1641eeb58790ca05a4d388">Endpoint::mediaEnumPorts2()</a> or <a class="el" href="classpj_1_1Call.htm#a7d4a963c047173a0faa4869413fef3cd">Call::getAudioMedia()</a> will just return generated copy. All <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> methods should work normally on this generated copy instance. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="adb8c3e0627bee0da72464ce2d22e0cf4" name="adb8c3e0627bee0da72464ce2d22e0cf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb8c3e0627bee0da72464ce2d22e0cf4">&#9670;&nbsp;</a></span>AudioMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj::AudioMedia::AudioMedia </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Default Constructor.</p>
<p >Normally application will not create <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> object directly, but it instantiates an <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> derived class. This is set as public because some STL vector implementations require it. </p>

</div>
</div>
<a id="a312e47a9aef75e3ff4a5a18e46d3cd3b" name="a312e47a9aef75e3ff4a5a18e46d3cd3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a312e47a9aef75e3ff4a5a18e46d3cd3b">&#9670;&nbsp;</a></span>~AudioMedia()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual pj::AudioMedia::~AudioMedia </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Virtual Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aedefd069090192192a7fddff7e8a6112" name="aedefd069090192192a7fddff7e8a6112"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedefd069090192192a7fddff7e8a6112">&#9670;&nbsp;</a></span>getPortInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1ConfPortInfo.htm">ConfPortInfo</a> pj::AudioMedia::getPortInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get information about the specified conference port. </p>

</div>
</div>
<a id="acba08735cc7c5c88e8a13105499e4d4d" name="acba08735cc7c5c88e8a13105499e4d4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acba08735cc7c5c88e8a13105499e4d4d">&#9670;&nbsp;</a></span>getPortId()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::AudioMedia::getPortId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get port Id. </p>

</div>
</div>
<a id="ab1d32b450a9ec00326cb579ab6bbb2ab" name="ab1d32b450a9ec00326cb579ab6bbb2ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1d32b450a9ec00326cb579ab6bbb2ab">&#9670;&nbsp;</a></span>getPortInfoFromId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structpj_1_1ConfPortInfo.htm">ConfPortInfo</a> pj::AudioMedia::getPortInfoFromId </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>port_id</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Get information from specific port id. </p>

</div>
</div>
<a id="a7a26c7478a0dbe7d7e6719f04156954d" name="a7a26c7478a0dbe7d7e6719f04156954d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a26c7478a0dbe7d7e6719f04156954d">&#9670;&nbsp;</a></span>startTransmit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::startTransmit </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;&#160;</td>
          <td class="paramname"><em>sink</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Establish unidirectional media flow to sink. This media port will act as a source, and it may transmit to multiple destinations/sink. And if multiple sources are transmitting to the same sink, the media will be mixed together. Source and sink may refer to the same <a class="el" href="classpj_1_1Media.htm">Media</a>, effectively looping the media.</p>
<p >If bidirectional media flow is desired, application needs to call this method twice, with the second one called from the opposite source media.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sink</td><td>The destination <a class="el" href="classpj_1_1Media.htm">Media</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a00c9bd1391b275180128b6aabbce2d72" name="a00c9bd1391b275180128b6aabbce2d72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00c9bd1391b275180128b6aabbce2d72">&#9670;&nbsp;</a></span>startTransmit2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::startTransmit2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;&#160;</td>
          <td class="paramname"><em>sink</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1AudioMediaTransmitParam.htm">AudioMediaTransmitParam</a> &amp;&#160;</td>
          <td class="paramname"><em>param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Establish unidirectional media flow to sink. This media port will act as a source, and it may transmit to multiple destinations/sink. And if multiple sources are transmitting to the same sink, the media will be mixed together. Source and sink may refer to the same <a class="el" href="classpj_1_1Media.htm">Media</a>, effectively looping the media.</p>
<p >Signal level from this source to the sink can be adjusted by making it louder or quieter via the parameter param. The level adjustment will apply to a specific connection only (i.e. only for signal from this source to the sink), as compared to <a class="el" href="classpj_1_1AudioMedia.htm#af6e4a58251e2fc3e9a5ec05cabe83d65">adjustTxLevel()</a>/adjustRxLevel() which applies to all signals from/to this media port. The signal adjustment will be cumulative, in this following order: signal from this source will be adjusted with the level specified in <a class="el" href="classpj_1_1AudioMedia.htm#af6e4a58251e2fc3e9a5ec05cabe83d65">adjustTxLevel()</a>, then with the level specified via this API, and finally with the level specified to the sink's <a class="el" href="classpj_1_1AudioMedia.htm#acf541502614d847f117817cd12cbcdc4">adjustRxLevel()</a>.</p>
<p >If bidirectional media flow is desired, application needs to call this method twice, with the second one called from the opposite source media.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sink</td><td>The destination <a class="el" href="classpj_1_1Media.htm">Media</a>. </td></tr>
    <tr><td class="paramname">param</td><td>The parameter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a397acb2a61103af40c28504f1d8ea8cd" name="a397acb2a61103af40c28504f1d8ea8cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a397acb2a61103af40c28504f1d8ea8cd">&#9670;&nbsp;</a></span>stopTransmit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::stopTransmit </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;&#160;</td>
          <td class="paramname"><em>sink</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Stop media flow to destination/sink port.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sink</td><td>The destination media. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acf541502614d847f117817cd12cbcdc4" name="acf541502614d847f117817cd12cbcdc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf541502614d847f117817cd12cbcdc4">&#9670;&nbsp;</a></span>adjustRxLevel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::adjustRxLevel </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Adjust the signal level to be transmitted from the bridge to this media port by making it louder or quieter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">level</td><td>Signal level adjustment. Value 1.0 means no level adjustment, while value 0 means to mute the port. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af6e4a58251e2fc3e9a5ec05cabe83d65" name="af6e4a58251e2fc3e9a5ec05cabe83d65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6e4a58251e2fc3e9a5ec05cabe83d65">&#9670;&nbsp;</a></span>adjustTxLevel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::adjustTxLevel </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Adjust the signal level to be received from this media port (to the bridge) by making it louder or quieter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">level</td><td>Signal level adjustment. Value 1.0 means no level adjustment, while value 0 means to mute the port. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="afefc996b2a9856ddb959d82a6ad2bca0" name="afefc996b2a9856ddb959d82a6ad2bca0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afefc996b2a9856ddb959d82a6ad2bca0">&#9670;&nbsp;</a></span>getRxLevel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudioMedia::getRxLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the last received signal level.</p>
<dl class="section return"><dt>Returns</dt><dd>Signal level in percent. </dd></dl>

</div>
</div>
<a id="a0ad447d8342428fe0efd33d23c935afc" name="a0ad447d8342428fe0efd33d23c935afc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ad447d8342428fe0efd33d23c935afc">&#9670;&nbsp;</a></span>getTxLevel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudioMedia::getTxLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the last transmitted signal level.</p>
<dl class="section return"><dt>Returns</dt><dd>Signal level in percent. </dd></dl>

</div>
</div>
<a id="affeeb7a43efcc3f2a84b1800a83bcee7" name="affeeb7a43efcc3f2a84b1800a83bcee7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affeeb7a43efcc3f2a84b1800a83bcee7">&#9670;&nbsp;</a></span>typecastFromMedia()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> * pj::AudioMedia::typecastFromMedia </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpj_1_1Media.htm">Media</a> *&#160;</td>
          <td class="paramname"><em>media</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Warning: deprecated and will be removed in future release.</p>
<p >Typecast from base class <a class="el" href="classpj_1_1Media.htm">Media</a>. This is useful for application written in language that does not support downcasting such as Python.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">media</td><td>The object to be downcasted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The object as <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> instance </dd></dl>

</div>
</div>
<a id="a549cf4047c9c28ce1b3eb10b80aa9f1c" name="a549cf4047c9c28ce1b3eb10b80aa9f1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a549cf4047c9c28ce1b3eb10b80aa9f1c">&#9670;&nbsp;</a></span>registerMediaPort()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::registerMediaPort </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJSUA2__MED.htm#gaae8a1276b7bf130aa2e1969f9ec1e150">MediaPort</a>&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Warning: deprecated and will be removed in future release, use <a class="el" href="classpj_1_1AudioMedia.htm#aea5af793a07d39bd17facaaa359c2a23">registerMediaPort2()</a> instead.</p>
<p >This method needs to be called by descendants of this class to register the media port created to the conference bridge and <a class="el" href="classpj_1_1Endpoint.htm">Endpoint</a>'s media list.</p>
<p >param port The media port to be registered to the conference bridge. </p>

</div>
</div>
<a id="aea5af793a07d39bd17facaaa359c2a23" name="aea5af793a07d39bd17facaaa359c2a23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea5af793a07d39bd17facaaa359c2a23">&#9670;&nbsp;</a></span>registerMediaPort2()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::registerMediaPort2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJSUA2__MED.htm#gaae8a1276b7bf130aa2e1969f9ec1e150">MediaPort</a>&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >This method needs to be called by descendants of this class to register the media port created to the conference bridge and <a class="el" href="classpj_1_1Endpoint.htm">Endpoint</a>'s media list.</p>
<p >param port The media port to be registered to the conference bridge. param pool The memory pool. </p>

</div>
</div>
<a id="a3abeee69b2c0bb298479806fe8cd7950" name="a3abeee69b2c0bb298479806fe8cd7950"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3abeee69b2c0bb298479806fe8cd7950">&#9670;&nbsp;</a></span>unregisterMediaPort()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudioMedia::unregisterMediaPort </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >This method needs to be called by descendants of this class to remove the media port from the conference bridge and <a class="el" href="classpj_1_1Endpoint.htm">Endpoint</a>'s media list. Descendant should only call this method if it has registered the media with the previous call to <a class="el" href="classpj_1_1AudioMedia.htm#a549cf4047c9c28ce1b3eb10b80aa9f1c">registerMediaPort()</a>. </p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a404619f68d02593a2dc6fc09100327fa" name="a404619f68d02593a2dc6fc09100327fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a404619f68d02593a2dc6fc09100327fa">&#9670;&nbsp;</a></span>id</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int pj::AudioMedia::id</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Conference port Id. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="media_8hpp.htm">media.hpp</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
