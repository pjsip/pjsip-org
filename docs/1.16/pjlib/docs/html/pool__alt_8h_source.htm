<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: pool_alt.h Source File (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>pool_alt.h</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: pool_alt.h 3553 2011-05-05 06:14:19Z nanang $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef __PJ_POOL_ALT_H__</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define __PJ_POOL_ALT_H__</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#define __PJ_POOL_H__</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="keyword">typedef</span> <span class="keywordtype">void</span> <a class="code" href="group__PJ__POOL.htm#gabffd362d92627d62c4498b7efe0ae62a">pj_pool_callback</a>(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size);
<a name="l00033"></a>00033 
<a name="l00034"></a><a class="code" href="structpj__pool__mem.htm">00034</a> <span class="keyword">struct </span><a class="code" href="structpj__pool__mem.htm">pj_pool_mem</a>
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036     <span class="keyword">struct </span><a class="code" href="structpj__pool__mem.htm">pj_pool_mem</a> *next;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038     <span class="comment">/* data follows immediately */</span>
<a name="l00039"></a>00039 };
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">struct </span><a class="code" href="structpj__pool__t.htm">pj_pool_t</a>
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044     <span class="keyword">struct </span><a class="code" href="structpj__pool__mem.htm">pj_pool_mem</a> *first_mem;
<a name="l00045"></a>00045     <a class="code" href="structpj__pool__factory.htm">pj_pool_factory</a>    *<a class="code" href="structpj__pool__t.htm#a0bb68a11ead13d8a58808fa2ae9ba382">factory</a>;
<a name="l00046"></a>00046     <span class="keywordtype">char</span>                <a class="code" href="structpj__pool__t.htm#a866a364102fe051f54703ef50f1c41e7">obj_name</a>[32];
<a name="l00047"></a>00047     <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>           used_size;
<a name="l00048"></a>00048     <a class="code" href="group__PJ__POOL.htm#gabffd362d92627d62c4498b7efe0ae62a">pj_pool_callback</a>   *cb;
<a name="l00049"></a>00049 };
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="preprocessor">#define PJ_POOL_SIZE            (sizeof(struct pj_pool_t))</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00058"></a>00058 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="group__PJ__POOL__FACTORY.htm#ga1e63ea214df265fa5f145e2837552a45">PJ_NO_MEMORY_EXCEPTION</a>;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">/*</span>
<a name="l00063"></a>00063 <span class="comment"> * Declare all pool API as macro that calls the implementation</span>
<a name="l00064"></a>00064 <span class="comment"> * function.</span>
<a name="l00065"></a>00065 <span class="comment"> */</span>
<a name="l00066"></a>00066 <span class="preprocessor">#define pj_pool_create(fc,nm,init,inc,cb)   \</span>
<a name="l00067"></a>00067 <span class="preprocessor">        pj_pool_create_imp(__FILE__, __LINE__, fc, nm, init, inc, cb)</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>
<a name="l00069"></a>00069 <span class="preprocessor">#define pj_pool_release(pool)               pj_pool_release_imp(pool)</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#define pj_pool_getobjname(pool)            pj_pool_getobjname_imp(pool)</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define pj_pool_reset(pool)                 pj_pool_reset_imp(pool)</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#define pj_pool_get_capacity(pool)          pj_pool_get_capacity_imp(pool)</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#define pj_pool_get_used_size(pool)         pj_pool_get_used_size_imp(pool)</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor">#define pj_pool_alloc(pool,sz)              \</span>
<a name="l00075"></a>00075 <span class="preprocessor">        pj_pool_alloc_imp(__FILE__, __LINE__, pool, sz)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span>
<a name="l00077"></a>00077 <span class="preprocessor">#define pj_pool_calloc(pool,cnt,elem)       \</span>
<a name="l00078"></a>00078 <span class="preprocessor">        pj_pool_calloc_imp(__FILE__, __LINE__, pool, cnt, elem)</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a>00080 <span class="preprocessor">#define pj_pool_zalloc(pool,sz)             \</span>
<a name="l00081"></a>00081 <span class="preprocessor">        pj_pool_zalloc_imp(__FILE__, __LINE__, pool, sz)</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="comment">/*</span>
<a name="l00086"></a>00086 <span class="comment"> * Declare prototypes for pool implementation API.</span>
<a name="l00087"></a>00087 <span class="comment"> */</span>
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">/* Create pool */</span>
<a name="l00090"></a>00090 PJ_DECL(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a>*) pj_pool_create_imp(const <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line,
<a name="l00091"></a>00091                                        <span class="keywordtype">void</span> *factory,
<a name="l00092"></a>00092                                        const <span class="keywordtype">char</span> *name,
<a name="l00093"></a>00093                                        <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> initial_size,
<a name="l00094"></a>00094                                        <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> increment_size,
<a name="l00095"></a>00095                                        <a class="code" href="group__PJ__POOL.htm#gabffd362d92627d62c4498b7efe0ae62a">pj_pool_callback</a> *callback);
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/* Release pool */</span>
<a name="l00098"></a>00098 PJ_DECL(<span class="keywordtype">void</span>) pj_pool_release_imp(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool);
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="comment">/* Get pool name */</span>
<a name="l00101"></a>00101 PJ_DECL(const <span class="keywordtype">char</span>*) pj_pool_getobjname_imp(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool);
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">/* Reset pool */</span>
<a name="l00104"></a>00104 PJ_DECL(<span class="keywordtype">void</span>) pj_pool_reset_imp(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool);
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">/* Get capacity */</span>
<a name="l00107"></a>00107 PJ_DECL(<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>) pj_pool_get_capacity_imp(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="comment">/* Get total used size */</span>
<a name="l00110"></a>00110 PJ_DECL(<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>) pj_pool_get_used_size_imp(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="comment">/* Allocate memory from the pool */</span>
<a name="l00113"></a>00113 PJ_DECL(<span class="keywordtype">void</span>*) pj_pool_alloc_imp(const <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, 
<a name="l00114"></a>00114                                  <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> sz);
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 <span class="comment">/* Allocate memory from the pool and zero the memory */</span>
<a name="l00117"></a>00117 PJ_DECL(<span class="keywordtype">void</span>*) pj_pool_calloc_imp(const <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, 
<a name="l00118"></a>00118                                   <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <span class="keywordtype">unsigned</span> cnt, 
<a name="l00119"></a>00119                                   <span class="keywordtype">unsigned</span> elemsz);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="comment">/* Allocate memory from the pool and zero the memory */</span>
<a name="l00122"></a>00122 PJ_DECL(<span class="keywordtype">void</span>*) pj_pool_zalloc_imp(const <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, 
<a name="l00123"></a>00123                                   <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> sz);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="preprocessor">#define PJ_POOL_ZALLOC_T(pool,type) \</span>
<a name="l00127"></a>00127 <span class="preprocessor">            ((type*)pj_pool_zalloc(pool, sizeof(type)))</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="preprocessor">#define PJ_POOL_ALLOC_T(pool,type) \</span>
<a name="l00129"></a>00129 <span class="preprocessor">            ((type*)pj_pool_alloc(pool, sizeof(type)))</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span><span class="preprocessor">#ifndef PJ_POOL_ALIGNMENT</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span><span class="preprocessor">#   define PJ_POOL_ALIGNMENT    4</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span>
<a name="l00137"></a>00137 <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structpj__pool__factory__policy.htm">pj_pool_factory_policy</a>
<a name="l00138"></a>00138 {
<a name="l00148"></a>00148     <span class="keywordtype">void</span>* (*block_alloc)(<a class="code" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size);
<a name="l00149"></a>00149 
<a name="l00157"></a>00157     void (*<a class="code" href="structpj__pool__factory__policy.htm#a5d5d9564d71bf75b9d33d4a08534cb9d">block_free</a>)(<a class="code" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <span class="keywordtype">void</span> *mem, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size);
<a name="l00158"></a>00158 
<a name="l00162"></a>00162     <a class="code" href="group__PJ__POOL.htm#gabffd362d92627d62c4498b7efe0ae62a">pj_pool_callback</a> *callback;
<a name="l00163"></a>00163 
<a name="l00167"></a>00167     <span class="keywordtype">unsigned</span> <a class="code" href="structpj__pool__factory__policy.htm#a6f1c48a73e2db012717ace46581cd999">flags</a>;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 } <a class="code" href="structpj__pool__factory__policy.htm">pj_pool_factory_policy</a>;
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="keyword">struct </span><a class="code" href="structpj__pool__factory.htm">pj_pool_factory</a>
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173     <a class="code" href="structpj__pool__factory__policy.htm">pj_pool_factory_policy</a> <a class="code" href="structpj__pool__factory.htm#a767d5e5bd2bf77fa6d10ef79b34e8e29">policy</a>;
<a name="l00174"></a>00174     <span class="keywordtype">int</span> dummy;
<a name="l00175"></a>00175 };
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="keyword">struct </span><a class="code" href="structpj__caching__pool.htm">pj_caching_pool</a> 
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179     <a class="code" href="structpj__pool__factory.htm">pj_pool_factory</a> factory;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="comment">/* just to make it compilable */</span>
<a name="l00182"></a>00182     <span class="keywordtype">unsigned</span> <a class="code" href="structpj__caching__pool.htm#af478fd77c170b604c87337adca02607a">used_count</a>;
<a name="l00183"></a>00183     <span class="keywordtype">unsigned</span> <a class="code" href="structpj__caching__pool.htm#a765d23af5664d99404ead10f295c0b74">used_size</a>;
<a name="l00184"></a>00184     <span class="keywordtype">unsigned</span> <a class="code" href="structpj__caching__pool.htm#a35969ade75058f069f8f89a9365083ed">peak_used_size</a>;
<a name="l00185"></a>00185 };
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 <span class="comment">/* just to make it compilable */</span>
<a name="l00188"></a>00188 <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structpj__pool__block.htm">pj_pool_block</a>
<a name="l00189"></a>00189 {
<a name="l00190"></a>00190     <span class="keywordtype">int</span> dummy;
<a name="l00191"></a>00191 } <a class="code" href="structpj__pool__block.htm">pj_pool_block</a>;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 <span class="preprocessor">#define pj_caching_pool_init( cp, pol, mac)</span>
<a name="l00194"></a>00194 <span class="preprocessor"></span><span class="preprocessor">#define pj_caching_pool_destroy(cp)</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span><span class="preprocessor">#define pj_pool_factory_dump(pf, detail)</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>
<a name="l00197"></a>00197 <span class="preprocessor">#endif  </span><span class="comment">/* __PJ_POOL_ALT_H__ */</span>
<a name="l00198"></a>00198 
</pre></div></div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
