<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: I/O Queue (UDP) (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: I/O Queue (UDP) </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation to test the functionality of the I/O queue when UDP socket is used.</p>
<p>This file is <b>pjlib-test/ioq_udp.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: ioq_udp.c 4387 2013-02-27 10:16:08Z ming $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>


<span class="preprocessor">#if INCLUDE_UDP_IOQUEUE_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>

<span class="preprocessor">#include &lt;pj/compat/socket.h&gt;</span>

<span class="preprocessor">#define THIS_FILE           &quot;test_udp&quot;</span>
<span class="preprocessor"></span><span class="preprocessor">#define PORT                51233</span>
<span class="preprocessor"></span><span class="preprocessor">#define LOOP                2</span>
<span class="preprocessor"></span>
<span class="preprocessor">#define BUF_MIN_SIZE        32</span>
<span class="preprocessor"></span><span class="preprocessor">#define BUF_MAX_SIZE        2048</span>
<span class="preprocessor"></span><span class="preprocessor">#define SOCK_INACTIVE_MIN   (1)</span>
<span class="preprocessor"></span><span class="preprocessor">#define SOCK_INACTIVE_MAX   (PJ_IOQUEUE_MAX_HANDLES - 2)</span>
<span class="preprocessor"></span><span class="preprocessor">#define POOL_SIZE           (2*BUF_MAX_SIZE + SOCK_INACTIVE_MAX*128 + 2048)</span>
<span class="preprocessor"></span>
<span class="preprocessor">#undef TRACE_</span>
<span class="preprocessor"></span><span class="preprocessor">#define TRACE_(msg)         PJ_LOG(3,(THIS_FILE,&quot;.....&quot; msg))</span>
<span class="preprocessor"></span>
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span><span class="preprocessor">#  define TRACE__(args)     PJ_LOG(3,args)</span>
<span class="preprocessor"></span><span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="preprocessor">#  define TRACE__(args)</span>
<span class="preprocessor"></span><span class="preprocessor">#endif</span>
<span class="preprocessor"></span>

<span class="keyword">static</span> <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>            callback_read_size,
                             callback_write_size,
                             callback_accept_status,
                             callback_connect_status;
<span class="keyword">static</span> <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>     *callback_read_key,
                            *callback_write_key,
                            *callback_accept_key,
                            *callback_connect_key;
<span class="keyword">static</span> <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>  *callback_read_op,
                            *callback_write_op,
                            *callback_accept_op;

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_read(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, 
                            <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,
                            <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)
{
    callback_read_key = key;
    callback_read_op = op_key;
    callback_read_size = bytes_read;
    TRACE__((THIS_FILE, <span class="stringliteral">&quot;     callback_read_key = %p, bytes=%d&quot;</span>, 
             key, bytes_read));
}

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_write(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, 
                             <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,
                             <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_written)
{
    callback_write_key = key;
    callback_write_op = op_key;
    callback_write_size = bytes_written;
}

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_accept(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, 
                              <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,
                              <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock, <span class="keywordtype">int</span> status)
{
    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(sock);
    callback_accept_key = key;
    callback_accept_op = op_key;
    callback_accept_status = status;
}

<span class="keyword">static</span> <span class="keywordtype">void</span> on_ioqueue_connect(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, <span class="keywordtype">int</span> status)
{
    callback_connect_key = key;
    callback_connect_status = status;
}

<span class="keyword">static</span> <a class="code" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> test_cb = 
{
    &amp;on_ioqueue_read,
    &amp;on_ioqueue_write,
    &amp;on_ioqueue_accept,
    &amp;on_ioqueue_connect,
};

<span class="preprocessor">#ifdef PJ_WIN32</span>
<span class="preprocessor"></span><span class="preprocessor">#  define S_ADDR S_un.S_addr</span>
<span class="preprocessor"></span><span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="preprocessor">#  define S_ADDR s_addr</span>
<span class="preprocessor"></span><span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
<span class="comment">/*</span>
<span class="comment"> * compliance_test()</span>
<span class="comment"> * To test that the basic IOQueue functionality works. It will just exchange</span>
<span class="comment"> * data between two sockets.</span>
<span class="comment"> */</span> 
<span class="keyword">static</span> <span class="keywordtype">int</span> compliance_test(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock=-1, csock=-1;
    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr, dst_addr;
    <span class="keywordtype">int</span> addrlen;
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;
    <span class="keywordtype">char</span> *send_buf, *recv_buf;
    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;
    <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey = NULL, *ckey = NULL;
    <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> read_op, write_op;
    <span class="keywordtype">int</span> bufsize = BUF_MIN_SIZE;
    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes, status = -1;
    <a class="code" href="structpj__str__t.htm">pj_str_t</a> temp;
    <a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> send_pending, recv_pending;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    <a class="code" href="group__pj__errno.htm#ga902af234ceebf60443561fb2dd26649e">pj_set_os_error</a>(<a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>);

    <span class="comment">// Create pool.</span>
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);

    <span class="comment">// Allocate buffers for send and receive.</span>
    send_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);
    recv_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);

    <span class="comment">// Allocate sockets for sending and receiving.</span>
    TRACE_(<span class="stringliteral">&quot;creating sockets...&quot;</span>);
    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;ssock);
    <span class="keywordflow">if</span> (rc==<a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>)
        rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;csock);
    <span class="keywordflow">else</span>
        csock = PJ_INVALID_SOCKET;
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR in pj_sock_socket()&quot;</span>, rc);
        status=-1; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Bind server socket.</span>
    TRACE_(<span class="stringliteral">&quot;bind socket...&quot;</span>);
    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));
    addr.<a class="code" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();
    addr.<a class="code" href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="code" href="group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>(PORT);
    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(ssock, &amp;addr, <span class="keyword">sizeof</span>(addr))) {
        status=-10; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Create I/O Queue.</span>
    TRACE_(<span class="stringliteral">&quot;create ioqueue...&quot;</span>);
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, <a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, &amp;ioque);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        status=-20; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Set concurrency</span>
    TRACE_(<span class="stringliteral">&quot;set concurrency...&quot;</span>);
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioque, allow_concur);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        status=-21; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Register server and client socket.</span>
    <span class="comment">// We put this after inactivity socket, hopefully this can represent the</span>
    <span class="comment">// worst waiting time.</span>
    TRACE_(<span class="stringliteral">&quot;registering first sockets...&quot;</span>);
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, ssock, NULL, 
                                  &amp;test_cb, &amp;skey);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error(10): ioqueue_register error&quot;</span>, rc);
        status=-25; <span class="keywordflow">goto</span> on_error;
    }
    TRACE_(<span class="stringliteral">&quot;registering second sockets...&quot;</span>);
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>( pool, ioque, csock, NULL, 
                                   &amp;test_cb, &amp;ckey);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error(11): ioqueue_register error&quot;</span>, rc);
        status=-26; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Randomize send_buf.</span>
    <a class="code" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a>(send_buf, bufsize);

    <span class="comment">// Register reading from ioqueue.</span>
    TRACE_(<span class="stringliteral">&quot;start recvfrom...&quot;</span>);
    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));
    addrlen = <span class="keyword">sizeof</span>(addr);
    bytes = bufsize;
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom</a>(skey, &amp;read_op, recv_buf, &amp;bytes, 0,
                             &amp;addr, &amp;addrlen);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_recvfrom&quot;</span>, rc);
        status=-28; <span class="keywordflow">goto</span> on_error;
    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc == <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        recv_pending = 1;
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, 
                   <span class="stringliteral">&quot;......ok: recvfrom returned pending&quot;</span>));
    } <span class="keywordflow">else</span> {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, 
                   <span class="stringliteral">&quot;......error: recvfrom returned immediate ok!&quot;</span>));
        status=-29; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Set destination address to send the packet.</span>
    TRACE_(<span class="stringliteral">&quot;set destination address...&quot;</span>);
    temp = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;127.0.0.1&quot;</span>);
    <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;dst_addr, &amp;temp, PORT)) != 0) {
        app_perror(<span class="stringliteral">&quot;...error: unable to resolve 127.0.0.1&quot;</span>, rc);
        status=-290; <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Write must return the number of bytes.</span>
    TRACE_(<span class="stringliteral">&quot;start sendto...&quot;</span>);
    bytes = bufsize;
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gad9eaa7c7b2668255d6ee1a0bf3afb007">pj_ioqueue_sendto</a>(ckey, &amp;write_op, send_buf, &amp;bytes, 0, &amp;dst_addr, 
                           <span class="keyword">sizeof</span>(dst_addr));
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_sendto&quot;</span>, rc);
        status=-30; <span class="keywordflow">goto</span> on_error;
    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc == <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        send_pending = 1;
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, 
                   <span class="stringliteral">&quot;......ok: sendto returned pending&quot;</span>));
    } <span class="keywordflow">else</span> {
        send_pending = 0;
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, 
                   <span class="stringliteral">&quot;......ok: sendto returned immediate success&quot;</span>));
    }

    <span class="comment">// reset callback variables.</span>
    callback_read_size = callback_write_size = 0;
    callback_accept_status = callback_connect_status = -2;
    callback_read_key = callback_write_key = 
        callback_accept_key = callback_connect_key = NULL;
    callback_read_op = callback_write_op = NULL;

    <span class="comment">// Poll if pending.</span>
    <span class="keywordflow">while</span> (send_pending || recv_pending) {
        <span class="keywordtype">int</span> rc;
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = { 5, 0 };

        TRACE_(<span class="stringliteral">&quot;poll...&quot;</span>);
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>        rc = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
        <span class="keywordflow">if</span> (rc == 0) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: timed out...&quot;</span>));
            status=-45; <span class="keywordflow">goto</span> on_error;
        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc &lt; 0) {
            app_perror(<span class="stringliteral">&quot;...ERROR in ioqueue_poll()&quot;</span>, -rc);
            status=-50; <span class="keywordflow">goto</span> on_error;
        }

        <span class="keywordflow">if</span> (callback_read_key != NULL) {
            <span class="keywordflow">if</span> (callback_read_size != bufsize) {
                status=-61; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (callback_read_key != skey) {
                status=-65; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (callback_read_op != &amp;read_op) {
                status=-66; <span class="keywordflow">goto</span> on_error;
            }

            <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(send_buf, recv_buf, bufsize) != 0) {
                status=-67; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (addrlen != <span class="keyword">sizeof</span>(<a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a>)) {
                status=-68; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (addr.<a class="code" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> != <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>()) {
                status=-69; <span class="keywordflow">goto</span> on_error;
            }


            recv_pending = 0;
        } 

        <span class="keywordflow">if</span> (callback_write_key != NULL) {
            <span class="keywordflow">if</span> (callback_write_size != bufsize) {
                status=-73; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (callback_write_key != ckey) {
                status=-75; <span class="keywordflow">goto</span> on_error;
            }
            <span class="keywordflow">if</span> (callback_write_op != &amp;write_op) {
                status=-76; <span class="keywordflow">goto</span> on_error;
            }

            send_pending = 0;
        }
    } 
    
    <span class="comment">// Success</span>
    status = 0;

on_error:
    <span class="keywordflow">if</span> (skey)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(skey);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ssock != -1)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);
    
    <span class="keywordflow">if</span> (ckey)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (csock != -1)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock);
    
    <span class="keywordflow">if</span> (ioque != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> status;

}


<span class="keyword">static</span> <span class="keywordtype">void</span> on_read_complete(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, 
                             <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key, 
                             <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)
{
    <span class="keywordtype">unsigned</span> *p_packet_cnt = (<span class="keywordtype">unsigned</span>*) <a class="code" href="group__PJ__IOQUEUE.htm#ga238dc908101226262f8ba91393e12efc">pj_ioqueue_get_user_data</a>(key);

    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(op_key);
    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(bytes_read);

    (*p_packet_cnt)++;
}

<span class="comment">/*</span>
<span class="comment"> * unregister_test()</span>
<span class="comment"> * Check if callback is still called after socket has been unregistered or </span>
<span class="comment"> * closed.</span>
<span class="comment"> */</span> 
<span class="keyword">static</span> <span class="keywordtype">int</span> unregister_test(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
    <span class="keyword">enum</span> { RPORT = 50000, SPORT = 50001 };
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue;
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock;
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> rsock;
    <span class="keywordtype">int</span> addrlen;
    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;
    <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key;
    <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> opkey;
    <a class="code" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> cb;
    <span class="keywordtype">unsigned</span> packet_cnt;
    <span class="keywordtype">char</span> sendbuf[10], recvbuf[10];
    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;
    <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;

    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, <span class="stringliteral">&quot;test&quot;</span>, 4000, 4000, NULL);
    <span class="keywordflow">if</span> (!pool) {
        app_perror(<span class="stringliteral">&quot;Unable to create pool&quot;</span>, <a class="code" href="group__pj__errnum.htm#ga9a16214b8d54a8ee9d6bce378d116beb">PJ_ENOMEM</a>);
        <span class="keywordflow">return</span> -100;
    }

    status = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, 16, &amp;ioqueue);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;Error creating ioqueue&quot;</span>, status);
        <span class="keywordflow">return</span> -110;
    }

    <span class="comment">// Set concurrency</span>
    TRACE_(<span class="stringliteral">&quot;set concurrency...&quot;</span>);
    status = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioqueue, allow_concur);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        <span class="keywordflow">return</span> -112;
    }

    <span class="comment">/* Create sender socket */</span>
    status = app_socket(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, SPORT, &amp;ssock);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;Error initializing socket&quot;</span>, status);
        <span class="keywordflow">return</span> -120;
    }

    <span class="comment">/* Create receiver socket. */</span>
    status = app_socket(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, RPORT, &amp;rsock);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;Error initializing socket&quot;</span>, status);
        <span class="keywordflow">return</span> -130;
    }

    <span class="comment">/* Register rsock to ioqueue. */</span>
    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;cb, <span class="keyword">sizeof</span>(cb));
    cb.<a class="code" href="structpj__ioqueue__callback.htm#aef60532d102c3174555e61127cf9ec1b">on_read_complete</a> = &amp;on_read_complete;
    packet_cnt = 0;
    status = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, rsock, &amp;packet_cnt,
                                      &amp;cb, &amp;key);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;Error registering to ioqueue&quot;</span>, status);
        <span class="keywordflow">return</span> -140;
    }

    <span class="comment">/* Init operation key. */</span>
    <a class="code" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;opkey, <span class="keyword">sizeof</span>(opkey));

    <span class="comment">/* Start reading. */</span>
    bytes = <span class="keyword">sizeof</span>(recvbuf);
    status = <a class="code" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>( key, &amp;opkey, recvbuf, &amp;bytes, 0);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        app_perror(<span class="stringliteral">&quot;Expecting PJ_EPENDING, but got this&quot;</span>, status);
        <span class="keywordflow">return</span> -150;
    }

    <span class="comment">/* Init destination address. */</span>
    addrlen = <span class="keyword">sizeof</span>(addr);
    status = <a class="code" href="group__PJ__SOCK.htm#gad483f4c00174b4b2eef7e66b96804b1c">pj_sock_getsockname</a>(rsock, &amp;addr, &amp;addrlen);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;getsockname error&quot;</span>, status);
        <span class="keywordflow">return</span> -160;
    }

    <span class="comment">/* Override address with 127.0.0.1, since getsockname will return</span>
<span class="comment">     * zero in the address field.</span>
<span class="comment">     */</span>
    addr.<a class="code" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a> = <a class="code" href="group__PJ__SOCK.htm#ga323567f1eb0a1cd7b4a832706309358a">pj_inet_addr2</a>(<span class="stringliteral">&quot;127.0.0.1&quot;</span>);

    <span class="comment">/* Init buffer to send */</span>
    pj_ansi_strcpy(sendbuf, <span class="stringliteral">&quot;Hello0123&quot;</span>);

    <span class="comment">/* Send one packet. */</span>
    bytes = <span class="keyword">sizeof</span>(sendbuf);
    status = <a class="code" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a>(ssock, sendbuf, &amp;bytes, 0,
                            &amp;addr, <span class="keyword">sizeof</span>(addr));

    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;sendto error&quot;</span>, status);
        <span class="keywordflow">return</span> -170;
    }

    <span class="comment">/* Check if packet is received. */</span>
    timeout.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 1; timeout.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>    <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 1000);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>    <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioqueue, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
    <span class="keywordflow">if</span> (packet_cnt != 1) {
        <span class="keywordflow">return</span> -180;
    }

    <span class="comment">/* Just to make sure things are settled.. */</span>
    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(100);

    <span class="comment">/* Start reading again. */</span>
    bytes = <span class="keyword">sizeof</span>(recvbuf);
    status = <a class="code" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>( key, &amp;opkey, recvbuf, &amp;bytes, 0);
    <span class="keywordflow">if</span> (status != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
        app_perror(<span class="stringliteral">&quot;Expecting PJ_EPENDING, but got this&quot;</span>, status);
        <span class="keywordflow">return</span> -190;
    }

    <span class="comment">/* Reset packet counter */</span>
    packet_cnt = 0;

    <span class="comment">/* Send one packet. */</span>
    bytes = <span class="keyword">sizeof</span>(sendbuf);
    status = <a class="code" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a>(ssock, sendbuf, &amp;bytes, 0,
                            &amp;addr, <span class="keyword">sizeof</span>(addr));

    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;sendto error&quot;</span>, status);
        <span class="keywordflow">return</span> -200;
    }

    <span class="comment">/* Now unregister and close socket. */</span>
    <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(key);

    <span class="comment">/* Poll ioqueue. */</span>
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>    <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 1000);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>    timeout.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 1; timeout.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
    <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioqueue, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
    <span class="comment">/* Must NOT receive any packets after socket is closed! */</span>
    <span class="keywordflow">if</span> (packet_cnt &gt; 0) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....errror: not expecting to receive packet &quot;</span>
                             <span class="stringliteral">&quot;after socket has been closed&quot;</span>));
        <span class="keywordflow">return</span> -210;
    }

    <span class="comment">/* Success */</span>
    <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);
    <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioqueue);

    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);

    <span class="keywordflow">return</span> 0;
}


<span class="comment">/*</span>
<span class="comment"> * Testing with many handles.</span>
<span class="comment"> * This will just test registering PJ_IOQUEUE_MAX_HANDLES count</span>
<span class="comment"> * of sockets to the ioqueue.</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> many_handles_test(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
    <span class="keyword">enum</span> { MAX = <a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a> };
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue;
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> *sock;
    <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> **key;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;
    <span class="keywordtype">int</span> count, i; <span class="comment">/* must be signed */</span>

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,<span class="stringliteral">&quot;...testing with so many handles&quot;</span>));

    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, 4000, 4000, NULL);
    <span class="keywordflow">if</span> (!pool)
        <span class="keywordflow">return</span> PJ_ENOMEM;

    key = (<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>**) 
          <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, MAX*<span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>*));
    sock = (<a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, MAX*<span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>));
    
    <span class="comment">/* Create IOQueue */</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, MAX, &amp;ioqueue);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> || ioqueue == NULL) {
        app_perror(<span class="stringliteral">&quot;...error in pj_ioqueue_create&quot;</span>, rc);
        <span class="keywordflow">return</span> -10;
    }

    <span class="comment">// Set concurrency</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioqueue, allow_concur);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        <span class="keywordflow">return</span> -11;
    }

    <span class="comment">/* Register as many sockets. */</span>
    <span class="keywordflow">for</span> (count=0; count&lt;MAX; ++count) {
        sock[count] = PJ_INVALID_SOCKET;
        rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;sock[count]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> || sock[count] == <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....unable to create %d-th socket, rc=%d&quot;</span>, 
                                 count, rc));
            <span class="keywordflow">break</span>;
        }
        key[count] = NULL;
        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, sock[count],
                                      NULL, &amp;test_cb, &amp;key[count]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> || key[count] == NULL) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....unable to register %d-th socket, rc=%d&quot;</span>, 
                                 count, rc));
            <span class="keywordflow">return</span> -30;
        }
    }

    <span class="comment">/* Test complete. */</span>

    <span class="comment">/* Now deregister and close all handles. */</span> 

    <span class="comment">/* NOTE for RTEMS:</span>
<span class="comment">     *  It seems that the order of close(sock) is pretty important here.</span>
<span class="comment">     *  If we close the sockets with the same order as when they were created,</span>
<span class="comment">     *  RTEMS doesn&#39;t seem to reuse the sockets, thus next socket created</span>
<span class="comment">     *  will have descriptor higher than the last socket created.</span>
<span class="comment">     *  If we close the sockets in the reverse order, then the descriptor will</span>
<span class="comment">     *  get reused.</span>
<span class="comment">     *  This used to cause problem with select ioqueue, since the ioqueue</span>
<span class="comment">     *  always gives FD_SETSIZE for the first select() argument. This ioqueue</span>
<span class="comment">     *  behavior can be changed with setting PJ_SELECT_NEEDS_NFDS macro.</span>
<span class="comment">     */</span>
    <span class="keywordflow">for</span> (i=count-1; i&gt;=0; --i) {
        rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(key[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error in pj_ioqueue_unregister&quot;</span>, rc);
        }
    }

    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioqueue);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error in pj_ioqueue_destroy&quot;</span>, rc);
    }
    
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,<span class="stringliteral">&quot;....many_handles_test() ok&quot;</span>));

    <span class="keywordflow">return</span> 0;
}

<span class="comment">/*</span>
<span class="comment"> * Multi-operation test.</span>
<span class="comment"> */</span>

<span class="comment">/*</span>
<span class="comment"> * Benchmarking IOQueue</span>
<span class="comment"> */</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> bench_test(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur, <span class="keywordtype">int</span> bufsize, 
                      <span class="keywordtype">int</span> inactive_sock_count)
{
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ssock=-1, csock=-1;
    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;
    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> *inactive_sock=NULL;
    <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *inactive_read_op;
    <span class="keywordtype">char</span> *send_buf, *recv_buf;
    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioque = NULL;
    <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *skey, *ckey, *keys[SOCK_INACTIVE_MAX+2];
    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t1, t2, t_elapsed;
    <span class="keywordtype">int</span> rc=0, i;    <span class="comment">/* i must be signed */</span>
    <a class="code" href="structpj__str__t.htm">pj_str_t</a> temp;
    <span class="keywordtype">char</span> errbuf[PJ_ERR_MSG_SIZE];

    TRACE__((THIS_FILE, <span class="stringliteral">&quot;   bench test %d&quot;</span>, inactive_sock_count));

    <span class="comment">// Create pool.</span>
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, POOL_SIZE, 4000, NULL);

    <span class="comment">// Allocate buffers for send and receive.</span>
    send_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);
    recv_buf = (<span class="keywordtype">char</span>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, bufsize);

    <span class="comment">// Allocate sockets for sending and receiving.</span>
    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;ssock);
    <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;csock);
    } <span class="keywordflow">else</span>
        csock = PJ_INVALID_SOCKET;
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error: pj_sock_socket()&quot;</span>, rc);
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Bind server socket.</span>
    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));
    addr.<a class="code" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();
    addr.<a class="code" href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="code" href="group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>(PORT);
    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(ssock, &amp;addr, <span class="keyword">sizeof</span>(addr)))
        <span class="keywordflow">goto</span> on_error;

    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(inactive_sock_count+2 &lt;= <a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>);

    <span class="comment">// Create I/O Queue.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, <a class="code" href="group__pj__config.htm#ga0b0fdd6e70bdbe412c1a3337ce3ff5ee">PJ_IOQUEUE_MAX_HANDLES</a>, &amp;ioque);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_create()&quot;</span>, rc);
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Set concurrency</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioque, allow_concur);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_set_default_concurrency()&quot;</span>, rc);
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Allocate inactive sockets, and bind them to some arbitrary address.</span>
    <span class="comment">// Then register them to the I/O queue, and start a read operation.</span>
    inactive_sock = (<a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 
                                    inactive_sock_count*<span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>));
    inactive_read_op = (<a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>*)<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool,
                              inactive_sock_count*<span class="keyword">sizeof</span>(<a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>));
    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));
    addr.<a class="code" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();
    <span class="keywordflow">for</span> (i=0; i&lt;inactive_sock_count; ++i) {
        <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;

        rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;inactive_sock[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> || inactive_sock[i] &lt; 0) {
            app_perror(<span class="stringliteral">&quot;...error: pj_sock_socket()&quot;</span>, rc);
            <span class="keywordflow">goto</span> on_error;
        }
        <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(inactive_sock[i], &amp;addr, <span class="keyword">sizeof</span>(addr))) != 0) {
            <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);
            inactive_sock[i] = PJ_INVALID_SOCKET;
            app_perror(<span class="stringliteral">&quot;...error: pj_sock_bind()&quot;</span>, rc);
            <span class="keywordflow">goto</span> on_error;
        }
        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, inactive_sock[i], 
                                      NULL, &amp;test_cb, &amp;keys[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);
            inactive_sock[i] = PJ_INVALID_SOCKET;
            app_perror(<span class="stringliteral">&quot;...error(1): pj_ioqueue_register_sock()&quot;</span>, rc);
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....i=%d&quot;</span>, i));
            <span class="keywordflow">goto</span> on_error;
        }
        bytes = bufsize;
        rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(keys[i], &amp;inactive_read_op[i], recv_buf, &amp;bytes, 0);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
            <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);
            inactive_sock[i] = PJ_INVALID_SOCKET;
            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_read()&quot;</span>, rc);
            <span class="keywordflow">goto</span> on_error;
        }
    }

    <span class="comment">// Register server and client socket.</span>
    <span class="comment">// We put this after inactivity socket, hopefully this can represent the</span>
    <span class="comment">// worst waiting time.</span>
    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, ssock, NULL, 
                                  &amp;test_cb, &amp;skey);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error(2): pj_ioqueue_register_sock()&quot;</span>, rc);
        <span class="keywordflow">goto</span> on_error;
    }

    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioque, csock, NULL, 
                                  &amp;test_cb, &amp;ckey);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error(3): pj_ioqueue_register_sock()&quot;</span>, rc);
        <span class="keywordflow">goto</span> on_error;
    }

    <span class="comment">// Set destination address to send the packet.</span>
    <a class="code" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr, <a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;temp, <span class="stringliteral">&quot;127.0.0.1&quot;</span>), PORT);

    <span class="comment">// Test loop.</span>
    t_elapsed.u64 = 0;
    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {
        <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;
        <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> read_op, write_op;

        <span class="comment">// Randomize send buffer.</span>
        <a class="code" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a>(send_buf, bufsize);

        <span class="comment">// Start reading on the server side.</span>
        bytes = bufsize;
        rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(skey, &amp;read_op, recv_buf, &amp;bytes, 0);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_read()&quot;</span>, rc);
            <span class="keywordflow">break</span>;
        }

        <span class="comment">// Starts send on the client side.</span>
        bytes = bufsize;
        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gad9eaa7c7b2668255d6ee1a0bf3afb007">pj_ioqueue_sendto</a>(ckey, &amp;write_op, send_buf, &amp;bytes, 0,
                               &amp;addr, <span class="keyword">sizeof</span>(addr));
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_write()&quot;</span>, rc);
            <span class="keywordflow">break</span>;
        }
        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            <span class="keywordflow">if</span> (bytes &lt; 0) {
                app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_sendto()&quot;</span>, -bytes);
                <span class="keywordflow">break</span>;
            }
        }

        <span class="comment">// Begin time.</span>
        <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);

        <span class="comment">// Poll the queue until we&#39;ve got completion event in the server side.</span>
        callback_read_key = NULL;
        callback_read_size = 0;
        TRACE__((THIS_FILE, <span class="stringliteral">&quot;     waiting for key = %p&quot;</span>, skey));
        <span class="keywordflow">do</span> {
            <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = { 1, 0 };
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>            rc = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>            rc = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>            TRACE__((THIS_FILE, <span class="stringliteral">&quot;     poll rc=%d&quot;</span>, rc));
        } <span class="keywordflow">while</span> (rc &gt;= 0 &amp;&amp; callback_read_key != skey);

        <span class="comment">// End time.</span>
        <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);
        t_elapsed.u64 += (t2.u64 - t1.u64);

        <span class="keywordflow">if</span> (rc &lt; 0) {
            app_perror(<span class="stringliteral">&quot;   error: pj_ioqueue_poll&quot;</span>, -rc);
            <span class="keywordflow">break</span>;
        }

        <span class="comment">// Compare recv buffer with send buffer.</span>
        <span class="keywordflow">if</span> (callback_read_size != bufsize || 
            <a class="code" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(send_buf, recv_buf, bufsize)) 
        {
            rc = -10;
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   error: size/buffer mismatch&quot;</span>));
            <span class="keywordflow">break</span>;
        }

        <span class="comment">// Poll until all events are exhausted, before we start the next loop.</span>
        <span class="keywordflow">do</span> {
            <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = { 0, 10 };
<span class="preprocessor">#ifdef PJ_SYMBIAN</span>
<span class="preprocessor"></span>            <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(timeout);
            rc = <a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 100);
<span class="preprocessor">#else       </span>
<span class="preprocessor"></span>            rc = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(ioque, &amp;timeout);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        } <span class="keywordflow">while</span> (rc&gt;0);

        rc = 0;
    }

    <span class="comment">// Print results</span>
    <span class="keywordflow">if</span> (rc == 0) {
        <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> tzero;
        <a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> usec_delay;

        tzero.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> = tzero.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;
        usec_delay = <a class="code" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a>( &amp;tzero, &amp;t_elapsed);

        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...%10d %15d  % 9d&quot;</span>, 
                   bufsize, inactive_sock_count, usec_delay));

    } <span class="keywordflow">else</span> {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(2, (THIS_FILE, <span class="stringliteral">&quot;...ERROR rc=%d (buf:%d, fds:%d)&quot;</span>, 
                              rc, bufsize, inactive_sock_count+2));
    }

    <span class="comment">// Cleaning up.</span>
    <span class="keywordflow">for</span> (i=inactive_sock_count-1; i&gt;=0; --i) {
        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(keys[i]);
    }

    <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(skey);
    <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(ckey);


    <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>( pool);
    <span class="keywordflow">return</span> rc;

on_error:
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: %s&quot;</span>, 
              <a class="code" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a>(<a class="code" href="group__pj__errno.htm#gaf32783cbca43d14cfc7e29694ba9057c">pj_get_netos_error</a>(), errbuf, <span class="keyword">sizeof</span>(errbuf))));
    <span class="keywordflow">if</span> (ssock)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ssock);
    <span class="keywordflow">if</span> (csock)
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(csock);
    <span class="keywordflow">for</span> (i=0; i&lt;inactive_sock_count &amp;&amp; inactive_sock &amp;&amp; 
              inactive_sock[i]!=PJ_INVALID_SOCKET; ++i) 
    {
        <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(inactive_sock[i]);
    }
    <span class="keywordflow">if</span> (ioque != NULL)
        <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioque);
    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>( pool);
    <span class="keywordflow">return</span> -1;
}

<span class="keyword">static</span> <span class="keywordtype">int</span> udp_ioqueue_test_imp(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)
{
    <span class="keywordtype">int</span> status;
    <span class="keywordtype">int</span> bufsize, sock_count;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..testing with concurency=%d&quot;</span>, allow_concur));

    <span class="comment">//goto pass1;</span>

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...compliance test (%s)&quot;</span>, <a class="code" href="group__PJ__IOQUEUE.htm#ga6179808511eccf51f35944c4b7de679e">pj_ioqueue_name</a>()));
    <span class="keywordflow">if</span> ((status=compliance_test(allow_concur)) != 0) {
        <span class="keywordflow">return</span> status;
    }
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;....compliance test ok&quot;</span>));


    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...unregister test (%s)&quot;</span>, <a class="code" href="group__PJ__IOQUEUE.htm#ga6179808511eccf51f35944c4b7de679e">pj_ioqueue_name</a>()));
    <span class="keywordflow">if</span> ((status=unregister_test(allow_concur)) != 0) {
        <span class="keywordflow">return</span> status;
    }
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;....unregister test ok&quot;</span>));

    <span class="keywordflow">if</span> ((status=many_handles_test(allow_concur)) != 0) {
        <span class="keywordflow">return</span> status;
    }
    
    <span class="comment">//return 0;</span>

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, <span class="stringliteral">&quot;...benchmarking different buffer size:&quot;</span>));
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, <span class="stringliteral">&quot;... note: buf=bytes sent, fds=# of fds, &quot;</span>
                          <span class="stringliteral">&quot;elapsed=in timer ticks&quot;</span>));

<span class="comment">//pass1:</span>
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...Benchmarking poll times for %s:&quot;</span>, <a class="code" href="group__PJ__IOQUEUE.htm#ga6179808511eccf51f35944c4b7de679e">pj_ioqueue_name</a>()));
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...=====================================&quot;</span>));
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...Buf.size   #inactive-socks  Time/poll&quot;</span>));
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;... (bytes)                    (nanosec)&quot;</span>));
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;...=====================================&quot;</span>));

    <span class="comment">//goto pass2;</span>

    <span class="keywordflow">for</span> (bufsize=BUF_MIN_SIZE; bufsize &lt;= BUF_MAX_SIZE; bufsize *= 2) {
        <span class="keywordflow">if</span> ((status=bench_test(allow_concur, bufsize, SOCK_INACTIVE_MIN)) != 0)
            <span class="keywordflow">return</span> status;
    }
<span class="comment">//pass2:</span>
    bufsize = 512;
    <span class="keywordflow">for</span> (sock_count=SOCK_INACTIVE_MIN+2; 
         sock_count&lt;=SOCK_INACTIVE_MAX+2; 
         sock_count *= 2) 
    {
        <span class="comment">//PJ_LOG(3,(THIS_FILE, &quot;...testing with %d fds&quot;, sock_count));</span>
        <span class="keywordflow">if</span> ((status=bench_test(allow_concur, bufsize, sock_count-2)) != 0)
            <span class="keywordflow">return</span> status;
    }
    <span class="keywordflow">return</span> 0;
}

<span class="keywordtype">int</span> udp_ioqueue_test()
{
    <span class="keywordtype">int</span> rc;

    rc = udp_ioqueue_test_imp(<a class="code" href="group__PJ__BASIC.htm#gac8d6a18466c2489aae935c44f15edb5b">PJ_TRUE</a>);
    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    rc = udp_ioqueue_test_imp(<a class="code" href="group__PJ__BASIC.htm#ga211deece8bfa6b5b508a4b1d172928f2">PJ_FALSE</a>);
    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    <span class="keywordflow">return</span> 0;
}

<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_uiq_udp;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_UDP_IOQUEUE_TEST */</span>


</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
