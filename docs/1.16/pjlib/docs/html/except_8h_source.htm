<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: except.h Source File (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>except.h</h1>  </div>
</div>
<div class="contents">
<a href="except_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: except.h 3553 2011-05-05 06:14:19Z nanang $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef __PJ_EXCEPTION_H__</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define __PJ_EXCEPTION_H__</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="types_8h.htm" title="Declaration of basic types and utility.">pj/types.h</a>&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;pj/compat/setjmp.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="log_8h.htm" title="Logging Utility.">pj/log.h</a>&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <a class="code" href="group__pj__config.htm#ga288f0f20eddba864219d6d9b3cd006e1">PJ_BEGIN_DECL</a>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00242"></a>00242 PJ_DECL(<a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>) <a class="code" href="group__PJ__EXCEPT.htm#gacf20c1cddd2875d1353d4d8d6672040e">pj_exception_id_alloc</a>(const <span class="keywordtype">char</span> *name,
<a name="l00243"></a>00243                                            <a class="code" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> *<span class="keywordtype">id</span>);
<a name="l00244"></a>00244 
<a name="l00252"></a>00252 PJ_DECL(<a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>) <a class="code" href="group__PJ__EXCEPT.htm#gaec8f315655bffd077875e6bfbfc0a156">pj_exception_id_free</a>(<a class="code" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> <span class="keywordtype">id</span>);
<a name="l00253"></a>00253 
<a name="l00261"></a>00261 PJ_DECL(const <span class="keywordtype">char</span>*) <a class="code" href="group__PJ__EXCEPT.htm#ga3ad4985730d5f311fcf9568335d8b1f6">pj_exception_id_name</a>(<a class="code" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> <span class="keywordtype">id</span>);
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00266"></a>00266 <span class="preprocessor">#if defined(PJ_EXCEPTION_USE_WIN32_SEH) &amp;&amp; PJ_EXCEPTION_USE_WIN32_SEH != 0</span>
<a name="l00267"></a>00267 <span class="preprocessor"></span><span class="comment">/*****************************************************************************</span>
<a name="l00268"></a>00268 <span class="comment"> **</span>
<a name="l00269"></a>00269 <span class="comment"> ** IMPLEMENTATION OF EXCEPTION USING WINDOWS SEH</span>
<a name="l00270"></a>00270 <span class="comment"> **</span>
<a name="l00271"></a>00271 <span class="comment"> ****************************************************************************/</span>
<a name="l00272"></a>00272 <span class="preprocessor">#define WIN32_LEAN_AND_MEAN</span>
<a name="l00273"></a>00273 <span class="preprocessor"></span><span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <a class="code" href="group__pj__config.htm#gacb94a27f9265a0faaa5eb2e1b31fb641">PJ_IDECL_NO_RETURN</a>(<span class="keywordtype">void</span>)
<a name="l00276"></a>00276 <a class="code" href="except_8h.htm#ad1aa899f1c4f65df072f82538753f748">pj_throw_exception_</a>(<a class="code" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> <span class="keywordtype">id</span>) PJ_ATTR_NORETURN
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278     RaiseException(<span class="keywordtype">id</span>,1,0,NULL);
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 <span class="preprocessor">#define PJ_USE_EXCEPTION    </span>
<a name="l00282"></a>00282 <span class="preprocessor"></span><span class="preprocessor">#define PJ_TRY              __try</span>
<a name="l00283"></a>00283 <span class="preprocessor"></span><span class="preprocessor">#define PJ_CATCH(id)        __except(GetExceptionCode()==id ? \</span>
<a name="l00284"></a>00284 <span class="preprocessor">                                      EXCEPTION_EXECUTE_HANDLER : \</span>
<a name="l00285"></a>00285 <span class="preprocessor">                                      EXCEPTION_CONTINUE_SEARCH)</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span><span class="preprocessor">#define PJ_CATCH_ANY        __except(EXCEPTION_EXECUTE_HANDLER)</span>
<a name="l00287"></a>00287 <span class="preprocessor"></span><span class="preprocessor">#define PJ_END              </span>
<a name="l00288"></a>00288 <span class="preprocessor"></span><span class="preprocessor">#define PJ_THROW(id)        pj_throw_exception_(id)</span>
<a name="l00289"></a>00289 <span class="preprocessor"></span><span class="preprocessor">#define PJ_GET_EXCEPTION()  GetExceptionCode()</span>
<a name="l00290"></a>00290 <span class="preprocessor"></span>
<a name="l00291"></a>00291 
<a name="l00292"></a>00292 <span class="preprocessor">#elif defined(PJ_SYMBIAN) &amp;&amp; PJ_SYMBIAN!=0</span>
<a name="l00293"></a>00293 <span class="preprocessor"></span><span class="comment">/*****************************************************************************</span>
<a name="l00294"></a>00294 <span class="comment"> **</span>
<a name="l00295"></a>00295 <span class="comment"> ** IMPLEMENTATION OF EXCEPTION USING SYMBIAN LEAVE/TRAP FRAMEWORK</span>
<a name="l00296"></a>00296 <span class="comment"> **</span>
<a name="l00297"></a>00297 <span class="comment"> ****************************************************************************/</span>
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="comment">/* To include this file, the source file must be compiled as</span>
<a name="l00300"></a>00300 <span class="comment"> * C++ code!</span>
<a name="l00301"></a>00301 <span class="comment"> */</span>
<a name="l00302"></a>00302 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span>
<a name="l00304"></a>00304 <span class="keyword">class </span>TPjException
<a name="l00305"></a>00305 {
<a name="l00306"></a>00306 <span class="keyword">public</span>:
<a name="l00307"></a>00307     <span class="keywordtype">int</span> code_;
<a name="l00308"></a>00308 };
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="preprocessor">#define PJ_USE_EXCEPTION</span>
<a name="l00311"></a>00311 <span class="preprocessor"></span><span class="preprocessor">#define PJ_TRY                  try</span>
<a name="l00312"></a>00312 <span class="preprocessor"></span><span class="comment">//#define PJ_CATCH(id)          </span>
<a name="l00313"></a>00313 <span class="preprocessor">#define PJ_CATCH_ANY            catch (const TPjException &amp; pj_excp_)</span>
<a name="l00314"></a>00314 <span class="preprocessor"></span><span class="preprocessor">#define PJ_END</span>
<a name="l00315"></a>00315 <span class="preprocessor"></span><span class="preprocessor">#define PJ_THROW(x_id)          do { TPjException e; e.code_=x_id; throw e;} \</span>
<a name="l00316"></a>00316 <span class="preprocessor">                                while (0)</span>
<a name="l00317"></a>00317 <span class="preprocessor"></span><span class="preprocessor">#define PJ_GET_EXCEPTION()      pj_excp_.code_</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span>
<a name="l00319"></a>00319 <span class="preprocessor">#else</span>
<a name="l00320"></a>00320 <span class="preprocessor"></span>
<a name="l00321"></a>00321 <span class="preprocessor">#define PJ_USE_EXCEPTION</span>
<a name="l00322"></a>00322 <span class="preprocessor"></span><span class="preprocessor">#define PJ_TRY                          </span>
<a name="l00323"></a>00323 <span class="preprocessor"></span><span class="preprocessor">#define PJ_CATCH_ANY            if (0)</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span><span class="preprocessor">#define PJ_END</span>
<a name="l00325"></a>00325 <span class="preprocessor"></span><span class="preprocessor">#define PJ_THROW(x_id)          do { PJ_LOG(1,(&quot;PJ_THROW&quot;,&quot; error code = %d&quot;,x_id)); } while (0)</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span><span class="preprocessor">#define PJ_GET_EXCEPTION()      0</span>
<a name="l00327"></a>00327 <span class="preprocessor"></span>
<a name="l00328"></a>00328 <span class="preprocessor">#endif  </span><span class="comment">/* __cplusplus */</span>
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 <span class="preprocessor">#else</span>
<a name="l00331"></a>00331 <span class="preprocessor"></span><span class="comment">/*****************************************************************************</span>
<a name="l00332"></a>00332 <span class="comment"> **</span>
<a name="l00333"></a>00333 <span class="comment"> ** IMPLEMENTATION OF EXCEPTION USING GENERIC SETJMP/LONGJMP</span>
<a name="l00334"></a>00334 <span class="comment"> **</span>
<a name="l00335"></a>00335 <span class="comment"> ****************************************************************************/</span>
<a name="l00336"></a>00336 
<a name="l00341"></a><a class="code" href="structpj__exception__state__t.htm">00341</a> <span class="keyword">struct </span><a class="code" href="structpj__exception__state__t.htm">pj_exception_state_t</a>
<a name="l00342"></a>00342 {
<a name="l00343"></a><a class="code" href="structpj__exception__state__t.htm#a30eb2c73ee7cfdf10454e127c6c27340">00343</a>     <span class="keyword">struct </span><a class="code" href="structpj__exception__state__t.htm">pj_exception_state_t</a> *<a class="code" href="structpj__exception__state__t.htm#a30eb2c73ee7cfdf10454e127c6c27340">prev</a>;  
<a name="l00344"></a><a class="code" href="structpj__exception__state__t.htm#ab709d38c280aa24c91d6b399bbb7db5a">00344</a>     pj_jmp_buf <a class="code" href="structpj__exception__state__t.htm#ab709d38c280aa24c91d6b399bbb7db5a">state</a>;                   
<a name="l00345"></a>00345 };
<a name="l00346"></a>00346 
<a name="l00351"></a>00351 <a class="code" href="group__pj__config.htm#gaa8d4cddf3008446dfc87215a7bd01a61">PJ_DECL_NO_RETURN</a>(<span class="keywordtype">void</span>) 
<a name="l00352"></a>00352 <a class="code" href="except_8h.htm#ad1aa899f1c4f65df072f82538753f748">pj_throw_exception_</a>(<a class="code" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> <span class="keywordtype">id</span>) PJ_ATTR_NORETURN;
<a name="l00353"></a>00353 
<a name="l00357"></a>00357 PJ_DECL(<span class="keywordtype">void</span>) <a class="code" href="except_8h.htm#a75e18ec365be4ae308b702478b8eb08d">pj_push_exception_handler_</a>(struct <a class="code" href="structpj__exception__state__t.htm">pj_exception_state_t</a> *rec);
<a name="l00358"></a>00358 
<a name="l00362"></a>00362 PJ_DECL(<span class="keywordtype">void</span>) <a class="code" href="except_8h.htm#af18b2ded6e88584326219dff64b09a27">pj_pop_exception_handler_</a>(struct <a class="code" href="structpj__exception__state__t.htm">pj_exception_state_t</a> *rec);
<a name="l00363"></a>00363 
<a name="l00368"></a><a class="code" href="except_8h.htm#ae6b16c80d1dd667bf1adaa659ed6e95c">00368</a> <span class="preprocessor">#define PJ_USE_EXCEPTION    struct pj_exception_state_t pj_x_except__; int pj_x_code__</span>
<a name="l00369"></a>00369 <span class="preprocessor"></span>
<a name="l00374"></a><a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">00374</a> <span class="preprocessor">#define PJ_TRY              if (1) { \</span>
<a name="l00375"></a>00375 <span class="preprocessor">                                pj_push_exception_handler_(&amp;pj_x_except__); \</span>
<a name="l00376"></a>00376 <span class="preprocessor">                                pj_x_code__ = pj_setjmp(pj_x_except__.state); \</span>
<a name="l00377"></a>00377 <span class="preprocessor">                                if (pj_x_code__ == 0)</span>
<a name="l00378"></a>00378 <span class="preprocessor"></span>
<a name="l00383"></a><a class="code" href="except_8h.htm#afa4ccc7a71f9161069978dac193cf643">00383</a> <span class="preprocessor">#define PJ_CATCH(id)        else if (pj_x_code__ == (id))</span>
<a name="l00384"></a>00384 <span class="preprocessor"></span>
<a name="l00389"></a><a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">00389</a> <span class="preprocessor">#define PJ_CATCH_ANY        else</span>
<a name="l00390"></a>00390 <span class="preprocessor"></span>
<a name="l00395"></a><a class="code" href="except_8h.htm#aa9e7a44e709211c2d4346146eb2ecf45">00395</a> <span class="preprocessor">#define PJ_END                  pj_pop_exception_handler_(&amp;pj_x_except__); \</span>
<a name="l00396"></a>00396 <span class="preprocessor">                            } else {}</span>
<a name="l00397"></a>00397 <span class="preprocessor"></span>
<a name="l00403"></a><a class="code" href="except_8h.htm#a82f4cda6bfb8c0d5c1452a2314a8ec9c">00403</a> <span class="preprocessor">#define PJ_THROW(exception_id)  pj_throw_exception_(exception_id)</span>
<a name="l00404"></a>00404 <span class="preprocessor"></span>
<a name="l00410"></a><a class="code" href="except_8h.htm#a9309a179331c0fbcea0c2d62864419af">00410</a> <span class="preprocessor">#define PJ_GET_EXCEPTION()      (pj_x_code__)</span>
<a name="l00411"></a>00411 <span class="preprocessor"></span>
<a name="l00412"></a>00412 <span class="preprocessor">#endif  </span><span class="comment">/* PJ_EXCEPTION_USE_WIN32_SEH */</span>
<a name="l00413"></a>00413 
<a name="l00414"></a>00414 
<a name="l00415"></a>00415 <a class="code" href="group__pj__config.htm#gac961f7d199eeed7666ab3ec2442c1b00">PJ_END_DECL</a>
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 <span class="preprocessor">#endif  </span><span class="comment">/* __PJ_EXCEPTION_H__ */</span>
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 
</pre></div></div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
