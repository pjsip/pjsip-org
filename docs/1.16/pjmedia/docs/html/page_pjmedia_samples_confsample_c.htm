<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJMEDIA Reference: Samples: Using Conference Bridge (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->

	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJMEDIA Reference</p>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Samples: Using Conference Bridge </h1>  </div>
</div>
<div class="contents">
<p>Sample to mix multiple files in the conference bridge and play the result to sound device.</p>
<p>This file is pjsip-apps/src/samples/confsample.c</p>
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: confsample.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="pjmedia_8h.htm" title="PJMEDIA main header file.">pjmedia.h</a>&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;pjlib-util.h&gt;</span> <span class="comment">/* pj_getopt */</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;pjlib.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>     <span class="comment">/* atoi() */</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;util.h&quot;</span>
<a name="l00029"></a>00029 
<a name="l00042"></a>00042 <span class="comment">/* For logging purpose. */</span>
<a name="l00043"></a>00043 <span class="preprocessor">#define THIS_FILE   &quot;confsample.c&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">/* Shall we put recorder in the conference */</span>
<a name="l00047"></a>00047 <span class="preprocessor">#define RECORDER    1</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *desc = 
<a name="l00051"></a>00051  <span class="stringliteral">&quot; FILE:                                                                    \n&quot;</span>
<a name="l00052"></a>00052  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00053"></a>00053  <span class="stringliteral">&quot;  confsample.c                                                            \n&quot;</span>
<a name="l00054"></a>00054  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00055"></a>00055  <span class="stringliteral">&quot; PURPOSE:                                                                 \n&quot;</span>
<a name="l00056"></a>00056  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00057"></a>00057  <span class="stringliteral">&quot;  Demonstrate how to use conference bridge.                               \n&quot;</span>
<a name="l00058"></a>00058  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00059"></a>00059  <span class="stringliteral">&quot; USAGE:                                                                   \n&quot;</span>
<a name="l00060"></a>00060  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00061"></a>00061  <span class="stringliteral">&quot;  confsample [options] [file1.wav] [file2.wav] ...                        \n&quot;</span>
<a name="l00062"></a>00062  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00063"></a>00063  <span class="stringliteral">&quot; options:                                                                 \n&quot;</span>
<a name="l00064"></a>00064  SND_USAGE
<a name="l00065"></a>00065  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00066"></a>00066  <span class="stringliteral">&quot;  fileN.wav are optional WAV files to be connected to the conference      \n&quot;</span>
<a name="l00067"></a>00067  <span class="stringliteral">&quot;  bridge. The WAV files MUST have single channel (mono) and 16 bit PCM    \n&quot;</span>
<a name="l00068"></a>00068  <span class="stringliteral">&quot;  samples. It can have arbitrary sampling rate.                           \n&quot;</span>
<a name="l00069"></a>00069  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00070"></a>00070  <span class="stringliteral">&quot; DESCRIPTION:                                                             \n&quot;</span>
<a name="l00071"></a>00071  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00072"></a>00072  <span class="stringliteral">&quot;  Here we create a conference bridge, with at least one port (port zero   \n&quot;</span>
<a name="l00073"></a>00073  <span class="stringliteral">&quot;  is always created for the sound device).                                \n&quot;</span>
<a name="l00074"></a>00074  <span class="stringliteral">&quot;                                                                          \n&quot;</span>
<a name="l00075"></a>00075  <span class="stringliteral">&quot;  If WAV files are specified, the WAV file player ports will be connected \n&quot;</span>
<a name="l00076"></a>00076  <span class="stringliteral">&quot;  to slot starting from number one in the bridge. The WAV files can have  \n&quot;</span>
<a name="l00077"></a>00077  <span class="stringliteral">&quot;  arbitrary sampling rate; the bridge will convert it to its clock rate.  \n&quot;</span>
<a name="l00078"></a>00078  <span class="stringliteral">&quot;  However, the files MUST have a single audio channel only (i.e. mono).  \n&quot;</span>;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00081"></a>00081  
<a name="l00082"></a>00082 <span class="comment">/* </span>
<a name="l00083"></a>00083 <span class="comment"> * Prototypes: </span>
<a name="l00084"></a>00084 <span class="comment"> */</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="comment">/* List the ports in the conference bridge */</span>
<a name="l00087"></a>00087 <span class="keyword">static</span> <span class="keywordtype">void</span> conf_list(<a class="code" href="group__PJMEDIA__CONF.htm#ga7af91147cffd957784f2e51b72d19edd">pjmedia_conf</a> *conf, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> detail);
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">/* Display VU meter */</span>
<a name="l00090"></a>00090 <span class="keyword">static</span> <span class="keywordtype">void</span> monitor_level(<a class="code" href="group__PJMEDIA__CONF.htm#ga7af91147cffd957784f2e51b72d19edd">pjmedia_conf</a> *conf, <span class="keywordtype">int</span> slot, <span class="keywordtype">int</span> dir, <span class="keywordtype">int</span> dur);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="comment">/* Show usage */</span>
<a name="l00094"></a>00094 <span class="keyword">static</span> <span class="keywordtype">void</span> usage(<span class="keywordtype">void</span>)
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00097"></a>00097     puts(desc);
<a name="l00098"></a>00098 }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="comment">/* Input simple string */</span>
<a name="l00103"></a>00103 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> input(<span class="keyword">const</span> <span class="keywordtype">char</span> *title, <span class="keywordtype">char</span> *buf, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)
<a name="l00104"></a>00104 {
<a name="l00105"></a>00105     <span class="keywordtype">char</span> *p;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107     printf(<span class="stringliteral">&quot;%s (empty to cancel): &quot;</span>, title); fflush(stdout);
<a name="l00108"></a>00108     <span class="keywordflow">if</span> (fgets(buf, len, stdin) == NULL)
<a name="l00109"></a>00109         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="comment">/* Remove trailing newlines. */</span>
<a name="l00112"></a>00112     <span class="keywordflow">for</span> (p=buf; ; ++p) {
<a name="l00113"></a>00113         <span class="keywordflow">if</span> (*p==<span class="charliteral">&#39;\r&#39;</span> || *p==<span class="charliteral">&#39;\n&#39;</span>) *p=<span class="charliteral">&#39;\0&#39;</span>;
<a name="l00114"></a>00114         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!*p) <span class="keywordflow">break</span>;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117     <span class="keywordflow">if</span> (!*buf)
<a name="l00118"></a>00118         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00119"></a>00119     
<a name="l00120"></a>00120     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="comment">/*****************************************************************************</span>
<a name="l00125"></a>00125 <span class="comment"> * main()</span>
<a name="l00126"></a>00126 <span class="comment"> */</span>
<a name="l00127"></a>00127 <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129     <span class="keywordtype">int</span> dev_id = -1;
<a name="l00130"></a>00130     <span class="keywordtype">int</span> clock_rate = CLOCK_RATE;
<a name="l00131"></a>00131     <span class="keywordtype">int</span> channel_count = NCHANNELS;
<a name="l00132"></a>00132     <span class="keywordtype">int</span> samples_per_frame = NSAMPLES;
<a name="l00133"></a>00133     <span class="keywordtype">int</span> bits_per_sample = NBITS;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm">pj_caching_pool</a> cp;
<a name="l00136"></a>00136     <a class="code" href="group__PJMEDIA__TYPES.htm#ga7c3623d8e90e22b7184a6e42dc24f6f5">pjmedia_endpt</a> *med_endpt;
<a name="l00137"></a>00137     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool;
<a name="l00138"></a>00138     <a class="code" href="group__PJMEDIA__CONF.htm#ga7af91147cffd957784f2e51b72d19edd">pjmedia_conf</a> *conf;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordtype">int</span> i, port_count, file_count;
<a name="l00141"></a>00141     <a class="code" href="structpjmedia__port.htm">pjmedia_port</a> **file_port;   <span class="comment">/* Array of file ports */</span>
<a name="l00142"></a>00142     <a class="code" href="structpjmedia__port.htm">pjmedia_port</a> *rec_port = NULL;  <span class="comment">/* Wav writer port */</span>
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keywordtype">char</span> tmp[10];
<a name="l00145"></a>00145     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     <span class="comment">/* Must init PJLIB first: */</span>
<a name="l00149"></a>00149     status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga069615152140fa2df009cebc8a36b769">pj_init</a>();
<a name="l00150"></a>00150     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00151"></a>00151 
<a name="l00152"></a>00152     <span class="comment">/* Get command line options. */</span>
<a name="l00153"></a>00153     <span class="keywordflow">if</span> (get_snd_options(THIS_FILE, argc, argv, &amp;dev_id, &amp;clock_rate,
<a name="l00154"></a>00154                         &amp;channel_count, &amp;samples_per_frame, &amp;bits_per_sample))
<a name="l00155"></a>00155     {
<a name="l00156"></a>00156         usage();
<a name="l00157"></a>00157         <span class="keywordflow">return</span> 1;
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="comment">/* Must create a pool factory before we can allocate any memory. */</span>
<a name="l00161"></a>00161     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__CACHING__POOL.htm#gafbf5400f191e2095240bc6472754e94f">pj_caching_pool_init</a>(&amp;cp, &amp;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL__FACTORY.htm#ga98cf758eafb888f318a8de7f396f47ca">pj_pool_factory_default_policy</a>, 0);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="comment">/* </span>
<a name="l00164"></a>00164 <span class="comment">     * Initialize media endpoint.</span>
<a name="l00165"></a>00165 <span class="comment">     * This will implicitly initialize PJMEDIA too.</span>
<a name="l00166"></a>00166 <span class="comment">     */</span>
<a name="l00167"></a>00167     status = <a class="code" href="group__PJMED__ENDPT.htm#ga2865efcd255dbcb05ede33dbae5c27f5">pjmedia_endpt_create</a>(&amp;cp.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm#a0849ace123d8760dfab52418c2732af3">factory</a>, NULL, 1, &amp;med_endpt);
<a name="l00168"></a>00168     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     <span class="comment">/* Create memory pool to allocate memory */</span>
<a name="l00171"></a>00171     pool = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>( &amp;cp.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm#a0849ace123d8760dfab52418c2732af3">factory</a>,     <span class="comment">/* pool factory         */</span>
<a name="l00172"></a>00172                            <span class="stringliteral">&quot;wav&quot;</span>,           <span class="comment">/* pool name.           */</span>
<a name="l00173"></a>00173                            4000,            <span class="comment">/* init size            */</span>
<a name="l00174"></a>00174                            4000,            <span class="comment">/* increment size       */</span>
<a name="l00175"></a>00175                            NULL             <span class="comment">/* callback on error    */</span>
<a name="l00176"></a>00176                            );
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 
<a name="l00179"></a>00179     file_count = argc - <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga352f0d582d0afbf08306b92dbb5e357d">pj_optind</a>;
<a name="l00180"></a>00180     port_count = file_count + 1 + RECORDER;
<a name="l00181"></a>00181 
<a name="l00182"></a>00182     <span class="comment">/* Create the conference bridge. </span>
<a name="l00183"></a>00183 <span class="comment">     * With default options (zero), the bridge will create an instance of</span>
<a name="l00184"></a>00184 <span class="comment">     * sound capture and playback device and connect them to slot zero.</span>
<a name="l00185"></a>00185 <span class="comment">     */</span>
<a name="l00186"></a>00186     status = <a class="code" href="group__PJMEDIA__CONF.htm#gad5472b9cfd45952fa209e830188b63ae">pjmedia_conf_create</a>( pool,     <span class="comment">/* pool to use          */</span>
<a name="l00187"></a>00187                                   port_count,<span class="comment">/* number of ports     */</span>
<a name="l00188"></a>00188                                   clock_rate,
<a name="l00189"></a>00189                                   channel_count,
<a name="l00190"></a>00190                                   samples_per_frame,
<a name="l00191"></a>00191                                   bits_per_sample,
<a name="l00192"></a>00192                                   0,        <span class="comment">/* options              */</span>
<a name="l00193"></a>00193                                   &amp;conf     <span class="comment">/* result               */</span>
<a name="l00194"></a>00194                                   );
<a name="l00195"></a>00195     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00196"></a>00196         app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to create conference bridge&quot;</span>, status);
<a name="l00197"></a>00197         <span class="keywordflow">return</span> 1;
<a name="l00198"></a>00198     }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 <span class="preprocessor">#if RECORDER</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>    status = <a class="code" href="group__PJMEDIA__FILE__REC.htm#ga899268674e9657e8033738bca29621a2">pjmedia_wav_writer_port_create</a>(  pool, <span class="stringliteral">&quot;confrecord.wav&quot;</span>,
<a name="l00202"></a>00202                                               clock_rate, channel_count,
<a name="l00203"></a>00203                                               samples_per_frame, 
<a name="l00204"></a>00204                                               bits_per_sample, 0, 0, 
<a name="l00205"></a>00205                                               &amp;rec_port);
<a name="l00206"></a>00206     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00207"></a>00207         app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to create WAV writer&quot;</span>, status);
<a name="l00208"></a>00208         <span class="keywordflow">return</span> 1;
<a name="l00209"></a>00209     }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     <a class="code" href="group__PJMEDIA__CONF.htm#ga9d056daff78457a4b770b479df15f657">pjmedia_conf_add_port</a>(conf, pool, rec_port, NULL, NULL);
<a name="l00212"></a>00212 <span class="preprocessor">#endif</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215     <span class="comment">/* Create file ports. */</span>
<a name="l00216"></a>00216     file_port = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, file_count * <span class="keyword">sizeof</span>(<a class="code" href="structpjmedia__port.htm">pjmedia_port</a>*));
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="keywordflow">for</span> (i=0; i&lt;file_count; ++i) {
<a name="l00219"></a>00219 
<a name="l00220"></a>00220         <span class="comment">/* Load the WAV file to file port. */</span>
<a name="l00221"></a>00221         status = <a class="code" href="group__PJMEDIA__FILE__PLAY.htm#ga987129692be57281a40c836e8749313f">pjmedia_wav_player_port_create</a>( 
<a name="l00222"></a>00222                         pool,               <span class="comment">/* pool.        */</span>
<a name="l00223"></a>00223                         argv[i+pj_optind],  <span class="comment">/* filename     */</span>
<a name="l00224"></a>00224                         0,                  <span class="comment">/* use default ptime */</span>
<a name="l00225"></a>00225                         0,                  <span class="comment">/* flags        */</span>
<a name="l00226"></a>00226                         0,                  <span class="comment">/* buf size     */</span>
<a name="l00227"></a>00227                         &amp;file_port[i]       <span class="comment">/* result       */</span>
<a name="l00228"></a>00228                         );
<a name="l00229"></a>00229         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00230"></a>00230             <span class="keywordtype">char</span> title[80];
<a name="l00231"></a>00231             pj_ansi_sprintf(title, <span class="stringliteral">&quot;Unable to use %s&quot;</span>, argv[i+pj_optind]);
<a name="l00232"></a>00232             app_perror(THIS_FILE, title, status);
<a name="l00233"></a>00233             usage();
<a name="l00234"></a>00234             <span class="keywordflow">return</span> 1;
<a name="l00235"></a>00235         }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237         <span class="comment">/* Add the file port to conference bridge */</span>
<a name="l00238"></a>00238         status = <a class="code" href="group__PJMEDIA__CONF.htm#ga9d056daff78457a4b770b479df15f657">pjmedia_conf_add_port</a>( conf,           <span class="comment">/* The bridge       */</span>
<a name="l00239"></a>00239                                         pool,           <span class="comment">/* pool             */</span>
<a name="l00240"></a>00240                                         file_port[i],   <span class="comment">/* port to connect  */</span>
<a name="l00241"></a>00241                                         NULL,           <span class="comment">/* Use port&#39;s name  */</span>
<a name="l00242"></a>00242                                         NULL            <span class="comment">/* ptr for slot #   */</span>
<a name="l00243"></a>00243                                         );
<a name="l00244"></a>00244         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00245"></a>00245             app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to add conference port&quot;</span>, status);
<a name="l00246"></a>00246             <span class="keywordflow">return</span> 1;
<a name="l00247"></a>00247         }
<a name="l00248"></a>00248     }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00251"></a>00251     <span class="comment">/* </span>
<a name="l00252"></a>00252 <span class="comment">     * All ports are set up in the conference bridge.</span>
<a name="l00253"></a>00253 <span class="comment">     * But at this point, no media will be flowing since no ports are</span>
<a name="l00254"></a>00254 <span class="comment">     * &quot;connected&quot;. User must connect the port manually.</span>
<a name="l00255"></a>00255 <span class="comment">     */</span>
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="comment">/* Dump memory usage */</span>
<a name="l00259"></a>00259     dump_pool_usage(THIS_FILE, &amp;cp);
<a name="l00260"></a>00260 
<a name="l00261"></a>00261     <span class="comment">/* Sleep to allow log messages to flush */</span>
<a name="l00262"></a>00262     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(100);
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 
<a name="l00265"></a>00265     <span class="comment">/*</span>
<a name="l00266"></a>00266 <span class="comment">     * UI Menu: </span>
<a name="l00267"></a>00267 <span class="comment">     */</span>
<a name="l00268"></a>00268     <span class="keywordflow">for</span> (;;) {
<a name="l00269"></a>00269         <span class="keywordtype">char</span> tmp1[10];
<a name="l00270"></a>00270         <span class="keywordtype">char</span> tmp2[10];
<a name="l00271"></a>00271         <span class="keywordtype">char</span> *err;
<a name="l00272"></a>00272         <span class="keywordtype">int</span> src, dst, level, dur;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274         puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00275"></a>00275         conf_list(conf, 0);
<a name="l00276"></a>00276         puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00277"></a>00277         puts(<span class="stringliteral">&quot;Menu:&quot;</span>);
<a name="l00278"></a>00278         puts(<span class="stringliteral">&quot;  s    Show ports details&quot;</span>);
<a name="l00279"></a>00279         puts(<span class="stringliteral">&quot;  c    Connect one port to another&quot;</span>);
<a name="l00280"></a>00280         puts(<span class="stringliteral">&quot;  d    Disconnect port connection&quot;</span>);
<a name="l00281"></a>00281         puts(<span class="stringliteral">&quot;  t    Adjust signal level transmitted (tx) to a port&quot;</span>);
<a name="l00282"></a>00282         puts(<span class="stringliteral">&quot;  r    Adjust signal level received (rx) from a port&quot;</span>);
<a name="l00283"></a>00283         puts(<span class="stringliteral">&quot;  v    Display VU meter for a particular port&quot;</span>);
<a name="l00284"></a>00284         puts(<span class="stringliteral">&quot;  q    Quit&quot;</span>);
<a name="l00285"></a>00285         puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00286"></a>00286         
<a name="l00287"></a>00287         printf(<span class="stringliteral">&quot;Enter selection: &quot;</span>); fflush(stdout);
<a name="l00288"></a>00288 
<a name="l00289"></a>00289         <span class="keywordflow">if</span> (fgets(tmp, <span class="keyword">sizeof</span>(tmp), stdin) == NULL)
<a name="l00290"></a>00290             <span class="keywordflow">break</span>;
<a name="l00291"></a>00291 
<a name="l00292"></a>00292         <span class="keywordflow">switch</span> (tmp[0]) {
<a name="l00293"></a>00293         <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:
<a name="l00294"></a>00294             puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00295"></a>00295             conf_list(conf, 1);
<a name="l00296"></a>00296             <span class="keywordflow">break</span>;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298         <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
<a name="l00299"></a>00299             puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00300"></a>00300             puts(<span class="stringliteral">&quot;Connect source port to destination port&quot;</span>);
<a name="l00301"></a>00301             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter source port number&quot;</span>, tmp1, <span class="keyword">sizeof</span>(tmp1)) )
<a name="l00302"></a>00302                 <span class="keywordflow">continue</span>;
<a name="l00303"></a>00303             src = strtol(tmp1, &amp;err, 10);
<a name="l00304"></a>00304             <span class="keywordflow">if</span> (*err || src &lt; 0 || src &gt;= port_count) {
<a name="l00305"></a>00305                 puts(<span class="stringliteral">&quot;Invalid slot number&quot;</span>);
<a name="l00306"></a>00306                 <span class="keywordflow">continue</span>;
<a name="l00307"></a>00307             }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter destination port number&quot;</span>, tmp2, <span class="keyword">sizeof</span>(tmp2)) )
<a name="l00310"></a>00310                 <span class="keywordflow">continue</span>;
<a name="l00311"></a>00311             dst = strtol(tmp2, &amp;err, 10);
<a name="l00312"></a>00312             <span class="keywordflow">if</span> (*err || dst &lt; 0 || dst &gt;= port_count) {
<a name="l00313"></a>00313                 puts(<span class="stringliteral">&quot;Invalid slot number&quot;</span>);
<a name="l00314"></a>00314                 <span class="keywordflow">continue</span>;
<a name="l00315"></a>00315             }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317             status = <a class="code" href="group__PJMEDIA__CONF.htm#ga2cb7faa6a252f2ed9b95c845347f915b">pjmedia_conf_connect_port</a>(conf, src, dst, 0);
<a name="l00318"></a>00318             <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00319"></a>00319                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Error connecting port&quot;</span>, status);
<a name="l00320"></a>00320             
<a name="l00321"></a>00321             <span class="keywordflow">break</span>;
<a name="l00322"></a>00322 
<a name="l00323"></a>00323         <span class="keywordflow">case</span> <span class="charliteral">&#39;d&#39;</span>:
<a name="l00324"></a>00324             puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00325"></a>00325             puts(<span class="stringliteral">&quot;Disconnect port connection&quot;</span>);
<a name="l00326"></a>00326             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter source port number&quot;</span>, tmp1, <span class="keyword">sizeof</span>(tmp1)) )
<a name="l00327"></a>00327                 <span class="keywordflow">continue</span>;
<a name="l00328"></a>00328             src = strtol(tmp1, &amp;err, 10);
<a name="l00329"></a>00329             <span class="keywordflow">if</span> (*err || src &lt; 0 || src &gt;= port_count) {
<a name="l00330"></a>00330                 puts(<span class="stringliteral">&quot;Invalid slot number&quot;</span>);
<a name="l00331"></a>00331                 <span class="keywordflow">continue</span>;
<a name="l00332"></a>00332             }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter destination port number&quot;</span>, tmp2, <span class="keyword">sizeof</span>(tmp2)) )
<a name="l00335"></a>00335                 <span class="keywordflow">continue</span>;
<a name="l00336"></a>00336             dst = strtol(tmp2, &amp;err, 10);
<a name="l00337"></a>00337             <span class="keywordflow">if</span> (*err || dst &lt; 0 || dst &gt;= port_count) {
<a name="l00338"></a>00338                 puts(<span class="stringliteral">&quot;Invalid slot number&quot;</span>);
<a name="l00339"></a>00339                 <span class="keywordflow">continue</span>;
<a name="l00340"></a>00340             }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342             status = <a class="code" href="group__PJMEDIA__CONF.htm#ga385e3f731deeeed25d68acd51d6248d6">pjmedia_conf_disconnect_port</a>(conf, src, dst);
<a name="l00343"></a>00343             <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00344"></a>00344                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Error connecting port&quot;</span>, status);
<a name="l00345"></a>00345             
<a name="l00346"></a>00346 
<a name="l00347"></a>00347             <span class="keywordflow">break</span>;
<a name="l00348"></a>00348 
<a name="l00349"></a>00349         <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:
<a name="l00350"></a>00350             puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00351"></a>00351             puts(<span class="stringliteral">&quot;Adjust transmit level of a port&quot;</span>);
<a name="l00352"></a>00352             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter port number&quot;</span>, tmp1, <span class="keyword">sizeof</span>(tmp1)) )
<a name="l00353"></a>00353                 <span class="keywordflow">continue</span>;
<a name="l00354"></a>00354             src = strtol(tmp1, &amp;err, 10);
<a name="l00355"></a>00355             <span class="keywordflow">if</span> (*err || src &lt; 0 || src &gt;= port_count) {
<a name="l00356"></a>00356                 puts(<span class="stringliteral">&quot;Invalid slot number&quot;</span>);
<a name="l00357"></a>00357                 <span class="keywordflow">continue</span>;
<a name="l00358"></a>00358             }
<a name="l00359"></a>00359 
<a name="l00360"></a>00360             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter level (-128 to &gt;127, 0 for normal)&quot;</span>, 
<a name="l00361"></a>00361                               tmp2, <span class="keyword">sizeof</span>(tmp2)) )
<a name="l00362"></a>00362                 <span class="keywordflow">continue</span>;
<a name="l00363"></a>00363             level = strtol(tmp2, &amp;err, 10);
<a name="l00364"></a>00364             <span class="keywordflow">if</span> (*err || level &lt; -128) {
<a name="l00365"></a>00365                 puts(<span class="stringliteral">&quot;Invalid level&quot;</span>);
<a name="l00366"></a>00366                 <span class="keywordflow">continue</span>;
<a name="l00367"></a>00367             }
<a name="l00368"></a>00368 
<a name="l00369"></a>00369             status = <a class="code" href="group__PJMEDIA__CONF.htm#gaff0b554ee974c7905071f1051eeb4479">pjmedia_conf_adjust_tx_level</a>( conf, src, level);
<a name="l00370"></a>00370             <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00371"></a>00371                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Error adjusting level&quot;</span>, status);
<a name="l00372"></a>00372             <span class="keywordflow">break</span>;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374 
<a name="l00375"></a>00375         <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:
<a name="l00376"></a>00376             puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00377"></a>00377             puts(<span class="stringliteral">&quot;Adjust receive level of a port&quot;</span>);
<a name="l00378"></a>00378             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter port number&quot;</span>, tmp1, <span class="keyword">sizeof</span>(tmp1)) )
<a name="l00379"></a>00379                 <span class="keywordflow">continue</span>;
<a name="l00380"></a>00380             src = strtol(tmp1, &amp;err, 10);
<a name="l00381"></a>00381             <span class="keywordflow">if</span> (*err || src &lt; 0 || src &gt;= port_count) {
<a name="l00382"></a>00382                 puts(<span class="stringliteral">&quot;Invalid slot number&quot;</span>);
<a name="l00383"></a>00383                 <span class="keywordflow">continue</span>;
<a name="l00384"></a>00384             }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter level (-128 to &gt;127, 0 for normal)&quot;</span>, 
<a name="l00387"></a>00387                               tmp2, <span class="keyword">sizeof</span>(tmp2)) )
<a name="l00388"></a>00388                 <span class="keywordflow">continue</span>;
<a name="l00389"></a>00389             level = strtol(tmp2, &amp;err, 10);
<a name="l00390"></a>00390             <span class="keywordflow">if</span> (*err || level &lt; -128) {
<a name="l00391"></a>00391                 puts(<span class="stringliteral">&quot;Invalid level&quot;</span>);
<a name="l00392"></a>00392                 <span class="keywordflow">continue</span>;
<a name="l00393"></a>00393             }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395             status = <a class="code" href="group__PJMEDIA__CONF.htm#ga8895228fdc9b7d6892320aa03b198574">pjmedia_conf_adjust_rx_level</a>( conf, src, level);
<a name="l00396"></a>00396             <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00397"></a>00397                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Error adjusting level&quot;</span>, status);
<a name="l00398"></a>00398             <span class="keywordflow">break</span>;
<a name="l00399"></a>00399 
<a name="l00400"></a>00400         <span class="keywordflow">case</span> <span class="charliteral">&#39;v&#39;</span>:
<a name="l00401"></a>00401             puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00402"></a>00402             puts(<span class="stringliteral">&quot;Display VU meter&quot;</span>);
<a name="l00403"></a>00403             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter port number to monitor&quot;</span>, tmp1, <span class="keyword">sizeof</span>(tmp1)) )
<a name="l00404"></a>00404                 <span class="keywordflow">continue</span>;
<a name="l00405"></a>00405             src = strtol(tmp1, &amp;err, 10);
<a name="l00406"></a>00406             <span class="keywordflow">if</span> (*err || src &lt; 0 || src &gt;= port_count) {
<a name="l00407"></a>00407                 puts(<span class="stringliteral">&quot;Invalid slot number&quot;</span>);
<a name="l00408"></a>00408                 <span class="keywordflow">continue</span>;
<a name="l00409"></a>00409             }
<a name="l00410"></a>00410 
<a name="l00411"></a>00411             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Enter r for rx level or t for tx level&quot;</span>, tmp2, <span class="keyword">sizeof</span>(tmp2)))
<a name="l00412"></a>00412                 <span class="keywordflow">continue</span>;
<a name="l00413"></a>00413             <span class="keywordflow">if</span> (tmp2[0] != <span class="charliteral">&#39;r&#39;</span> &amp;&amp; tmp2[0] != <span class="charliteral">&#39;t&#39;</span>) {
<a name="l00414"></a>00414                 puts(<span class="stringliteral">&quot;Invalid option&quot;</span>);
<a name="l00415"></a>00415                 <span class="keywordflow">continue</span>;
<a name="l00416"></a>00416             }
<a name="l00417"></a>00417 
<a name="l00418"></a>00418             <span class="keywordflow">if</span> (!input(<span class="stringliteral">&quot;Duration to monitor (in seconds)&quot;</span>, tmp1, <span class="keyword">sizeof</span>(tmp1)) )
<a name="l00419"></a>00419                 <span class="keywordflow">continue</span>;
<a name="l00420"></a>00420             dur = strtol(tmp1, &amp;err, 10);
<a name="l00421"></a>00421             <span class="keywordflow">if</span> (*err) {
<a name="l00422"></a>00422                 puts(<span class="stringliteral">&quot;Invalid duration number&quot;</span>);
<a name="l00423"></a>00423                 <span class="keywordflow">continue</span>;
<a name="l00424"></a>00424             }
<a name="l00425"></a>00425 
<a name="l00426"></a>00426             monitor_level(conf, src, tmp2[0], dur);
<a name="l00427"></a>00427             <span class="keywordflow">break</span>;
<a name="l00428"></a>00428 
<a name="l00429"></a>00429         <span class="keywordflow">case</span> <span class="charliteral">&#39;q&#39;</span>:
<a name="l00430"></a>00430             <span class="keywordflow">goto</span> on_quit;
<a name="l00431"></a>00431 
<a name="l00432"></a>00432         <span class="keywordflow">default</span>:
<a name="l00433"></a>00433             printf(<span class="stringliteral">&quot;Invalid input character &#39;%c&#39;\n&quot;</span>, tmp[0]);
<a name="l00434"></a>00434             <span class="keywordflow">break</span>;
<a name="l00435"></a>00435         }
<a name="l00436"></a>00436     }
<a name="l00437"></a>00437 
<a name="l00438"></a>00438 on_quit:
<a name="l00439"></a>00439     
<a name="l00440"></a>00440     <span class="comment">/* Start deinitialization: */</span>
<a name="l00441"></a>00441 
<a name="l00442"></a>00442     <span class="comment">/* Destroy conference bridge */</span>
<a name="l00443"></a>00443     status = <a class="code" href="group__PJMEDIA__CONF.htm#ga4d785e898ad613ca80904eb452935437">pjmedia_conf_destroy</a>( conf );
<a name="l00444"></a>00444     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00445"></a>00445 
<a name="l00446"></a>00446 
<a name="l00447"></a>00447     <span class="comment">/* Destroy file ports */</span>
<a name="l00448"></a>00448     <span class="keywordflow">for</span> (i=0; i&lt;file_count; ++i) {
<a name="l00449"></a>00449         status = <a class="code" href="group__PJMEDIA__PORT.htm#ga2d9ea1ac22e90437ef5d6471ef912d4b">pjmedia_port_destroy</a>( file_port[i]);
<a name="l00450"></a>00450         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00451"></a>00451     }
<a name="l00452"></a>00452 
<a name="l00453"></a>00453     <span class="comment">/* Destroy recorder port */</span>
<a name="l00454"></a>00454     <span class="keywordflow">if</span> (rec_port)
<a name="l00455"></a>00455         <a class="code" href="group__PJMEDIA__PORT.htm#ga2d9ea1ac22e90437ef5d6471ef912d4b">pjmedia_port_destroy</a>(rec_port);
<a name="l00456"></a>00456 
<a name="l00457"></a>00457     <span class="comment">/* Release application pool */</span>
<a name="l00458"></a>00458     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>( pool );
<a name="l00459"></a>00459 
<a name="l00460"></a>00460     <span class="comment">/* Destroy media endpoint. */</span>
<a name="l00461"></a>00461     <a class="code" href="group__PJMED__ENDPT.htm#gae2304cc656a0e6a602f6cdaaec91bb19">pjmedia_endpt_destroy</a>( med_endpt );
<a name="l00462"></a>00462 
<a name="l00463"></a>00463     <span class="comment">/* Destroy pool factory */</span>
<a name="l00464"></a>00464     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__CACHING__POOL.htm#ga4c912e7d9e08dae33c2fecea9f1949bc">pj_caching_pool_destroy</a>( &amp;cp );
<a name="l00465"></a>00465 
<a name="l00466"></a>00466     <span class="comment">/* Shutdown PJLIB */</span>
<a name="l00467"></a>00467     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gad42209dcf11f957ed9f1790e30f519cd">pj_shutdown</a>();
<a name="l00468"></a>00468 
<a name="l00469"></a>00469     <span class="comment">/* Done. */</span>
<a name="l00470"></a>00470     <span class="keywordflow">return</span> 0;
<a name="l00471"></a>00471 }
<a name="l00472"></a>00472 
<a name="l00473"></a>00473 
<a name="l00474"></a>00474 <span class="comment">/*</span>
<a name="l00475"></a>00475 <span class="comment"> * List the ports in conference bridge</span>
<a name="l00476"></a>00476 <span class="comment"> */</span>
<a name="l00477"></a>00477 <span class="keyword">static</span> <span class="keywordtype">void</span> conf_list(<a class="code" href="group__PJMEDIA__CONF.htm#ga7af91147cffd957784f2e51b72d19edd">pjmedia_conf</a> *conf, <span class="keywordtype">int</span> detail)
<a name="l00478"></a>00478 {
<a name="l00479"></a>00479     <span class="keyword">enum</span> { MAX_PORTS = 32 };
<a name="l00480"></a>00480     <span class="keywordtype">unsigned</span> i, count;
<a name="l00481"></a>00481     <a class="code" href="structpjmedia__conf__port__info.htm">pjmedia_conf_port_info</a> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SYS__INFO.htm#ga5fdc2ee11d7ed4e87245acd50a87a838">info</a>[MAX_PORTS];
<a name="l00482"></a>00482 
<a name="l00483"></a>00483     printf(<span class="stringliteral">&quot;Conference ports:\n&quot;</span>);
<a name="l00484"></a>00484 
<a name="l00485"></a>00485     count = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(info);
<a name="l00486"></a>00486     <a class="code" href="group__PJMEDIA__CONF.htm#ga5474a9892cf2004123082254d171dc2f">pjmedia_conf_get_ports_info</a>(conf, &amp;count, info);
<a name="l00487"></a>00487 
<a name="l00488"></a>00488     <span class="keywordflow">for</span> (i=0; i&lt;count; ++i) {
<a name="l00489"></a>00489         <span class="keywordtype">char</span> txlist[4*MAX_PORTS];
<a name="l00490"></a>00490         <span class="keywordtype">unsigned</span> j;
<a name="l00491"></a>00491         <a class="code" href="structpjmedia__conf__port__info.htm">pjmedia_conf_port_info</a> *port_info = &amp;info[i];   
<a name="l00492"></a>00492         
<a name="l00493"></a>00493         txlist[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00494"></a>00494         <span class="keywordflow">for</span> (j=0; j&lt;port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a24e81bf6e966a46b3c2486bdb9cc2c1c">listener_cnt</a>; ++j) {
<a name="l00495"></a>00495             <span class="keywordtype">char</span> s[10];
<a name="l00496"></a>00496             pj_ansi_sprintf(s, <span class="stringliteral">&quot;#%d &quot;</span>, port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a3fca5d6c7f24beab9cb07afe30a00313">listener_slots</a>[j]);
<a name="l00497"></a>00497             pj_ansi_strcat(txlist, s);
<a name="l00498"></a>00498 
<a name="l00499"></a>00499         }
<a name="l00500"></a>00500 
<a name="l00501"></a>00501         <span class="keywordflow">if</span> (txlist[0] == <span class="charliteral">&#39;\0&#39;</span>) {
<a name="l00502"></a>00502             txlist[0] = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00503"></a>00503             txlist[1] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00504"></a>00504         }
<a name="l00505"></a>00505 
<a name="l00506"></a>00506         <span class="keywordflow">if</span> (!detail) {
<a name="l00507"></a>00507             printf(<span class="stringliteral">&quot;Port #%02d %-25.*s  transmitting to: %s\n&quot;</span>, 
<a name="l00508"></a>00508                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a66d0d851d6d4bb0584fd67c06e3ee1af">slot</a>, 
<a name="l00509"></a>00509                    (<span class="keywordtype">int</span>)port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a6b8fea6b6b5a1452f514c268c4b51042">name</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a>, 
<a name="l00510"></a>00510                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a6b8fea6b6b5a1452f514c268c4b51042">name</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>,
<a name="l00511"></a>00511                    txlist);
<a name="l00512"></a>00512         } <span class="keywordflow">else</span> {
<a name="l00513"></a>00513             <span class="keywordtype">unsigned</span> tx_level, rx_level;
<a name="l00514"></a>00514 
<a name="l00515"></a>00515             <a class="code" href="group__PJMEDIA__CONF.htm#ga77faa2bc801802ada7427fe06896d566">pjmedia_conf_get_signal_level</a>(conf, port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a66d0d851d6d4bb0584fd67c06e3ee1af">slot</a>,
<a name="l00516"></a>00516                                           &amp;tx_level, &amp;rx_level);
<a name="l00517"></a>00517 
<a name="l00518"></a>00518             printf(<span class="stringliteral">&quot;Port #%02d:\n&quot;</span>
<a name="l00519"></a>00519                    <span class="stringliteral">&quot;  Name                    : %.*s\n&quot;</span>
<a name="l00520"></a>00520                    <span class="stringliteral">&quot;  Sampling rate           : %d Hz\n&quot;</span>
<a name="l00521"></a>00521                    <span class="stringliteral">&quot;  Samples per frame       : %d\n&quot;</span>
<a name="l00522"></a>00522                    <span class="stringliteral">&quot;  Frame time              : %d ms\n&quot;</span>
<a name="l00523"></a>00523                    <span class="stringliteral">&quot;  Signal level adjustment : tx=%d, rx=%d\n&quot;</span>
<a name="l00524"></a>00524                    <span class="stringliteral">&quot;  Current signal level    : tx=%u, rx=%u\n&quot;</span>
<a name="l00525"></a>00525                    <span class="stringliteral">&quot;  Transmitting to ports   : %s\n\n&quot;</span>,
<a name="l00526"></a>00526                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a66d0d851d6d4bb0584fd67c06e3ee1af">slot</a>,
<a name="l00527"></a>00527                    (<span class="keywordtype">int</span>)port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a6b8fea6b6b5a1452f514c268c4b51042">name</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a>,
<a name="l00528"></a>00528                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a6b8fea6b6b5a1452f514c268c4b51042">name</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>,
<a name="l00529"></a>00529                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a655cbe37c363f12878473363000b0d41">clock_rate</a>,
<a name="l00530"></a>00530                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#ac20ff08a46404aa78dd502d8a1d58457">samples_per_frame</a>,
<a name="l00531"></a>00531                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#ac20ff08a46404aa78dd502d8a1d58457">samples_per_frame</a>*1000/port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a655cbe37c363f12878473363000b0d41">clock_rate</a>,
<a name="l00532"></a>00532                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a07c68d12f257b07bac2c4a4ec3c070ca">tx_adj_level</a>,
<a name="l00533"></a>00533                    port_info-&gt;<a class="code" href="structpjmedia__conf__port__info.htm#a602c75a473ab0b684d40a0b46e8690b2">rx_adj_level</a>,
<a name="l00534"></a>00534                    tx_level,
<a name="l00535"></a>00535                    rx_level,
<a name="l00536"></a>00536                    txlist);
<a name="l00537"></a>00537         }
<a name="l00538"></a>00538 
<a name="l00539"></a>00539     }
<a name="l00540"></a>00540     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00541"></a>00541 }
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 
<a name="l00544"></a>00544 <span class="comment">/*</span>
<a name="l00545"></a>00545 <span class="comment"> * Display VU meter</span>
<a name="l00546"></a>00546 <span class="comment"> */</span>
<a name="l00547"></a>00547 <span class="keyword">static</span> <span class="keywordtype">void</span> monitor_level(<a class="code" href="group__PJMEDIA__CONF.htm#ga7af91147cffd957784f2e51b72d19edd">pjmedia_conf</a> *conf, <span class="keywordtype">int</span> slot, <span class="keywordtype">int</span> dir, <span class="keywordtype">int</span> dur)
<a name="l00548"></a>00548 {
<a name="l00549"></a>00549     <span class="keyword">enum</span> { SLEEP = 20, SAMP_CNT = 2};
<a name="l00550"></a>00550     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00551"></a>00551     <span class="keywordtype">int</span> i, total_count;
<a name="l00552"></a>00552     <span class="keywordtype">unsigned</span> level, samp_cnt;
<a name="l00553"></a>00553 
<a name="l00554"></a>00554 
<a name="l00555"></a>00555     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00556"></a>00556     printf(<span class="stringliteral">&quot;Displaying VU meter for port %d for about %d seconds\n&quot;</span>,
<a name="l00557"></a>00557            slot, dur);
<a name="l00558"></a>00558 
<a name="l00559"></a>00559     total_count = dur * 1000 / SLEEP;
<a name="l00560"></a>00560 
<a name="l00561"></a>00561     level = 0;
<a name="l00562"></a>00562     samp_cnt = 0;
<a name="l00563"></a>00563 
<a name="l00564"></a>00564     <span class="keywordflow">for</span> (i=0; i&lt;total_count; ++i) {
<a name="l00565"></a>00565         <span class="keywordtype">unsigned</span> tx_level, rx_level;
<a name="l00566"></a>00566         <span class="keywordtype">int</span> j, length;
<a name="l00567"></a>00567         <span class="keywordtype">char</span> meter[21];
<a name="l00568"></a>00568 
<a name="l00569"></a>00569         <span class="comment">/* Poll the volume every 20 msec */</span>
<a name="l00570"></a>00570         status = <a class="code" href="group__PJMEDIA__CONF.htm#ga77faa2bc801802ada7427fe06896d566">pjmedia_conf_get_signal_level</a>(conf, slot, 
<a name="l00571"></a>00571                                                &amp;tx_level, &amp;rx_level);
<a name="l00572"></a>00572         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00573"></a>00573             app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to read level&quot;</span>, status);
<a name="l00574"></a>00574             <span class="keywordflow">return</span>;
<a name="l00575"></a>00575         }
<a name="l00576"></a>00576 
<a name="l00577"></a>00577         level += (dir==<span class="charliteral">&#39;r&#39;</span> ? rx_level : tx_level);
<a name="l00578"></a>00578         ++samp_cnt;
<a name="l00579"></a>00579 
<a name="l00580"></a>00580         <span class="comment">/* Accumulate until we have enough samples */</span>
<a name="l00581"></a>00581         <span class="keywordflow">if</span> (samp_cnt &lt; SAMP_CNT) {
<a name="l00582"></a>00582             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(SLEEP);
<a name="l00583"></a>00583             <span class="keywordflow">continue</span>;
<a name="l00584"></a>00584         }
<a name="l00585"></a>00585 
<a name="l00586"></a>00586         <span class="comment">/* Get average */</span>
<a name="l00587"></a>00587         level = level / samp_cnt;
<a name="l00588"></a>00588 
<a name="l00589"></a>00589         <span class="comment">/* Draw bar */</span>
<a name="l00590"></a>00590         length = 20 * level / 255;
<a name="l00591"></a>00591         <span class="keywordflow">for</span> (j=0; j&lt;length; ++j)
<a name="l00592"></a>00592             meter[j] = <span class="charliteral">&#39;#&#39;</span>;
<a name="l00593"></a>00593         <span class="keywordflow">for</span> (; j&lt;20; ++j)
<a name="l00594"></a>00594             meter[j] = <span class="charliteral">&#39; &#39;</span>;
<a name="l00595"></a>00595         meter[20] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00596"></a>00596 
<a name="l00597"></a>00597         printf(<span class="stringliteral">&quot;Port #%02d %cx level: [%s] %d  \r&quot;</span>,
<a name="l00598"></a>00598                slot, dir, meter, level);
<a name="l00599"></a>00599 
<a name="l00600"></a>00600         <span class="comment">/* Next.. */</span>
<a name="l00601"></a>00601         samp_cnt = 0;
<a name="l00602"></a>00602         level = 0;
<a name="l00603"></a>00603 
<a name="l00604"></a>00604         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(SLEEP);
<a name="l00605"></a>00605     }
<a name="l00606"></a>00606 
<a name="l00607"></a>00607     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00608"></a>00608 }
<a name="l00609"></a>00609 
</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJMEDIA small footprint Open Source media stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
