<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Porting PJLIB (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Porting PJLIB </h1>  </div>
</div>
<div class="contents">
<dl class="note"><dt><b>Note:</b></dt><dd><b>Since version 0.5.8, PJLIB build system is now based on autoconf, so most of the time we shouldn't need to apply the tweakings below to get PJLIB working on a new platform. However, since the autoconf build system still uses the old Makefile build system, the information below may still be useful for reference. </b></dd></dl>
<h2><a class="anchor" id="new_arch_sec"></a>
Porting to New CPU Architecture</h2>
<p>Below is step-by-step guide to add support for new CPU architecture. This sample is based on porting to Alpha architecture; however steps for porting to other CPU architectures should be pretty similar.</p>
<p>Also note that in this example, the operating system used is <b>Linux</b>. Should you wish to add support for new operating system, then follow the next section <a class="el" href="porting_pjlib_pg.htm#porting_os_sec">Porting to New Operating System Target</a>.</p>
<p>Step-by-step guide to port to new CPU architecture:</p>
<ul>
<li>decide the name for the new architecture. In this case, we choose <code><b>alpha</b></code>.</li>
<li>edit file <code>$PJPROJECT/build.mak</code>, and add new section for the new target: <pre>
      #
      # Linux alpha, gcc
      #
      export MACHINE_NAME := <b>alpha</b>
      export OS_NAME := linux
      export CC_NAME := gcc
      export HOST_NAME := unix
    </pre></li>
</ul>
<ul>
<li>create a new file <code>$PJPROJECT/build/<b>m-alpha</b>.mak</code>. Alternatively create a copy from other file in this directory. The contents of this file will look something like: <pre>
      export M_CFLAGS := -D<b>PJ_M_ALPHA=1</b>
      export M_CXXFLAGS :=
      export M_LDFLAGS :=
      export M_SOURCES :=
    </pre></li>
<li>create a new file <code>$PJPROJECT/pjlib/include/pj/compat/<b>m_alpha.h</b></code>. Alternatively create a copy from other header file in this directory. The contents of this file will look something like: <pre>
      define PJ_HAS_PENTIUM          0
      define PJ_IS_LITTLE_ENDIAN     1
      define PJ_IS_BIG_ENDIAN        0
    </pre></li>
<li>edit <code>pjlib/include/pj/<b><a class="el" href="config_8h.htm" title="PJLIB Main configuration settings.">config.h</a></b></code>. Add new processor configuration in this header file, like follows: <pre>
      ...
      elif defined (PJ_M_ALPHA) &amp;&amp; PJ_M_ALPHA != 0
      #   include &lt;pj/compat/m_alpha.h&gt;
      ...
    </pre></li>
<li>done. Build PJLIB with: <pre>
      $ cd $PJPROJECT/pjlib/build
      $ make dep
      $ make clean
      $ make
    </pre></li>
</ul>
<h2><a class="anchor" id="porting_os_sec"></a>
Porting to New Operating System Target</h2>
<p>This section will try to give you rough guideline on how to port PJLIB to a new target. As a sample, we give the target a name tag, for example <code><b>xos</b></code> (for X OS).</p>
<h3><a class="anchor" id="new_compat_os_h_file_sec"></a>
Create New Compat Header File</h3>
<p>You'll need to create a new header file <b><code>include/pj/compat/os_xos.h</code></b>. You can copy as a template other header file and edit it accordingly.</p>
<h3><a class="anchor" id="modify_config_h_file_sec"></a>
Modify config.h</h3>
<p>Then modify file <b><code><a class="el" href="config_8h.htm" title="PJLIB Main configuration settings.">include/pj/config.h</a></code></b> to include this file accordingly (e.g. when macro <code><b>PJ_XOS</b></code> is defined):</p>
<div class="fragment"><pre class="fragment">
 ...
 #elif defined(PJ_XOS)
 #  include &lt;pj/compat/os_xos.h&gt;
 #else
 #...
 </pre></div><h3><a class="anchor" id="new_target_mak_file_sec"></a>
Create New Global Make Config File</h3>
<p>Then you'll need to create global configuration file that is specific for this OS, i.e. <code><b>os-xos.mak</b></code> in <code><b>$PJPROJECT/build</b></code> directory.</p>
<p>At very minimum, the file will normally need to define <code><b>PJ_XOS=1</b></code> in the <code>CFLAGS</code> section:</p>
<div class="fragment"><pre class="fragment">
#
# $PJPROJECT/build/os-xos.mak:
#
export OS_CFLAGS   := $(CC_DEF)PJ_XOS=1
export OS_CXXFLAGS := 
export OS_LDFLAGS  :=
export OS_SOURCES  := 
 </pre></div><h3><a class="anchor" id="new_target_prj_mak_file_sec"></a>
Create New Project's Make Config File</h3>
<p>Then you'll need to create xos-specific configuration file for PJLIB. This file is also named <code><b>os-xos.mak</b></code>, but its located in <code><b>pjlib/build</b></code> directory. This file will specify source files that are specific to this OS to be included in the build process.</p>
<p>Below is a sample: </p>
<div class="fragment"><pre class="fragment">
#
# pjlib/build/os-xos.mak:
#  XOS specific configuration for PJLIB.
#
export PJLIB_OBJS += 	os_core_xos.o \
                        os_error_unix.o \
                        os_time_ansi.o
export TEST_OBJS +=	main.o
export TARGETS	    =	pjlib pjlib-test
 </pre></div><h3><a class="anchor" id="new_target_src_sec"></a>
Create and Edit Source Files</h3>
<p>You'll normally need to create at least these files:</p>
<ul>
<li><code><b>os_core_xos.c</b></code>: core OS specific functionality.</li>
<li><code><b>os_timestamp_xos.c</b></code>: how to get timestamp in this OS.</li>
</ul>
<p>Depending on how things are done in your OS, you may need to create these files:</p>
<ul>
<li><code><b>os_error_*.c</b></code>: how to manipulate OS error codes. Alternatively you may use existing <code>os_error_unix.c</code> if the OS has <code>errno</code> and <code>strerror()</code> function.</li>
<li><code><b>ioqueue_*.c</b></code>: if the OS has specific method to perform asynchronous I/O. Alternatively you may use existing <code>ioqueue_select.c</code> if the OS supports <code>select()</code> function call.</li>
<li><code><b>sock_*.c</b></code>: if the OS has specific method to perform socket communication. Alternatively you may use existing <code>sock_bsd.c</code> if the OS supports BSD socket API, and edit <code>include/pj/compat/socket.h</code> file accordingly.</li>
</ul>
<p>You will also need to check various files in <code><b>include/pj/compat/*.h</b></code>, to see if they're compatible with your OS.</p>
<h3><a class="anchor" id="new_target_build_file_sec"></a>
Build The Project</h3>
<p>After basic building blocks have been created for the OS, then the easiest way to see which parts need to be fixed is by building the project and see the error messages.</p>
<h3><a class="anchor" id="new_target_edit_vs_new_file_sec"></a>
Editing Existing Files vs Creating New File</h3>
<p>When you encounter compatibility errors in PJLIB during porting, you have three options on how to fix the error:</p>
<ul>
<li>edit the existing <code>*.c</code> file, and give it <code>ifdef</code> switch for the new OS, or</li>
<li>edit <code>include/pj/compat/*.h</code> instead, or</li>
<li>create a totally new file.</li>
</ul>
<p>Basicly there is no strict rule on which approach is the best to use, however the following guidelines may be used:</p>
<ul>
<li>if the file is expected to be completely different than any existing file, then perhaps you should create a completely new file. For example, file <code>os_core_xxx.c</code> will normally be different for each OS flavour.</li>
<li>if the difference can be localized in <code>include/compat</code> header file, and existing <code>ifdef</code> switch is there, then preferably you should edit this <code>include/compat</code> header file.</li>
<li>if the existing <code>*.c</code> file has <code>ifdef</code> switch, then you may add another <code>elif</code> switch there. This normally is used for behaviors that are not totally different on each platform.</li>
<li>other than that above, use your own judgement on whether to edit the file or create new file etc. </li>
</ul>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
