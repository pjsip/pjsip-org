<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj::AudDevManager Class Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacepj.htm">pj</a></li><li class="navelem"><a class="el" href="classpj_1_1AudDevManager.htm">AudDevManager</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle"><div class="title">pj::AudDevManager Class Reference<div class="ingroups"><a class="el" href="group__PJSUA2__Ref.htm">pjsua2 API Reference</a> &raquo; <a class="el" href="group__PJSUA2__MED.htm">Media</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;media.hpp&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7af96066886d3377eb52f7c9bf33eb10"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a7af96066886d3377eb52f7c9bf33eb10">getCaptureDev</a> () const  throw (Error)</td></tr>
<tr class="separator:a7af96066886d3377eb52f7c9bf33eb10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa81a935ce2128a381c07df761ea30a2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#aa81a935ce2128a381c07df761ea30a2f">getCaptureDevMedia</a> ()  throw (Error)</td></tr>
<tr class="separator:aa81a935ce2128a381c07df761ea30a2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8b849ed52d7027462c63850fb9bdd31"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ac8b849ed52d7027462c63850fb9bdd31">getPlaybackDev</a> () const  throw (Error)</td></tr>
<tr class="separator:ac8b849ed52d7027462c63850fb9bdd31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93fde4e54e0a74947a66fc902b760fcf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a93fde4e54e0a74947a66fc902b760fcf">getPlaybackDevMedia</a> ()  throw (Error)</td></tr>
<tr class="separator:a93fde4e54e0a74947a66fc902b760fcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0756cda4c5c5ef49cae5c860069cfd7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ae0756cda4c5c5ef49cae5c860069cfd7">setCaptureDev</a> (int capture_dev) const  throw (Error)</td></tr>
<tr class="separator:ae0756cda4c5c5ef49cae5c860069cfd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa42a7b8f5ca820a0b587500b1805fed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#aaa42a7b8f5ca820a0b587500b1805fed">setPlaybackDev</a> (int playback_dev) const  throw (Error)</td></tr>
<tr class="separator:aaa42a7b8f5ca820a0b587500b1805fed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea225ee784332bb2a780a94660ab9ed6"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="group__PJSUA2__MED.htm#gadc45053be1344d5392475f4fa2ebbd08">AudioDevInfoVector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#aea225ee784332bb2a780a94660ab9ed6">enumDev</a> ()  throw (Error)</td></tr>
<tr class="separator:aea225ee784332bb2a780a94660ab9ed6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5d1a5956dade502d8dde86a1a3d3215"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSUA2__MED.htm#ga0a38f6ae010fba843ca1399322b3688f">AudioDevInfoVector2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ae5d1a5956dade502d8dde86a1a3d3215">enumDev2</a> () const  throw (Error)</td></tr>
<tr class="separator:ae5d1a5956dade502d8dde86a1a3d3215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83827b84a7162629e4094d1e3b8801fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a83827b84a7162629e4094d1e3b8801fb">setNullDev</a> ()  throw (Error)</td></tr>
<tr class="separator:a83827b84a7162629e4094d1e3b8801fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa85df1eb2e1aee0d0c31bd4dc01573fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSUA2__MED.htm#gaae8a1276b7bf130aa2e1969f9ec1e150">MediaPort</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#aa85df1eb2e1aee0d0c31bd4dc01573fa">setNoDev</a> ()</td></tr>
<tr class="separator:aa85df1eb2e1aee0d0c31bd4dc01573fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a670128de00a981edc8cac3ce4d78e784"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a670128de00a981edc8cac3ce4d78e784">setSndDevMode</a> (unsigned mode) const  throw (Error)</td></tr>
<tr class="separator:a670128de00a981edc8cac3ce4d78e784"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9f8ff6ba298553455f18e747c2ca096"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ac9f8ff6ba298553455f18e747c2ca096">setEcOptions</a> (unsigned tail_msec, unsigned options)  throw (Error)</td></tr>
<tr class="separator:ac9f8ff6ba298553455f18e747c2ca096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4057cdc0d7f9d494226074785755bfeb"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a4057cdc0d7f9d494226074785755bfeb">getEcTail</a> () const  throw (Error)</td></tr>
<tr class="separator:a4057cdc0d7f9d494226074785755bfeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab86ac5a76b3fe87d8ccb6a40fa02e78e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ab86ac5a76b3fe87d8ccb6a40fa02e78e">sndIsActive</a> () const</td></tr>
<tr class="separator:ab86ac5a76b3fe87d8ccb6a40fa02e78e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa311c55ab7dbd702ac3e829272b27066"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#aa311c55ab7dbd702ac3e829272b27066">refreshDevs</a> ()  throw (Error)</td></tr>
<tr class="separator:aa311c55ab7dbd702ac3e829272b27066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4dbb15d043ab7fb9d031e862f589c3a"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#aa4dbb15d043ab7fb9d031e862f589c3a">getDevCount</a> () const</td></tr>
<tr class="separator:aa4dbb15d043ab7fb9d031e862f589c3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a224c2d9222f52c3f327581e108fdd27c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1AudioDevInfo.htm">AudioDevInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a224c2d9222f52c3f327581e108fdd27c">getDevInfo</a> (int id) const  throw (Error)</td></tr>
<tr class="separator:a224c2d9222f52c3f327581e108fdd27c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ae6de6a32d7a7849dd0fd2ed7d2a1ef"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a5ae6de6a32d7a7849dd0fd2ed7d2a1ef">lookupDev</a> (const string &amp;drv_name, const string &amp;dev_name) const  throw (Error)</td></tr>
<tr class="separator:a5ae6de6a32d7a7849dd0fd2ed7d2a1ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8295a63fd9137133c0c0339fb2882d77"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a8295a63fd9137133c0c0339fb2882d77">capName</a> (<a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#gac0056b89f06893c8a67885c4307e0737">pjmedia_aud_dev_cap</a> cap) const</td></tr>
<tr class="separator:a8295a63fd9137133c0c0339fb2882d77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae138abfa4bf51fc414d5ebe5f8bedf66"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ae138abfa4bf51fc414d5ebe5f8bedf66">setExtFormat</a> (const <a class="el" href="structpj_1_1MediaFormatAudio.htm">MediaFormatAudio</a> &amp;format, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:ae138abfa4bf51fc414d5ebe5f8bedf66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a848006c335f601125c1bd560e59ae974"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1MediaFormatAudio.htm">MediaFormatAudio</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a848006c335f601125c1bd560e59ae974">getExtFormat</a> () const  throw (Error)</td></tr>
<tr class="separator:a848006c335f601125c1bd560e59ae974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79ed99a6f3492c3d965489407b60bdb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a79ed99a6f3492c3d965489407b60bdb9">setInputLatency</a> (unsigned latency_msec, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a79ed99a6f3492c3d965489407b60bdb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07cd16dfb3062208d5ad968a1a9f76c5"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a07cd16dfb3062208d5ad968a1a9f76c5">getInputLatency</a> () const  throw (Error)</td></tr>
<tr class="separator:a07cd16dfb3062208d5ad968a1a9f76c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6a2ab35dc7b52ed454a41b968c93298"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ae6a2ab35dc7b52ed454a41b968c93298">setOutputLatency</a> (unsigned latency_msec, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:ae6a2ab35dc7b52ed454a41b968c93298"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a178871253920bec68de8600efd4a758b"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a178871253920bec68de8600efd4a758b">getOutputLatency</a> () const  throw (Error)</td></tr>
<tr class="separator:a178871253920bec68de8600efd4a758b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52cc1f0b5528935b7b300a38db4ab992"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a52cc1f0b5528935b7b300a38db4ab992">setInputVolume</a> (unsigned volume, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a52cc1f0b5528935b7b300a38db4ab992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499afb95206d6cb313448bf32313c3c5"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a499afb95206d6cb313448bf32313c3c5">getInputVolume</a> () const  throw (Error)</td></tr>
<tr class="separator:a499afb95206d6cb313448bf32313c3c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5075c49613d2777d55b491e699b38c77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a5075c49613d2777d55b491e699b38c77">setOutputVolume</a> (unsigned volume, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a5075c49613d2777d55b491e699b38c77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2116d979430900db2da8f5983287a903"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a2116d979430900db2da8f5983287a903">getOutputVolume</a> () const  throw (Error)</td></tr>
<tr class="separator:a2116d979430900db2da8f5983287a903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae48e4305105605014fd7d90a8784388c"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ae48e4305105605014fd7d90a8784388c">getInputSignal</a> () const  throw (Error)</td></tr>
<tr class="separator:ae48e4305105605014fd7d90a8784388c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af10cf94b20c7e440275f1a420f37bf37"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#af10cf94b20c7e440275f1a420f37bf37">getOutputSignal</a> () const  throw (Error)</td></tr>
<tr class="separator:af10cf94b20c7e440275f1a420f37bf37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20a591d9824f0ba3f445584c8d008c84"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a20a591d9824f0ba3f445584c8d008c84">setInputRoute</a> (<a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a> route, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a20a591d9824f0ba3f445584c8d008c84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a292b1769f98ccdb0b0cf1e7581d84671"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a292b1769f98ccdb0b0cf1e7581d84671">getInputRoute</a> () const  throw (Error)</td></tr>
<tr class="separator:a292b1769f98ccdb0b0cf1e7581d84671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a849bdbc3927253b44a4f5cefc9a31040"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a849bdbc3927253b44a4f5cefc9a31040">setOutputRoute</a> (<a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a> route, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a849bdbc3927253b44a4f5cefc9a31040"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e0d66397f8dfd15b6b5dd9b8d2ecf78"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a6e0d66397f8dfd15b6b5dd9b8d2ecf78">getOutputRoute</a> () const  throw (Error)</td></tr>
<tr class="separator:a6e0d66397f8dfd15b6b5dd9b8d2ecf78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a650c7e1cbaf4426d0b144c2270cc3196"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a650c7e1cbaf4426d0b144c2270cc3196">setVad</a> (bool enable, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a650c7e1cbaf4426d0b144c2270cc3196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13d784fea45db789880c910429655577"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a13d784fea45db789880c910429655577">getVad</a> () const  throw (Error)</td></tr>
<tr class="separator:a13d784fea45db789880c910429655577"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a633afba7547453677161bff833725aad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a633afba7547453677161bff833725aad">setCng</a> (bool enable, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a633afba7547453677161bff833725aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5b38fa0e93234b9851a073e0c801bd8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#ab5b38fa0e93234b9851a073e0c801bd8">getCng</a> () const  throw (Error)</td></tr>
<tr class="separator:ab5b38fa0e93234b9851a073e0c801bd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84877f47df7ce305f17646569a25f17d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#a84877f47df7ce305f17646569a25f17d">setPlc</a> (bool enable, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a84877f47df7ce305f17646569a25f17d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc3ce35e72b9952f3d725b627faa1d47"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1AudDevManager.htm#acc3ce35e72b9952f3d725b627faa1d47">getPlc</a> () const  throw (Error)</td></tr>
<tr class="separator:acc3ce35e72b9952f3d725b627faa1d47"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a500d74fc41e3ab6b4889a579193566ed"><td class="memItemLeft" align="right" valign="top"><a id="a500d74fc41e3ab6b4889a579193566ed" name="a500d74fc41e3ab6b4889a579193566ed"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Endpoint</b></td></tr>
<tr class="separator:a500d74fc41e3ab6b4889a579193566ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >Audio device manager. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a7af96066886d3377eb52f7c9bf33eb10" name="a7af96066886d3377eb52f7c9bf33eb10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7af96066886d3377eb52f7c9bf33eb10">&#9670;&nbsp;</a></span>getCaptureDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::AudDevManager::getCaptureDev </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get currently active capture sound devices. If sound devices has not been created, it is possible that the function returns -1 as device IDs.</p>
<dl class="section return"><dt>Returns</dt><dd>Device ID of the capture device. </dd></dl>

</div>
</div>
<a id="aa81a935ce2128a381c07df761ea30a2f" name="aa81a935ce2128a381c07df761ea30a2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa81a935ce2128a381c07df761ea30a2f">&#9670;&nbsp;</a></span>getCaptureDevMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp; pj::AudDevManager::getCaptureDevMedia </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> of the capture audio device.</p>
<dl class="section return"><dt>Returns</dt><dd>Audio media for the capture device. </dd></dl>

</div>
</div>
<a id="ac8b849ed52d7027462c63850fb9bdd31" name="ac8b849ed52d7027462c63850fb9bdd31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8b849ed52d7027462c63850fb9bdd31">&#9670;&nbsp;</a></span>getPlaybackDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::AudDevManager::getPlaybackDev </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get currently active playback sound devices. If sound devices has not been created, it is possible that the function returns -1 as device IDs.</p>
<dl class="section return"><dt>Returns</dt><dd>Device ID of the playback device. </dd></dl>

</div>
</div>
<a id="a93fde4e54e0a74947a66fc902b760fcf" name="a93fde4e54e0a74947a66fc902b760fcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93fde4e54e0a74947a66fc902b760fcf">&#9670;&nbsp;</a></span>getPlaybackDevMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> &amp; pj::AudDevManager::getPlaybackDevMedia </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the <a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> of the speaker/playback audio device.</p>
<dl class="section return"><dt>Returns</dt><dd>Audio media for the speaker/playback device. </dd></dl>

</div>
</div>
<a id="ae0756cda4c5c5ef49cae5c860069cfd7" name="ae0756cda4c5c5ef49cae5c860069cfd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0756cda4c5c5ef49cae5c860069cfd7">&#9670;&nbsp;</a></span>setCaptureDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setCaptureDev </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>capture_dev</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Select or change capture sound device. Application may call this function at any time to replace current sound device. Calling this method will not change the state of the sound device (opened/closed).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">capture_dev</td><td>Device ID of the capture device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aaa42a7b8f5ca820a0b587500b1805fed" name="aaa42a7b8f5ca820a0b587500b1805fed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa42a7b8f5ca820a0b587500b1805fed">&#9670;&nbsp;</a></span>setPlaybackDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setPlaybackDev </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>playback_dev</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Select or change playback sound device. Application may call this function at any time to replace current sound device. Calling this method will not change the state of the sound device (opened/closed).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">playback_dev</td><td>Device ID of the playback device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aea225ee784332bb2a780a94660ab9ed6" name="aea225ee784332bb2a780a94660ab9ed6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea225ee784332bb2a780a94660ab9ed6">&#9670;&nbsp;</a></span>enumDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="group__PJSUA2__MED.htm#gadc45053be1344d5392475f4fa2ebbd08">AudioDevInfoVector</a> &amp; pj::AudDevManager::enumDev </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Warning: deprecated, use enumDev2 instead. This function is not safe in multithreaded environment.</p>
<p >Enum all audio devices installed in the system. This function is not safe in multithreaded environment.</p>
<dl class="section return"><dt>Returns</dt><dd>The list of audio device info. </dd></dl>

</div>
</div>
<a id="ae5d1a5956dade502d8dde86a1a3d3215" name="ae5d1a5956dade502d8dde86a1a3d3215"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5d1a5956dade502d8dde86a1a3d3215">&#9670;&nbsp;</a></span>enumDev2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSUA2__MED.htm#ga0a38f6ae010fba843ca1399322b3688f">AudioDevInfoVector2</a> pj::AudDevManager::enumDev2 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Enum all audio devices installed in the system.</p>
<dl class="section return"><dt>Returns</dt><dd>The list of audio device info. </dd></dl>

</div>
</div>
<a id="a83827b84a7162629e4094d1e3b8801fb" name="a83827b84a7162629e4094d1e3b8801fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83827b84a7162629e4094d1e3b8801fb">&#9670;&nbsp;</a></span>setNullDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setNullDev </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set pjsua to use null sound device. The null sound device only provides the timing needed by the conference bridge, and will not interract with any hardware. </p>

</div>
</div>
<a id="aa85df1eb2e1aee0d0c31bd4dc01573fa" name="aa85df1eb2e1aee0d0c31bd4dc01573fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa85df1eb2e1aee0d0c31bd4dc01573fa">&#9670;&nbsp;</a></span>setNoDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSUA2__MED.htm#gaae8a1276b7bf130aa2e1969f9ec1e150">MediaPort</a> * pj::AudDevManager::setNoDev </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Disconnect the main conference bridge from any sound devices, and let application connect the bridge to it's own sound device/master port.</p>
<dl class="section return"><dt>Returns</dt><dd>The port interface of the conference bridge, so that application can connect this to it's own sound device or master port. </dd></dl>

</div>
</div>
<a id="a670128de00a981edc8cac3ce4d78e784" name="a670128de00a981edc8cac3ce4d78e784"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a670128de00a981edc8cac3ce4d78e784">&#9670;&nbsp;</a></span>setSndDevMode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setSndDevMode </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Set sound device mode.</p>
<p >Note that this method will open the sound device, using current active IDs set via <a class="el" href="classpj_1_1AudDevManager.htm#ae0756cda4c5c5ef49cae5c860069cfd7">setCaptureDev()</a> or <a class="el" href="classpj_1_1AudDevManager.htm#aaa42a7b8f5ca820a0b587500b1805fed">setPlaybackDev()</a>, if the flag PJSUA_SND_DEV_NO_IMMEDIATE_OPEN is not specified.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>The sound device mode, as bitmask combination of <a class="el" href="group__PJSUA__LIB__MEDIA.htm#ga0bb1b2a012780345daf4bb0bb1d73437">pjsua_snd_dev_mode</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac9f8ff6ba298553455f18e747c2ca096" name="ac9f8ff6ba298553455f18e747c2ca096"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9f8ff6ba298553455f18e747c2ca096">&#9670;&nbsp;</a></span>setEcOptions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setEcOptions </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>tail_msec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Change the echo cancellation settings.</p>
<p >The behavior of this function depends on whether the sound device is currently active, and if it is, whether device or software AEC is being used.</p>
<p >If the sound device is currently active, and if the device supports AEC, this function will forward the change request to the device and it will be up to the device on whether support the request. If software AEC is being used (the software EC will be used if the device does not support AEC), this function will change the software EC settings. In all cases, the setting will be saved for future opening of the sound device.</p>
<p >If the sound device is not currently active, this will only change the default AEC settings and the setting will be applied next time the sound device is opened.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tail_msec</td><td>The tail length, in miliseconds. Set to zero to disable AEC. </td></tr>
    <tr><td class="paramname">options</td><td>Options to be passed to <a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__Echo__Cancel.htm#ga6b2a27be70d96eb16fac66f19b6913d3">pjmedia_echo_create()</a>. Normally the value should be zero. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4057cdc0d7f9d494226074785755bfeb" name="a4057cdc0d7f9d494226074785755bfeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4057cdc0d7f9d494226074785755bfeb">&#9670;&nbsp;</a></span>getEcTail()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getEcTail </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get current echo canceller tail length.</p>
<dl class="section return"><dt>Returns</dt><dd>The EC tail length in milliseconds, If AEC is disabled, the value will be zero. </dd></dl>

</div>
</div>
<a id="ab86ac5a76b3fe87d8ccb6a40fa02e78e" name="ab86ac5a76b3fe87d8ccb6a40fa02e78e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab86ac5a76b3fe87d8ccb6a40fa02e78e">&#9670;&nbsp;</a></span>sndIsActive()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::AudDevManager::sndIsActive </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check whether the sound device is currently active. The sound device may be inactive if the application has set the auto close feature to non-zero (the sndAutoCloseTime setting in <a class="el" href="structpj_1_1MediaConfig.htm">MediaConfig</a>), or if null sound device or no sound device has been configured via the <a class="el" href="classpj_1_1AudDevManager.htm#aa85df1eb2e1aee0d0c31bd4dc01573fa">setNoDev()</a> function. </p>

</div>
</div>
<a id="aa311c55ab7dbd702ac3e829272b27066" name="aa311c55ab7dbd702ac3e829272b27066"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa311c55ab7dbd702ac3e829272b27066">&#9670;&nbsp;</a></span>refreshDevs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::refreshDevs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Refresh the list of sound devices installed in the system. This method will only refresh the list of audio device so all active audio streams will be unaffected. After refreshing the device list, application MUST make sure to update all index references to audio devices before calling any method that accepts audio device index as its parameter. </p>

</div>
</div>
<a id="aa4dbb15d043ab7fb9d031e862f589c3a" name="aa4dbb15d043ab7fb9d031e862f589c3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4dbb15d043ab7fb9d031e862f589c3a">&#9670;&nbsp;</a></span>getDevCount()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getDevCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the number of sound devices installed in the system.</p>
<dl class="section return"><dt>Returns</dt><dd>The number of sound devices installed in the system. </dd></dl>

</div>
</div>
<a id="a224c2d9222f52c3f327581e108fdd27c" name="a224c2d9222f52c3f327581e108fdd27c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a224c2d9222f52c3f327581e108fdd27c">&#9670;&nbsp;</a></span>getDevInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1AudioDevInfo.htm">AudioDevInfo</a> pj::AudDevManager::getDevInfo </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get device information.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>The audio device ID.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The device information which will be filled in by this method once it returns successfully. </dd></dl>

</div>
</div>
<a id="a5ae6de6a32d7a7849dd0fd2ed7d2a1ef" name="a5ae6de6a32d7a7849dd0fd2ed7d2a1ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ae6de6a32d7a7849dd0fd2ed7d2a1ef">&#9670;&nbsp;</a></span>lookupDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::AudDevManager::lookupDev </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>drv_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>dev_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Lookup device index based on the driver and device name.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">drv_name</td><td>The driver name. </td></tr>
    <tr><td class="paramname">dev_name</td><td>The device name.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The device ID. If the device is not found, <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown. </dd></dl>

</div>
</div>
<a id="a8295a63fd9137133c0c0339fb2882d77" name="a8295a63fd9137133c0c0339fb2882d77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8295a63fd9137133c0c0339fb2882d77">&#9670;&nbsp;</a></span>capName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string pj::AudDevManager::capName </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#gac0056b89f06893c8a67885c4307e0737">pjmedia_aud_dev_cap</a>&#160;</td>
          <td class="paramname"><em>cap</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get string info for the specified capability.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cap</td><td>The capability ID.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Capability name. </dd></dl>

</div>
</div>
<a id="ae138abfa4bf51fc414d5ebe5f8bedf66" name="ae138abfa4bf51fc414d5ebe5f8bedf66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae138abfa4bf51fc414d5ebe5f8bedf66">&#9670;&nbsp;</a></span>setExtFormat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setExtFormat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1MediaFormatAudio.htm">MediaFormatAudio</a> &amp;&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio format capability (other than PCM) to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_EXT_FORMAT capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">format</td><td>The audio format. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a848006c335f601125c1bd560e59ae974" name="a848006c335f601125c1bd560e59ae974"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a848006c335f601125c1bd560e59ae974">&#9670;&nbsp;</a></span>getExtFormat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1MediaFormatAudio.htm">MediaFormatAudio</a> pj::AudDevManager::getExtFormat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio format capability (other than PCM) of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_EXT_FORMAT capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio format. </dd></dl>

</div>
</div>
<a id="a79ed99a6f3492c3d965489407b60bdb9" name="a79ed99a6f3492c3d965489407b60bdb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79ed99a6f3492c3d965489407b60bdb9">&#9670;&nbsp;</a></span>setInputLatency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setInputLatency </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>latency_msec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio input latency control or query capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">latency_msec</td><td>The input latency. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a07cd16dfb3062208d5ad968a1a9f76c5" name="a07cd16dfb3062208d5ad968a1a9f76c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07cd16dfb3062208d5ad968a1a9f76c5">&#9670;&nbsp;</a></span>getInputLatency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getInputLatency </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio input latency control or query capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio input latency. </dd></dl>

</div>
</div>
<a id="ae6a2ab35dc7b52ed454a41b968c93298" name="ae6a2ab35dc7b52ed454a41b968c93298"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6a2ab35dc7b52ed454a41b968c93298">&#9670;&nbsp;</a></span>setOutputLatency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setOutputLatency </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>latency_msec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio output latency control or query capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">latency_msec</td><td>The output latency. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a178871253920bec68de8600efd4a758b" name="a178871253920bec68de8600efd4a758b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a178871253920bec68de8600efd4a758b">&#9670;&nbsp;</a></span>getOutputLatency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getOutputLatency </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio output latency control or query capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio output latency. </dd></dl>

</div>
</div>
<a id="a52cc1f0b5528935b7b300a38db4ab992" name="a52cc1f0b5528935b7b300a38db4ab992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52cc1f0b5528935b7b300a38db4ab992">&#9670;&nbsp;</a></span>setInputVolume()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setInputVolume </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>volume</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio input volume level capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">volume</td><td>The input volume level, in percent. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a499afb95206d6cb313448bf32313c3c5" name="a499afb95206d6cb313448bf32313c3c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499afb95206d6cb313448bf32313c3c5">&#9670;&nbsp;</a></span>getInputVolume()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getInputVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio input volume level capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown. *</p>
<dl class="section return"><dt>Returns</dt><dd>The audio input volume level, in percent. </dd></dl>

</div>
</div>
<a id="a5075c49613d2777d55b491e699b38c77" name="a5075c49613d2777d55b491e699b38c77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5075c49613d2777d55b491e699b38c77">&#9670;&nbsp;</a></span>setOutputVolume()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setOutputVolume </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>volume</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio output volume level capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">volume</td><td>The output volume level, in percent. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2116d979430900db2da8f5983287a903" name="a2116d979430900db2da8f5983287a903"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2116d979430900db2da8f5983287a903">&#9670;&nbsp;</a></span>getOutputVolume()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getOutputVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio output volume level capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio output volume level, in percent. </dd></dl>

</div>
</div>
<a id="ae48e4305105605014fd7d90a8784388c" name="ae48e4305105605014fd7d90a8784388c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae48e4305105605014fd7d90a8784388c">&#9670;&nbsp;</a></span>getInputSignal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getInputSignal </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio input signal level capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio input signal level, in percent. </dd></dl>

</div>
</div>
<a id="af10cf94b20c7e440275f1a420f37bf37" name="af10cf94b20c7e440275f1a420f37bf37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af10cf94b20c7e440275f1a420f37bf37">&#9670;&nbsp;</a></span>getOutputSignal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::AudDevManager::getOutputSignal </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio output signal level capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio output signal level, in percent. </dd></dl>

</div>
</div>
<a id="a20a591d9824f0ba3f445584c8d008c84" name="a20a591d9824f0ba3f445584c8d008c84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20a591d9824f0ba3f445584c8d008c84">&#9670;&nbsp;</a></span>setInputRoute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setInputRoute </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a>&#160;</td>
          <td class="paramname"><em>route</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio input route capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">route</td><td>The audio input route. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a292b1769f98ccdb0b0cf1e7581d84671" name="a292b1769f98ccdb0b0cf1e7581d84671"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a292b1769f98ccdb0b0cf1e7581d84671">&#9670;&nbsp;</a></span>getInputRoute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a> pj::AudDevManager::getInputRoute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio input route capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio input route. </dd></dl>

</div>
</div>
<a id="a849bdbc3927253b44a4f5cefc9a31040" name="a849bdbc3927253b44a4f5cefc9a31040"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a849bdbc3927253b44a4f5cefc9a31040">&#9670;&nbsp;</a></span>setOutputRoute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setOutputRoute </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a>&#160;</td>
          <td class="paramname"><em>route</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio output route capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">route</td><td>The audio output route. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6e0d66397f8dfd15b6b5dd9b8d2ecf78" name="a6e0d66397f8dfd15b6b5dd9b8d2ecf78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e0d66397f8dfd15b6b5dd9b8d2ecf78">&#9670;&nbsp;</a></span>getOutputRoute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__AUDIODEV__API.htm#ga33abc31c4f70f6c3445425e0bc1cd141">pjmedia_aud_dev_route</a> pj::AudDevManager::getOutputRoute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio output route capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio output route. </dd></dl>

</div>
</div>
<a id="a650c7e1cbaf4426d0b144c2270cc3196" name="a650c7e1cbaf4426d0b144c2270cc3196"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a650c7e1cbaf4426d0b144c2270cc3196">&#9670;&nbsp;</a></span>setVad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setVad </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio voice activity detection capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_VAD capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>Enable/disable voice activity detection feature. Set true to enable. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a13d784fea45db789880c910429655577" name="a13d784fea45db789880c910429655577"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13d784fea45db789880c910429655577">&#9670;&nbsp;</a></span>getVad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::AudDevManager::getVad </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio voice activity detection capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_VAD capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio voice activity detection feature. </dd></dl>

</div>
</div>
<a id="a633afba7547453677161bff833725aad" name="a633afba7547453677161bff833725aad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a633afba7547453677161bff833725aad">&#9670;&nbsp;</a></span>setCng()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setCng </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio comfort noise generation capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_CNG capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>Enable/disable comfort noise generation feature. Set true to enable. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab5b38fa0e93234b9851a073e0c801bd8" name="ab5b38fa0e93234b9851a073e0c801bd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5b38fa0e93234b9851a073e0c801bd8">&#9670;&nbsp;</a></span>getCng()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::AudDevManager::getCng </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio comfort noise generation capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_CNG capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio comfort noise generation feature. </dd></dl>

</div>
</div>
<a id="a84877f47df7ce305f17646569a25f17d" name="a84877f47df7ce305f17646569a25f17d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84877f47df7ce305f17646569a25f17d">&#9670;&nbsp;</a></span>setPlc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::AudDevManager::setPlc </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure audio packet loss concealment capability to the sound device being used. If sound device is currently active, the method will forward the setting to the sound device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_PLC capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the sound device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>Enable/disable packet loss concealment feature. Set true to enable. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acc3ce35e72b9952f3d725b627faa1d47" name="acc3ce35e72b9952f3d725b627faa1d47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc3ce35e72b9952f3d725b627faa1d47">&#9670;&nbsp;</a></span>getPlc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::AudDevManager::getPlc </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the audio packet loss concealment capability of the sound device being used. If sound device is currently active, the method will forward the request to the sound device. If sound device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_PLC capability in <a class="el" href="structpj_1_1AudioDevInfo.htm#a6a2f9094688fa735dd64cf7bd5a8a8d3">AudioDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>The audio packet loss concealment feature. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="media_8hpp.htm">media.hpp</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
