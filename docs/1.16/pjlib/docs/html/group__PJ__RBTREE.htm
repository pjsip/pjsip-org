<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Red/Black Balanced Tree (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>Red/Black Balanced Tree<br/>
<small>
[<a class="el" href="group__PJ__DS.htm">Data Structure.</a>]</small>
</h1>  </div>
</div>
<div class="contents">

<p>Red/Black tree is the variant of balanced tree, where the search, insert, and delete operation is <b>guaranteed</b> to take at most <em>O</em>( lg(n) ).  
<a href="#_details">More...</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga486cbda8689f731265731ee8544eb216">PJ_RBTREE_NODE_SIZE</a>&nbsp;&nbsp;&nbsp;(sizeof(<a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gabb70e4245995a56ccd8209fdd58db13f">PJ_RBTREE_SIZE</a>&nbsp;&nbsp;&nbsp;(sizeof(<a class="el" href="structpj__rbtree.htm">pj_rbtree</a>))</td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga2988a623a3092152646614050871e75f">pj_rbtree_comp</a> (const void *key1, const void *key2)</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gabc60f4c3d6f75c0c757d840bfff405a8">pj_rbcolor_t</a> { <b>PJ_RBCOLOR_BLACK</b>, 
<b>PJ_RBCOLOR_RED</b>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga395aeb318d85e277ffc2fcde99b9c158">pj_rbtree_init</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="group__PJ__RBTREE.htm#ga2988a623a3092152646614050871e75f">pj_rbtree_comp</a> *comp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gaa6a2a6629600d6565019b204f2794120">pj_rbtree_first</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gadbe04630482028d3f1b35c33979317d1">pj_rbtree_last</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga91da811545a41a5b9584eb5dc3e365b4">pj_rbtree_next</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga82bc968b5321a5d48e2ff87f0f949f5c">pj_rbtree_prev</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga1d391aef907c48aa90b02e3b661493d3">pj_rbtree_insert</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gaa0590a8bd993076442c5156d6a8e0d2d">pj_rbtree_find</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, const void *key)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gabce76bb85b946871ebacb40b2d24cfa7">pj_rbtree_erase</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga9f6cd9fb8a1830bdd72fa6e84b568dc9">pj_rbtree_max_height</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga021ffcb2a6950685be5078c2daa266d0">pj_rbtree_min_height</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Red/Black tree is the variant of balanced tree, where the search, insert, and delete operation is <b>guaranteed</b> to take at most <em>O</em>( lg(n) ). </p>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ga486cbda8689f731265731ee8544eb216"></a><!-- doxytag: member="rbtree.h::PJ_RBTREE_NODE_SIZE" ref="ga486cbda8689f731265731ee8544eb216" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_RBTREE_NODE_SIZE&nbsp;&nbsp;&nbsp;(sizeof(<a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>))</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Guidance on how much memory required for each of the node. </p>

</div>
</div>
<a class="anchor" id="gabb70e4245995a56ccd8209fdd58db13f"></a><!-- doxytag: member="rbtree.h::PJ_RBTREE_SIZE" ref="gabb70e4245995a56ccd8209fdd58db13f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_RBTREE_SIZE&nbsp;&nbsp;&nbsp;(sizeof(<a class="el" href="structpj__rbtree.htm">pj_rbtree</a>))</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Guidance on memory required for the tree. </p>

</div>
</div>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="ga2988a623a3092152646614050871e75f"></a><!-- doxytag: member="rbtree.h::pj_rbtree_comp" ref="ga2988a623a3092152646614050871e75f" args="(const void *key1, const void *key2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int <a class="el" href="group__PJ__RBTREE.htm#ga2988a623a3092152646614050871e75f">pj_rbtree_comp</a>(const void *key1, const void *key2)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>The type of function use to compare key value of tree node. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>0 if the keys are equal &lt;0 if key1 is lower than key2 &gt;0 if key1 is greater than key2. </dd></dl>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="gabc60f4c3d6f75c0c757d840bfff405a8"></a><!-- doxytag: member="rbtree.h::pj_rbcolor_t" ref="gabc60f4c3d6f75c0c757d840bfff405a8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__RBTREE.htm#gabc60f4c3d6f75c0c757d840bfff405a8">pj_rbcolor_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Color type for Red-Black tree. </p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gabce76bb85b946871ebacb40b2d24cfa7"></a><!-- doxytag: member="rbtree.h::pj_rbtree_erase" ref="gabce76bb85b946871ebacb40b2d24cfa7" args="(pj_rbtree *tree, pj_rbtree_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Erase a node from the tree. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>the node to be erased. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the tree node itself. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa0590a8bd993076442c5156d6a8e0d2d"></a><!-- doxytag: member="rbtree.h::pj_rbtree_find" ref="gaa0590a8bd993076442c5156d6a8e0d2d" args="(pj_rbtree *tree, const void *key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_find </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>key</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find a node which has the specified key. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>key</em>&nbsp;</td><td>the key to search. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the tree node with the specified key, or NULL if the key can not be found. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa6a2a6629600d6565019b204f2794120"></a><!-- doxytag: member="rbtree.h::pj_rbtree_first" ref="gaa6a2a6629600d6565019b204f2794120" args="(pj_rbtree *tree)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_first </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the first element in the tree. The first element always has the least value for the key, according to the comparison function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the tree node, or NULL if the tree has no element. </dd></dl>

</div>
</div>
<a class="anchor" id="ga395aeb318d85e277ffc2fcde99b9c158"></a><!-- doxytag: member="rbtree.h::pj_rbtree_init" ref="ga395aeb318d85e277ffc2fcde99b9c158" args="(pj_rbtree *tree, pj_rbtree_comp *comp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_rbtree_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__RBTREE.htm#ga2988a623a3092152646614050871e75f">pj_rbtree_comp</a> *&nbsp;</td>
          <td class="paramname"> <em>comp</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Initialize the tree. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree to be initialized. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>comp</em>&nbsp;</td><td>key comparison function to be used for this tree. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1d391aef907c48aa90b02e3b661493d3"></a><!-- doxytag: member="rbtree.h::pj_rbtree_insert" ref="ga1d391aef907c48aa90b02e3b661493d3" args="(pj_rbtree *tree, pj_rbtree_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_rbtree_insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Insert a new node. The node will be inserted at sorted location. The key of the node must be UNIQUE, i.e. it hasn't existed in the tree. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>the node to be inserted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>zero on success, or -1 if the key already exist. </dd></dl>

</div>
</div>
<a class="anchor" id="gadbe04630482028d3f1b35c33979317d1"></a><!-- doxytag: member="rbtree.h::pj_rbtree_last" ref="gadbe04630482028d3f1b35c33979317d1" args="(pj_rbtree *tree)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_last </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the last element in the tree. The last element always has the greatest key value, according to the comparison function defined for the tree. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the tree node, or NULL if the tree has no element. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9f6cd9fb8a1830bdd72fa6e84b568dc9"></a><!-- doxytag: member="rbtree.h::pj_rbtree_max_height" ref="ga9f6cd9fb8a1830bdd72fa6e84b568dc9" args="(pj_rbtree *tree, pj_rbtree_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj_rbtree_max_height </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the maximum tree height from the specified node. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>the node, or NULL to get the root of the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the maximum height, which should be at most lg(N) </dd></dl>

</div>
</div>
<a class="anchor" id="ga021ffcb2a6950685be5078c2daa266d0"></a><!-- doxytag: member="rbtree.h::pj_rbtree_min_height" ref="ga021ffcb2a6950685be5078c2daa266d0" args="(pj_rbtree *tree, pj_rbtree_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj_rbtree_min_height </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the minumum tree height from the specified node. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>the node, or NULL to get the root of the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the height </dd></dl>

</div>
</div>
<a class="anchor" id="ga91da811545a41a5b9584eb5dc3e365b4"></a><!-- doxytag: member="rbtree.h::pj_rbtree_next" ref="ga91da811545a41a5b9584eb5dc3e365b4" args="(pj_rbtree *tree, pj_rbtree_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_next </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the successive element for the specified node. The successive element is an element with greater key value. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>the node. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the successive node, or NULL if the node has no successor. </dd></dl>

</div>
</div>
<a class="anchor" id="ga82bc968b5321a5d48e2ff87f0f949f5c"></a><!-- doxytag: member="rbtree.h::pj_rbtree_prev" ref="ga82bc968b5321a5d48e2ff87f0f949f5c" args="(pj_rbtree *tree, pj_rbtree_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_prev </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&nbsp;</td>
          <td class="paramname"> <em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&nbsp;</td>
          <td class="paramname"> <em>node</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>The the previous node for the specified node. The previous node is an element with less key value. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>tree</em>&nbsp;</td><td>the tree. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>node</em>&nbsp;</td><td>the node. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the previous node, or NULL if the node has no previous node. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
