<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJNATH Reference: pj_turn_session_cb Struct Reference (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="functions.htm"><span>Data&nbsp;Fields</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<h1>pj_turn_session_cb Struct Reference<br/>
<small>
[<a class="el" href="group__PJNATH__TURN__SESSION.htm">TURN client session</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="pj_turn_session_cb" --><table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__session__cb.htm#a54bf84fc91a4c3fb400f43d1dc8b6ec4">on_send_pkt</a> )(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga03cd006c29b1d24580f5df4db912749e">pj_uint8_t</a> *pkt, unsigned pkt_len, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *dst_addr, unsigned addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__session__cb.htm#acc7dd40f29eb92f44adda236daa43608">on_channel_bound</a> )(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len, unsigned ch_num)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__session__cb.htm#ae34409c7ae7d73235f187e473ad207f8">on_rx_data</a> )(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, void *pkt, unsigned pkt_len, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__turn__session__cb.htm#af7ea6c44f365deb0b7c98f93e6dd1c82">on_state</a> )(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> old_state, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> new_state)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Callback to receive events from TURN session. </p>
<hr/><h2>Field Documentation</h2>
<a class="anchor" id="acc7dd40f29eb92f44adda236daa43608"></a><!-- doxytag: member="pj_turn_session_cb::on_channel_bound" ref="acc7dd40f29eb92f44adda236daa43608" args=")(pj_turn_session *sess, const pj_sockaddr_t *peer_addr, unsigned addr_len, unsigned ch_num)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpj__turn__session__cb.htm#acc7dd40f29eb92f44adda236daa43608">pj_turn_session_cb::on_channel_bound</a>)(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len, unsigned ch_num)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Notification when peer address has been bound successfully to a channel number.</p>
<p>This callback is optional since the nature of this callback is for information only.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sess</em>&nbsp;</td><td>The TURN session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>peer_addr</em>&nbsp;</td><td>The peer address. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>addr_len</em>&nbsp;</td><td>Length of the peer address. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ch_num</em>&nbsp;</td><td>The channel number associated with this peer address. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae34409c7ae7d73235f187e473ad207f8"></a><!-- doxytag: member="pj_turn_session_cb::on_rx_data" ref="ae34409c7ae7d73235f187e473ad207f8" args=")(pj_turn_session *sess, void *pkt, unsigned pkt_len, const pj_sockaddr_t *peer_addr, unsigned addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpj__turn__session__cb.htm#ae34409c7ae7d73235f187e473ad207f8">pj_turn_session_cb::on_rx_data</a>)(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, void *pkt, unsigned pkt_len, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *peer_addr, unsigned addr_len)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Notification when incoming data has been received, either through Data indication or ChannelData message from the TURN server.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sess</em>&nbsp;</td><td>The TURN session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pkt</em>&nbsp;</td><td>The data/payload of the Data Indication or ChannelData packet. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pkt_len</em>&nbsp;</td><td>Length of the data/payload. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>peer_addr</em>&nbsp;</td><td>Peer address where this payload was received by the TURN server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>addr_len</em>&nbsp;</td><td>Length of the peer address. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a54bf84fc91a4c3fb400f43d1dc8b6ec4"></a><!-- doxytag: member="pj_turn_session_cb::on_send_pkt" ref="a54bf84fc91a4c3fb400f43d1dc8b6ec4" args=")(pj_turn_session *sess, const pj_uint8_t *pkt, unsigned pkt_len, const pj_sockaddr_t *dst_addr, unsigned addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>(* <a class="el" href="structpj__turn__session__cb.htm#a54bf84fc91a4c3fb400f43d1dc8b6ec4">pj_turn_session_cb::on_send_pkt</a>)(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga03cd006c29b1d24580f5df4db912749e">pj_uint8_t</a> *pkt, unsigned pkt_len, const <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *dst_addr, unsigned addr_len)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback will be called by the TURN session whenever it needs to send outgoing message. Since the TURN session doesn't have a socket on its own, this callback must be implemented.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sess</em>&nbsp;</td><td>The TURN session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pkt</em>&nbsp;</td><td>The packet/data to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pkt_len</em>&nbsp;</td><td>Length of the packet/data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dst_addr</em>&nbsp;</td><td>Destination address of the packet. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>addr_len</em>&nbsp;</td><td>Length of the destination address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The callback should return the status of the send operation. </dd></dl>

</div>
</div>
<a class="anchor" id="af7ea6c44f365deb0b7c98f93e6dd1c82"></a><!-- doxytag: member="pj_turn_session_cb::on_state" ref="af7ea6c44f365deb0b7c98f93e6dd1c82" args=")(pj_turn_session *sess, pj_turn_state_t old_state, pj_turn_state_t new_state)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpj__turn__session__cb.htm#af7ea6c44f365deb0b7c98f93e6dd1c82">pj_turn_session_cb::on_state</a>)(<a class="el" href="group__PJNATH__TURN__SESSION.htm#ga6b1aed7eb13119538d38728b02ef6c83">pj_turn_session</a> *sess, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> old_state, <a class="el" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> new_state)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Notification when TURN session state has changed. Application should implement this callback at least to know that the TURN session is going to be destroyed.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sess</em>&nbsp;</td><td>The TURN session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>old_state</em>&nbsp;</td><td>The previous state of the session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>new_state</em>&nbsp;</td><td>The current state of the session. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li><a class="el" href="turn__session_8h_source.htm">turn_session.h</a></li>
</ul>
</div>
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
