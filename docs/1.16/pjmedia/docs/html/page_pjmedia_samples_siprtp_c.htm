<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJMEDIA Reference: Samples: Using SIP and Custom RTP/RTCP to Monitor Quality (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->

	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJMEDIA Reference</p>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Samples: Using SIP and Custom RTP/RTCP to Monitor Quality </h1>  </div>
</div>
<div class="contents">
<p>This source is an example to demonstrate using SIP and RTP/RTCP framework to measure the network quality/impairment from the SIP call. This program can be used to make calls or to receive calls from other SIP endpoint (or other siprtp program), and to display the media quality statistics at the end of the call.</p>
<p>Note that the remote peer must support RTCP.</p>
<p>The layout of the program has been designed so that custom reporting can be generated instead of plain human readable text.</p>
<p>The source code of the file is pjsip-apps/src/samples/siprtp.c</p>
<p>Screenshots on WinXP: </p>
<div align="center">
<img src="siprtp.jpg" alt="siprtp.jpg"/>
</div>
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: siprtp.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">/* Usage */</span>
<a name="l00026"></a>00026 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *USAGE = 
<a name="l00027"></a>00027 <span class="stringliteral">&quot; PURPOSE:                                                                  \n&quot;</span>
<a name="l00028"></a>00028 <span class="stringliteral">&quot;   This program establishes SIP INVITE session and media, and calculate    \n&quot;</span>
<a name="l00029"></a>00029 <span class="stringliteral">&quot;   the media quality (packet lost, jitter, rtt, etc.). Unlike normal       \n&quot;</span>
<a name="l00030"></a>00030 <span class="stringliteral">&quot;   pjmedia applications, this program bypasses all pjmedia stream          \n&quot;</span>
<a name="l00031"></a>00031 <span class="stringliteral">&quot;   framework and transmit encoded RTP packets manually using own thread.   \n&quot;</span>
<a name="l00032"></a>00032 <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00033"></a>00033 <span class="stringliteral">&quot; USAGE:\n&quot;</span>
<a name="l00034"></a>00034 <span class="stringliteral">&quot;   siprtp [options]        =&gt; to start in server mode\n&quot;</span>
<a name="l00035"></a>00035 <span class="stringliteral">&quot;   siprtp [options] URL    =&gt; to start in client mode\n&quot;</span>
<a name="l00036"></a>00036 <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00037"></a>00037 <span class="stringliteral">&quot; Program options:\n&quot;</span>
<a name="l00038"></a>00038 <span class="stringliteral">&quot;   --count=N,        -c    Set number of calls to create (default:1) \n&quot;</span>
<a name="l00039"></a>00039 <span class="stringliteral">&quot;   --gap=N           -g    Set call gapping to N msec (default:0)\n&quot;</span>
<a name="l00040"></a>00040 <span class="stringliteral">&quot;   --duration=SEC,   -d    Set maximum call duration (default:unlimited) \n&quot;</span>
<a name="l00041"></a>00041 <span class="stringliteral">&quot;   --auto-quit,      -q    Quit when calls have been completed (default:no)\n&quot;</span>
<a name="l00042"></a>00042 <span class="stringliteral">&quot;   --call-report     -R    Display report on call termination (default:yes)\n&quot;</span>
<a name="l00043"></a>00043 <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00044"></a>00044 <span class="stringliteral">&quot; Address and ports options:\n&quot;</span>
<a name="l00045"></a>00045 <span class="stringliteral">&quot;   --local-port=PORT,-p    Set local SIP port (default: 5060)\n&quot;</span>
<a name="l00046"></a>00046 <span class="stringliteral">&quot;   --rtp-port=PORT,  -r    Set start of RTP port (default: 4000)\n&quot;</span>
<a name="l00047"></a>00047 <span class="stringliteral">&quot;   --ip-addr=IP,     -i    Set local IP address to use (otherwise it will\n&quot;</span>
<a name="l00048"></a>00048 <span class="stringliteral">&quot;                           try to determine local IP address from hostname)\n&quot;</span>
<a name="l00049"></a>00049 <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00050"></a>00050 <span class="stringliteral">&quot; Logging Options:\n&quot;</span>
<a name="l00051"></a>00051 <span class="stringliteral">&quot;   --log-level=N,    -l    Set log verbosity level (default=5)\n&quot;</span>
<a name="l00052"></a>00052 <span class="stringliteral">&quot;   --app-log-level=N       Set app screen log verbosity (default=3)\n&quot;</span>
<a name="l00053"></a>00053 <span class="stringliteral">&quot;   --log-file=FILE         Write log to file FILE\n&quot;</span>
<a name="l00054"></a>00054 <span class="stringliteral">&quot;   --report-file=FILE      Write report to file FILE\n&quot;</span>
<a name="l00055"></a>00055 <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00056"></a>00056 <span class="comment">/* Don&#39;t support this anymore, because codec is properly examined in</span>
<a name="l00057"></a>00057 <span class="comment">   pjmedia_session_info_from_sdp() function.</span>
<a name="l00058"></a>00058 <span class="comment"></span>
<a name="l00059"></a>00059 <span class="comment">&quot; Codec Options:\n&quot;</span>
<a name="l00060"></a>00060 <span class="comment">&quot;   --a-pt=PT               Set audio payload type to PT (default=0)\n&quot;</span>
<a name="l00061"></a>00061 <span class="comment">&quot;   --a-name=NAME           Set audio codec name to NAME (default=pcmu)\n&quot;</span>
<a name="l00062"></a>00062 <span class="comment">&quot;   --a-clock=RATE          Set audio codec rate to RATE Hz (default=8000Hz)\n&quot;</span>
<a name="l00063"></a>00063 <span class="comment">&quot;   --a-bitrate=BPS         Set audio codec bitrate to BPS (default=64000bps)\n&quot;</span>
<a name="l00064"></a>00064 <span class="comment">&quot;   --a-ptime=MS            Set audio frame time to MS msec (default=20ms)\n&quot;</span>
<a name="l00065"></a>00065 <span class="comment">*/</span>
<a name="l00066"></a>00066 ;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">/* Include all headers. */</span>
<a name="l00070"></a>00070 <span class="preprocessor">#include &lt;pjsip.h&gt;</span>
<a name="l00071"></a>00071 <span class="preprocessor">#include &lt;<a class="code" href="pjmedia_8h.htm" title="PJMEDIA main header file.">pjmedia.h</a>&gt;</span>
<a name="l00072"></a>00072 <span class="preprocessor">#include &lt;<a class="code" href="pjmedia-codec_8h.htm" title="Include all codecs API in PJMEDIA-CODEC.">pjmedia-codec.h</a>&gt;</span>
<a name="l00073"></a>00073 <span class="preprocessor">#include &lt;pjsip_ua.h&gt;</span>
<a name="l00074"></a>00074 <span class="preprocessor">#include &lt;pjsip_simple.h&gt;</span>
<a name="l00075"></a>00075 <span class="preprocessor">#include &lt;pjlib-util.h&gt;</span>
<a name="l00076"></a>00076 <span class="preprocessor">#include &lt;pjlib.h&gt;</span>
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="comment">/* Uncomment these to disable threads.</span>
<a name="l00081"></a>00081 <span class="comment"> * NOTE:</span>
<a name="l00082"></a>00082 <span class="comment"> *   when threading is disabled, siprtp won&#39;t transmit any</span>
<a name="l00083"></a>00083 <span class="comment"> *   RTP packets.</span>
<a name="l00084"></a>00084 <span class="comment"> */</span>
<a name="l00085"></a>00085 <span class="comment">/*</span>
<a name="l00086"></a>00086 <span class="comment">#undef PJ_HAS_THREADS</span>
<a name="l00087"></a>00087 <span class="comment">#define PJ_HAS_THREADS 0</span>
<a name="l00088"></a>00088 <span class="comment">*/</span>
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="preprocessor">#if PJ_HAS_HIGH_RES_TIMER==0</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span><span class="preprocessor">#   error &quot;High resolution timer is needed for this sample&quot;</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span>
<a name="l00095"></a>00095 <span class="preprocessor">#define THIS_FILE       &quot;siprtp.c&quot;</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="preprocessor">#define MAX_CALLS       1024</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#define RTP_START_PORT  4000</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span>
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="comment">/* Codec descriptor: */</span>
<a name="l00101"></a>00101 <span class="keyword">struct </span><a class="code" href="structcodec.htm">codec</a>
<a name="l00102"></a>00102 {
<a name="l00103"></a>00103     <span class="keywordtype">unsigned</span>    pt;
<a name="l00104"></a>00104     <span class="keywordtype">char</span>*       name;
<a name="l00105"></a>00105     <span class="keywordtype">unsigned</span>    clock_rate;
<a name="l00106"></a>00106     <span class="keywordtype">unsigned</span>    bit_rate;
<a name="l00107"></a>00107     <span class="keywordtype">unsigned</span>    ptime;
<a name="l00108"></a>00108     <span class="keywordtype">char</span>*       description;
<a name="l00109"></a>00109 };
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="comment">/* A bidirectional media stream created when the call is active. */</span>
<a name="l00113"></a>00113 <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a>
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115     <span class="comment">/* Static: */</span>
<a name="l00116"></a>00116     <span class="keywordtype">unsigned</span>             call_index;        <span class="comment">/* Call owner.              */</span>
<a name="l00117"></a>00117     <span class="keywordtype">unsigned</span>             media_index;       <span class="comment">/* Media index in call.     */</span>
<a name="l00118"></a>00118     <a class="code" href="structpjmedia__transport.htm">pjmedia_transport</a>   *transport;         <span class="comment">/* To send/recv RTP/RTCP    */</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120     <span class="comment">/* Active? */</span>
<a name="l00121"></a>00121     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            active;            <span class="comment">/* Non-zero if is in call.  */</span>
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     <span class="comment">/* Current stream info: */</span>
<a name="l00124"></a>00124     <a class="code" href="structpjmedia__stream__info.htm">pjmedia_stream_info</a>  si;                <span class="comment">/* Current stream info.     */</span>
<a name="l00125"></a>00125 
<a name="l00126"></a>00126     <span class="comment">/* More info: */</span>
<a name="l00127"></a>00127     <span class="keywordtype">unsigned</span>             clock_rate;        <span class="comment">/* clock rate               */</span>
<a name="l00128"></a>00128     <span class="keywordtype">unsigned</span>             samples_per_frame; <span class="comment">/* samples per frame        */</span>
<a name="l00129"></a>00129     <span class="keywordtype">unsigned</span>             bytes_per_frame;   <span class="comment">/* frame size.              */</span>
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="comment">/* RTP session: */</span>
<a name="l00132"></a>00132     <a class="code" href="structpjmedia__rtp__session.htm">pjmedia_rtp_session</a>  out_sess;          <span class="comment">/* outgoing RTP session     */</span>
<a name="l00133"></a>00133     <a class="code" href="structpjmedia__rtp__session.htm">pjmedia_rtp_session</a>  in_sess;           <span class="comment">/* incoming RTP session     */</span>
<a name="l00134"></a>00134 
<a name="l00135"></a>00135     <span class="comment">/* RTCP stats: */</span>
<a name="l00136"></a>00136     <a class="code" href="structpjmedia__rtcp__session.htm">pjmedia_rtcp_session</a> rtcp;              <span class="comment">/* incoming RTCP session.   */</span>
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <span class="comment">/* Thread: */</span>
<a name="l00139"></a>00139     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            thread_quit_flag;  <span class="comment">/* Stop media thread.       */</span>
<a name="l00140"></a>00140     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>         *thread;            <span class="comment">/* Media thread.            */</span>
<a name="l00141"></a>00141 };
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">/* This is a call structure that is created when the application starts</span>
<a name="l00145"></a>00145 <span class="comment"> * and only destroyed when the application quits.</span>
<a name="l00146"></a>00146 <span class="comment"> */</span>
<a name="l00147"></a>00147 <span class="keyword">struct </span><a class="code" href="structcall.htm">call</a>
<a name="l00148"></a>00148 {
<a name="l00149"></a>00149     <span class="keywordtype">unsigned</span>             index;
<a name="l00150"></a>00150     pjsip_inv_session   *inv;
<a name="l00151"></a>00151     <span class="keywordtype">unsigned</span>             media_count;
<a name="l00152"></a>00152     <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a>  media[1];
<a name="l00153"></a>00153     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a>          start_time;
<a name="l00154"></a>00154     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a>          response_time;
<a name="l00155"></a>00155     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a>          connect_time;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm">pj_timer_entry</a>       <a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>;           
<a name="l00158"></a>00158 };
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="comment">/* Application&#39;s global variables */</span>
<a name="l00162"></a>00162 <span class="keyword">static</span> <span class="keyword">struct </span>app
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164     <span class="keywordtype">unsigned</span>             max_calls;
<a name="l00165"></a>00165     <span class="keywordtype">unsigned</span>             call_gap;
<a name="l00166"></a>00166     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            call_report;
<a name="l00167"></a>00167     <span class="keywordtype">unsigned</span>             uac_calls;
<a name="l00168"></a>00168     <span class="keywordtype">unsigned</span>             duration;
<a name="l00169"></a>00169     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            auto_quit;
<a name="l00170"></a>00170     <span class="keywordtype">unsigned</span>             thread_count;
<a name="l00171"></a>00171     <span class="keywordtype">int</span>                  sip_port;
<a name="l00172"></a>00172     <span class="keywordtype">int</span>                  rtp_start_port;
<a name="l00173"></a>00173     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             local_addr;
<a name="l00174"></a>00174     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             local_uri;
<a name="l00175"></a>00175     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             local_contact;
<a name="l00176"></a>00176     
<a name="l00177"></a>00177     <span class="keywordtype">int</span>                  app_log_level;
<a name="l00178"></a>00178     <span class="keywordtype">int</span>                  log_level;
<a name="l00179"></a>00179     <span class="keywordtype">char</span>                *log_filename;
<a name="l00180"></a>00180     <span class="keywordtype">char</span>                *report_filename;
<a name="l00181"></a>00181 
<a name="l00182"></a>00182     <span class="keyword">struct </span><a class="code" href="structcodec.htm">codec</a>         audio_codec;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             uri_to_call;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm">pj_caching_pool</a>      cp;
<a name="l00187"></a>00187     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a>           *pool;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189     pjsip_endpoint      *sip_endpt;
<a name="l00190"></a>00190     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            thread_quit;
<a name="l00191"></a>00191     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>         *sip_thread[1];
<a name="l00192"></a>00192 
<a name="l00193"></a>00193     <a class="code" href="group__PJMEDIA__TYPES.htm#ga7c3623d8e90e22b7184a6e42dc24f6f5">pjmedia_endpt</a>       *med_endpt;
<a name="l00194"></a>00194     <span class="keyword">struct </span><a class="code" href="structcall.htm">call</a>          <a class="code" href="structcall.htm">call</a>[MAX_CALLS];
<a name="l00195"></a>00195 } app;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 <span class="comment">/*</span>
<a name="l00200"></a>00200 <span class="comment"> * Prototypes:</span>
<a name="l00201"></a>00201 <span class="comment"> */</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 <span class="comment">/* Callback to be called when SDP negotiation is done in the call: */</span>
<a name="l00204"></a>00204 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_media_update( pjsip_inv_session *inv,
<a name="l00205"></a>00205                                   <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status);
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="comment">/* Callback to be called when invite session&#39;s state has changed: */</span>
<a name="l00208"></a>00208 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_state_changed( pjsip_inv_session *inv, 
<a name="l00209"></a>00209                                    pjsip_event *e);
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="comment">/* Callback to be called when dialog has forked: */</span>
<a name="l00212"></a>00212 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_forked(pjsip_inv_session *inv, pjsip_event *e);
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="comment">/* Callback to be called to handle incoming requests outside dialogs: */</span>
<a name="l00215"></a>00215 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> on_rx_request( pjsip_rx_data *rdata );
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="comment">/* Worker thread prototype */</span>
<a name="l00218"></a>00218 <span class="keyword">static</span> <span class="keywordtype">int</span> sip_worker_thread(<span class="keywordtype">void</span> *arg);
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="comment">/* Create SDP for call */</span>
<a name="l00221"></a>00221 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> create_sdp( <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool,
<a name="l00222"></a>00222                                <span class="keyword">struct</span> <a class="code" href="structcall.htm">call</a> *<a class="code" href="structcall.htm">call</a>,
<a name="l00223"></a>00223                                <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **p_sdp);
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="comment">/* Hangup call */</span>
<a name="l00226"></a>00226 <span class="keyword">static</span> <span class="keywordtype">void</span> hangup_call(<span class="keywordtype">unsigned</span> index);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 <span class="comment">/* Destroy the call&#39;s media */</span>
<a name="l00229"></a>00229 <span class="keyword">static</span> <span class="keywordtype">void</span> destroy_call_media(<span class="keywordtype">unsigned</span> call_index);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="comment">/* Destroy media. */</span>
<a name="l00232"></a>00232 <span class="keyword">static</span> <span class="keywordtype">void</span> destroy_media();
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 <span class="comment">/* This callback is called by media transport on receipt of RTP packet. */</span>
<a name="l00235"></a>00235 <span class="keyword">static</span> <span class="keywordtype">void</span> on_rx_rtp(<span class="keywordtype">void</span> *<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__IOQUEUE.htm#gab06c131ab29b37c027f2400bd5be6045">user_data</a>, <span class="keywordtype">void</span> *pkt, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> size);
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="comment">/* This callback is called by media transport on receipt of RTCP packet. */</span>
<a name="l00238"></a>00238 <span class="keyword">static</span> <span class="keywordtype">void</span> on_rx_rtcp(<span class="keywordtype">void</span> *<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__IOQUEUE.htm#gab06c131ab29b37c027f2400bd5be6045">user_data</a>, <span class="keywordtype">void</span> *pkt, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> size);
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="comment">/* Display error */</span>
<a name="l00241"></a>00241 <span class="keyword">static</span> <span class="keywordtype">void</span> app_perror(<span class="keyword">const</span> <span class="keywordtype">char</span> *sender, <span class="keyword">const</span> <span class="keywordtype">char</span> *title, 
<a name="l00242"></a>00242                        <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status);
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 <span class="comment">/* Print call */</span>
<a name="l00245"></a>00245 <span class="keyword">static</span> <span class="keywordtype">void</span> print_call(<span class="keywordtype">int</span> call_index);
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 <span class="comment">/* This is a PJSIP module to be registered by application to handle</span>
<a name="l00249"></a>00249 <span class="comment"> * incoming requests outside any dialogs/transactions. The main purpose</span>
<a name="l00250"></a>00250 <span class="comment"> * here is to handle incoming INVITE request message, where we will</span>
<a name="l00251"></a>00251 <span class="comment"> * create a dialog and INVITE session for it.</span>
<a name="l00252"></a>00252 <span class="comment"> */</span>
<a name="l00253"></a>00253 <span class="keyword">static</span> pjsip_module mod_siprtp =
<a name="l00254"></a>00254 {
<a name="l00255"></a>00255     NULL, NULL,                     <span class="comment">/* prev, next.              */</span>
<a name="l00256"></a>00256     { <span class="stringliteral">&quot;mod-siprtpapp&quot;</span>, 13 },        <span class="comment">/* Name.                    */</span>
<a name="l00257"></a>00257     -1,                             <span class="comment">/* Id                       */</span>
<a name="l00258"></a>00258     PJSIP_MOD_PRIORITY_APPLICATION, <span class="comment">/* Priority                 */</span>
<a name="l00259"></a>00259     NULL,                           <span class="comment">/* load()                   */</span>
<a name="l00260"></a>00260     NULL,                           <span class="comment">/* start()                  */</span>
<a name="l00261"></a>00261     NULL,                           <span class="comment">/* stop()                   */</span>
<a name="l00262"></a>00262     NULL,                           <span class="comment">/* unload()                 */</span>
<a name="l00263"></a>00263     &amp;on_rx_request,                 <span class="comment">/* on_rx_request()          */</span>
<a name="l00264"></a>00264     NULL,                           <span class="comment">/* on_rx_response()         */</span>
<a name="l00265"></a>00265     NULL,                           <span class="comment">/* on_tx_request.           */</span>
<a name="l00266"></a>00266     NULL,                           <span class="comment">/* on_tx_response()         */</span>
<a name="l00267"></a>00267     NULL,                           <span class="comment">/* on_tsx_state()           */</span>
<a name="l00268"></a>00268 };
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">/* Codec constants */</span>
<a name="l00272"></a>00272 <span class="keyword">struct </span><a class="code" href="structcodec.htm">codec</a> audio_codecs[] = 
<a name="l00273"></a>00273 {
<a name="l00274"></a>00274     { 0,  <span class="stringliteral">&quot;PCMU&quot;</span>, 8000, 64000, 20, <span class="stringliteral">&quot;G.711 ULaw&quot;</span> },
<a name="l00275"></a>00275     { 3,  <span class="stringliteral">&quot;GSM&quot;</span>,  8000, 13200, 20, <span class="stringliteral">&quot;GSM&quot;</span> },
<a name="l00276"></a>00276     { 4,  <span class="stringliteral">&quot;G723&quot;</span>, 8000, 6400,  30, <span class="stringliteral">&quot;G.723.1&quot;</span> },
<a name="l00277"></a>00277     { 8,  <span class="stringliteral">&quot;PCMA&quot;</span>, 8000, 64000, 20, <span class="stringliteral">&quot;G.711 ALaw&quot;</span> },
<a name="l00278"></a>00278     { 18, <span class="stringliteral">&quot;G729&quot;</span>, 8000, 8000,  20, <span class="stringliteral">&quot;G.729&quot;</span> },
<a name="l00279"></a>00279 };
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="comment">/*</span>
<a name="l00283"></a>00283 <span class="comment"> * Init SIP stack</span>
<a name="l00284"></a>00284 <span class="comment"> */</span>
<a name="l00285"></a>00285 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> init_sip()
<a name="l00286"></a>00286 {
<a name="l00287"></a>00287     <span class="keywordtype">unsigned</span> i;
<a name="l00288"></a>00288     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00289"></a>00289 
<a name="l00290"></a>00290     <span class="comment">/* init PJLIB-UTIL: */</span>
<a name="l00291"></a>00291     status = <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__BASE.htm#gaf44fef477c4b0e38a99004965fc55110">pjlib_util_init</a>();
<a name="l00292"></a>00292     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00293"></a>00293 
<a name="l00294"></a>00294     <span class="comment">/* Must create a pool factory before we can allocate any memory. */</span>
<a name="l00295"></a>00295     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__CACHING__POOL.htm#gafbf5400f191e2095240bc6472754e94f">pj_caching_pool_init</a>(&amp;app.cp, &amp;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL__FACTORY.htm#ga98cf758eafb888f318a8de7f396f47ca">pj_pool_factory_default_policy</a>, 0);
<a name="l00296"></a>00296 
<a name="l00297"></a>00297     <span class="comment">/* Create application pool for misc. */</span>
<a name="l00298"></a>00298     app.pool = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(&amp;app.cp.factory, <span class="stringliteral">&quot;app&quot;</span>, 1000, 1000, NULL);
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     <span class="comment">/* Create the endpoint: */</span>
<a name="l00301"></a>00301     status = pjsip_endpt_create(&amp;app.cp.factory, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname</a>()-&gt;ptr, 
<a name="l00302"></a>00302                                 &amp;app.sip_endpt);
<a name="l00303"></a>00303     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 
<a name="l00306"></a>00306     <span class="comment">/* Add UDP transport. */</span>
<a name="l00307"></a>00307     {
<a name="l00308"></a>00308         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;
<a name="l00309"></a>00309         pjsip_host_port addrname;
<a name="l00310"></a>00310         pjsip_transport *tp;
<a name="l00311"></a>00311 
<a name="l00312"></a>00312         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));
<a name="l00313"></a>00313         addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();
<a name="l00314"></a>00314         addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__in__addr.htm#aa438bba3f010df65ae964a41bccb156b">s_addr</a> = 0;
<a name="l00315"></a>00315         addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>((<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)app.sip_port);
<a name="l00316"></a>00316 
<a name="l00317"></a>00317         <span class="keywordflow">if</span> (app.local_addr.slen) {
<a name="l00318"></a>00318 
<a name="l00319"></a>00319             addrname.host = app.local_addr;
<a name="l00320"></a>00320             addrname.port = app.sip_port;
<a name="l00321"></a>00321 
<a name="l00322"></a>00322             status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr, &amp;app.local_addr, 
<a name="l00323"></a>00323                                          (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)app.sip_port);
<a name="l00324"></a>00324             <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00325"></a>00325                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to resolve IP interface&quot;</span>, status);
<a name="l00326"></a>00326                 <span class="keywordflow">return</span> status;
<a name="l00327"></a>00327             }
<a name="l00328"></a>00328         }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330         status = pjsip_udp_transport_start( app.sip_endpt, &amp;addr, 
<a name="l00331"></a>00331                                             (app.local_addr.slen ? &amp;addrname:NULL),
<a name="l00332"></a>00332                                             1, &amp;tp);
<a name="l00333"></a>00333         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00334"></a>00334             app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to start UDP transport&quot;</span>, status);
<a name="l00335"></a>00335             <span class="keywordflow">return</span> status;
<a name="l00336"></a>00336         }
<a name="l00337"></a>00337 
<a name="l00338"></a>00338         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;SIP UDP listening on %.*s:%d&quot;</span>,
<a name="l00339"></a>00339                   (<span class="keywordtype">int</span>)tp-&gt;local_name.host.slen, tp-&gt;local_name.host.ptr,
<a name="l00340"></a>00340                   tp-&gt;local_name.port));
<a name="l00341"></a>00341     }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343     <span class="comment">/* </span>
<a name="l00344"></a>00344 <span class="comment">     * Init transaction layer.</span>
<a name="l00345"></a>00345 <span class="comment">     * This will create/initialize transaction hash tables etc.</span>
<a name="l00346"></a>00346 <span class="comment">     */</span>
<a name="l00347"></a>00347     status = pjsip_tsx_layer_init_module(app.sip_endpt);
<a name="l00348"></a>00348     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00349"></a>00349 
<a name="l00350"></a>00350     <span class="comment">/*  Initialize UA layer. */</span>
<a name="l00351"></a>00351     status = pjsip_ua_init_module( app.sip_endpt, NULL );
<a name="l00352"></a>00352     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00353"></a>00353 
<a name="l00354"></a>00354     <span class="comment">/* Initialize 100rel support */</span>
<a name="l00355"></a>00355     status = pjsip_100rel_init_module(app.sip_endpt);
<a name="l00356"></a>00356     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00357"></a>00357 
<a name="l00358"></a>00358     <span class="comment">/*  Init invite session module. */</span>
<a name="l00359"></a>00359     {
<a name="l00360"></a>00360         pjsip_inv_callback inv_cb;
<a name="l00361"></a>00361 
<a name="l00362"></a>00362         <span class="comment">/* Init the callback for INVITE session: */</span>
<a name="l00363"></a>00363         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;inv_cb, <span class="keyword">sizeof</span>(inv_cb));
<a name="l00364"></a>00364         inv_cb.on_state_changed = &amp;call_on_state_changed;
<a name="l00365"></a>00365         inv_cb.on_new_session = &amp;call_on_forked;
<a name="l00366"></a>00366         inv_cb.on_media_update = &amp;call_on_media_update;
<a name="l00367"></a>00367 
<a name="l00368"></a>00368         <span class="comment">/* Initialize invite session module:  */</span>
<a name="l00369"></a>00369         status = pjsip_inv_usage_init(app.sip_endpt, &amp;inv_cb);
<a name="l00370"></a>00370         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00371"></a>00371     }
<a name="l00372"></a>00372 
<a name="l00373"></a>00373     <span class="comment">/* Register our module to receive incoming requests. */</span>
<a name="l00374"></a>00374     status = pjsip_endpt_register_module( app.sip_endpt, &amp;mod_siprtp);
<a name="l00375"></a>00375     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00376"></a>00376 
<a name="l00377"></a>00377     <span class="comment">/* Init calls */</span>
<a name="l00378"></a>00378     <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i)
<a name="l00379"></a>00379         app.call[i].index = i;
<a name="l00380"></a>00380 
<a name="l00381"></a>00381     <span class="comment">/* Done */</span>
<a name="l00382"></a>00382     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00383"></a>00383 }
<a name="l00384"></a>00384 
<a name="l00385"></a>00385 
<a name="l00386"></a>00386 <span class="comment">/*</span>
<a name="l00387"></a>00387 <span class="comment"> * Destroy SIP</span>
<a name="l00388"></a>00388 <span class="comment"> */</span>
<a name="l00389"></a>00389 <span class="keyword">static</span> <span class="keywordtype">void</span> destroy_sip()
<a name="l00390"></a>00390 {
<a name="l00391"></a>00391     <span class="keywordtype">unsigned</span> i;
<a name="l00392"></a>00392 
<a name="l00393"></a>00393     app.thread_quit = 1;
<a name="l00394"></a>00394     <span class="keywordflow">for</span> (i=0; i&lt;app.thread_count; ++i) {
<a name="l00395"></a>00395         <span class="keywordflow">if</span> (app.sip_thread[i]) {
<a name="l00396"></a>00396             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(app.sip_thread[i]);
<a name="l00397"></a>00397             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(app.sip_thread[i]);
<a name="l00398"></a>00398             app.sip_thread[i] = NULL;
<a name="l00399"></a>00399         }
<a name="l00400"></a>00400     }
<a name="l00401"></a>00401 
<a name="l00402"></a>00402     <span class="keywordflow">if</span> (app.sip_endpt) {
<a name="l00403"></a>00403         pjsip_endpt_destroy(app.sip_endpt);
<a name="l00404"></a>00404         app.sip_endpt = NULL;
<a name="l00405"></a>00405     }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 }
<a name="l00408"></a>00408 
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="comment">/*</span>
<a name="l00411"></a>00411 <span class="comment"> * Init media stack.</span>
<a name="l00412"></a>00412 <span class="comment"> */</span>
<a name="l00413"></a>00413 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> init_media()
<a name="l00414"></a>00414 {
<a name="l00415"></a>00415     <span class="keywordtype">unsigned</span>    i, count;
<a name="l00416"></a>00416     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a> rtp_port;
<a name="l00417"></a>00417     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 
<a name="l00420"></a>00420     <span class="comment">/* Initialize media endpoint so that at least error subsystem is properly</span>
<a name="l00421"></a>00421 <span class="comment">     * initialized.</span>
<a name="l00422"></a>00422 <span class="comment">     */</span>
<a name="l00423"></a>00423 <span class="preprocessor">#if PJ_HAS_THREADS</span>
<a name="l00424"></a>00424 <span class="preprocessor"></span>    status = <a class="code" href="group__PJMED__ENDPT.htm#ga2865efcd255dbcb05ede33dbae5c27f5">pjmedia_endpt_create</a>(&amp;app.cp.factory, NULL, 1, &amp;app.med_endpt);
<a name="l00425"></a>00425 <span class="preprocessor">#else</span>
<a name="l00426"></a>00426 <span class="preprocessor"></span>    status = <a class="code" href="group__PJMED__ENDPT.htm#ga2865efcd255dbcb05ede33dbae5c27f5">pjmedia_endpt_create</a>(&amp;app.cp.factory, 
<a name="l00427"></a>00427                                   pjsip_endpt_get_ioqueue(app.sip_endpt),
<a name="l00428"></a>00428                                   0, &amp;app.med_endpt);
<a name="l00429"></a>00429 <span class="preprocessor">#endif</span>
<a name="l00430"></a>00430 <span class="preprocessor"></span>    <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 
<a name="l00433"></a>00433     <span class="comment">/* Must register codecs to be supported */</span>
<a name="l00434"></a>00434 <span class="preprocessor">#if defined(PJMEDIA_HAS_G711_CODEC) &amp;&amp; PJMEDIA_HAS_G711_CODEC!=0</span>
<a name="l00435"></a>00435 <span class="preprocessor"></span>    <a class="code" href="group__PJMED__G711.htm#gaa4cc7591d63c308e1f2e7821240abf14">pjmedia_codec_g711_init</a>(app.med_endpt);
<a name="l00436"></a>00436 <span class="preprocessor">#endif</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span>
<a name="l00438"></a>00438     <span class="comment">/* RTP port counter */</span>
<a name="l00439"></a>00439     rtp_port = (pj_uint16_t)(app.rtp_start_port &amp; 0xFFFE);
<a name="l00440"></a>00440 
<a name="l00441"></a>00441     <span class="comment">/* Init media transport for all calls. */</span>
<a name="l00442"></a>00442     <span class="keywordflow">for</span> (i=0, count=0; i&lt;app.max_calls; ++i, ++count) {
<a name="l00443"></a>00443 
<a name="l00444"></a>00444         <span class="keywordtype">unsigned</span> j;
<a name="l00445"></a>00445 
<a name="l00446"></a>00446         <span class="comment">/* Create transport for each media in the call */</span>
<a name="l00447"></a>00447         <span class="keywordflow">for</span> (j=0; j&lt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(app.call[0].media); ++j) {
<a name="l00448"></a>00448             <span class="comment">/* Repeat binding media socket to next port when fails to bind</span>
<a name="l00449"></a>00449 <span class="comment">             * to current port number.</span>
<a name="l00450"></a>00450 <span class="comment">             */</span>
<a name="l00451"></a>00451             <span class="keywordtype">int</span> retry;
<a name="l00452"></a>00452 
<a name="l00453"></a>00453             app.call[i].media[j].call_index = i;
<a name="l00454"></a>00454             app.call[i].media[j].media_index = j;
<a name="l00455"></a>00455 
<a name="l00456"></a>00456             status = -1;
<a name="l00457"></a>00457             <span class="keywordflow">for</span> (retry=0; retry&lt;100; ++retry,rtp_port+=2)  {
<a name="l00458"></a>00458                 <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *m = &amp;app.call[i].media[j];
<a name="l00459"></a>00459                 
<a name="l00460"></a>00460                 status = <a class="code" href="group__PJMEDIA__TRANSPORT__UDP.htm#ga8baf23a6ec9268aed82a53ed6b1e366f">pjmedia_transport_udp_create2</a>(app.med_endpt, 
<a name="l00461"></a>00461                                                        <span class="stringliteral">&quot;siprtp&quot;</span>,
<a name="l00462"></a>00462                                                        &amp;app.local_addr,
<a name="l00463"></a>00463                                                        rtp_port, 0, 
<a name="l00464"></a>00464                                                        &amp;m-&gt;transport);
<a name="l00465"></a>00465                 <span class="keywordflow">if</span> (status == PJ_SUCCESS) {
<a name="l00466"></a>00466                     rtp_port += 2;
<a name="l00467"></a>00467                     <span class="keywordflow">break</span>;
<a name="l00468"></a>00468                 }
<a name="l00469"></a>00469             }
<a name="l00470"></a>00470         }
<a name="l00471"></a>00471 
<a name="l00472"></a>00472         <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00473"></a>00473             <span class="keywordflow">goto</span> on_error;
<a name="l00474"></a>00474     }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476     <span class="comment">/* Done */</span>
<a name="l00477"></a>00477     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00478"></a>00478 
<a name="l00479"></a>00479 on_error:
<a name="l00480"></a>00480     destroy_media();
<a name="l00481"></a>00481     <span class="keywordflow">return</span> status;
<a name="l00482"></a>00482 }
<a name="l00483"></a>00483 
<a name="l00484"></a>00484 
<a name="l00485"></a>00485 <span class="comment">/*</span>
<a name="l00486"></a>00486 <span class="comment"> * Destroy media.</span>
<a name="l00487"></a>00487 <span class="comment"> */</span>
<a name="l00488"></a>00488 <span class="keyword">static</span> <span class="keywordtype">void</span> destroy_media()
<a name="l00489"></a>00489 {
<a name="l00490"></a>00490     <span class="keywordtype">unsigned</span> i;
<a name="l00491"></a>00491 
<a name="l00492"></a>00492     <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i) {
<a name="l00493"></a>00493         <span class="keywordtype">unsigned</span> j;
<a name="l00494"></a>00494         <span class="keywordflow">for</span> (j=0; j&lt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(app.call[0].media); ++j) {
<a name="l00495"></a>00495             <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *m = &amp;app.call[i].media[j];
<a name="l00496"></a>00496 
<a name="l00497"></a>00497             <span class="keywordflow">if</span> (m-&gt;transport) {
<a name="l00498"></a>00498                 <a class="code" href="group__PJMEDIA__TRANSPORT.htm#ga0114fa7e20cb17c645701b2dbda96452">pjmedia_transport_close</a>(m-&gt;transport);
<a name="l00499"></a>00499                 m-&gt;transport = NULL;
<a name="l00500"></a>00500             }
<a name="l00501"></a>00501         }
<a name="l00502"></a>00502     }
<a name="l00503"></a>00503 
<a name="l00504"></a>00504     <span class="keywordflow">if</span> (app.med_endpt) {
<a name="l00505"></a>00505         <a class="code" href="group__PJMED__ENDPT.htm#gae2304cc656a0e6a602f6cdaaec91bb19">pjmedia_endpt_destroy</a>(app.med_endpt);
<a name="l00506"></a>00506         app.med_endpt = NULL;
<a name="l00507"></a>00507     }
<a name="l00508"></a>00508 }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 
<a name="l00511"></a>00511 <span class="comment">/*</span>
<a name="l00512"></a>00512 <span class="comment"> * Make outgoing call.</span>
<a name="l00513"></a>00513 <span class="comment"> */</span>
<a name="l00514"></a>00514 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> make_call(<span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *dst_uri)
<a name="l00515"></a>00515 {
<a name="l00516"></a>00516     <span class="keywordtype">unsigned</span> i;
<a name="l00517"></a>00517     <span class="keyword">struct </span><a class="code" href="structcall.htm">call</a> *<a class="code" href="structcall.htm">call</a>;
<a name="l00518"></a>00518     pjsip_dialog *dlg;
<a name="l00519"></a>00519     <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp;
<a name="l00520"></a>00520     pjsip_tx_data *tdata;
<a name="l00521"></a>00521     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00522"></a>00522 
<a name="l00523"></a>00523 
<a name="l00524"></a>00524     <span class="comment">/* Find unused call slot */</span>
<a name="l00525"></a>00525     <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i) {
<a name="l00526"></a>00526         <span class="keywordflow">if</span> (app.call[i].inv == NULL)
<a name="l00527"></a>00527             <span class="keywordflow">break</span>;
<a name="l00528"></a>00528     }
<a name="l00529"></a>00529 
<a name="l00530"></a>00530     <span class="keywordflow">if</span> (i == app.max_calls)
<a name="l00531"></a>00531         <span class="keywordflow">return</span> PJ_ETOOMANY;
<a name="l00532"></a>00532 
<a name="l00533"></a>00533     call = &amp;app.call[i];
<a name="l00534"></a>00534 
<a name="l00535"></a>00535     <span class="comment">/* Create UAC dialog */</span>
<a name="l00536"></a>00536     status = pjsip_dlg_create_uac( pjsip_ua_instance(), 
<a name="l00537"></a>00537                                    &amp;app.local_uri,      <span class="comment">/* local URI        */</span>
<a name="l00538"></a>00538                                    &amp;app.local_contact,  <span class="comment">/* local Contact    */</span>
<a name="l00539"></a>00539                                    dst_uri,             <span class="comment">/* remote URI       */</span>
<a name="l00540"></a>00540                                    dst_uri,             <span class="comment">/* remote target    */</span>
<a name="l00541"></a>00541                                    &amp;dlg);               <span class="comment">/* dialog           */</span>
<a name="l00542"></a>00542     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00543"></a>00543         ++app.uac_calls;
<a name="l00544"></a>00544         <span class="keywordflow">return</span> status;
<a name="l00545"></a>00545     }
<a name="l00546"></a>00546 
<a name="l00547"></a>00547     <span class="comment">/* Create SDP */</span>
<a name="l00548"></a>00548     create_sdp( dlg-&gt;pool, call, &amp;sdp);
<a name="l00549"></a>00549 
<a name="l00550"></a>00550     <span class="comment">/* Create the INVITE session. */</span>
<a name="l00551"></a>00551     status = pjsip_inv_create_uac( dlg, sdp, 0, &amp;call-&gt;inv);
<a name="l00552"></a>00552     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00553"></a>00553         pjsip_dlg_terminate(dlg);
<a name="l00554"></a>00554         ++app.uac_calls;
<a name="l00555"></a>00555         <span class="keywordflow">return</span> status;
<a name="l00556"></a>00556     }
<a name="l00557"></a>00557 
<a name="l00558"></a>00558 
<a name="l00559"></a>00559     <span class="comment">/* Attach call data to invite session */</span>
<a name="l00560"></a>00560     call-&gt;inv-&gt;mod_data[mod_siprtp.id] = call;
<a name="l00561"></a>00561 
<a name="l00562"></a>00562     <span class="comment">/* Mark start of call */</span>
<a name="l00563"></a>00563     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;call-&gt;start_time);
<a name="l00564"></a>00564 
<a name="l00565"></a>00565 
<a name="l00566"></a>00566     <span class="comment">/* Create initial INVITE request.</span>
<a name="l00567"></a>00567 <span class="comment">     * This INVITE request will contain a perfectly good request and </span>
<a name="l00568"></a>00568 <span class="comment">     * an SDP body as well.</span>
<a name="l00569"></a>00569 <span class="comment">     */</span>
<a name="l00570"></a>00570     status = pjsip_inv_invite(call-&gt;inv, &amp;tdata);
<a name="l00571"></a>00571     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00572"></a>00572 
<a name="l00573"></a>00573 
<a name="l00574"></a>00574     <span class="comment">/* Send initial INVITE request. </span>
<a name="l00575"></a>00575 <span class="comment">     * From now on, the invite session&#39;s state will be reported to us</span>
<a name="l00576"></a>00576 <span class="comment">     * via the invite session callbacks.</span>
<a name="l00577"></a>00577 <span class="comment">     */</span>
<a name="l00578"></a>00578     status = pjsip_inv_send_msg(call-&gt;inv, tdata);
<a name="l00579"></a>00579     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00580"></a>00580 
<a name="l00581"></a>00581 
<a name="l00582"></a>00582     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00583"></a>00583 }
<a name="l00584"></a>00584 
<a name="l00585"></a>00585 
<a name="l00586"></a>00586 <span class="comment">/*</span>
<a name="l00587"></a>00587 <span class="comment"> * Receive incoming call</span>
<a name="l00588"></a>00588 <span class="comment"> */</span>
<a name="l00589"></a>00589 <span class="keyword">static</span> <span class="keywordtype">void</span> process_incoming_call(pjsip_rx_data *rdata)
<a name="l00590"></a>00590 {
<a name="l00591"></a>00591     <span class="keywordtype">unsigned</span> i, options;
<a name="l00592"></a>00592     <span class="keyword">struct </span>call *call;
<a name="l00593"></a>00593     pjsip_dialog *dlg;
<a name="l00594"></a>00594     <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp;
<a name="l00595"></a>00595     pjsip_tx_data *tdata;
<a name="l00596"></a>00596     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00597"></a>00597 
<a name="l00598"></a>00598     <span class="comment">/* Find free call slot */</span>
<a name="l00599"></a>00599     <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i) {
<a name="l00600"></a>00600         <span class="keywordflow">if</span> (app.call[i].inv == NULL)
<a name="l00601"></a>00601             <span class="keywordflow">break</span>;
<a name="l00602"></a>00602     }
<a name="l00603"></a>00603 
<a name="l00604"></a>00604     <span class="keywordflow">if</span> (i == app.max_calls) {
<a name="l00605"></a>00605         <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Too many calls&quot;</span>);
<a name="l00606"></a>00606         pjsip_endpt_respond_stateless( app.sip_endpt, rdata, 
<a name="l00607"></a>00607                                        500, &amp;reason,
<a name="l00608"></a>00608                                        NULL, NULL);
<a name="l00609"></a>00609         <span class="keywordflow">return</span>;
<a name="l00610"></a>00610     }
<a name="l00611"></a>00611 
<a name="l00612"></a>00612     call = &amp;app.call[i];
<a name="l00613"></a>00613 
<a name="l00614"></a>00614     <span class="comment">/* Verify that we can handle the request. */</span>
<a name="l00615"></a>00615     options = 0;
<a name="l00616"></a>00616     status = pjsip_inv_verify_request(rdata, &amp;options, NULL, NULL,
<a name="l00617"></a>00617                                    app.sip_endpt, &amp;tdata);
<a name="l00618"></a>00618     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00619"></a>00619         <span class="comment">/*</span>
<a name="l00620"></a>00620 <span class="comment">         * No we can&#39;t handle the incoming INVITE request.</span>
<a name="l00621"></a>00621 <span class="comment">         */</span>
<a name="l00622"></a>00622         <span class="keywordflow">if</span> (tdata) {
<a name="l00623"></a>00623             pjsip_response_addr res_addr;
<a name="l00624"></a>00624             
<a name="l00625"></a>00625             pjsip_get_response_addr(tdata-&gt;pool, rdata, &amp;res_addr);
<a name="l00626"></a>00626             pjsip_endpt_send_response(app.sip_endpt, &amp;res_addr, tdata,
<a name="l00627"></a>00627                 NULL, NULL);
<a name="l00628"></a>00628             
<a name="l00629"></a>00629         } <span class="keywordflow">else</span> {
<a name="l00630"></a>00630             
<a name="l00631"></a>00631             <span class="comment">/* Respond with 500 (Internal Server Error) */</span>
<a name="l00632"></a>00632             pjsip_endpt_respond_stateless(app.sip_endpt, rdata, 500, NULL,
<a name="l00633"></a>00633                 NULL, NULL);
<a name="l00634"></a>00634         }
<a name="l00635"></a>00635         
<a name="l00636"></a>00636         <span class="keywordflow">return</span>;
<a name="l00637"></a>00637     }
<a name="l00638"></a>00638 
<a name="l00639"></a>00639     <span class="comment">/* Create UAS dialog */</span>
<a name="l00640"></a>00640     status = pjsip_dlg_create_uas( pjsip_ua_instance(), rdata,
<a name="l00641"></a>00641                                    &amp;app.local_contact, &amp;dlg);
<a name="l00642"></a>00642     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00643"></a>00643         <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Unable to create dialog&quot;</span>);
<a name="l00644"></a>00644         pjsip_endpt_respond_stateless( app.sip_endpt, rdata, 
<a name="l00645"></a>00645                                        500, &amp;reason,
<a name="l00646"></a>00646                                        NULL, NULL);
<a name="l00647"></a>00647         <span class="keywordflow">return</span>;
<a name="l00648"></a>00648     }
<a name="l00649"></a>00649 
<a name="l00650"></a>00650     <span class="comment">/* Create SDP */</span>
<a name="l00651"></a>00651     create_sdp( dlg-&gt;pool, call, &amp;sdp);
<a name="l00652"></a>00652 
<a name="l00653"></a>00653     <span class="comment">/* Create UAS invite session */</span>
<a name="l00654"></a>00654     status = pjsip_inv_create_uas( dlg, rdata, sdp, 0, &amp;call-&gt;inv);
<a name="l00655"></a>00655     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00656"></a>00656         pjsip_dlg_create_response(dlg, rdata, 500, NULL, &amp;tdata);
<a name="l00657"></a>00657         pjsip_dlg_send_response(dlg, pjsip_rdata_get_tsx(rdata), tdata);
<a name="l00658"></a>00658         <span class="keywordflow">return</span>;
<a name="l00659"></a>00659     }
<a name="l00660"></a>00660     
<a name="l00661"></a>00661 
<a name="l00662"></a>00662     <span class="comment">/* Attach call data to invite session */</span>
<a name="l00663"></a>00663     call-&gt;inv-&gt;mod_data[mod_siprtp.id] = call;
<a name="l00664"></a>00664 
<a name="l00665"></a>00665     <span class="comment">/* Mark start of call */</span>
<a name="l00666"></a>00666     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;call-&gt;start_time);
<a name="l00667"></a>00667 
<a name="l00668"></a>00668 
<a name="l00669"></a>00669 
<a name="l00670"></a>00670     <span class="comment">/* Create 200 response .*/</span>
<a name="l00671"></a>00671     status = pjsip_inv_initial_answer(call-&gt;inv, rdata, 200, 
<a name="l00672"></a>00672                                       NULL, NULL, &amp;tdata);
<a name="l00673"></a>00673     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00674"></a>00674         status = pjsip_inv_initial_answer(call-&gt;inv, rdata, 
<a name="l00675"></a>00675                                           PJSIP_SC_NOT_ACCEPTABLE,
<a name="l00676"></a>00676                                           NULL, NULL, &amp;tdata);
<a name="l00677"></a>00677         <span class="keywordflow">if</span> (status == PJ_SUCCESS)
<a name="l00678"></a>00678             pjsip_inv_send_msg(call-&gt;inv, tdata); 
<a name="l00679"></a>00679         <span class="keywordflow">else</span>
<a name="l00680"></a>00680             pjsip_inv_terminate(call-&gt;inv, 500, PJ_FALSE);
<a name="l00681"></a>00681         <span class="keywordflow">return</span>;
<a name="l00682"></a>00682     }
<a name="l00683"></a>00683 
<a name="l00684"></a>00684 
<a name="l00685"></a>00685     <span class="comment">/* Send the 200 response. */</span>  
<a name="l00686"></a>00686     status = pjsip_inv_send_msg(call-&gt;inv, tdata); 
<a name="l00687"></a>00687     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#ga9a6f79ac0dc0677698c5735474adfad7">PJ_ASSERT_ON_FAIL</a>(status == PJ_SUCCESS, <span class="keywordflow">return</span>);
<a name="l00688"></a>00688 
<a name="l00689"></a>00689 
<a name="l00690"></a>00690     <span class="comment">/* Done */</span>
<a name="l00691"></a>00691 }
<a name="l00692"></a>00692 
<a name="l00693"></a>00693 
<a name="l00694"></a>00694 <span class="comment">/* Callback to be called when dialog has forked: */</span>
<a name="l00695"></a>00695 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_forked(pjsip_inv_session *inv, pjsip_event *e)
<a name="l00696"></a>00696 {
<a name="l00697"></a>00697     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(inv);
<a name="l00698"></a>00698     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);
<a name="l00699"></a>00699 
<a name="l00700"></a>00700     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga5074ce869f2077ea0f53ef137cbe3a24">PJ_TODO</a>( HANDLE_FORKING );
<a name="l00701"></a>00701 }
<a name="l00702"></a>00702 
<a name="l00703"></a>00703 
<a name="l00704"></a>00704 <span class="comment">/* Callback to be called to handle incoming requests outside dialogs: */</span>
<a name="l00705"></a>00705 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> on_rx_request( pjsip_rx_data *rdata )
<a name="l00706"></a>00706 {
<a name="l00707"></a>00707     <span class="comment">/* Ignore strandled ACKs (must not send respone */</span>
<a name="l00708"></a>00708     <span class="keywordflow">if</span> (rdata-&gt;msg_info.msg-&gt;line.req.method.id == PJSIP_ACK_METHOD)
<a name="l00709"></a>00709         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00710"></a>00710 
<a name="l00711"></a>00711     <span class="comment">/* Respond (statelessly) any non-INVITE requests with 500  */</span>
<a name="l00712"></a>00712     <span class="keywordflow">if</span> (rdata-&gt;msg_info.msg-&gt;line.req.method.id != PJSIP_INVITE_METHOD) {
<a name="l00713"></a>00713         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Unsupported Operation&quot;</span>);
<a name="l00714"></a>00714         pjsip_endpt_respond_stateless( app.sip_endpt, rdata, 
<a name="l00715"></a>00715                                        500, &amp;reason,
<a name="l00716"></a>00716                                        NULL, NULL);
<a name="l00717"></a>00717         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00718"></a>00718     }
<a name="l00719"></a>00719 
<a name="l00720"></a>00720     <span class="comment">/* Handle incoming INVITE */</span>
<a name="l00721"></a>00721     process_incoming_call(rdata);
<a name="l00722"></a>00722 
<a name="l00723"></a>00723     <span class="comment">/* Done */</span>
<a name="l00724"></a>00724     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00725"></a>00725 }
<a name="l00726"></a>00726 
<a name="l00727"></a>00727 
<a name="l00728"></a>00728 <span class="comment">/* Callback timer to disconnect call (limiting call duration) */</span>
<a name="l00729"></a>00729 <span class="keyword">static</span> <span class="keywordtype">void</span> timer_disconnect_call( <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *timer_heap,
<a name="l00730"></a>00730                                    <span class="keyword">struct</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm">pj_timer_entry</a> *entry)
<a name="l00731"></a>00731 {
<a name="l00732"></a>00732     <span class="keyword">struct </span>call *call = entry-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a96ce07b4b890b820ccd1e8365b88add6">user_data</a>;
<a name="l00733"></a>00733 
<a name="l00734"></a>00734     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(timer_heap);
<a name="l00735"></a>00735 
<a name="l00736"></a>00736     entry-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a70aed199d89e16a05bd9643efd3d665d">id</a> = 0;
<a name="l00737"></a>00737     hangup_call(call-&gt;index);
<a name="l00738"></a>00738 }
<a name="l00739"></a>00739 
<a name="l00740"></a>00740 
<a name="l00741"></a>00741 <span class="comment">/* Callback to be called when invite session&#39;s state has changed: */</span>
<a name="l00742"></a>00742 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_state_changed( pjsip_inv_session *inv, 
<a name="l00743"></a>00743                                    pjsip_event *e)
<a name="l00744"></a>00744 {
<a name="l00745"></a>00745     <span class="keyword">struct </span>call *call = inv-&gt;mod_data[mod_siprtp.id];
<a name="l00746"></a>00746 
<a name="l00747"></a>00747     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);
<a name="l00748"></a>00748 
<a name="l00749"></a>00749     <span class="keywordflow">if</span> (!call)
<a name="l00750"></a>00750         <span class="keywordflow">return</span>;
<a name="l00751"></a>00751 
<a name="l00752"></a>00752     <span class="keywordflow">if</span> (inv-&gt;state == PJSIP_INV_STATE_DISCONNECTED) {
<a name="l00753"></a>00753         
<a name="l00754"></a>00754         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> null_time = {0, 0};
<a name="l00755"></a>00755 
<a name="l00756"></a>00756         <span class="keywordflow">if</span> (call-&gt;<a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a70aed199d89e16a05bd9643efd3d665d">id</a> != 0) {
<a name="l00757"></a>00757             pjsip_endpt_cancel_timer(app.sip_endpt, &amp;call-&gt;<a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>);
<a name="l00758"></a>00758             call-&gt;<a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a70aed199d89e16a05bd9643efd3d665d">id</a> = 0;
<a name="l00759"></a>00759         }
<a name="l00760"></a>00760 
<a name="l00761"></a>00761         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Call #%d disconnected. Reason=%d (%.*s)&quot;</span>,
<a name="l00762"></a>00762                   call-&gt;index,
<a name="l00763"></a>00763                   inv-&gt;cause,
<a name="l00764"></a>00764                   (<span class="keywordtype">int</span>)inv-&gt;cause_text.slen,
<a name="l00765"></a>00765                   inv-&gt;cause_text.ptr));
<a name="l00766"></a>00766 
<a name="l00767"></a>00767         <span class="keywordflow">if</span> (app.call_report) {
<a name="l00768"></a>00768             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Call #%d statistics:&quot;</span>, call-&gt;index));
<a name="l00769"></a>00769             print_call(call-&gt;index);
<a name="l00770"></a>00770         }
<a name="l00771"></a>00771 
<a name="l00772"></a>00772 
<a name="l00773"></a>00773         call-&gt;inv = NULL;
<a name="l00774"></a>00774         inv-&gt;mod_data[mod_siprtp.id] = NULL;
<a name="l00775"></a>00775 
<a name="l00776"></a>00776         destroy_call_media(call-&gt;index);
<a name="l00777"></a>00777 
<a name="l00778"></a>00778         call-&gt;start_time = null_time;
<a name="l00779"></a>00779         call-&gt;response_time = null_time;
<a name="l00780"></a>00780         call-&gt;connect_time = null_time;
<a name="l00781"></a>00781 
<a name="l00782"></a>00782         ++app.uac_calls;
<a name="l00783"></a>00783 
<a name="l00784"></a>00784     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (inv-&gt;state == PJSIP_INV_STATE_CONFIRMED) {
<a name="l00785"></a>00785 
<a name="l00786"></a>00786         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> t;
<a name="l00787"></a>00787 
<a name="l00788"></a>00788         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;call-&gt;connect_time);
<a name="l00789"></a>00789         <span class="keywordflow">if</span> (call-&gt;response_time.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> == 0)
<a name="l00790"></a>00790             call-&gt;response_time = call-&gt;connect_time;
<a name="l00791"></a>00791 
<a name="l00792"></a>00792         t = call-&gt;connect_time;
<a name="l00793"></a>00793         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(t, call-&gt;start_time);
<a name="l00794"></a>00794 
<a name="l00795"></a>00795         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Call #%d connected in %d ms&quot;</span>, call-&gt;index,
<a name="l00796"></a>00796                   <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(t)));
<a name="l00797"></a>00797 
<a name="l00798"></a>00798         <span class="keywordflow">if</span> (app.duration != 0) {
<a name="l00799"></a>00799             call-&gt;<a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a70aed199d89e16a05bd9643efd3d665d">id</a> = 1;
<a name="l00800"></a>00800             call-&gt;<a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a96ce07b4b890b820ccd1e8365b88add6">user_data</a> = call;
<a name="l00801"></a>00801             call-&gt;<a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a13e63641afbb94298b79967585c0f642">cb</a> = &amp;timer_disconnect_call;
<a name="l00802"></a>00802 
<a name="l00803"></a>00803             t.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = app.duration;
<a name="l00804"></a>00804             t.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
<a name="l00805"></a>00805 
<a name="l00806"></a>00806             pjsip_endpt_schedule_timer(app.sip_endpt, &amp;call-&gt;<a class="code" href="structcall.htm#ab6cff6ed65f7f63136706c4a423d5d3d">d_timer</a>, &amp;t);
<a name="l00807"></a>00807         }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( inv-&gt;state == PJSIP_INV_STATE_EARLY ||
<a name="l00810"></a>00810                 inv-&gt;state == PJSIP_INV_STATE_CONNECTING) {
<a name="l00811"></a>00811 
<a name="l00812"></a>00812         <span class="keywordflow">if</span> (call-&gt;response_time.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> == 0)
<a name="l00813"></a>00813             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;call-&gt;response_time);
<a name="l00814"></a>00814 
<a name="l00815"></a>00815     }
<a name="l00816"></a>00816 }
<a name="l00817"></a>00817 
<a name="l00818"></a>00818 
<a name="l00819"></a>00819 <span class="comment">/* Utility */</span>
<a name="l00820"></a>00820 <span class="keyword">static</span> <span class="keywordtype">void</span> app_perror(<span class="keyword">const</span> <span class="keywordtype">char</span> *sender, <span class="keyword">const</span> <span class="keywordtype">char</span> *title, 
<a name="l00821"></a>00821                        <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)
<a name="l00822"></a>00822 {
<a name="l00823"></a>00823     <span class="keywordtype">char</span> errmsg[PJ_ERR_MSG_SIZE];
<a name="l00824"></a>00824 
<a name="l00825"></a>00825     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a>(status, errmsg, <span class="keyword">sizeof</span>(errmsg));
<a name="l00826"></a>00826     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(sender, <span class="stringliteral">&quot;%s: %s [status=%d]&quot;</span>, title, errmsg, status));
<a name="l00827"></a>00827 }
<a name="l00828"></a>00828 
<a name="l00829"></a>00829 
<a name="l00830"></a>00830 <span class="comment">/* Worker thread for SIP */</span>
<a name="l00831"></a>00831 <span class="keyword">static</span> <span class="keywordtype">int</span> sip_worker_thread(<span class="keywordtype">void</span> *arg)
<a name="l00832"></a>00832 {
<a name="l00833"></a>00833     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(arg);
<a name="l00834"></a>00834 
<a name="l00835"></a>00835     <span class="keywordflow">while</span> (!app.thread_quit) {
<a name="l00836"></a>00836         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> timeout = {0, 10};
<a name="l00837"></a>00837         pjsip_endpt_handle_events(app.sip_endpt, &amp;timeout);
<a name="l00838"></a>00838     }
<a name="l00839"></a>00839 
<a name="l00840"></a>00840     <span class="keywordflow">return</span> 0;
<a name="l00841"></a>00841 }
<a name="l00842"></a>00842 
<a name="l00843"></a>00843 
<a name="l00844"></a>00844 <span class="comment">/* Init application options */</span>
<a name="l00845"></a>00845 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> init_options(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l00846"></a>00846 {
<a name="l00847"></a>00847     <span class="keyword">static</span> <span class="keywordtype">char</span> ip_addr[32];
<a name="l00848"></a>00848     <span class="keyword">static</span> <span class="keywordtype">char</span> local_uri[64];
<a name="l00849"></a>00849 
<a name="l00850"></a>00850     <span class="keyword">enum</span> { OPT_START,
<a name="l00851"></a>00851            OPT_APP_LOG_LEVEL, OPT_LOG_FILE, 
<a name="l00852"></a>00852            OPT_A_PT, OPT_A_NAME, OPT_A_CLOCK, OPT_A_BITRATE, OPT_A_PTIME,
<a name="l00853"></a>00853            OPT_REPORT_FILE };
<a name="l00854"></a>00854 
<a name="l00855"></a>00855     <span class="keyword">struct </span><a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/structpj__getopt__option.htm">pj_getopt_option</a> long_options[] = {
<a name="l00856"></a>00856         { <span class="stringliteral">&quot;count&quot;</span>,          1, 0, <span class="charliteral">&#39;c&#39;</span> },
<a name="l00857"></a>00857         { <span class="stringliteral">&quot;gap&quot;</span>,            1, 0, <span class="charliteral">&#39;g&#39;</span> },
<a name="l00858"></a>00858         { <span class="stringliteral">&quot;call-report&quot;</span>,    0, 0, <span class="charliteral">&#39;R&#39;</span> },
<a name="l00859"></a>00859         { <span class="stringliteral">&quot;duration&quot;</span>,       1, 0, <span class="charliteral">&#39;d&#39;</span> },
<a name="l00860"></a>00860         { <span class="stringliteral">&quot;auto-quit&quot;</span>,      0, 0, <span class="charliteral">&#39;q&#39;</span> },
<a name="l00861"></a>00861         { <span class="stringliteral">&quot;local-port&quot;</span>,     1, 0, <span class="charliteral">&#39;p&#39;</span> },
<a name="l00862"></a>00862         { <span class="stringliteral">&quot;rtp-port&quot;</span>,       1, 0, <span class="charliteral">&#39;r&#39;</span> },
<a name="l00863"></a>00863         { <span class="stringliteral">&quot;ip-addr&quot;</span>,        1, 0, <span class="charliteral">&#39;i&#39;</span> },
<a name="l00864"></a>00864 
<a name="l00865"></a>00865         { <span class="stringliteral">&quot;log-level&quot;</span>,      1, 0, <span class="charliteral">&#39;l&#39;</span> },
<a name="l00866"></a>00866         { <span class="stringliteral">&quot;app-log-level&quot;</span>,  1, 0, OPT_APP_LOG_LEVEL },
<a name="l00867"></a>00867         { <span class="stringliteral">&quot;log-file&quot;</span>,       1, 0, OPT_LOG_FILE },
<a name="l00868"></a>00868 
<a name="l00869"></a>00869         { <span class="stringliteral">&quot;report-file&quot;</span>,    1, 0, OPT_REPORT_FILE },
<a name="l00870"></a>00870 
<a name="l00871"></a>00871         <span class="comment">/* Don&#39;t support this anymore, see comments in USAGE above.</span>
<a name="l00872"></a>00872 <span class="comment">        { &quot;a-pt&quot;,           1, 0, OPT_A_PT },</span>
<a name="l00873"></a>00873 <span class="comment">        { &quot;a-name&quot;,         1, 0, OPT_A_NAME },</span>
<a name="l00874"></a>00874 <span class="comment">        { &quot;a-clock&quot;,        1, 0, OPT_A_CLOCK },</span>
<a name="l00875"></a>00875 <span class="comment">        { &quot;a-bitrate&quot;,      1, 0, OPT_A_BITRATE },</span>
<a name="l00876"></a>00876 <span class="comment">        { &quot;a-ptime&quot;,        1, 0, OPT_A_PTIME },</span>
<a name="l00877"></a>00877 <span class="comment">        */</span>
<a name="l00878"></a>00878 
<a name="l00879"></a>00879         { NULL, 0, 0, 0 },
<a name="l00880"></a>00880     };
<a name="l00881"></a>00881     <span class="keywordtype">int</span> c;
<a name="l00882"></a>00882     <span class="keywordtype">int</span> option_index;
<a name="l00883"></a>00883 
<a name="l00884"></a>00884     <span class="comment">/* Get local IP address for the default IP address */</span>
<a name="l00885"></a>00885     {
<a name="l00886"></a>00886         <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *hostname;
<a name="l00887"></a>00887         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a> tmp_addr;
<a name="l00888"></a>00888         <span class="keywordtype">char</span> *addr;
<a name="l00889"></a>00889 
<a name="l00890"></a>00890         hostname = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname</a>();
<a name="l00891"></a>00891         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;tmp_addr, hostname, 0);
<a name="l00892"></a>00892         addr = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga399118ab0e5fea21ba5599caa260bc20">pj_inet_ntoa</a>(tmp_addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a>);
<a name="l00893"></a>00893         pj_ansi_strcpy(ip_addr, addr);
<a name="l00894"></a>00894     }
<a name="l00895"></a>00895 
<a name="l00896"></a>00896     <span class="comment">/* Init defaults */</span>
<a name="l00897"></a>00897     app.max_calls = 1;
<a name="l00898"></a>00898     app.thread_count = 1;
<a name="l00899"></a>00899     app.sip_port = 5060;
<a name="l00900"></a>00900     app.rtp_start_port = RTP_START_PORT;
<a name="l00901"></a>00901     app.local_addr = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(ip_addr);
<a name="l00902"></a>00902     app.log_level = 5;
<a name="l00903"></a>00903     app.app_log_level = 3;
<a name="l00904"></a>00904     app.log_filename = NULL;
<a name="l00905"></a>00905 
<a name="l00906"></a>00906     <span class="comment">/* Default codecs: */</span>
<a name="l00907"></a>00907     app.audio_codec = audio_codecs[0];
<a name="l00908"></a>00908 
<a name="l00909"></a>00909     <span class="comment">/* Parse options */</span>
<a name="l00910"></a>00910     <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga352f0d582d0afbf08306b92dbb5e357d">pj_optind</a> = 0;
<a name="l00911"></a>00911     <span class="keywordflow">while</span>((c=<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#gafcaf5634bffb80179fe8c8f535574a68">pj_getopt_long</a>(argc,argv, <span class="stringliteral">&quot;c:d:p:r:i:l:g:qR&quot;</span>, 
<a name="l00912"></a>00912                             long_options, &amp;option_index))!=-1) 
<a name="l00913"></a>00913     {
<a name="l00914"></a>00914         <span class="keywordflow">switch</span> (c) {
<a name="l00915"></a>00915         <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
<a name="l00916"></a>00916             app.max_calls = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00917"></a>00917             <span class="keywordflow">if</span> (app.max_calls &lt; 0 || app.max_calls &gt; MAX_CALLS) {
<a name="l00918"></a>00918                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Invalid max calls value %s&quot;</span>, <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>));
<a name="l00919"></a>00919                 <span class="keywordflow">return</span> 1;
<a name="l00920"></a>00920             }
<a name="l00921"></a>00921             <span class="keywordflow">break</span>;
<a name="l00922"></a>00922         <span class="keywordflow">case</span> <span class="charliteral">&#39;g&#39;</span>:
<a name="l00923"></a>00923             app.call_gap = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00924"></a>00924             <span class="keywordflow">break</span>;
<a name="l00925"></a>00925         <span class="keywordflow">case</span> <span class="charliteral">&#39;R&#39;</span>:
<a name="l00926"></a>00926             app.call_report = PJ_TRUE;
<a name="l00927"></a>00927             <span class="keywordflow">break</span>;
<a name="l00928"></a>00928         <span class="keywordflow">case</span> <span class="charliteral">&#39;d&#39;</span>:
<a name="l00929"></a>00929             app.duration = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00930"></a>00930             <span class="keywordflow">break</span>;
<a name="l00931"></a>00931         <span class="keywordflow">case</span> <span class="charliteral">&#39;q&#39;</span>:
<a name="l00932"></a>00932             app.auto_quit = 1;
<a name="l00933"></a>00933             <span class="keywordflow">break</span>;
<a name="l00934"></a>00934 
<a name="l00935"></a>00935         <span class="keywordflow">case</span> <span class="charliteral">&#39;p&#39;</span>:
<a name="l00936"></a>00936             app.sip_port = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00937"></a>00937             <span class="keywordflow">break</span>;
<a name="l00938"></a>00938         <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:
<a name="l00939"></a>00939             app.rtp_start_port = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00940"></a>00940             <span class="keywordflow">break</span>;
<a name="l00941"></a>00941         <span class="keywordflow">case</span> <span class="charliteral">&#39;i&#39;</span>:
<a name="l00942"></a>00942             app.local_addr = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00943"></a>00943             <span class="keywordflow">break</span>;
<a name="l00944"></a>00944 
<a name="l00945"></a>00945         <span class="keywordflow">case</span> <span class="charliteral">&#39;l&#39;</span>:
<a name="l00946"></a>00946             app.log_level = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00947"></a>00947             <span class="keywordflow">break</span>;
<a name="l00948"></a>00948         <span class="keywordflow">case</span> OPT_APP_LOG_LEVEL:
<a name="l00949"></a>00949             app.app_log_level = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00950"></a>00950             <span class="keywordflow">break</span>;
<a name="l00951"></a>00951         <span class="keywordflow">case</span> OPT_LOG_FILE:
<a name="l00952"></a>00952             app.log_filename = <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>;
<a name="l00953"></a>00953             <span class="keywordflow">break</span>;
<a name="l00954"></a>00954 
<a name="l00955"></a>00955         <span class="keywordflow">case</span> OPT_A_PT:
<a name="l00956"></a>00956             app.audio_codec.pt = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00957"></a>00957             <span class="keywordflow">break</span>;
<a name="l00958"></a>00958         <span class="keywordflow">case</span> OPT_A_NAME:
<a name="l00959"></a>00959             app.audio_codec.name = <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>;
<a name="l00960"></a>00960             <span class="keywordflow">break</span>;
<a name="l00961"></a>00961         <span class="keywordflow">case</span> OPT_A_CLOCK:
<a name="l00962"></a>00962             app.audio_codec.clock_rate = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00963"></a>00963             <span class="keywordflow">break</span>;
<a name="l00964"></a>00964         <span class="keywordflow">case</span> OPT_A_BITRATE:
<a name="l00965"></a>00965             app.audio_codec.bit_rate = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00966"></a>00966             <span class="keywordflow">break</span>;
<a name="l00967"></a>00967         <span class="keywordflow">case</span> OPT_A_PTIME:
<a name="l00968"></a>00968             app.audio_codec.ptime = atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l00969"></a>00969             <span class="keywordflow">break</span>;
<a name="l00970"></a>00970         <span class="keywordflow">case</span> OPT_REPORT_FILE:
<a name="l00971"></a>00971             app.report_filename = <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>;
<a name="l00972"></a>00972             <span class="keywordflow">break</span>;
<a name="l00973"></a>00973 
<a name="l00974"></a>00974         <span class="keywordflow">default</span>:
<a name="l00975"></a>00975             puts(USAGE);
<a name="l00976"></a>00976             <span class="keywordflow">return</span> 1;
<a name="l00977"></a>00977         }
<a name="l00978"></a>00978     }
<a name="l00979"></a>00979 
<a name="l00980"></a>00980     <span class="comment">/* Check if URL is specified */</span>
<a name="l00981"></a>00981     <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga352f0d582d0afbf08306b92dbb5e357d">pj_optind</a> &lt; argc)
<a name="l00982"></a>00982         app.uri_to_call = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(argv[<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga352f0d582d0afbf08306b92dbb5e357d">pj_optind</a>]);
<a name="l00983"></a>00983 
<a name="l00984"></a>00984     <span class="comment">/* Build local URI and contact */</span>
<a name="l00985"></a>00985     pj_ansi_sprintf( local_uri, <span class="stringliteral">&quot;sip:%s:%d&quot;</span>, app.local_addr.ptr, app.sip_port);
<a name="l00986"></a>00986     app.local_uri = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(local_uri);
<a name="l00987"></a>00987     app.local_contact = app.local_uri;
<a name="l00988"></a>00988 
<a name="l00989"></a>00989 
<a name="l00990"></a>00990     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00991"></a>00991 }
<a name="l00992"></a>00992 
<a name="l00993"></a>00993 
<a name="l00994"></a>00994 <span class="comment">/*****************************************************************************</span>
<a name="l00995"></a>00995 <span class="comment"> * MEDIA STUFFS</span>
<a name="l00996"></a>00996 <span class="comment"> */</span>
<a name="l00997"></a>00997 
<a name="l00998"></a>00998 <span class="comment">/*</span>
<a name="l00999"></a>00999 <span class="comment"> * Create SDP session for a call.</span>
<a name="l01000"></a>01000 <span class="comment"> */</span>
<a name="l01001"></a>01001 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> create_sdp( <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool,
<a name="l01002"></a>01002                                <span class="keyword">struct</span> call *call,
<a name="l01003"></a>01003                                <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **p_sdp)
<a name="l01004"></a>01004 {
<a name="l01005"></a>01005     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> tv;
<a name="l01006"></a>01006     <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp;
<a name="l01007"></a>01007     <a class="code" href="structpjmedia__sdp__media.htm">pjmedia_sdp_media</a> *m;
<a name="l01008"></a>01008     <a class="code" href="structpjmedia__sdp__attr.htm">pjmedia_sdp_attr</a> *attr;
<a name="l01009"></a>01009     <a class="code" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> tpinfo;
<a name="l01010"></a>01010     <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *audio = &amp;call-&gt;media[0];
<a name="l01011"></a>01011 
<a name="l01012"></a>01012     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(pool &amp;&amp; p_sdp, PJ_EINVAL);
<a name="l01013"></a>01013 
<a name="l01014"></a>01014 
<a name="l01015"></a>01015     <span class="comment">/* Get transport info */</span>
<a name="l01016"></a>01016     <a class="code" href="group__PJMEDIA__TRANSPORT.htm#gab293d1afad42d1f49745f3fcd235fa17">pjmedia_transport_info_init</a>(&amp;tpinfo);
<a name="l01017"></a>01017     <a class="code" href="group__PJMEDIA__TRANSPORT.htm#ga213beab16cd5d94437c2890b9f3fe75b">pjmedia_transport_get_info</a>(audio-&gt;transport, &amp;tpinfo);
<a name="l01018"></a>01018 
<a name="l01019"></a>01019     <span class="comment">/* Create and initialize basic SDP session */</span>
<a name="l01020"></a>01020     sdp = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a> (pool, <span class="keyword">sizeof</span>(<a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a>));
<a name="l01021"></a>01021 
<a name="l01022"></a>01022     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tv);
<a name="l01023"></a>01023     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a0625fa170126293b25253b2fc588875a">origin</a>.<a class="code" href="structpjmedia__sdp__session.htm#a855131c0a6f792bb2cb4794ad626d601">user</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;pjsip-siprtp&quot;</span>);
<a name="l01024"></a>01024     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a0625fa170126293b25253b2fc588875a">origin</a>.<a class="code" href="structpjmedia__sdp__session.htm#a6b8359db35cb0a317854555460009cad">version</a> = sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a0625fa170126293b25253b2fc588875a">origin</a>.<a class="code" href="structpjmedia__sdp__session.htm#a0384de666572cd66f7a281b7db63413c">id</a> = tv.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> + 2208988800UL;
<a name="l01025"></a>01025     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a0625fa170126293b25253b2fc588875a">origin</a>.<a class="code" href="structpjmedia__sdp__session.htm#a48233db45dc84704c95bf6175462d9e4">net_type</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;IN&quot;</span>);
<a name="l01026"></a>01026     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a0625fa170126293b25253b2fc588875a">origin</a>.<a class="code" href="structpjmedia__sdp__session.htm#a8668742094b041a4d5821d8dd0248be9">addr_type</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;IP4&quot;</span>);
<a name="l01027"></a>01027     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a0625fa170126293b25253b2fc588875a">origin</a>.<a class="code" href="structpjmedia__sdp__session.htm#ac4166d3ae2ffbd679edba7d9e351db29">addr</a> = *<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname</a>();
<a name="l01028"></a>01028     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a70bb5508d177733dcaeda1e821593ec2">name</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;pjsip&quot;</span>);
<a name="l01029"></a>01029 
<a name="l01030"></a>01030     <span class="comment">/* Since we only support one media stream at present, put the</span>
<a name="l01031"></a>01031 <span class="comment">     * SDP connection line in the session level.</span>
<a name="l01032"></a>01032 <span class="comment">     */</span>
<a name="l01033"></a>01033     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a30c79db08d5d22d2fce2179717a7cfeb">conn</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a> (pool, <span class="keyword">sizeof</span>(<a class="code" href="structpjmedia__sdp__conn.htm">pjmedia_sdp_conn</a>));
<a name="l01034"></a>01034     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a30c79db08d5d22d2fce2179717a7cfeb">conn</a>-&gt;<a class="code" href="structpjmedia__sdp__conn.htm#a8ed74cf5284dc14a5ab06bd09f204856">net_type</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;IN&quot;</span>);
<a name="l01035"></a>01035     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a30c79db08d5d22d2fce2179717a7cfeb">conn</a>-&gt;<a class="code" href="structpjmedia__sdp__conn.htm#aec4591c8dff072399537e741745b65b2">addr_type</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;IP4&quot;</span>);
<a name="l01036"></a>01036     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a30c79db08d5d22d2fce2179717a7cfeb">conn</a>-&gt;<a class="code" href="structpjmedia__sdp__conn.htm#ae603b165ba204743ab9b9fb5d22f1537">addr</a> = app.local_addr;
<a name="l01037"></a>01037 
<a name="l01038"></a>01038 
<a name="l01039"></a>01039     <span class="comment">/* SDP time and attributes. */</span>
<a name="l01040"></a>01040     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a5a6a20f4ba99d2cc43820be774ac59e7">time</a>.<a class="code" href="structpjmedia__sdp__session.htm#a6200bd90a6be57ec36aac452c45872c7">start</a> = sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a5a6a20f4ba99d2cc43820be774ac59e7">time</a>.<a class="code" href="structpjmedia__sdp__session.htm#ae3b829717aa39e76d04e5f5e61284d1d">stop</a> = 0;
<a name="l01041"></a>01041     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#a0a8af45154f3f04823f1ff0ccc13bc54">attr_count</a> = 0;
<a name="l01042"></a>01042 
<a name="l01043"></a>01043     <span class="comment">/* Create media stream 0: */</span>
<a name="l01044"></a>01044 
<a name="l01045"></a>01045     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#ac39a49696a42f536ee2904aadcefb7d6">media_count</a> = 1;
<a name="l01046"></a>01046     m = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a> (pool, <span class="keyword">sizeof</span>(<a class="code" href="structpjmedia__sdp__media.htm">pjmedia_sdp_media</a>));
<a name="l01047"></a>01047     sdp-&gt;<a class="code" href="structpjmedia__sdp__session.htm#ab10d483a2db7a29491a4cbf2ea08b56c">media</a>[0] = m;
<a name="l01048"></a>01048 
<a name="l01049"></a>01049     <span class="comment">/* Standard media info: */</span>
<a name="l01050"></a>01050     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a0804e7ebf233f4e2950080927cbba57a">media</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;audio&quot;</span>);
<a name="l01051"></a>01051     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#ad468b2e8ec3371cc6c877d9dfde892b1">port</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga879824dfc39cf8897aa2607e086ec013">pj_ntohs</a>(tpinfo.<a class="code" href="structpjmedia__transport__info.htm#a0d8a2639d0a981e9e025d71e200160cb">sock_info</a>.<a class="code" href="structpjmedia__sock__info.htm#aa2cecdb5ff13922865a33d49f3ccd0c8">rtp_addr_name</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm#ab25ec448ae63acfdd2aa0f3ef2fd10b8">ipv4</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a>);
<a name="l01052"></a>01052     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a90a90fed8df5a0e1bfc7bc291421d812">port_count</a> = 1;
<a name="l01053"></a>01053     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a260ceac6d572983b31b484c3697a575d">transport</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;RTP/AVP&quot;</span>);
<a name="l01054"></a>01054 
<a name="l01055"></a>01055     <span class="comment">/* Add format and rtpmap for each codec. */</span>
<a name="l01056"></a>01056     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a8834dacf968d51c3998a32ef4f30310f">fmt_count</a> = 1;
<a name="l01057"></a>01057     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a6801faf5ebb9919f1cb12842d5e4bc76">attr_count</a> = 0;
<a name="l01058"></a>01058 
<a name="l01059"></a>01059     {
<a name="l01060"></a>01060         <a class="code" href="structpjmedia__sdp__rtpmap.htm">pjmedia_sdp_rtpmap</a> rtpmap;
<a name="l01061"></a>01061         <a class="code" href="structpjmedia__sdp__attr.htm">pjmedia_sdp_attr</a> *attr;
<a name="l01062"></a>01062         <span class="keywordtype">char</span> ptstr[10];
<a name="l01063"></a>01063 
<a name="l01064"></a>01064         sprintf(ptstr, <span class="stringliteral">&quot;%d&quot;</span>, app.audio_codec.pt);
<a name="l01065"></a>01065         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga96cdcaa39650b7f36fd850f53f4ebebf">pj_strdup2</a>(pool, &amp;m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a9b9aeefe5e698a3d9c29069775bcc4f4">fmt</a>[0], ptstr);
<a name="l01066"></a>01066         rtpmap.<a class="code" href="structpjmedia__sdp__rtpmap.htm#aa5ac5e66a6dcdbb9d9a16f4d6f7852c9">pt</a> = m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a9b9aeefe5e698a3d9c29069775bcc4f4">fmt</a>[0];
<a name="l01067"></a>01067         rtpmap.<a class="code" href="structpjmedia__sdp__rtpmap.htm#ae9d5c258976b6fbb4ef4b6793aba882c">clock_rate</a> = app.audio_codec.clock_rate;
<a name="l01068"></a>01068         rtpmap.<a class="code" href="structpjmedia__sdp__rtpmap.htm#a569ae42e875e740d8ab5c3cdf50a6dd1">enc_name</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(app.audio_codec.name);
<a name="l01069"></a>01069         rtpmap.<a class="code" href="structpjmedia__sdp__rtpmap.htm#a572ff3d848f2588aeb45434bc48afd2b">param</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> = 0;
<a name="l01070"></a>01070 
<a name="l01071"></a>01071         <a class="code" href="group__PJMEDIA__SDP.htm#ga35e2836c8694c99c0a8f5acf46a0afe8">pjmedia_sdp_rtpmap_to_attr</a>(pool, &amp;rtpmap, &amp;attr);
<a name="l01072"></a>01072         m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a8b201f0cfeab12e32b581b335263e3b7">attr</a>[m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a6801faf5ebb9919f1cb12842d5e4bc76">attr_count</a>++] = attr;
<a name="l01073"></a>01073     }
<a name="l01074"></a>01074 
<a name="l01075"></a>01075     <span class="comment">/* Add sendrecv attribute. */</span>
<a name="l01076"></a>01076     attr = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a>(pool, <span class="keyword">sizeof</span>(<a class="code" href="structpjmedia__sdp__attr.htm">pjmedia_sdp_attr</a>));
<a name="l01077"></a>01077     attr-&gt;<a class="code" href="structpjmedia__sdp__attr.htm#ad9275c5178fcaccaace34c73315a2754">name</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;sendrecv&quot;</span>);
<a name="l01078"></a>01078     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a8b201f0cfeab12e32b581b335263e3b7">attr</a>[m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a6801faf5ebb9919f1cb12842d5e4bc76">attr_count</a>++] = attr;
<a name="l01079"></a>01079 
<a name="l01080"></a>01080 <span class="preprocessor">#if 1</span>
<a name="l01081"></a>01081 <span class="preprocessor"></span>    <span class="comment">/*</span>
<a name="l01082"></a>01082 <span class="comment">     * Add support telephony event</span>
<a name="l01083"></a>01083 <span class="comment">     */</span>
<a name="l01084"></a>01084     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a9b9aeefe5e698a3d9c29069775bcc4f4">fmt</a>[m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a51fbbb3f257b54601e8563e7d7a33d02">desc</a>.<a class="code" href="structpjmedia__sdp__media.htm#a8834dacf968d51c3998a32ef4f30310f">fmt_count</a>++] = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;121&quot;</span>);
<a name="l01085"></a>01085     <span class="comment">/* Add rtpmap. */</span>
<a name="l01086"></a>01086     attr = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a>(pool, <span class="keyword">sizeof</span>(<a class="code" href="structpjmedia__sdp__attr.htm">pjmedia_sdp_attr</a>));
<a name="l01087"></a>01087     attr-&gt;<a class="code" href="structpjmedia__sdp__attr.htm#ad9275c5178fcaccaace34c73315a2754">name</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;rtpmap&quot;</span>);
<a name="l01088"></a>01088     attr-&gt;<a class="code" href="structpjmedia__sdp__attr.htm#a6ba49c6fc9556fe39cb39337a13bcb19">value</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;121 telephone-event/8000&quot;</span>);
<a name="l01089"></a>01089     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a8b201f0cfeab12e32b581b335263e3b7">attr</a>[m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a6801faf5ebb9919f1cb12842d5e4bc76">attr_count</a>++] = attr;
<a name="l01090"></a>01090     <span class="comment">/* Add fmtp */</span>
<a name="l01091"></a>01091     attr = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a>(pool, <span class="keyword">sizeof</span>(<a class="code" href="structpjmedia__sdp__attr.htm">pjmedia_sdp_attr</a>));
<a name="l01092"></a>01092     attr-&gt;<a class="code" href="structpjmedia__sdp__attr.htm#ad9275c5178fcaccaace34c73315a2754">name</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;fmtp&quot;</span>);
<a name="l01093"></a>01093     attr-&gt;<a class="code" href="structpjmedia__sdp__attr.htm#a6ba49c6fc9556fe39cb39337a13bcb19">value</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;121 0-15&quot;</span>);
<a name="l01094"></a>01094     m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a8b201f0cfeab12e32b581b335263e3b7">attr</a>[m-&gt;<a class="code" href="structpjmedia__sdp__media.htm#a6801faf5ebb9919f1cb12842d5e4bc76">attr_count</a>++] = attr;
<a name="l01095"></a>01095 <span class="preprocessor">#endif</span>
<a name="l01096"></a>01096 <span class="preprocessor"></span>
<a name="l01097"></a>01097     <span class="comment">/* Done */</span>
<a name="l01098"></a>01098     *p_sdp = sdp;
<a name="l01099"></a>01099 
<a name="l01100"></a>01100     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l01101"></a>01101 }
<a name="l01102"></a>01102 
<a name="l01103"></a>01103 
<a name="l01104"></a>01104 <span class="preprocessor">#if defined(PJ_WIN32) &amp;&amp; PJ_WIN32 != 0</span>
<a name="l01105"></a>01105 <span class="preprocessor"></span><span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l01106"></a>01106 <span class="keyword">static</span> <span class="keywordtype">void</span> boost_priority(<span class="keywordtype">void</span>)
<a name="l01107"></a>01107 {
<a name="l01108"></a>01108     SetPriorityClass( GetCurrentProcess(), REALTIME_PRIORITY_CLASS);
<a name="l01109"></a>01109     SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_HIGHEST);
<a name="l01110"></a>01110 }
<a name="l01111"></a>01111 
<a name="l01112"></a>01112 <span class="preprocessor">#elif defined(PJ_LINUX) &amp;&amp; PJ_LINUX != 0</span>
<a name="l01113"></a>01113 <span class="preprocessor"></span><span class="preprocessor">#include &lt;pthread.h&gt;</span>
<a name="l01114"></a>01114 <span class="keyword">static</span> <span class="keywordtype">void</span> boost_priority(<span class="keywordtype">void</span>)
<a name="l01115"></a>01115 {
<a name="l01116"></a>01116 <span class="preprocessor">#define POLICY  SCHED_FIFO</span>
<a name="l01117"></a>01117 <span class="preprocessor"></span>    <span class="keyword">struct </span>sched_param tp;
<a name="l01118"></a>01118     <span class="keywordtype">int</span> max_prio;
<a name="l01119"></a>01119     <span class="keywordtype">int</span> policy;
<a name="l01120"></a>01120     <span class="keywordtype">int</span> rc;
<a name="l01121"></a>01121 
<a name="l01122"></a>01122     <span class="keywordflow">if</span> (sched_get_priority_min(POLICY) &lt; sched_get_priority_max(POLICY))
<a name="l01123"></a>01123         max_prio = sched_get_priority_max(POLICY)-1;
<a name="l01124"></a>01124     <span class="keywordflow">else</span>
<a name="l01125"></a>01125         max_prio = sched_get_priority_max(POLICY)+1;
<a name="l01126"></a>01126 
<a name="l01127"></a>01127     <span class="comment">/*</span>
<a name="l01128"></a>01128 <span class="comment">     * Adjust process scheduling algorithm and priority</span>
<a name="l01129"></a>01129 <span class="comment">     */</span>
<a name="l01130"></a>01130     rc = sched_getparam(0, &amp;tp);
<a name="l01131"></a>01131     <span class="keywordflow">if</span> (rc != 0) {
<a name="l01132"></a>01132         app_perror( THIS_FILE, <span class="stringliteral">&quot;sched_getparam error&quot;</span>,
<a name="l01133"></a>01133                     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__errno.htm#gacc85d9323301650f961ae38e689fefcd">PJ_RETURN_OS_ERROR</a>(rc));
<a name="l01134"></a>01134         <span class="keywordflow">return</span>;
<a name="l01135"></a>01135     }
<a name="l01136"></a>01136     tp.__sched_priority = max_prio;
<a name="l01137"></a>01137 
<a name="l01138"></a>01138     rc = sched_setscheduler(0, POLICY, &amp;tp);
<a name="l01139"></a>01139     <span class="keywordflow">if</span> (rc != 0) {
<a name="l01140"></a>01140         app_perror( THIS_FILE, <span class="stringliteral">&quot;sched_setscheduler error&quot;</span>,
<a name="l01141"></a>01141                     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__errno.htm#gacc85d9323301650f961ae38e689fefcd">PJ_RETURN_OS_ERROR</a>(rc));
<a name="l01142"></a>01142     }
<a name="l01143"></a>01143 
<a name="l01144"></a>01144     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, <span class="stringliteral">&quot;New process policy=%d, priority=%d&quot;</span>,
<a name="l01145"></a>01145               policy, tp.__sched_priority));
<a name="l01146"></a>01146 
<a name="l01147"></a>01147     <span class="comment">/*</span>
<a name="l01148"></a>01148 <span class="comment">     * Adjust thread scheduling algorithm and priority</span>
<a name="l01149"></a>01149 <span class="comment">     */</span>
<a name="l01150"></a>01150     rc = pthread_getschedparam(pthread_self(), &amp;policy, &amp;tp);
<a name="l01151"></a>01151     <span class="keywordflow">if</span> (rc != 0) {
<a name="l01152"></a>01152         app_perror( THIS_FILE, <span class="stringliteral">&quot;pthread_getschedparam error&quot;</span>,
<a name="l01153"></a>01153                     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__errno.htm#gacc85d9323301650f961ae38e689fefcd">PJ_RETURN_OS_ERROR</a>(rc));
<a name="l01154"></a>01154         <span class="keywordflow">return</span>;
<a name="l01155"></a>01155     }
<a name="l01156"></a>01156 
<a name="l01157"></a>01157     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, <span class="stringliteral">&quot;Old thread policy=%d, priority=%d&quot;</span>,
<a name="l01158"></a>01158               policy, tp.__sched_priority));
<a name="l01159"></a>01159 
<a name="l01160"></a>01160     policy = POLICY;
<a name="l01161"></a>01161     tp.__sched_priority = max_prio;
<a name="l01162"></a>01162 
<a name="l01163"></a>01163     rc = pthread_setschedparam(pthread_self(), policy, &amp;tp);
<a name="l01164"></a>01164     <span class="keywordflow">if</span> (rc != 0) {
<a name="l01165"></a>01165         app_perror( THIS_FILE, <span class="stringliteral">&quot;pthread_setschedparam error&quot;</span>,
<a name="l01166"></a>01166                     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__errno.htm#gacc85d9323301650f961ae38e689fefcd">PJ_RETURN_OS_ERROR</a>(rc));
<a name="l01167"></a>01167         <span class="keywordflow">return</span>;
<a name="l01168"></a>01168     }
<a name="l01169"></a>01169 
<a name="l01170"></a>01170     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, <span class="stringliteral">&quot;New thread policy=%d, priority=%d&quot;</span>,
<a name="l01171"></a>01171               policy, tp.__sched_priority));
<a name="l01172"></a>01172 }
<a name="l01173"></a>01173 
<a name="l01174"></a>01174 <span class="preprocessor">#else</span>
<a name="l01175"></a>01175 <span class="preprocessor"></span><span class="preprocessor">#  define boost_priority()</span>
<a name="l01176"></a>01176 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01177"></a>01177 <span class="preprocessor"></span>
<a name="l01178"></a>01178 
<a name="l01179"></a>01179 <span class="comment">/*</span>
<a name="l01180"></a>01180 <span class="comment"> * This callback is called by media transport on receipt of RTP packet.</span>
<a name="l01181"></a>01181 <span class="comment"> */</span>
<a name="l01182"></a>01182 <span class="keyword">static</span> <span class="keywordtype">void</span> on_rx_rtp(<span class="keywordtype">void</span> *<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__IOQUEUE.htm#gab06c131ab29b37c027f2400bd5be6045">user_data</a>, <span class="keywordtype">void</span> *pkt, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> size)
<a name="l01183"></a>01183 {
<a name="l01184"></a>01184     <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *strm;
<a name="l01185"></a>01185     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01186"></a>01186     <span class="keyword">const</span> <a class="code" href="structpjmedia__rtp__hdr.htm">pjmedia_rtp_hdr</a> *hdr;
<a name="l01187"></a>01187     <span class="keyword">const</span> <span class="keywordtype">void</span> *payload;
<a name="l01188"></a>01188     <span class="keywordtype">unsigned</span> payload_len;
<a name="l01189"></a>01189 
<a name="l01190"></a>01190     strm = user_data;
<a name="l01191"></a>01191 
<a name="l01192"></a>01192     <span class="comment">/* Discard packet if media is inactive */</span>
<a name="l01193"></a>01193     <span class="keywordflow">if</span> (!strm-&gt;active)
<a name="l01194"></a>01194         <span class="keywordflow">return</span>;
<a name="l01195"></a>01195 
<a name="l01196"></a>01196     <span class="comment">/* Check for errors */</span>
<a name="l01197"></a>01197     <span class="keywordflow">if</span> (size &lt; 0) {
<a name="l01198"></a>01198         app_perror(THIS_FILE, <span class="stringliteral">&quot;RTP recv() error&quot;</span>, -size);
<a name="l01199"></a>01199         <span class="keywordflow">return</span>;
<a name="l01200"></a>01200     }
<a name="l01201"></a>01201 
<a name="l01202"></a>01202     <span class="comment">/* Decode RTP packet. */</span>
<a name="l01203"></a>01203     status = <a class="code" href="group__PJMED__RTP.htm#gaaa82e024f28c4796159d3d9bbe9c93ec">pjmedia_rtp_decode_rtp</a>(&amp;strm-&gt;in_sess, 
<a name="l01204"></a>01204                                     pkt, size, 
<a name="l01205"></a>01205                                     &amp;hdr, &amp;payload, &amp;payload_len);
<a name="l01206"></a>01206     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01207"></a>01207         app_perror(THIS_FILE, <span class="stringliteral">&quot;RTP decode error&quot;</span>, status);
<a name="l01208"></a>01208         <span class="keywordflow">return</span>;
<a name="l01209"></a>01209     }
<a name="l01210"></a>01210 
<a name="l01211"></a>01211     <span class="comment">//PJ_LOG(4,(THIS_FILE, &quot;Rx seq=%d&quot;, pj_ntohs(hdr-&gt;seq)));</span>
<a name="l01212"></a>01212 
<a name="l01213"></a>01213     <span class="comment">/* Update the RTCP session. */</span>
<a name="l01214"></a>01214     <a class="code" href="group__PJMED__RTCP.htm#ga7ce9e4e76674dba050c01cd295964bde">pjmedia_rtcp_rx_rtp</a>(&amp;strm-&gt;rtcp, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga879824dfc39cf8897aa2607e086ec013">pj_ntohs</a>(hdr-&gt;<a class="code" href="structpjmedia__rtp__hdr.htm#ac7031a2645fb6986552be171fe3742be">seq</a>),
<a name="l01215"></a>01215                         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga55c6836b3f858528c4a3855deb12154e">pj_ntohl</a>(hdr-&gt;<a class="code" href="structpjmedia__rtp__hdr.htm#a4afb857e88d1bf0c2dd4d457c215a837">ts</a>), payload_len);
<a name="l01216"></a>01216 
<a name="l01217"></a>01217     <span class="comment">/* Update RTP session */</span>
<a name="l01218"></a>01218     <a class="code" href="group__PJMED__RTP.htm#ga9d9b33a67b04a25c38d625131809247f">pjmedia_rtp_session_update</a>(&amp;strm-&gt;in_sess, hdr, NULL);
<a name="l01219"></a>01219 
<a name="l01220"></a>01220 }
<a name="l01221"></a>01221 
<a name="l01222"></a>01222 <span class="comment">/*</span>
<a name="l01223"></a>01223 <span class="comment"> * This callback is called by media transport on receipt of RTCP packet.</span>
<a name="l01224"></a>01224 <span class="comment"> */</span>
<a name="l01225"></a>01225 <span class="keyword">static</span> <span class="keywordtype">void</span> on_rx_rtcp(<span class="keywordtype">void</span> *user_data, <span class="keywordtype">void</span> *pkt, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> size)
<a name="l01226"></a>01226 {
<a name="l01227"></a>01227     <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *strm;
<a name="l01228"></a>01228 
<a name="l01229"></a>01229     strm = user_data;
<a name="l01230"></a>01230 
<a name="l01231"></a>01231     <span class="comment">/* Discard packet if media is inactive */</span>
<a name="l01232"></a>01232     <span class="keywordflow">if</span> (!strm-&gt;active)
<a name="l01233"></a>01233         <span class="keywordflow">return</span>;
<a name="l01234"></a>01234 
<a name="l01235"></a>01235     <span class="comment">/* Check for errors */</span>
<a name="l01236"></a>01236     <span class="keywordflow">if</span> (size &lt; 0) {
<a name="l01237"></a>01237         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error receiving RTCP packet&quot;</span>, -size);
<a name="l01238"></a>01238         <span class="keywordflow">return</span>;
<a name="l01239"></a>01239     }
<a name="l01240"></a>01240 
<a name="l01241"></a>01241     <span class="comment">/* Update RTCP session */</span>
<a name="l01242"></a>01242     <a class="code" href="group__PJMED__RTCP.htm#ga42ed1b0fc1e7bd65aea78e67e8415dca">pjmedia_rtcp_rx_rtcp</a>(&amp;strm-&gt;rtcp, pkt, size);
<a name="l01243"></a>01243 }
<a name="l01244"></a>01244 
<a name="l01245"></a>01245 
<a name="l01246"></a>01246 <span class="comment">/* </span>
<a name="l01247"></a>01247 <span class="comment"> * Media thread </span>
<a name="l01248"></a>01248 <span class="comment"> *</span>
<a name="l01249"></a>01249 <span class="comment"> * This is the thread to send and receive both RTP and RTCP packets.</span>
<a name="l01250"></a>01250 <span class="comment"> */</span>
<a name="l01251"></a>01251 <span class="keyword">static</span> <span class="keywordtype">int</span> media_thread(<span class="keywordtype">void</span> *arg)
<a name="l01252"></a>01252 {
<a name="l01253"></a>01253     <span class="keyword">enum</span> { RTCP_INTERVAL = 5000, RTCP_RAND = 2000 };
<a name="l01254"></a>01254     <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *strm = arg;
<a name="l01255"></a>01255     <span class="keywordtype">char</span> packet[1500];
<a name="l01256"></a>01256     <span class="keywordtype">unsigned</span> msec_interval;
<a name="l01257"></a>01257     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__timestamp.htm">pj_timestamp</a> freq, next_rtp, next_rtcp;
<a name="l01258"></a>01258 
<a name="l01259"></a>01259 
<a name="l01260"></a>01260     <span class="comment">/* Boost thread priority if necessary */</span>
<a name="l01261"></a>01261     boost_priority();
<a name="l01262"></a>01262 
<a name="l01263"></a>01263     <span class="comment">/* Let things settle */</span>
<a name="l01264"></a>01264     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(100);
<a name="l01265"></a>01265 
<a name="l01266"></a>01266     msec_interval = strm-&gt;samples_per_frame * 1000 / strm-&gt;clock_rate;
<a name="l01267"></a>01267     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq</a>(&amp;freq);
<a name="l01268"></a>01268 
<a name="l01269"></a>01269     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;next_rtp);
<a name="l01270"></a>01270     next_rtp.u64 += (freq.u64 * msec_interval / 1000);
<a name="l01271"></a>01271 
<a name="l01272"></a>01272     next_rtcp = next_rtp;
<a name="l01273"></a>01273     next_rtcp.u64 += (freq.u64 * (RTCP_INTERVAL+(<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>()%RTCP_RAND)) / 1000);
<a name="l01274"></a>01274 
<a name="l01275"></a>01275 
<a name="l01276"></a>01276     <span class="keywordflow">while</span> (!strm-&gt;thread_quit_flag) {
<a name="l01277"></a>01277         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__timestamp.htm">pj_timestamp</a> now, lesser;
<a name="l01278"></a>01278         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> timeout;
<a name="l01279"></a>01279         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> send_rtp, send_rtcp;
<a name="l01280"></a>01280 
<a name="l01281"></a>01281         send_rtp = send_rtcp = PJ_FALSE;
<a name="l01282"></a>01282 
<a name="l01283"></a>01283         <span class="comment">/* Determine how long to sleep */</span>
<a name="l01284"></a>01284         <span class="keywordflow">if</span> (next_rtp.u64 &lt; next_rtcp.u64) {
<a name="l01285"></a>01285             lesser = next_rtp;
<a name="l01286"></a>01286             send_rtp = PJ_TRUE;
<a name="l01287"></a>01287         } <span class="keywordflow">else</span> {
<a name="l01288"></a>01288             lesser = next_rtcp;
<a name="l01289"></a>01289             send_rtcp = PJ_TRUE;
<a name="l01290"></a>01290         }
<a name="l01291"></a>01291 
<a name="l01292"></a>01292         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;now);
<a name="l01293"></a>01293         <span class="keywordflow">if</span> (lesser.u64 &lt;= now.u64) {
<a name="l01294"></a>01294             timeout.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = timeout.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
<a name="l01295"></a>01295             <span class="comment">//printf(&quot;immediate &quot;); fflush(stdout);</span>
<a name="l01296"></a>01296         } <span class="keywordflow">else</span> {
<a name="l01297"></a>01297             pj_uint64_t tick_delay;
<a name="l01298"></a>01298             tick_delay = lesser.u64 - now.u64;
<a name="l01299"></a>01299             timeout.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 0;
<a name="l01300"></a>01300             timeout.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = (pj_uint32_t)(tick_delay * 1000 / freq.u64);
<a name="l01301"></a>01301             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0b28411e03320ad6bb5f3316125b461c">pj_time_val_normalize</a>(&amp;timeout);
<a name="l01302"></a>01302 
<a name="l01303"></a>01303             <span class="comment">//printf(&quot;%d:%03d &quot;, timeout.sec, timeout.msec); fflush(stdout);</span>
<a name="l01304"></a>01304         }
<a name="l01305"></a>01305 
<a name="l01306"></a>01306         <span class="comment">/* Wait for next interval */</span>
<a name="l01307"></a>01307         <span class="comment">//if (timeout.sec!=0 &amp;&amp; timeout.msec!=0) {</span>
<a name="l01308"></a>01308             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(timeout));
<a name="l01309"></a>01309             <span class="keywordflow">if</span> (strm-&gt;thread_quit_flag)
<a name="l01310"></a>01310                 <span class="keywordflow">break</span>;
<a name="l01311"></a>01311         <span class="comment">//}</span>
<a name="l01312"></a>01312 
<a name="l01313"></a>01313         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;now);
<a name="l01314"></a>01314 
<a name="l01315"></a>01315         <span class="keywordflow">if</span> (send_rtp || next_rtp.u64 &lt;= now.u64) {
<a name="l01316"></a>01316             <span class="comment">/*</span>
<a name="l01317"></a>01317 <span class="comment">             * Time to send RTP packet.</span>
<a name="l01318"></a>01318 <span class="comment">             */</span>
<a name="l01319"></a>01319             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01320"></a>01320             <span class="keyword">const</span> <span class="keywordtype">void</span> *p_hdr;
<a name="l01321"></a>01321             <span class="keyword">const</span> <a class="code" href="structpjmedia__rtp__hdr.htm">pjmedia_rtp_hdr</a> *hdr;
<a name="l01322"></a>01322             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> size;
<a name="l01323"></a>01323             <span class="keywordtype">int</span> hdrlen;
<a name="l01324"></a>01324 
<a name="l01325"></a>01325             <span class="comment">/* Format RTP header */</span>
<a name="l01326"></a>01326             status = <a class="code" href="group__PJMED__RTP.htm#ga7052667cdb593ec24c95b98a46227ce2">pjmedia_rtp_encode_rtp</a>( &amp;strm-&gt;out_sess, strm-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#a6390c7f49d9af342d947ea1f6d3cc118">tx_pt</a>,
<a name="l01327"></a>01327                                              0, <span class="comment">/* marker bit */</span>
<a name="l01328"></a>01328                                              strm-&gt;bytes_per_frame, 
<a name="l01329"></a>01329                                              strm-&gt;samples_per_frame,
<a name="l01330"></a>01330                                              &amp;p_hdr, &amp;hdrlen);
<a name="l01331"></a>01331             <span class="keywordflow">if</span> (status == PJ_SUCCESS) {
<a name="l01332"></a>01332 
<a name="l01333"></a>01333                 <span class="comment">//PJ_LOG(4,(THIS_FILE, &quot;\t\tTx seq=%d&quot;, pj_ntohs(hdr-&gt;seq)));</span>
<a name="l01334"></a>01334                 
<a name="l01335"></a>01335                 hdr = (<span class="keyword">const</span> <a class="code" href="structpjmedia__rtp__hdr.htm">pjmedia_rtp_hdr</a>*) p_hdr;
<a name="l01336"></a>01336 
<a name="l01337"></a>01337                 <span class="comment">/* Copy RTP header to packet */</span>
<a name="l01338"></a>01338                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga38d0ee03a9c582c627d44bfcb35fb6a8">pj_memcpy</a>(packet, hdr, hdrlen);
<a name="l01339"></a>01339 
<a name="l01340"></a>01340                 <span class="comment">/* Zero the payload */</span>
<a name="l01341"></a>01341                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(packet+hdrlen, strm-&gt;bytes_per_frame);
<a name="l01342"></a>01342 
<a name="l01343"></a>01343                 <span class="comment">/* Send RTP packet */</span>
<a name="l01344"></a>01344                 size = hdrlen + strm-&gt;bytes_per_frame;
<a name="l01345"></a>01345                 status = <a class="code" href="group__PJMEDIA__TRANSPORT.htm#ga79db5c82268501ec3bf7c1897c0b3626">pjmedia_transport_send_rtp</a>(strm-&gt;transport, 
<a name="l01346"></a>01346                                                     packet, size);
<a name="l01347"></a>01347                 <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l01348"></a>01348                     app_perror(THIS_FILE, <span class="stringliteral">&quot;Error sending RTP packet&quot;</span>, status);
<a name="l01349"></a>01349 
<a name="l01350"></a>01350             } <span class="keywordflow">else</span> {
<a name="l01351"></a>01351                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(!<span class="stringliteral">&quot;RTP encode() error&quot;</span>);
<a name="l01352"></a>01352             }
<a name="l01353"></a>01353 
<a name="l01354"></a>01354             <span class="comment">/* Update RTCP SR */</span>
<a name="l01355"></a>01355             <a class="code" href="group__PJMED__RTCP.htm#gaa0927538050a3cde5a51f32cb586f7d0">pjmedia_rtcp_tx_rtp</a>( &amp;strm-&gt;rtcp, (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)strm-&gt;bytes_per_frame);
<a name="l01356"></a>01356 
<a name="l01357"></a>01357             <span class="comment">/* Schedule next send */</span>
<a name="l01358"></a>01358             next_rtp.u64 += (msec_interval * freq.u64 / 1000);
<a name="l01359"></a>01359         }
<a name="l01360"></a>01360 
<a name="l01361"></a>01361 
<a name="l01362"></a>01362         <span class="keywordflow">if</span> (send_rtcp || next_rtcp.u64 &lt;= now.u64) {
<a name="l01363"></a>01363             <span class="comment">/*</span>
<a name="l01364"></a>01364 <span class="comment">             * Time to send RTCP packet.</span>
<a name="l01365"></a>01365 <span class="comment">             */</span>
<a name="l01366"></a>01366             <span class="keywordtype">void</span> *rtcp_pkt;
<a name="l01367"></a>01367             <span class="keywordtype">int</span> rtcp_len;
<a name="l01368"></a>01368             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> size;
<a name="l01369"></a>01369             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01370"></a>01370 
<a name="l01371"></a>01371             <span class="comment">/* Build RTCP packet */</span>
<a name="l01372"></a>01372             <a class="code" href="group__PJMED__RTCP.htm#ga8f2568957839ac3ecd8be01d2bc2c148">pjmedia_rtcp_build_rtcp</a>(&amp;strm-&gt;rtcp, &amp;rtcp_pkt, &amp;rtcp_len);
<a name="l01373"></a>01373 
<a name="l01374"></a>01374     
<a name="l01375"></a>01375             <span class="comment">/* Send packet */</span>
<a name="l01376"></a>01376             size = rtcp_len;
<a name="l01377"></a>01377             status = <a class="code" href="group__PJMEDIA__TRANSPORT.htm#ga5fe97ac16287563420950a8b87d247b4">pjmedia_transport_send_rtcp</a>(strm-&gt;transport,
<a name="l01378"></a>01378                                                  rtcp_pkt, size);
<a name="l01379"></a>01379             <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01380"></a>01380                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Error sending RTCP packet&quot;</span>, status);
<a name="l01381"></a>01381             }
<a name="l01382"></a>01382             
<a name="l01383"></a>01383             <span class="comment">/* Schedule next send */</span>
<a name="l01384"></a>01384             next_rtcp.u64 += (freq.u64 * (RTCP_INTERVAL+(<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>()%RTCP_RAND)) /
<a name="l01385"></a>01385                               1000);
<a name="l01386"></a>01386         }
<a name="l01387"></a>01387     }
<a name="l01388"></a>01388 
<a name="l01389"></a>01389     <span class="keywordflow">return</span> 0;
<a name="l01390"></a>01390 }
<a name="l01391"></a>01391 
<a name="l01392"></a>01392 
<a name="l01393"></a>01393 <span class="comment">/* Callback to be called when SDP negotiation is done in the call: */</span>
<a name="l01394"></a>01394 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_media_update( pjsip_inv_session *inv,
<a name="l01395"></a>01395                                   <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)
<a name="l01396"></a>01396 {
<a name="l01397"></a>01397     <span class="keyword">struct </span>call *call;
<a name="l01398"></a>01398     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool;
<a name="l01399"></a>01399     <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *audio;
<a name="l01400"></a>01400     <span class="keyword">const</span> <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *local_sdp, *remote_sdp;
<a name="l01401"></a>01401     <span class="keyword">struct </span><a class="code" href="structcodec.htm">codec</a> *codec_desc = NULL;
<a name="l01402"></a>01402     <span class="keywordtype">unsigned</span> i;
<a name="l01403"></a>01403 
<a name="l01404"></a>01404     call = inv-&gt;mod_data[mod_siprtp.id];
<a name="l01405"></a>01405     pool = inv-&gt;dlg-&gt;pool;
<a name="l01406"></a>01406     audio = &amp;call-&gt;media[0];
<a name="l01407"></a>01407 
<a name="l01408"></a>01408     <span class="comment">/* If this is a mid-call media update, then destroy existing media */</span>
<a name="l01409"></a>01409     <span class="keywordflow">if</span> (audio-&gt;thread != NULL)
<a name="l01410"></a>01410         destroy_call_media(call-&gt;index);
<a name="l01411"></a>01411 
<a name="l01412"></a>01412 
<a name="l01413"></a>01413     <span class="comment">/* Do nothing if media negotiation has failed */</span>
<a name="l01414"></a>01414     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01415"></a>01415         app_perror(THIS_FILE, <span class="stringliteral">&quot;SDP negotiation failed&quot;</span>, status);
<a name="l01416"></a>01416         <span class="keywordflow">return</span>;
<a name="l01417"></a>01417     }
<a name="l01418"></a>01418 
<a name="l01419"></a>01419     
<a name="l01420"></a>01420     <span class="comment">/* Capture stream definition from the SDP */</span>
<a name="l01421"></a>01421     <a class="code" href="group__PJMEDIA__SDP__NEG.htm#gaa5fc5d38e7f2d9284ad352f251beecb3">pjmedia_sdp_neg_get_active_local</a>(inv-&gt;neg, &amp;local_sdp);
<a name="l01422"></a>01422     <a class="code" href="group__PJMEDIA__SDP__NEG.htm#gab0ad3a803c7b2bf4ac840126619ff8ed">pjmedia_sdp_neg_get_active_remote</a>(inv-&gt;neg, &amp;remote_sdp);
<a name="l01423"></a>01423 
<a name="l01424"></a>01424     status = <a class="code" href="group__PJMEDIA__SESSION.htm#gae0400f365c07b6f141f202defe92f2a6">pjmedia_stream_info_from_sdp</a>(&amp;audio-&gt;si, inv-&gt;pool, app.med_endpt,
<a name="l01425"></a>01425                                           local_sdp, remote_sdp, 0);
<a name="l01426"></a>01426     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01427"></a>01427         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error creating stream info from SDP&quot;</span>, status);
<a name="l01428"></a>01428         <span class="keywordflow">return</span>;
<a name="l01429"></a>01429     }
<a name="l01430"></a>01430 
<a name="l01431"></a>01431     <span class="comment">/* Get the remainder of codec information from codec descriptor */</span>
<a name="l01432"></a>01432     <span class="keywordflow">if</span> (audio-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#ad93e00b509242b950568d9430e639b1e">fmt</a>.<a class="code" href="structpjmedia__codec__info.htm#a3e3ae875043c693a1453b2a8d398f35a">pt</a> == app.audio_codec.pt)
<a name="l01433"></a>01433         codec_desc = &amp;app.audio_codec;
<a name="l01434"></a>01434     <span class="keywordflow">else</span> {
<a name="l01435"></a>01435         <span class="comment">/* Find the codec description in codec array */</span>
<a name="l01436"></a>01436         <span class="keywordflow">for</span> (i=0; i&lt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(audio_codecs); ++i) {
<a name="l01437"></a>01437             <span class="keywordflow">if</span> (audio_codecs[i].pt == audio-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#ad93e00b509242b950568d9430e639b1e">fmt</a>.<a class="code" href="structpjmedia__codec__info.htm#a3e3ae875043c693a1453b2a8d398f35a">pt</a>) {
<a name="l01438"></a>01438                 codec_desc = &amp;audio_codecs[i];
<a name="l01439"></a>01439                 <span class="keywordflow">break</span>;
<a name="l01440"></a>01440             }
<a name="l01441"></a>01441         }
<a name="l01442"></a>01442 
<a name="l01443"></a>01443         <span class="keywordflow">if</span> (codec_desc == NULL) {
<a name="l01444"></a>01444             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;Error: Invalid codec payload type&quot;</span>));
<a name="l01445"></a>01445             <span class="keywordflow">return</span>;
<a name="l01446"></a>01446         }
<a name="l01447"></a>01447     }
<a name="l01448"></a>01448 
<a name="l01449"></a>01449     audio-&gt;clock_rate = audio-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#ad93e00b509242b950568d9430e639b1e">fmt</a>.<a class="code" href="structpjmedia__codec__info.htm#a77f4c6139109ad8a15ed69444a258277">clock_rate</a>;
<a name="l01450"></a>01450     audio-&gt;samples_per_frame = audio-&gt;clock_rate * codec_desc-&gt;ptime / 1000;
<a name="l01451"></a>01451     audio-&gt;bytes_per_frame = codec_desc-&gt;bit_rate * codec_desc-&gt;ptime / 1000 / 8;
<a name="l01452"></a>01452 
<a name="l01453"></a>01453 
<a name="l01454"></a>01454     <a class="code" href="group__PJMED__RTP.htm#gac5fc46bc1de6eb2620c2a28d20578c77">pjmedia_rtp_session_init</a>(&amp;audio-&gt;out_sess, audio-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#a6390c7f49d9af342d947ea1f6d3cc118">tx_pt</a>, 
<a name="l01455"></a>01455                              <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>());
<a name="l01456"></a>01456     <a class="code" href="group__PJMED__RTP.htm#gac5fc46bc1de6eb2620c2a28d20578c77">pjmedia_rtp_session_init</a>(&amp;audio-&gt;in_sess, audio-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#ad93e00b509242b950568d9430e639b1e">fmt</a>.<a class="code" href="structpjmedia__codec__info.htm#a3e3ae875043c693a1453b2a8d398f35a">pt</a>, 0);
<a name="l01457"></a>01457     <a class="code" href="group__PJMED__RTCP.htm#gacb5133d8da883347f3d87ec0b161dfb1">pjmedia_rtcp_init</a>(&amp;audio-&gt;rtcp, <span class="stringliteral">&quot;rtcp&quot;</span>, audio-&gt;clock_rate, 
<a name="l01458"></a>01458                       audio-&gt;samples_per_frame, 0);
<a name="l01459"></a>01459 
<a name="l01460"></a>01460 
<a name="l01461"></a>01461     <span class="comment">/* Attach media to transport */</span>
<a name="l01462"></a>01462     status = <a class="code" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach</a>(audio-&gt;transport, audio, 
<a name="l01463"></a>01463                                       &amp;audio-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#a51935172b090b66042175846c0e96213">rem_addr</a>, 
<a name="l01464"></a>01464                                       &amp;audio-&gt;si.<a class="code" href="structpjmedia__stream__info.htm#af9715928854d6cf2b9710856836acd36">rem_rtcp</a>, 
<a name="l01465"></a>01465                                       <span class="keyword">sizeof</span>(<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a>),
<a name="l01466"></a>01466                                       &amp;on_rx_rtp,
<a name="l01467"></a>01467                                       &amp;on_rx_rtcp);
<a name="l01468"></a>01468     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01469"></a>01469         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error on pjmedia_transport_attach()&quot;</span>, status);
<a name="l01470"></a>01470         <span class="keywordflow">return</span>;
<a name="l01471"></a>01471     }
<a name="l01472"></a>01472 
<a name="l01473"></a>01473     <span class="comment">/* Start media thread. */</span>
<a name="l01474"></a>01474     audio-&gt;thread_quit_flag = 0;
<a name="l01475"></a>01475 <span class="preprocessor">#if PJ_HAS_THREADS</span>
<a name="l01476"></a>01476 <span class="preprocessor"></span>    status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>( inv-&gt;pool, <span class="stringliteral">&quot;media&quot;</span>, &amp;media_thread, audio,
<a name="l01477"></a>01477                                0, 0, &amp;audio-&gt;thread);
<a name="l01478"></a>01478     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01479"></a>01479         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error creating media thread&quot;</span>, status);
<a name="l01480"></a>01480         <span class="keywordflow">return</span>;
<a name="l01481"></a>01481     }
<a name="l01482"></a>01482 <span class="preprocessor">#endif</span>
<a name="l01483"></a>01483 <span class="preprocessor"></span>
<a name="l01484"></a>01484     <span class="comment">/* Set the media as active */</span>
<a name="l01485"></a>01485     audio-&gt;active = PJ_TRUE;
<a name="l01486"></a>01486 }
<a name="l01487"></a>01487 
<a name="l01488"></a>01488 
<a name="l01489"></a>01489 
<a name="l01490"></a>01490 <span class="comment">/* Destroy call&#39;s media */</span>
<a name="l01491"></a>01491 <span class="keyword">static</span> <span class="keywordtype">void</span> destroy_call_media(<span class="keywordtype">unsigned</span> call_index)
<a name="l01492"></a>01492 {
<a name="l01493"></a>01493     <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *audio = &amp;app.call[call_index].media[0];
<a name="l01494"></a>01494 
<a name="l01495"></a>01495     <span class="keywordflow">if</span> (audio) {
<a name="l01496"></a>01496         audio-&gt;active = PJ_FALSE;
<a name="l01497"></a>01497 
<a name="l01498"></a>01498         <span class="keywordflow">if</span> (audio-&gt;thread) {
<a name="l01499"></a>01499             audio-&gt;thread_quit_flag = 1;
<a name="l01500"></a>01500             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(audio-&gt;thread);
<a name="l01501"></a>01501             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(audio-&gt;thread);
<a name="l01502"></a>01502             audio-&gt;thread = NULL;
<a name="l01503"></a>01503             audio-&gt;thread_quit_flag = 0;
<a name="l01504"></a>01504         }
<a name="l01505"></a>01505 
<a name="l01506"></a>01506         <a class="code" href="group__PJMEDIA__TRANSPORT.htm#gad0b1f17d5920dd05b3832886b68d9c24">pjmedia_transport_detach</a>(audio-&gt;transport, audio);
<a name="l01507"></a>01507     }
<a name="l01508"></a>01508 }
<a name="l01509"></a>01509 
<a name="l01510"></a>01510  
<a name="l01511"></a>01511 <span class="comment">/*****************************************************************************</span>
<a name="l01512"></a>01512 <span class="comment"> * USER INTERFACE STUFFS</span>
<a name="l01513"></a>01513 <span class="comment"> */</span>
<a name="l01514"></a>01514 
<a name="l01515"></a>01515 <span class="keyword">static</span> <span class="keywordtype">void</span> call_get_duration(<span class="keywordtype">int</span> call_index, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> *dur)
<a name="l01516"></a>01516 {
<a name="l01517"></a>01517     <span class="keyword">struct </span>call *call = &amp;app.call[call_index];
<a name="l01518"></a>01518     pjsip_inv_session *inv;
<a name="l01519"></a>01519 
<a name="l01520"></a>01520     dur-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = dur-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
<a name="l01521"></a>01521 
<a name="l01522"></a>01522     <span class="keywordflow">if</span> (!call)
<a name="l01523"></a>01523         <span class="keywordflow">return</span>;
<a name="l01524"></a>01524 
<a name="l01525"></a>01525     inv = call-&gt;inv;
<a name="l01526"></a>01526     <span class="keywordflow">if</span> (!inv)
<a name="l01527"></a>01527         <span class="keywordflow">return</span>;
<a name="l01528"></a>01528 
<a name="l01529"></a>01529     <span class="keywordflow">if</span> (inv-&gt;state &gt;= PJSIP_INV_STATE_CONFIRMED &amp;&amp; call-&gt;connect_time.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>) {
<a name="l01530"></a>01530 
<a name="l01531"></a>01531         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(dur);
<a name="l01532"></a>01532         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>((*dur), call-&gt;connect_time);
<a name="l01533"></a>01533     }
<a name="l01534"></a>01534 }
<a name="l01535"></a>01535 
<a name="l01536"></a>01536 
<a name="l01537"></a>01537 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *good_number(<span class="keywordtype">char</span> *buf, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gac65eeb4771a6fc34225302fee5bcb7e2">pj_int32_t</a> val)
<a name="l01538"></a>01538 {
<a name="l01539"></a>01539     <span class="keywordflow">if</span> (val &lt; 1000) {
<a name="l01540"></a>01540         pj_ansi_sprintf(buf, <span class="stringliteral">&quot;%d&quot;</span>, val);
<a name="l01541"></a>01541     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (val &lt; 1000000) {
<a name="l01542"></a>01542         pj_ansi_sprintf(buf, <span class="stringliteral">&quot;%d.%02dK&quot;</span>, 
<a name="l01543"></a>01543                         val / 1000,
<a name="l01544"></a>01544                         (val % 1000) / 100);
<a name="l01545"></a>01545     } <span class="keywordflow">else</span> {
<a name="l01546"></a>01546         pj_ansi_sprintf(buf, <span class="stringliteral">&quot;%d.%02dM&quot;</span>, 
<a name="l01547"></a>01547                         val / 1000000,
<a name="l01548"></a>01548                         (val % 1000000) / 10000);
<a name="l01549"></a>01549     }
<a name="l01550"></a>01550 
<a name="l01551"></a>01551     <span class="keywordflow">return</span> buf;
<a name="l01552"></a>01552 }
<a name="l01553"></a>01553 
<a name="l01554"></a>01554 
<a name="l01555"></a>01555 
<a name="l01556"></a>01556 <span class="keyword">static</span> <span class="keywordtype">void</span> print_avg_stat(<span class="keywordtype">void</span>)
<a name="l01557"></a>01557 {
<a name="l01558"></a>01558 <span class="preprocessor">#define MIN_(var,val)      if ((int)val &lt; (int)var) var = val</span>
<a name="l01559"></a>01559 <span class="preprocessor"></span><span class="preprocessor">#define MAX_(var,val)      if ((int)val &gt; (int)var) var = val</span>
<a name="l01560"></a>01560 <span class="preprocessor"></span><span class="preprocessor">#define AVG_(var,val)      var = ( ((var * count) + val) / (count+1) )</span>
<a name="l01561"></a>01561 <span class="preprocessor"></span><span class="preprocessor">#define BIGVAL              0x7FFFFFFFL</span>
<a name="l01562"></a>01562 <span class="preprocessor"></span>    <span class="keyword">struct </span>stat_entry
<a name="l01563"></a>01563     {
<a name="l01564"></a>01564         <span class="keywordtype">int</span> min, avg, max;
<a name="l01565"></a>01565     };
<a name="l01566"></a>01566 
<a name="l01567"></a>01567     <span class="keyword">struct </span>stat_entry call_dur, call_pdd;
<a name="l01568"></a>01568     <a class="code" href="structpjmedia__rtcp__stat.htm">pjmedia_rtcp_stat</a> min_stat, avg_stat, max_stat;
<a name="l01569"></a>01569 
<a name="l01570"></a>01570     <span class="keywordtype">char</span> srx_min[16], srx_avg[16], srx_max[16];
<a name="l01571"></a>01571     <span class="keywordtype">char</span> brx_min[16], brx_avg[16], brx_max[16];
<a name="l01572"></a>01572     <span class="keywordtype">char</span> stx_min[16], stx_avg[16], stx_max[16];
<a name="l01573"></a>01573     <span class="keywordtype">char</span> btx_min[16], btx_avg[16], btx_max[16];
<a name="l01574"></a>01574 
<a name="l01575"></a>01575 
<a name="l01576"></a>01576     <span class="keywordtype">unsigned</span> i, count;
<a name="l01577"></a>01577 
<a name="l01578"></a>01578     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;call_dur, <span class="keyword">sizeof</span>(call_dur)); 
<a name="l01579"></a>01579     call_dur.min = BIGVAL;
<a name="l01580"></a>01580 
<a name="l01581"></a>01581     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;call_pdd, <span class="keyword">sizeof</span>(call_pdd)); 
<a name="l01582"></a>01582     call_pdd.min = BIGVAL;
<a name="l01583"></a>01583 
<a name="l01584"></a>01584     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;min_stat, <span class="keyword">sizeof</span>(min_stat));
<a name="l01585"></a>01585     min_stat.rx.pkt = min_stat.tx.pkt = BIGVAL;
<a name="l01586"></a>01586     min_stat.rx.bytes = min_stat.tx.bytes = BIGVAL;
<a name="l01587"></a>01587     min_stat.rx.loss = min_stat.tx.loss = BIGVAL;
<a name="l01588"></a>01588     min_stat.rx.dup = min_stat.tx.dup = BIGVAL;
<a name="l01589"></a>01589     min_stat.rx.reorder = min_stat.tx.reorder = BIGVAL;
<a name="l01590"></a>01590     min_stat.rx.jitter.min = min_stat.tx.jitter.min = BIGVAL;
<a name="l01591"></a>01591     min_stat.rtt.min = BIGVAL;
<a name="l01592"></a>01592 
<a name="l01593"></a>01593     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;avg_stat, <span class="keyword">sizeof</span>(avg_stat));
<a name="l01594"></a>01594     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;max_stat, <span class="keyword">sizeof</span>(max_stat));
<a name="l01595"></a>01595 
<a name="l01596"></a>01596 
<a name="l01597"></a>01597     <span class="keywordflow">for</span> (i=0, count=0; i&lt;app.max_calls; ++i) {
<a name="l01598"></a>01598 
<a name="l01599"></a>01599         <span class="keyword">struct </span>call *call = &amp;app.call[i];
<a name="l01600"></a>01600         <span class="keyword">struct </span><a class="code" href="structmedia__stream.htm">media_stream</a> *audio = &amp;call-&gt;media[0];
<a name="l01601"></a>01601         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> dur;
<a name="l01602"></a>01602         <span class="keywordtype">unsigned</span> msec_dur;
<a name="l01603"></a>01603 
<a name="l01604"></a>01604         <span class="keywordflow">if</span> (call-&gt;inv == NULL || 
<a name="l01605"></a>01605             call-&gt;inv-&gt;state &lt; PJSIP_INV_STATE_CONFIRMED ||
<a name="l01606"></a>01606             call-&gt;connect_time.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> == 0) 
<a name="l01607"></a>01607         {
<a name="l01608"></a>01608             <span class="keywordflow">continue</span>;
<a name="l01609"></a>01609         }
<a name="l01610"></a>01610 
<a name="l01611"></a>01611         <span class="comment">/* Duration */</span>
<a name="l01612"></a>01612         call_get_duration(i, &amp;dur);
<a name="l01613"></a>01613         msec_dur = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(dur);
<a name="l01614"></a>01614 
<a name="l01615"></a>01615         MIN_(call_dur.min, msec_dur);
<a name="l01616"></a>01616         MAX_(call_dur.max, msec_dur);
<a name="l01617"></a>01617         AVG_(call_dur.avg, msec_dur);
<a name="l01618"></a>01618 
<a name="l01619"></a>01619         <span class="comment">/* Connect delay */</span>
<a name="l01620"></a>01620         <span class="keywordflow">if</span> (call-&gt;connect_time.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>) {
<a name="l01621"></a>01621             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> t = call-&gt;connect_time;
<a name="l01622"></a>01622             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(t, call-&gt;start_time);
<a name="l01623"></a>01623             msec_dur = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(t);
<a name="l01624"></a>01624         } <span class="keywordflow">else</span> {
<a name="l01625"></a>01625             msec_dur = 10;
<a name="l01626"></a>01626         }
<a name="l01627"></a>01627 
<a name="l01628"></a>01628         MIN_(call_pdd.min, msec_dur);
<a name="l01629"></a>01629         MAX_(call_pdd.max, msec_dur);
<a name="l01630"></a>01630         AVG_(call_pdd.avg, msec_dur);
<a name="l01631"></a>01631 
<a name="l01632"></a>01632         <span class="comment">/* RX Statistisc: */</span>
<a name="l01633"></a>01633 
<a name="l01634"></a>01634         <span class="comment">/* Packets */</span>
<a name="l01635"></a>01635         MIN_(min_stat.rx.pkt, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ade8c3575a4c42a7bee4e9cdfce48ac55">pkt</a>);
<a name="l01636"></a>01636         MAX_(max_stat.rx.pkt, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ade8c3575a4c42a7bee4e9cdfce48ac55">pkt</a>);
<a name="l01637"></a>01637         AVG_(avg_stat.rx.pkt, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ade8c3575a4c42a7bee4e9cdfce48ac55">pkt</a>);
<a name="l01638"></a>01638 
<a name="l01639"></a>01639         <span class="comment">/* Bytes */</span>
<a name="l01640"></a>01640         MIN_(min_stat.rx.bytes, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#affde734834ce0313abbdb60ab0a0a199">bytes</a>);
<a name="l01641"></a>01641         MAX_(max_stat.rx.bytes, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#affde734834ce0313abbdb60ab0a0a199">bytes</a>);
<a name="l01642"></a>01642         AVG_(avg_stat.rx.bytes, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#affde734834ce0313abbdb60ab0a0a199">bytes</a>);
<a name="l01643"></a>01643 
<a name="l01644"></a>01644 
<a name="l01645"></a>01645         <span class="comment">/* Packet loss */</span>
<a name="l01646"></a>01646         MIN_(min_stat.rx.loss, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ac16c34b6cb8adf2960519334b4b8bba4">loss</a>);
<a name="l01647"></a>01647         MAX_(max_stat.rx.loss, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ac16c34b6cb8adf2960519334b4b8bba4">loss</a>);
<a name="l01648"></a>01648         AVG_(avg_stat.rx.loss, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ac16c34b6cb8adf2960519334b4b8bba4">loss</a>);
<a name="l01649"></a>01649 
<a name="l01650"></a>01650         <span class="comment">/* Packet dup */</span>
<a name="l01651"></a>01651         MIN_(min_stat.rx.dup, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6ce7c2013c4a7358912e2f10523e6db1">dup</a>);
<a name="l01652"></a>01652         MAX_(max_stat.rx.dup, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6ce7c2013c4a7358912e2f10523e6db1">dup</a>);
<a name="l01653"></a>01653         AVG_(avg_stat.rx.dup, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6ce7c2013c4a7358912e2f10523e6db1">dup</a>);
<a name="l01654"></a>01654 
<a name="l01655"></a>01655         <span class="comment">/* Packet reorder */</span>
<a name="l01656"></a>01656         MIN_(min_stat.rx.reorder, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6b2222588e10045bbfb98605e8970465">reorder</a>);
<a name="l01657"></a>01657         MAX_(max_stat.rx.reorder, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6b2222588e10045bbfb98605e8970465">reorder</a>);
<a name="l01658"></a>01658         AVG_(avg_stat.rx.reorder, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6b2222588e10045bbfb98605e8970465">reorder</a>);
<a name="l01659"></a>01659 
<a name="l01660"></a>01660         <span class="comment">/* Jitter  */</span>
<a name="l01661"></a>01661         MIN_(min_stat.rx.jitter.min, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ab7b015e32617857558c45a30e2ae0928">jitter</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a1d616c6c42abe52601cf8c258e0f8210">min</a>);
<a name="l01662"></a>01662         MAX_(max_stat.rx.jitter.max, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ab7b015e32617857558c45a30e2ae0928">jitter</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a9c4fef3307e275dcba89846ec3f53ff2">max</a>);
<a name="l01663"></a>01663         AVG_(avg_stat.rx.jitter.mean, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a6a783087dff8d922f3a85a33d6cf2b45">rx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ab7b015e32617857558c45a30e2ae0928">jitter</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a908326c3f41df7823a76de6e5a3a709e">mean</a>);
<a name="l01664"></a>01664 
<a name="l01665"></a>01665 
<a name="l01666"></a>01666         <span class="comment">/* TX Statistisc: */</span>
<a name="l01667"></a>01667 
<a name="l01668"></a>01668         <span class="comment">/* Packets */</span>
<a name="l01669"></a>01669         MIN_(min_stat.tx.pkt, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ade8c3575a4c42a7bee4e9cdfce48ac55">pkt</a>);
<a name="l01670"></a>01670         MAX_(max_stat.tx.pkt, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ade8c3575a4c42a7bee4e9cdfce48ac55">pkt</a>);
<a name="l01671"></a>01671         AVG_(avg_stat.tx.pkt, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ade8c3575a4c42a7bee4e9cdfce48ac55">pkt</a>);
<a name="l01672"></a>01672 
<a name="l01673"></a>01673         <span class="comment">/* Bytes */</span>
<a name="l01674"></a>01674         MIN_(min_stat.tx.bytes, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#affde734834ce0313abbdb60ab0a0a199">bytes</a>);
<a name="l01675"></a>01675         MAX_(max_stat.tx.bytes, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#affde734834ce0313abbdb60ab0a0a199">bytes</a>);
<a name="l01676"></a>01676         AVG_(avg_stat.tx.bytes, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#affde734834ce0313abbdb60ab0a0a199">bytes</a>);
<a name="l01677"></a>01677 
<a name="l01678"></a>01678         <span class="comment">/* Packet loss */</span>
<a name="l01679"></a>01679         MIN_(min_stat.tx.loss, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ac16c34b6cb8adf2960519334b4b8bba4">loss</a>);
<a name="l01680"></a>01680         MAX_(max_stat.tx.loss, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ac16c34b6cb8adf2960519334b4b8bba4">loss</a>);
<a name="l01681"></a>01681         AVG_(avg_stat.tx.loss, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ac16c34b6cb8adf2960519334b4b8bba4">loss</a>);
<a name="l01682"></a>01682 
<a name="l01683"></a>01683         <span class="comment">/* Packet dup */</span>
<a name="l01684"></a>01684         MIN_(min_stat.tx.dup, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6ce7c2013c4a7358912e2f10523e6db1">dup</a>);
<a name="l01685"></a>01685         MAX_(max_stat.tx.dup, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6ce7c2013c4a7358912e2f10523e6db1">dup</a>);
<a name="l01686"></a>01686         AVG_(avg_stat.tx.dup, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6ce7c2013c4a7358912e2f10523e6db1">dup</a>);
<a name="l01687"></a>01687 
<a name="l01688"></a>01688         <span class="comment">/* Packet reorder */</span>
<a name="l01689"></a>01689         MIN_(min_stat.tx.reorder, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6b2222588e10045bbfb98605e8970465">reorder</a>);
<a name="l01690"></a>01690         MAX_(max_stat.tx.reorder, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6b2222588e10045bbfb98605e8970465">reorder</a>);
<a name="l01691"></a>01691         AVG_(avg_stat.tx.reorder, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#a6b2222588e10045bbfb98605e8970465">reorder</a>);
<a name="l01692"></a>01692 
<a name="l01693"></a>01693         <span class="comment">/* Jitter  */</span>
<a name="l01694"></a>01694         MIN_(min_stat.tx.jitter.min, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ab7b015e32617857558c45a30e2ae0928">jitter</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a1d616c6c42abe52601cf8c258e0f8210">min</a>);
<a name="l01695"></a>01695         MAX_(max_stat.tx.jitter.max, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ab7b015e32617857558c45a30e2ae0928">jitter</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a9c4fef3307e275dcba89846ec3f53ff2">max</a>);
<a name="l01696"></a>01696         AVG_(avg_stat.tx.jitter.mean, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#abf3a62866b6e9f1ec3de831030f41a01">tx</a>.<a class="code" href="structpjmedia__rtcp__stream__stat.htm#ab7b015e32617857558c45a30e2ae0928">jitter</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a908326c3f41df7823a76de6e5a3a709e">mean</a>);
<a name="l01697"></a>01697 
<a name="l01698"></a>01698 
<a name="l01699"></a>01699         <span class="comment">/* RTT */</span>
<a name="l01700"></a>01700         MIN_(min_stat.rtt.min, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a2d8a17e5f1fbf8cd551f33c007be590f">rtt</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a1d616c6c42abe52601cf8c258e0f8210">min</a>);
<a name="l01701"></a>01701         MAX_(max_stat.rtt.max, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a2d8a17e5f1fbf8cd551f33c007be590f">rtt</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a9c4fef3307e275dcba89846ec3f53ff2">max</a>);
<a name="l01702"></a>01702         AVG_(avg_stat.rtt.mean, audio-&gt;rtcp.<a class="code" href="structpjmedia__rtcp__session.htm#a8e39b260b36a89bb731971a4df4d76fd">stat</a>.<a class="code" href="structpjmedia__rtcp__stat.htm#a2d8a17e5f1fbf8cd551f33c007be590f">rtt</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__math__stat.htm#a908326c3f41df7823a76de6e5a3a709e">mean</a>);
<a name="l01703"></a>01703 
<a name="l01704"></a>01704         ++count;
<a name="l01705"></a>01705     }
<a name="l01706"></a>01706 
<a name="l01707"></a>01707     <span class="keywordflow">if</span> (count == 0) {
<a name="l01708"></a>01708         puts(<span class="stringliteral">&quot;No active calls&quot;</span>);
<a name="l01709"></a>01709         <span class="keywordflow">return</span>;
<a name="l01710"></a>01710     }
<a name="l01711"></a>01711 
<a name="l01712"></a>01712     printf(<span class="stringliteral">&quot;Total %d call(s) active.\n&quot;</span>
<a name="l01713"></a>01713            <span class="stringliteral">&quot;                    Average Statistics\n&quot;</span>
<a name="l01714"></a>01714            <span class="stringliteral">&quot;                    min     avg     max \n&quot;</span>
<a name="l01715"></a>01715            <span class="stringliteral">&quot;                -----------------------\n&quot;</span>
<a name="l01716"></a>01716            <span class="stringliteral">&quot; call duration: %7d %7d %7d %s\n&quot;</span>
<a name="l01717"></a>01717            <span class="stringliteral">&quot; connect delay: %7d %7d %7d %s\n&quot;</span>
<a name="l01718"></a>01718            <span class="stringliteral">&quot; RX stat:\n&quot;</span>
<a name="l01719"></a>01719            <span class="stringliteral">&quot;       packets: %7s %7s %7s %s\n&quot;</span>
<a name="l01720"></a>01720            <span class="stringliteral">&quot;       payload: %7s %7s %7s %s\n&quot;</span>
<a name="l01721"></a>01721            <span class="stringliteral">&quot;          loss: %7d %7d %7d %s\n&quot;</span>
<a name="l01722"></a>01722            <span class="stringliteral">&quot;  percent loss: %7.3f %7.3f %7.3f %s\n&quot;</span>
<a name="l01723"></a>01723            <span class="stringliteral">&quot;           dup: %7d %7d %7d %s\n&quot;</span>
<a name="l01724"></a>01724            <span class="stringliteral">&quot;       reorder: %7d %7d %7d %s\n&quot;</span>
<a name="l01725"></a>01725            <span class="stringliteral">&quot;        jitter: %7.3f %7.3f %7.3f %s\n&quot;</span>
<a name="l01726"></a>01726            <span class="stringliteral">&quot; TX stat:\n&quot;</span>
<a name="l01727"></a>01727            <span class="stringliteral">&quot;       packets: %7s %7s %7s %s\n&quot;</span>
<a name="l01728"></a>01728            <span class="stringliteral">&quot;       payload: %7s %7s %7s %s\n&quot;</span>
<a name="l01729"></a>01729            <span class="stringliteral">&quot;          loss: %7d %7d %7d %s\n&quot;</span>
<a name="l01730"></a>01730            <span class="stringliteral">&quot;  percent loss: %7.3f %7.3f %7.3f %s\n&quot;</span>
<a name="l01731"></a>01731            <span class="stringliteral">&quot;           dup: %7d %7d %7d %s\n&quot;</span>
<a name="l01732"></a>01732            <span class="stringliteral">&quot;       reorder: %7d %7d %7d %s\n&quot;</span>
<a name="l01733"></a>01733            <span class="stringliteral">&quot;        jitter: %7.3f %7.3f %7.3f %s\n&quot;</span>
<a name="l01734"></a>01734            <span class="stringliteral">&quot; RTT          : %7.3f %7.3f %7.3f %s\n&quot;</span>
<a name="l01735"></a>01735            ,
<a name="l01736"></a>01736            count,
<a name="l01737"></a>01737            call_dur.min/1000, call_dur.avg/1000, call_dur.max/1000, 
<a name="l01738"></a>01738            <span class="stringliteral">&quot;seconds&quot;</span>,
<a name="l01739"></a>01739 
<a name="l01740"></a>01740            call_pdd.min, call_pdd.avg, call_pdd.max, 
<a name="l01741"></a>01741            <span class="stringliteral">&quot;ms&quot;</span>,
<a name="l01742"></a>01742 
<a name="l01743"></a>01743            <span class="comment">/* rx */</span>
<a name="l01744"></a>01744 
<a name="l01745"></a>01745            good_number(srx_min, min_stat.rx.pkt),
<a name="l01746"></a>01746            good_number(srx_avg, avg_stat.rx.pkt),
<a name="l01747"></a>01747            good_number(srx_max, max_stat.rx.pkt),
<a name="l01748"></a>01748            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01749"></a>01749 
<a name="l01750"></a>01750            good_number(brx_min, min_stat.rx.bytes),
<a name="l01751"></a>01751            good_number(brx_avg, avg_stat.rx.bytes),
<a name="l01752"></a>01752            good_number(brx_max, max_stat.rx.bytes),
<a name="l01753"></a>01753            <span class="stringliteral">&quot;bytes&quot;</span>,
<a name="l01754"></a>01754 
<a name="l01755"></a>01755            min_stat.rx.loss, avg_stat.rx.loss, max_stat.rx.loss,
<a name="l01756"></a>01756            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01757"></a>01757            
<a name="l01758"></a>01758            min_stat.rx.loss*100.0/(min_stat.rx.pkt+min_stat.rx.loss),
<a name="l01759"></a>01759            avg_stat.rx.loss*100.0/(avg_stat.rx.pkt+avg_stat.rx.loss),
<a name="l01760"></a>01760            max_stat.rx.loss*100.0/(max_stat.rx.pkt+max_stat.rx.loss),
<a name="l01761"></a>01761            <span class="stringliteral">&quot;%&quot;</span>,
<a name="l01762"></a>01762 
<a name="l01763"></a>01763 
<a name="l01764"></a>01764            min_stat.rx.dup, avg_stat.rx.dup, max_stat.rx.dup,
<a name="l01765"></a>01765            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01766"></a>01766 
<a name="l01767"></a>01767            min_stat.rx.reorder, avg_stat.rx.reorder, max_stat.rx.reorder,
<a name="l01768"></a>01768            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01769"></a>01769 
<a name="l01770"></a>01770            min_stat.rx.jitter.min/1000.0, 
<a name="l01771"></a>01771            avg_stat.rx.jitter.mean/1000.0, 
<a name="l01772"></a>01772            max_stat.rx.jitter.max/1000.0,
<a name="l01773"></a>01773            <span class="stringliteral">&quot;ms&quot;</span>,
<a name="l01774"></a>01774         
<a name="l01775"></a>01775            <span class="comment">/* tx */</span>
<a name="l01776"></a>01776 
<a name="l01777"></a>01777            good_number(stx_min, min_stat.tx.pkt),
<a name="l01778"></a>01778            good_number(stx_avg, avg_stat.tx.pkt),
<a name="l01779"></a>01779            good_number(stx_max, max_stat.tx.pkt),
<a name="l01780"></a>01780            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01781"></a>01781 
<a name="l01782"></a>01782            good_number(btx_min, min_stat.tx.bytes),
<a name="l01783"></a>01783            good_number(btx_avg, avg_stat.tx.bytes),
<a name="l01784"></a>01784            good_number(btx_max, max_stat.tx.bytes),
<a name="l01785"></a>01785            <span class="stringliteral">&quot;bytes&quot;</span>,
<a name="l01786"></a>01786 
<a name="l01787"></a>01787            min_stat.tx.loss, avg_stat.tx.loss, max_stat.tx.loss,
<a name="l01788"></a>01788            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01789"></a>01789            
<a name="l01790"></a>01790            min_stat.tx.loss*100.0/(min_stat.tx.pkt+min_stat.tx.loss),
<a name="l01791"></a>01791            avg_stat.tx.loss*100.0/(avg_stat.tx.pkt+avg_stat.tx.loss),
<a name="l01792"></a>01792            max_stat.tx.loss*100.0/(max_stat.tx.pkt+max_stat.tx.loss),
<a name="l01793"></a>01793            <span class="stringliteral">&quot;%&quot;</span>,
<a name="l01794"></a>01794 
<a name="l01795"></a>01795            min_stat.tx.dup, avg_stat.tx.dup, max_stat.tx.dup,
<a name="l01796"></a>01796            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01797"></a>01797 
<a name="l01798"></a>01798            min_stat.tx.reorder, avg_stat.tx.reorder, max_stat.tx.reorder,
<a name="l01799"></a>01799            <span class="stringliteral">&quot;packets&quot;</span>,
<a name="l01800"></a>01800 
<a name="l01801"></a>01801            min_stat.tx.jitter.min/1000.0, 
<a name="l01802"></a>01802            avg_stat.tx.jitter.mean/1000.0, 
<a name="l01803"></a>01803            max_stat.tx.jitter.max/1000.0,
<a name="l01804"></a>01804            <span class="stringliteral">&quot;ms&quot;</span>,
<a name="l01805"></a>01805 
<a name="l01806"></a>01806            <span class="comment">/* rtt */</span>
<a name="l01807"></a>01807            min_stat.rtt.min/1000.0, 
<a name="l01808"></a>01808            avg_stat.rtt.mean/1000.0, 
<a name="l01809"></a>01809            max_stat.rtt.max/1000.0,
<a name="l01810"></a>01810            <span class="stringliteral">&quot;ms&quot;</span>
<a name="l01811"></a>01811            );
<a name="l01812"></a>01812 
<a name="l01813"></a>01813 }
<a name="l01814"></a>01814 
<a name="l01815"></a>01815 
<a name="l01816"></a>01816 <span class="preprocessor">#include &quot;siprtp_report.c&quot;</span>
<a name="l01817"></a>01817 
<a name="l01818"></a>01818 
<a name="l01819"></a>01819 <span class="keyword">static</span> <span class="keywordtype">void</span> list_calls()
<a name="l01820"></a>01820 {
<a name="l01821"></a>01821     <span class="keywordtype">unsigned</span> i;
<a name="l01822"></a>01822     puts(<span class="stringliteral">&quot;List all calls:&quot;</span>);
<a name="l01823"></a>01823     <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i) {
<a name="l01824"></a>01824         <span class="keywordflow">if</span> (!app.call[i].inv)
<a name="l01825"></a>01825             <span class="keywordflow">continue</span>;
<a name="l01826"></a>01826         print_call(i);
<a name="l01827"></a>01827     }
<a name="l01828"></a>01828 }
<a name="l01829"></a>01829 
<a name="l01830"></a>01830 <span class="keyword">static</span> <span class="keywordtype">void</span> hangup_call(<span class="keywordtype">unsigned</span> index)
<a name="l01831"></a>01831 {
<a name="l01832"></a>01832     pjsip_tx_data *tdata;
<a name="l01833"></a>01833     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01834"></a>01834 
<a name="l01835"></a>01835     <span class="keywordflow">if</span> (app.call[index].inv == NULL)
<a name="l01836"></a>01836         <span class="keywordflow">return</span>;
<a name="l01837"></a>01837 
<a name="l01838"></a>01838     status = pjsip_inv_end_session(app.call[index].inv, 603, NULL, &amp;tdata);
<a name="l01839"></a>01839     <span class="keywordflow">if</span> (status==PJ_SUCCESS &amp;&amp; tdata!=NULL)
<a name="l01840"></a>01840         pjsip_inv_send_msg(app.call[index].inv, tdata);
<a name="l01841"></a>01841 }
<a name="l01842"></a>01842 
<a name="l01843"></a>01843 <span class="keyword">static</span> <span class="keywordtype">void</span> hangup_all_calls()
<a name="l01844"></a>01844 {
<a name="l01845"></a>01845     <span class="keywordtype">unsigned</span> i;
<a name="l01846"></a>01846     <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i) {
<a name="l01847"></a>01847         <span class="keywordflow">if</span> (!app.call[i].inv)
<a name="l01848"></a>01848             <span class="keywordflow">continue</span>;
<a name="l01849"></a>01849         hangup_call(i);
<a name="l01850"></a>01850         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(app.call_gap);
<a name="l01851"></a>01851     }
<a name="l01852"></a>01852     
<a name="l01853"></a>01853     <span class="comment">/* Wait until all calls are terminated */</span>
<a name="l01854"></a>01854     <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i) {
<a name="l01855"></a>01855         <span class="keywordflow">while</span> (app.call[i].inv)
<a name="l01856"></a>01856             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(10);
<a name="l01857"></a>01857     }
<a name="l01858"></a>01858 }
<a name="l01859"></a>01859 
<a name="l01860"></a>01860 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> simple_input(<span class="keyword">const</span> <span class="keywordtype">char</span> *title, <span class="keywordtype">char</span> *buf, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> len)
<a name="l01861"></a>01861 {
<a name="l01862"></a>01862     <span class="keywordtype">char</span> *p;
<a name="l01863"></a>01863 
<a name="l01864"></a>01864     printf(<span class="stringliteral">&quot;%s (empty to cancel): &quot;</span>, title); fflush(stdout);
<a name="l01865"></a>01865     <span class="keywordflow">if</span> (fgets(buf, len, stdin) == NULL)
<a name="l01866"></a>01866         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l01867"></a>01867 
<a name="l01868"></a>01868     <span class="comment">/* Remove trailing newlines. */</span>
<a name="l01869"></a>01869     <span class="keywordflow">for</span> (p=buf; ; ++p) {
<a name="l01870"></a>01870         <span class="keywordflow">if</span> (*p==<span class="charliteral">&#39;\r&#39;</span> || *p==<span class="charliteral">&#39;\n&#39;</span>) *p=<span class="charliteral">&#39;\0&#39;</span>;
<a name="l01871"></a>01871         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!*p) <span class="keywordflow">break</span>;
<a name="l01872"></a>01872     }
<a name="l01873"></a>01873 
<a name="l01874"></a>01874     <span class="keywordflow">if</span> (!*buf)
<a name="l01875"></a>01875         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l01876"></a>01876     
<a name="l01877"></a>01877     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l01878"></a>01878 }
<a name="l01879"></a>01879 
<a name="l01880"></a>01880 
<a name="l01881"></a>01881 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *MENU =
<a name="l01882"></a>01882 <span class="stringliteral">&quot;\n&quot;</span>
<a name="l01883"></a>01883 <span class="stringliteral">&quot;Enter menu character:\n&quot;</span>
<a name="l01884"></a>01884 <span class="stringliteral">&quot;  s    Summary\n&quot;</span>
<a name="l01885"></a>01885 <span class="stringliteral">&quot;  l    List all calls\n&quot;</span>
<a name="l01886"></a>01886 <span class="stringliteral">&quot;  h    Hangup a call\n&quot;</span>
<a name="l01887"></a>01887 <span class="stringliteral">&quot;  H    Hangup all calls\n&quot;</span>
<a name="l01888"></a>01888 <span class="stringliteral">&quot;  q    Quit\n&quot;</span>
<a name="l01889"></a>01889 <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l01890"></a>01890 
<a name="l01891"></a>01891 
<a name="l01892"></a>01892 <span class="comment">/* Main screen menu */</span>
<a name="l01893"></a>01893 <span class="keyword">static</span> <span class="keywordtype">void</span> console_main()
<a name="l01894"></a>01894 {
<a name="l01895"></a>01895     <span class="keywordtype">char</span> input1[10];
<a name="l01896"></a>01896     <span class="keywordtype">unsigned</span> i;
<a name="l01897"></a>01897 
<a name="l01898"></a>01898     printf(<span class="stringliteral">&quot;%s&quot;</span>, MENU);
<a name="l01899"></a>01899 
<a name="l01900"></a>01900     <span class="keywordflow">for</span> (;;) {
<a name="l01901"></a>01901         printf(<span class="stringliteral">&quot;&gt;&gt;&gt; &quot;</span>); fflush(stdout);
<a name="l01902"></a>01902         <span class="keywordflow">if</span> (fgets(input1, <span class="keyword">sizeof</span>(input1), stdin) == NULL) {
<a name="l01903"></a>01903             puts(<span class="stringliteral">&quot;EOF while reading stdin, will quit now..&quot;</span>);
<a name="l01904"></a>01904             <span class="keywordflow">break</span>;
<a name="l01905"></a>01905         }
<a name="l01906"></a>01906 
<a name="l01907"></a>01907         <span class="keywordflow">switch</span> (input1[0]) {
<a name="l01908"></a>01908 
<a name="l01909"></a>01909         <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:
<a name="l01910"></a>01910             print_avg_stat();
<a name="l01911"></a>01911             <span class="keywordflow">break</span>;
<a name="l01912"></a>01912 
<a name="l01913"></a>01913         <span class="keywordflow">case</span> <span class="charliteral">&#39;l&#39;</span>:
<a name="l01914"></a>01914             list_calls();
<a name="l01915"></a>01915             <span class="keywordflow">break</span>;
<a name="l01916"></a>01916 
<a name="l01917"></a>01917         <span class="keywordflow">case</span> <span class="charliteral">&#39;h&#39;</span>:
<a name="l01918"></a>01918             <span class="keywordflow">if</span> (!simple_input(<span class="stringliteral">&quot;Call number to hangup&quot;</span>, input1, <span class="keyword">sizeof</span>(input1)))
<a name="l01919"></a>01919                 <span class="keywordflow">break</span>;
<a name="l01920"></a>01920 
<a name="l01921"></a>01921             i = atoi(input1);
<a name="l01922"></a>01922             hangup_call(i);
<a name="l01923"></a>01923             <span class="keywordflow">break</span>;
<a name="l01924"></a>01924 
<a name="l01925"></a>01925         <span class="keywordflow">case</span> <span class="charliteral">&#39;H&#39;</span>:
<a name="l01926"></a>01926             hangup_all_calls();
<a name="l01927"></a>01927             <span class="keywordflow">break</span>;
<a name="l01928"></a>01928 
<a name="l01929"></a>01929         <span class="keywordflow">case</span> <span class="charliteral">&#39;q&#39;</span>:
<a name="l01930"></a>01930             <span class="keywordflow">goto</span> on_exit;
<a name="l01931"></a>01931 
<a name="l01932"></a>01932         <span class="keywordflow">default</span>:
<a name="l01933"></a>01933             puts(<span class="stringliteral">&quot;Invalid command&quot;</span>);
<a name="l01934"></a>01934             printf(<span class="stringliteral">&quot;%s&quot;</span>, MENU);
<a name="l01935"></a>01935             <span class="keywordflow">break</span>;
<a name="l01936"></a>01936         }
<a name="l01937"></a>01937 
<a name="l01938"></a>01938         fflush(stdout);
<a name="l01939"></a>01939     }
<a name="l01940"></a>01940 
<a name="l01941"></a>01941 on_exit:
<a name="l01942"></a>01942     hangup_all_calls();
<a name="l01943"></a>01943 }
<a name="l01944"></a>01944 
<a name="l01945"></a>01945 
<a name="l01946"></a>01946 <span class="comment">/*****************************************************************************</span>
<a name="l01947"></a>01947 <span class="comment"> * Below is a simple module to log all incoming and outgoing SIP messages</span>
<a name="l01948"></a>01948 <span class="comment"> */</span>
<a name="l01949"></a>01949 
<a name="l01950"></a>01950 
<a name="l01951"></a>01951 <span class="comment">/* Notification on incoming messages */</span>
<a name="l01952"></a>01952 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> logger_on_rx_msg(pjsip_rx_data *rdata)
<a name="l01953"></a>01953 {
<a name="l01954"></a>01954     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(THIS_FILE, <span class="stringliteral">&quot;RX %d bytes %s from %s:%d:\n&quot;</span>
<a name="l01955"></a>01955                          <span class="stringliteral">&quot;%s\n&quot;</span>
<a name="l01956"></a>01956                          <span class="stringliteral">&quot;--end msg--&quot;</span>,
<a name="l01957"></a>01957                          rdata-&gt;msg_info.len,
<a name="l01958"></a>01958                          pjsip_rx_data_get_info(rdata),
<a name="l01959"></a>01959                          rdata-&gt;pkt_info.src_name,
<a name="l01960"></a>01960                          rdata-&gt;pkt_info.src_port,
<a name="l01961"></a>01961                          rdata-&gt;msg_info.msg_buf));
<a name="l01962"></a>01962     
<a name="l01963"></a>01963     <span class="comment">/* Always return false, otherwise messages will not get processed! */</span>
<a name="l01964"></a>01964     <span class="keywordflow">return</span> PJ_FALSE;
<a name="l01965"></a>01965 }
<a name="l01966"></a>01966 
<a name="l01967"></a>01967 <span class="comment">/* Notification on outgoing messages */</span>
<a name="l01968"></a>01968 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> logger_on_tx_msg(pjsip_tx_data *tdata)
<a name="l01969"></a>01969 {
<a name="l01970"></a>01970     
<a name="l01971"></a>01971     <span class="comment">/* Important note:</span>
<a name="l01972"></a>01972 <span class="comment">     *  tp_info field is only valid after outgoing messages has passed</span>
<a name="l01973"></a>01973 <span class="comment">     *  transport layer. So don&#39;t try to access tp_info when the module</span>
<a name="l01974"></a>01974 <span class="comment">     *  has lower priority than transport layer.</span>
<a name="l01975"></a>01975 <span class="comment">     */</span>
<a name="l01976"></a>01976 
<a name="l01977"></a>01977     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(THIS_FILE, <span class="stringliteral">&quot;TX %d bytes %s to %s:%d:\n&quot;</span>
<a name="l01978"></a>01978                          <span class="stringliteral">&quot;%s\n&quot;</span>
<a name="l01979"></a>01979                          <span class="stringliteral">&quot;--end msg--&quot;</span>,
<a name="l01980"></a>01980                          (tdata-&gt;buf.cur - tdata-&gt;buf.start),
<a name="l01981"></a>01981                          pjsip_tx_data_get_info(tdata),
<a name="l01982"></a>01982                          tdata-&gt;tp_info.dst_name,
<a name="l01983"></a>01983                          tdata-&gt;tp_info.dst_port,
<a name="l01984"></a>01984                          tdata-&gt;buf.start));
<a name="l01985"></a>01985 
<a name="l01986"></a>01986     <span class="comment">/* Always return success, otherwise message will not get sent! */</span>
<a name="l01987"></a>01987     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l01988"></a>01988 }
<a name="l01989"></a>01989 
<a name="l01990"></a>01990 <span class="comment">/* The module instance. */</span>
<a name="l01991"></a>01991 <span class="keyword">static</span> pjsip_module msg_logger = 
<a name="l01992"></a>01992 {
<a name="l01993"></a>01993     NULL, NULL,                         <span class="comment">/* prev, next.          */</span>
<a name="l01994"></a>01994     { <span class="stringliteral">&quot;mod-siprtp-log&quot;</span>, 14 },           <span class="comment">/* Name.                */</span>
<a name="l01995"></a>01995     -1,                                 <span class="comment">/* Id                   */</span>
<a name="l01996"></a>01996     PJSIP_MOD_PRIORITY_TRANSPORT_LAYER-1,<span class="comment">/* Priority            */</span>
<a name="l01997"></a>01997     NULL,                               <span class="comment">/* load()               */</span>
<a name="l01998"></a>01998     NULL,                               <span class="comment">/* start()              */</span>
<a name="l01999"></a>01999     NULL,                               <span class="comment">/* stop()               */</span>
<a name="l02000"></a>02000     NULL,                               <span class="comment">/* unload()             */</span>
<a name="l02001"></a>02001     &amp;logger_on_rx_msg,                  <span class="comment">/* on_rx_request()      */</span>
<a name="l02002"></a>02002     &amp;logger_on_rx_msg,                  <span class="comment">/* on_rx_response()     */</span>
<a name="l02003"></a>02003     &amp;logger_on_tx_msg,                  <span class="comment">/* on_tx_request.       */</span>
<a name="l02004"></a>02004     &amp;logger_on_tx_msg,                  <span class="comment">/* on_tx_response()     */</span>
<a name="l02005"></a>02005     NULL,                               <span class="comment">/* on_tsx_state()       */</span>
<a name="l02006"></a>02006 
<a name="l02007"></a>02007 };
<a name="l02008"></a>02008 
<a name="l02009"></a>02009 
<a name="l02010"></a>02010 
<a name="l02011"></a>02011 <span class="comment">/*****************************************************************************</span>
<a name="l02012"></a>02012 <span class="comment"> * Console application custom logging:</span>
<a name="l02013"></a>02013 <span class="comment"> */</span>
<a name="l02014"></a>02014 
<a name="l02015"></a>02015 
<a name="l02016"></a>02016 <span class="keyword">static</span> FILE *log_file;
<a name="l02017"></a>02017 
<a name="l02018"></a>02018 
<a name="l02019"></a>02019 <span class="keyword">static</span> <span class="keywordtype">void</span> app_log_writer(<span class="keywordtype">int</span> level, <span class="keyword">const</span> <span class="keywordtype">char</span> *buffer, <span class="keywordtype">int</span> len)
<a name="l02020"></a>02020 {
<a name="l02021"></a>02021     <span class="comment">/* Write to both stdout and file. */</span>
<a name="l02022"></a>02022 
<a name="l02023"></a>02023     <span class="keywordflow">if</span> (level &lt;= app.app_log_level)
<a name="l02024"></a>02024         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga075e8fbb519edef9750c45cfe6d456d7">pj_log_write</a>(level, buffer, len);
<a name="l02025"></a>02025 
<a name="l02026"></a>02026     <span class="keywordflow">if</span> (log_file) {
<a name="l02027"></a>02027         <span class="keywordtype">int</span> count = fwrite(buffer, len, 1, log_file);
<a name="l02028"></a>02028         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(count);
<a name="l02029"></a>02029         fflush(log_file);
<a name="l02030"></a>02030     }
<a name="l02031"></a>02031 }
<a name="l02032"></a>02032 
<a name="l02033"></a>02033 
<a name="l02034"></a>02034 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> app_logging_init(<span class="keywordtype">void</span>)
<a name="l02035"></a>02035 {
<a name="l02036"></a>02036     <span class="comment">/* Redirect log function to ours */</span>
<a name="l02037"></a>02037 
<a name="l02038"></a>02038     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#gaec15259dddf6896e4337abd528a8aad1">pj_log_set_log_func</a>( &amp;app_log_writer );
<a name="l02039"></a>02039 
<a name="l02040"></a>02040     <span class="comment">/* If output log file is desired, create the file: */</span>
<a name="l02041"></a>02041 
<a name="l02042"></a>02042     <span class="keywordflow">if</span> (app.log_filename) {
<a name="l02043"></a>02043         log_file = fopen(app.log_filename, <span class="stringliteral">&quot;wt&quot;</span>);
<a name="l02044"></a>02044         <span class="keywordflow">if</span> (log_file == NULL) {
<a name="l02045"></a>02045             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;Unable to open log file %s&quot;</span>, 
<a name="l02046"></a>02046                       app.log_filename));   
<a name="l02047"></a>02047             <span class="keywordflow">return</span> -1;
<a name="l02048"></a>02048         }
<a name="l02049"></a>02049     }
<a name="l02050"></a>02050 
<a name="l02051"></a>02051     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l02052"></a>02052 }
<a name="l02053"></a>02053 
<a name="l02054"></a>02054 
<a name="l02055"></a>02055 <span class="keywordtype">void</span> app_logging_shutdown(<span class="keywordtype">void</span>)
<a name="l02056"></a>02056 {
<a name="l02057"></a>02057     <span class="comment">/* Close logging file, if any: */</span>
<a name="l02058"></a>02058 
<a name="l02059"></a>02059     <span class="keywordflow">if</span> (log_file) {
<a name="l02060"></a>02060         fclose(log_file);
<a name="l02061"></a>02061         log_file = NULL;
<a name="l02062"></a>02062     }
<a name="l02063"></a>02063 }
<a name="l02064"></a>02064 
<a name="l02065"></a>02065 
<a name="l02066"></a>02066 <span class="comment">/*</span>
<a name="l02067"></a>02067 <span class="comment"> * main()</span>
<a name="l02068"></a>02068 <span class="comment"> */</span>
<a name="l02069"></a>02069 <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l02070"></a>02070 {
<a name="l02071"></a>02071     <span class="keywordtype">unsigned</span> i;
<a name="l02072"></a>02072     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l02073"></a>02073 
<a name="l02074"></a>02074     <span class="comment">/* Must init PJLIB first */</span>
<a name="l02075"></a>02075     status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga069615152140fa2df009cebc8a36b769">pj_init</a>();
<a name="l02076"></a>02076     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l02077"></a>02077         <span class="keywordflow">return</span> 1;
<a name="l02078"></a>02078 
<a name="l02079"></a>02079     <span class="comment">/* Get command line options */</span>
<a name="l02080"></a>02080     status = init_options(argc, argv);
<a name="l02081"></a>02081     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l02082"></a>02082         <span class="keywordflow">return</span> 1;
<a name="l02083"></a>02083 
<a name="l02084"></a>02084     <span class="comment">/* Verify options: */</span>
<a name="l02085"></a>02085 
<a name="l02086"></a>02086     <span class="comment">/* Auto-quit can not be specified for UAS */</span>
<a name="l02087"></a>02087     <span class="keywordflow">if</span> (app.auto_quit &amp;&amp; app.uri_to_call.slen == 0) {
<a name="l02088"></a>02088         printf(<span class="stringliteral">&quot;Error: --auto-quit option only valid for outgoing &quot;</span>
<a name="l02089"></a>02089                <span class="stringliteral">&quot;mode (UAC) only\n&quot;</span>);
<a name="l02090"></a>02090         <span class="keywordflow">return</span> 1;
<a name="l02091"></a>02091     }
<a name="l02092"></a>02092 
<a name="l02093"></a>02093     <span class="comment">/* Init logging */</span>
<a name="l02094"></a>02094     status = app_logging_init();
<a name="l02095"></a>02095     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l02096"></a>02096         <span class="keywordflow">return</span> 1;
<a name="l02097"></a>02097 
<a name="l02098"></a>02098     <span class="comment">/* Init SIP etc */</span>
<a name="l02099"></a>02099     status = init_sip();
<a name="l02100"></a>02100     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l02101"></a>02101         app_perror(THIS_FILE, <span class="stringliteral">&quot;Initialization has failed&quot;</span>, status);
<a name="l02102"></a>02102         destroy_sip();
<a name="l02103"></a>02103         <span class="keywordflow">return</span> 1;
<a name="l02104"></a>02104     }
<a name="l02105"></a>02105 
<a name="l02106"></a>02106     <span class="comment">/* Register module to log incoming/outgoing messages */</span>
<a name="l02107"></a>02107     pjsip_endpt_register_module(app.sip_endpt, &amp;msg_logger);
<a name="l02108"></a>02108 
<a name="l02109"></a>02109     <span class="comment">/* Init media */</span>
<a name="l02110"></a>02110     status = init_media();
<a name="l02111"></a>02111     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l02112"></a>02112         app_perror(THIS_FILE, <span class="stringliteral">&quot;Media initialization failed&quot;</span>, status);
<a name="l02113"></a>02113         destroy_sip();
<a name="l02114"></a>02114         <span class="keywordflow">return</span> 1;
<a name="l02115"></a>02115     }
<a name="l02116"></a>02116 
<a name="l02117"></a>02117     <span class="comment">/* Start worker threads */</span>
<a name="l02118"></a>02118 <span class="preprocessor">#if PJ_HAS_THREADS</span>
<a name="l02119"></a>02119 <span class="preprocessor"></span>    <span class="keywordflow">for</span> (i=0; i&lt;app.thread_count; ++i) {
<a name="l02120"></a>02120         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>( app.pool, <span class="stringliteral">&quot;app&quot;</span>, &amp;sip_worker_thread, NULL,
<a name="l02121"></a>02121                           0, 0, &amp;app.sip_thread[i]);
<a name="l02122"></a>02122     }
<a name="l02123"></a>02123 <span class="preprocessor">#endif</span>
<a name="l02124"></a>02124 <span class="preprocessor"></span>
<a name="l02125"></a>02125     <span class="comment">/* If URL is specified, then make call immediately */</span>
<a name="l02126"></a>02126     <span class="keywordflow">if</span> (app.uri_to_call.slen) {
<a name="l02127"></a>02127         <span class="keywordtype">unsigned</span> i;
<a name="l02128"></a>02128 
<a name="l02129"></a>02129         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Making %d calls to %s..&quot;</span>, app.max_calls,
<a name="l02130"></a>02130                   app.uri_to_call.ptr));
<a name="l02131"></a>02131 
<a name="l02132"></a>02132         <span class="keywordflow">for</span> (i=0; i&lt;app.max_calls; ++i) {
<a name="l02133"></a>02133             status = make_call(&amp;app.uri_to_call);
<a name="l02134"></a>02134             <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l02135"></a>02135                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Error making call&quot;</span>, status);
<a name="l02136"></a>02136                 <span class="keywordflow">break</span>;
<a name="l02137"></a>02137             }
<a name="l02138"></a>02138             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(app.call_gap);
<a name="l02139"></a>02139         }
<a name="l02140"></a>02140 
<a name="l02141"></a>02141         <span class="keywordflow">if</span> (app.auto_quit) {
<a name="l02142"></a>02142             <span class="comment">/* Wait for calls to complete */</span>
<a name="l02143"></a>02143             <span class="keywordflow">while</span> (app.uac_calls &lt; app.max_calls)
<a name="l02144"></a>02144                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(100);
<a name="l02145"></a>02145             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(200);
<a name="l02146"></a>02146         } <span class="keywordflow">else</span> {
<a name="l02147"></a>02147 <span class="preprocessor">#if PJ_HAS_THREADS</span>
<a name="l02148"></a>02148 <span class="preprocessor"></span>            <span class="comment">/* Start user interface loop */</span>
<a name="l02149"></a>02149             console_main();
<a name="l02150"></a>02150 <span class="preprocessor">#endif</span>
<a name="l02151"></a>02151 <span class="preprocessor"></span>        }
<a name="l02152"></a>02152 
<a name="l02153"></a>02153     } <span class="keywordflow">else</span> {
<a name="l02154"></a>02154 
<a name="l02155"></a>02155         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Ready for incoming calls (max=%d)&quot;</span>, 
<a name="l02156"></a>02156                   app.max_calls));
<a name="l02157"></a>02157 
<a name="l02158"></a>02158 <span class="preprocessor">#if PJ_HAS_THREADS</span>
<a name="l02159"></a>02159 <span class="preprocessor"></span>        <span class="comment">/* Start user interface loop */</span>
<a name="l02160"></a>02160         console_main();
<a name="l02161"></a>02161 <span class="preprocessor">#endif</span>
<a name="l02162"></a>02162 <span class="preprocessor"></span>    }
<a name="l02163"></a>02163 
<a name="l02164"></a>02164 <span class="preprocessor">#if !PJ_HAS_THREADS</span>
<a name="l02165"></a>02165 <span class="preprocessor"></span>    <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Press Ctrl-C to quit&quot;</span>));
<a name="l02166"></a>02166     <span class="keywordflow">for</span> (;;) {
<a name="l02167"></a>02167         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> t = {0, 10};
<a name="l02168"></a>02168         pjsip_endpt_handle_events(app.sip_endpt, &amp;t);
<a name="l02169"></a>02169     }
<a name="l02170"></a>02170 <span class="preprocessor">#endif</span>
<a name="l02171"></a>02171 <span class="preprocessor"></span>    
<a name="l02172"></a>02172     <span class="comment">/* Shutting down... */</span>
<a name="l02173"></a>02173     destroy_sip();
<a name="l02174"></a>02174     destroy_media();
<a name="l02175"></a>02175 
<a name="l02176"></a>02176     <span class="keywordflow">if</span> (app.pool) {
<a name="l02177"></a>02177         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(app.pool);
<a name="l02178"></a>02178         app.pool = NULL;
<a name="l02179"></a>02179         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__CACHING__POOL.htm#ga4c912e7d9e08dae33c2fecea9f1949bc">pj_caching_pool_destroy</a>(&amp;app.cp);
<a name="l02180"></a>02180     }
<a name="l02181"></a>02181 
<a name="l02182"></a>02182     app_logging_shutdown();
<a name="l02183"></a>02183 
<a name="l02184"></a>02184     <span class="comment">/* Shutdown PJLIB */</span>
<a name="l02185"></a>02185     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gad42209dcf11f957ed9f1790e30f519cd">pj_shutdown</a>();
<a name="l02186"></a>02186 
<a name="l02187"></a>02187     <span class="keywordflow">return</span> 0;
<a name="l02188"></a>02188 }
<a name="l02189"></a>02189 
</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJMEDIA small footprint Open Source media stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
