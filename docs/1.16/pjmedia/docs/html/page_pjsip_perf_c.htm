<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJMEDIA Reference: Samples: SIP Performance Benchmark (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->

	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJMEDIA Reference</p>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Samples: SIP Performance Benchmark </h1>  </div>
</div>
<div class="contents">
<p><b>pjsip-perf</b> is a complete program to measure the performance of PJSIP or other SIP endpoints. It consists of two parts:</p>
<ul>
<li>the server, to respond incoming requests, and</li>
<li>the client, who actively submits requests and measure the performance of the server.</li>
</ul>
<p>Both server and client part can run simultaneously, to measure the performance when both endpoints are co-located in a single program.</p>
<p>The server accepts both INVITE and non-INVITE requests. The server exports several different types of URL, which would control how the request would be handled by the server:</p>
<ul>
<li>URL with "0" as the user part will be handled statelessly. It should not be used with INVITE method.</li>
<li>URL with "1" as the user part will be handled statefully. If the request is an INVITE request, INVITE transaction will be created and 200/OK response will be sent, along with a valid SDP body. However, the SDP is just a static text body, and is not a proper SDP generated by PJMEDIA.</li>
<li>URL with "2" as the user part is only meaningful for INVITE requests, as it would be handled <b>call-statefully</b> by the server. For this URL, the server also would generate SDP dynamically and perform a proper SDP negotiation for the incoming call. Also for every call, server will limit the call duration to 10 seconds, on which the call will be terminated if the client doesn't hangup the call.</li>
</ul>
<p>This file is pjsip-apps/src/samples/pjsip-perf.c</p>
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: pjsip-perf.c 4404 2013-02-27 14:47:37Z riza $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00060"></a>00060 <span class="comment">/* Include all headers. */</span>
<a name="l00061"></a>00061 <span class="preprocessor">#include &lt;pjsip.h&gt;</span>
<a name="l00062"></a>00062 <span class="preprocessor">#include &lt;<a class="code" href="pjmedia_8h.htm" title="PJMEDIA main header file.">pjmedia.h</a>&gt;</span>
<a name="l00063"></a>00063 <span class="preprocessor">#include &lt;<a class="code" href="pjmedia-codec_8h.htm" title="Include all codecs API in PJMEDIA-CODEC.">pjmedia-codec.h</a>&gt;</span>
<a name="l00064"></a>00064 <span class="preprocessor">#include &lt;pjsip_ua.h&gt;</span>
<a name="l00065"></a>00065 <span class="preprocessor">#include &lt;pjsip_simple.h&gt;</span>
<a name="l00066"></a>00066 <span class="preprocessor">#include &lt;pjlib-util.h&gt;</span>
<a name="l00067"></a>00067 <span class="preprocessor">#include &lt;pjlib.h&gt;</span>
<a name="l00068"></a>00068 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="preprocessor">#if defined(PJ_WIN32) &amp;&amp; PJ_WIN32!=0</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#  include &lt;windows.h&gt;</span>
<a name="l00072"></a>00072 <span class="preprocessor">#endif</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span>
<a name="l00074"></a>00074 <span class="preprocessor">#define THIS_FILE           &quot;pjsip-perf.c&quot;</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="preprocessor">#define DEFAULT_COUNT       (pjsip_cfg()-&gt;tsx.max_count/2&gt;10000?10000:pjsip_cfg()-&gt;tsx.max_count/2)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#define JOB_WINDOW          1000</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#define TERMINATE_TSX(x,c)</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="preprocessor">#ifndef CACHING_POOL_SIZE</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span><span class="preprocessor">#   define CACHING_POOL_SIZE   (256*1024*1024)</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span>
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="comment">/* Static message body for INVITE, when stateful processing is</span>
<a name="l00086"></a>00086 <span class="comment"> * invoked (instead of call-stateful, where SDP is generated</span>
<a name="l00087"></a>00087 <span class="comment"> * dynamically.</span>
<a name="l00088"></a>00088 <span class="comment"> */</span>
<a name="l00089"></a>00089 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> dummy_sdp_str = 
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091     <span class="stringliteral">&quot;v=0\r\n&quot;</span>
<a name="l00092"></a>00092     <span class="stringliteral">&quot;o=- 3360842071 3360842071 IN IP4 192.168.0.68\r\n&quot;</span>
<a name="l00093"></a>00093     <span class="stringliteral">&quot;s=pjmedia\r\n&quot;</span>
<a name="l00094"></a>00094     <span class="stringliteral">&quot;c=IN IP4 192.168.0.68\r\n&quot;</span>
<a name="l00095"></a>00095     <span class="stringliteral">&quot;t=0 0\r\n&quot;</span>
<a name="l00096"></a>00096     <span class="stringliteral">&quot;m=audio 4000 RTP/AVP 0 8 3 103 102 101\r\n&quot;</span>
<a name="l00097"></a>00097     <span class="stringliteral">&quot;a=rtcp:4001 IN IP4 192.168.0.68\r\n&quot;</span>
<a name="l00098"></a>00098     <span class="stringliteral">&quot;a=rtpmap:103 speex/16000\r\n&quot;</span>
<a name="l00099"></a>00099     <span class="stringliteral">&quot;a=rtpmap:102 speex/8000\r\n&quot;</span>
<a name="l00100"></a>00100     <span class="stringliteral">&quot;a=rtpmap:3 GSM/8000\r\n&quot;</span>
<a name="l00101"></a>00101     <span class="stringliteral">&quot;a=rtpmap:0 PCMU/8000\r\n&quot;</span>
<a name="l00102"></a>00102     <span class="stringliteral">&quot;a=rtpmap:8 PCMA/8000\r\n&quot;</span>
<a name="l00103"></a>00103     <span class="stringliteral">&quot;a=sendrecv\r\n&quot;</span>
<a name="l00104"></a>00104     <span class="stringliteral">&quot;a=rtpmap:101 telephone-event/8000\r\n&quot;</span>
<a name="l00105"></a>00105     <span class="stringliteral">&quot;a=fmtp:101 0-15\r\n&quot;</span>,
<a name="l00106"></a>00106     0
<a name="l00107"></a>00107 };
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> mime_application = { <span class="stringliteral">&quot;application&quot;</span>, 11};
<a name="l00110"></a>00110 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> mime_sdp = {<span class="stringliteral">&quot;sdp&quot;</span>, 3};
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 <span class="keyword">struct </span><a class="code" href="structsrv__state.htm">srv_state</a>
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115     <span class="keywordtype">unsigned</span>        stateless_cnt;
<a name="l00116"></a>00116     <span class="keywordtype">unsigned</span>        stateful_cnt;
<a name="l00117"></a>00117     <span class="keywordtype">unsigned</span>        call_cnt;
<a name="l00118"></a>00118 };
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="keyword">struct </span>app
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm">pj_caching_pool</a>      cp;
<a name="l00124"></a>00124     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a>           *pool;
<a name="l00125"></a>00125     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            use_tcp;
<a name="l00126"></a>00126     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             local_addr;
<a name="l00127"></a>00127     <span class="keywordtype">int</span>                  local_port;
<a name="l00128"></a>00128     pjsip_endpoint      *sip_endpt;
<a name="l00129"></a>00129     <a class="code" href="group__PJMEDIA__TYPES.htm#ga7c3623d8e90e22b7184a6e42dc24f6f5">pjmedia_endpt</a>       *med_endpt;
<a name="l00130"></a>00130     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             local_uri;
<a name="l00131"></a>00131     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             local_contact;
<a name="l00132"></a>00132     <span class="keywordtype">unsigned</span>             skinfo_cnt;
<a name="l00133"></a>00133     <a class="code" href="structpjmedia__sock__info.htm">pjmedia_sock_info</a>    skinfo[8];
<a name="l00134"></a>00134 
<a name="l00135"></a>00135     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            thread_quit;
<a name="l00136"></a>00136     <span class="keywordtype">unsigned</span>             thread_count;
<a name="l00137"></a>00137     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>         *thread[16];
<a name="l00138"></a>00138 
<a name="l00139"></a>00139     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            real_sdp;
<a name="l00140"></a>00140     <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *dummy_sdp;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142     <span class="keywordtype">int</span>                  log_level;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keyword">struct </span>{
<a name="l00145"></a>00145         pjsip_method         method;
<a name="l00146"></a>00146         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a>             dst_uri;
<a name="l00147"></a>00147         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>            stateless;
<a name="l00148"></a>00148         <span class="keywordtype">unsigned</span>             timeout;
<a name="l00149"></a>00149         <span class="keywordtype">unsigned</span>             job_count,
<a name="l00150"></a>00150                              job_submitted, 
<a name="l00151"></a>00151                              job_finished,
<a name="l00152"></a>00152                              job_window;
<a name="l00153"></a>00153         <span class="keywordtype">unsigned</span>             stat_max_window;
<a name="l00154"></a>00154         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a>          first_request;
<a name="l00155"></a>00155         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a>          requests_sent;
<a name="l00156"></a>00156         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a>          last_completion;
<a name="l00157"></a>00157         <span class="keywordtype">unsigned</span>             total_responses;
<a name="l00158"></a>00158         <span class="keywordtype">unsigned</span>             response_codes[800];
<a name="l00159"></a>00159     } client;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keyword">struct </span>{
<a name="l00162"></a>00162         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> send_trying;
<a name="l00163"></a>00163         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> send_ringing;
<a name="l00164"></a>00164         <span class="keywordtype">unsigned</span> delay;
<a name="l00165"></a>00165         <span class="keyword">struct </span><a class="code" href="structsrv__state.htm">srv_state</a> prev_state;
<a name="l00166"></a>00166         <span class="keyword">struct </span><a class="code" href="structsrv__state.htm">srv_state</a> cur_state;
<a name="l00167"></a>00167     } server;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 } app;
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="keyword">struct </span>call
<a name="l00173"></a>00173 {
<a name="l00174"></a>00174     pjsip_inv_session   *inv;
<a name="l00175"></a>00175     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm">pj_timer_entry</a>       ans_timer;
<a name="l00176"></a>00176 };
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 <span class="keyword">static</span> <span class="keywordtype">void</span> app_perror(<span class="keyword">const</span> <span class="keywordtype">char</span> *sender, <span class="keyword">const</span> <span class="keywordtype">char</span> *title, 
<a name="l00180"></a>00180                        <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182     <span class="keywordtype">char</span> errmsg[PJ_ERR_MSG_SIZE];
<a name="l00183"></a>00183 
<a name="l00184"></a>00184     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a>(status, errmsg, <span class="keyword">sizeof</span>(errmsg));
<a name="l00185"></a>00185     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(sender, <span class="stringliteral">&quot;%s: %s [code=%d]&quot;</span>, title, errmsg, status));
<a name="l00186"></a>00186 }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="comment">/**************************************************************************</span>
<a name="l00190"></a>00190 <span class="comment"> * STATELESS SERVER</span>
<a name="l00191"></a>00191 <span class="comment"> */</span>
<a name="l00192"></a>00192 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_stateless_on_rx_request(pjsip_rx_data *rdata);
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="comment">/* Module to handle incoming requests statelessly.</span>
<a name="l00195"></a>00195 <span class="comment"> */</span>
<a name="l00196"></a>00196 <span class="keyword">static</span> pjsip_module mod_stateless_server =
<a name="l00197"></a>00197 {
<a name="l00198"></a>00198     NULL, NULL,                     <span class="comment">/* prev, next.              */</span>
<a name="l00199"></a>00199     { <span class="stringliteral">&quot;mod-stateless-server&quot;</span>, 20 }, <span class="comment">/* Name.                    */</span>
<a name="l00200"></a>00200     -1,                             <span class="comment">/* Id                       */</span>
<a name="l00201"></a>00201     PJSIP_MOD_PRIORITY_APPLICATION, <span class="comment">/* Priority                 */</span>
<a name="l00202"></a>00202     NULL,                           <span class="comment">/* load()                   */</span>
<a name="l00203"></a>00203     NULL,                           <span class="comment">/* start()                  */</span>
<a name="l00204"></a>00204     NULL,                           <span class="comment">/* stop()                   */</span>
<a name="l00205"></a>00205     NULL,                           <span class="comment">/* unload()                 */</span>
<a name="l00206"></a>00206     &amp;mod_stateless_on_rx_request,   <span class="comment">/* on_rx_request()          */</span>
<a name="l00207"></a>00207     NULL,                           <span class="comment">/* on_rx_response()         */</span>
<a name="l00208"></a>00208     NULL,                           <span class="comment">/* on_tx_request.           */</span>
<a name="l00209"></a>00209     NULL,                           <span class="comment">/* on_tx_response()         */</span>
<a name="l00210"></a>00210     NULL,                           <span class="comment">/* on_tsx_state()           */</span>
<a name="l00211"></a>00211 };
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_stateless_on_rx_request(pjsip_rx_data *rdata)
<a name="l00215"></a>00215 {
<a name="l00216"></a>00216     <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> stateless_user = { <span class="stringliteral">&quot;0&quot;</span>, 1 };
<a name="l00217"></a>00217     pjsip_uri *uri;
<a name="l00218"></a>00218     pjsip_sip_uri *sip_uri;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     uri = pjsip_uri_get_uri(rdata-&gt;msg_info.msg-&gt;line.req.uri);
<a name="l00221"></a>00221 
<a name="l00222"></a>00222     <span class="comment">/* Only want to receive SIP/SIPS scheme */</span>
<a name="l00223"></a>00223     <span class="keywordflow">if</span> (!PJSIP_URI_SCHEME_IS_SIP(uri) &amp;&amp; !PJSIP_URI_SCHEME_IS_SIPS(uri))
<a name="l00224"></a>00224         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00225"></a>00225 
<a name="l00226"></a>00226     sip_uri = (pjsip_sip_uri*) uri;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <span class="comment">/* Check for matching user part */</span>
<a name="l00229"></a>00229     <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a>(&amp;sip_uri-&gt;user, &amp;stateless_user)!=0)
<a name="l00230"></a>00230         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00231"></a>00231 
<a name="l00232"></a>00232     <span class="comment">/*</span>
<a name="l00233"></a>00233 <span class="comment">     * Yes, this is for us.</span>
<a name="l00234"></a>00234 <span class="comment">     */</span>
<a name="l00235"></a>00235 
<a name="l00236"></a>00236     <span class="comment">/* Ignore ACK request */</span>
<a name="l00237"></a>00237     <span class="keywordflow">if</span> (rdata-&gt;msg_info.msg-&gt;line.req.method.id == PJSIP_ACK_METHOD)
<a name="l00238"></a>00238         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240     <span class="comment">/*</span>
<a name="l00241"></a>00241 <span class="comment">     * Respond statelessly with 200/OK.</span>
<a name="l00242"></a>00242 <span class="comment">     */</span>
<a name="l00243"></a>00243     pjsip_endpt_respond_stateless(app.sip_endpt, rdata, 200, NULL,
<a name="l00244"></a>00244                                   NULL, NULL);
<a name="l00245"></a>00245     app.server.cur_state.stateless_cnt++;
<a name="l00246"></a>00246     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 <span class="comment">/**************************************************************************</span>
<a name="l00251"></a>00251 <span class="comment"> * STATEFUL SERVER</span>
<a name="l00252"></a>00252 <span class="comment"> */</span>
<a name="l00253"></a>00253 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_stateful_on_rx_request(pjsip_rx_data *rdata);
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 <span class="comment">/* Module to handle incoming requests statefully.</span>
<a name="l00256"></a>00256 <span class="comment"> */</span>
<a name="l00257"></a>00257 <span class="keyword">static</span> pjsip_module mod_stateful_server =
<a name="l00258"></a>00258 {
<a name="l00259"></a>00259     NULL, NULL,                     <span class="comment">/* prev, next.              */</span>
<a name="l00260"></a>00260     { <span class="stringliteral">&quot;mod-stateful-server&quot;</span>, 19 },  <span class="comment">/* Name.                    */</span>
<a name="l00261"></a>00261     -1,                             <span class="comment">/* Id                       */</span>
<a name="l00262"></a>00262     PJSIP_MOD_PRIORITY_APPLICATION, <span class="comment">/* Priority                 */</span>
<a name="l00263"></a>00263     NULL,                           <span class="comment">/* load()                   */</span>
<a name="l00264"></a>00264     NULL,                           <span class="comment">/* start()                  */</span>
<a name="l00265"></a>00265     NULL,                           <span class="comment">/* stop()                   */</span>
<a name="l00266"></a>00266     NULL,                           <span class="comment">/* unload()                 */</span>
<a name="l00267"></a>00267     &amp;mod_stateful_on_rx_request,   <span class="comment">/* on_rx_request()           */</span>
<a name="l00268"></a>00268     NULL,                           <span class="comment">/* on_rx_response()         */</span>
<a name="l00269"></a>00269     NULL,                           <span class="comment">/* on_tx_request.           */</span>
<a name="l00270"></a>00270     NULL,                           <span class="comment">/* on_tx_response()         */</span>
<a name="l00271"></a>00271     NULL,                           <span class="comment">/* on_tsx_state()           */</span>
<a name="l00272"></a>00272 };
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_stateful_on_rx_request(pjsip_rx_data *rdata)
<a name="l00276"></a>00276 {
<a name="l00277"></a>00277     <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> stateful_user = { <span class="stringliteral">&quot;1&quot;</span>, 1 };
<a name="l00278"></a>00278     pjsip_uri *uri;
<a name="l00279"></a>00279     pjsip_sip_uri *sip_uri;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281     uri = pjsip_uri_get_uri(rdata-&gt;msg_info.msg-&gt;line.req.uri);
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="comment">/* Only want to receive SIP/SIPS scheme */</span>
<a name="l00284"></a>00284     <span class="keywordflow">if</span> (!PJSIP_URI_SCHEME_IS_SIP(uri) &amp;&amp; !PJSIP_URI_SCHEME_IS_SIPS(uri))
<a name="l00285"></a>00285         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00286"></a>00286 
<a name="l00287"></a>00287     sip_uri = (pjsip_sip_uri*) uri;
<a name="l00288"></a>00288 
<a name="l00289"></a>00289     <span class="comment">/* Check for matching user part */</span>
<a name="l00290"></a>00290     <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a>(&amp;sip_uri-&gt;user, &amp;stateful_user)!=0)
<a name="l00291"></a>00291         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00292"></a>00292 
<a name="l00293"></a>00293     <span class="comment">/*</span>
<a name="l00294"></a>00294 <span class="comment">     * Yes, this is for us.</span>
<a name="l00295"></a>00295 <span class="comment">     * Respond statefully with 200/OK.</span>
<a name="l00296"></a>00296 <span class="comment">     */</span>
<a name="l00297"></a>00297     <span class="keywordflow">switch</span> (rdata-&gt;msg_info.msg-&gt;line.req.method.id) {
<a name="l00298"></a>00298     <span class="keywordflow">case</span> PJSIP_INVITE_METHOD:
<a name="l00299"></a>00299         {
<a name="l00300"></a>00300             pjsip_msg_body *body;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302             <span class="keywordflow">if</span> (dummy_sdp_str.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> == 0)
<a name="l00303"></a>00303                 dummy_sdp_str.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> = pj_ansi_strlen(dummy_sdp_str.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>);
<a name="l00304"></a>00304 
<a name="l00305"></a>00305             body = pjsip_msg_body_create(rdata-&gt;tp_info.pool, 
<a name="l00306"></a>00306                                          &amp;mime_application, &amp;mime_sdp, 
<a name="l00307"></a>00307                                          &amp;dummy_sdp_str);
<a name="l00308"></a>00308             pjsip_endpt_respond(app.sip_endpt, &amp;mod_stateful_server, rdata,
<a name="l00309"></a>00309                                 200, NULL, NULL, body, NULL);
<a name="l00310"></a>00310         }
<a name="l00311"></a>00311         <span class="keywordflow">break</span>;
<a name="l00312"></a>00312     <span class="keywordflow">case</span> PJSIP_ACK_METHOD:
<a name="l00313"></a>00313         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00314"></a>00314     <span class="keywordflow">default</span>:
<a name="l00315"></a>00315         pjsip_endpt_respond(app.sip_endpt, &amp;mod_stateful_server, rdata,
<a name="l00316"></a>00316                             200, NULL, NULL, NULL, NULL);
<a name="l00317"></a>00317         <span class="keywordflow">break</span>;
<a name="l00318"></a>00318     }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320     app.server.cur_state.stateful_cnt++;
<a name="l00321"></a>00321     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00322"></a>00322 }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="comment">/**************************************************************************</span>
<a name="l00326"></a>00326 <span class="comment"> * CALL SERVER</span>
<a name="l00327"></a>00327 <span class="comment"> */</span>
<a name="l00328"></a>00328 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_call_on_rx_request(pjsip_rx_data *rdata);
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 <span class="comment">/* Module to handle incoming requests callly.</span>
<a name="l00331"></a>00331 <span class="comment"> */</span>
<a name="l00332"></a>00332 <span class="keyword">static</span> pjsip_module mod_call_server =
<a name="l00333"></a>00333 {
<a name="l00334"></a>00334     NULL, NULL,                     <span class="comment">/* prev, next.              */</span>
<a name="l00335"></a>00335     { <span class="stringliteral">&quot;mod-call-server&quot;</span>, 15 },      <span class="comment">/* Name.                    */</span>
<a name="l00336"></a>00336     -1,                             <span class="comment">/* Id                       */</span>
<a name="l00337"></a>00337     PJSIP_MOD_PRIORITY_APPLICATION, <span class="comment">/* Priority                 */</span>
<a name="l00338"></a>00338     NULL,                           <span class="comment">/* load()                   */</span>
<a name="l00339"></a>00339     NULL,                           <span class="comment">/* start()                  */</span>
<a name="l00340"></a>00340     NULL,                           <span class="comment">/* stop()                   */</span>
<a name="l00341"></a>00341     NULL,                           <span class="comment">/* unload()                 */</span>
<a name="l00342"></a>00342     &amp;mod_call_on_rx_request,        <span class="comment">/* on_rx_request()          */</span>
<a name="l00343"></a>00343     NULL,                           <span class="comment">/* on_rx_response()         */</span>
<a name="l00344"></a>00344     NULL,                           <span class="comment">/* on_tx_request.           */</span>
<a name="l00345"></a>00345     NULL,                           <span class="comment">/* on_tx_response()         */</span>
<a name="l00346"></a>00346     NULL,                           <span class="comment">/* on_tsx_state()           */</span>
<a name="l00347"></a>00347 };
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> send_response(pjsip_inv_session *inv, 
<a name="l00351"></a>00351                                  pjsip_rx_data *rdata,
<a name="l00352"></a>00352                                  <span class="keywordtype">int</span> code,
<a name="l00353"></a>00353                                  <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> *has_initial)
<a name="l00354"></a>00354 {
<a name="l00355"></a>00355     pjsip_tx_data *tdata;
<a name="l00356"></a>00356     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00357"></a>00357 
<a name="l00358"></a>00358     <span class="keywordflow">if</span> (*has_initial) {
<a name="l00359"></a>00359         status = pjsip_inv_answer(inv, code, NULL, NULL, &amp;tdata);
<a name="l00360"></a>00360     } <span class="keywordflow">else</span> {
<a name="l00361"></a>00361         status = pjsip_inv_initial_answer(inv, rdata, code, 
<a name="l00362"></a>00362                                           NULL, NULL, &amp;tdata);
<a name="l00363"></a>00363     }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00366"></a>00366         <span class="keywordflow">if</span> (*has_initial) {
<a name="l00367"></a>00367             status = pjsip_inv_answer(inv, PJSIP_SC_NOT_ACCEPTABLE, 
<a name="l00368"></a>00368                                       NULL, NULL, &amp;tdata);
<a name="l00369"></a>00369         } <span class="keywordflow">else</span> {
<a name="l00370"></a>00370             status = pjsip_inv_initial_answer(inv, rdata, 
<a name="l00371"></a>00371                                               PJSIP_SC_NOT_ACCEPTABLE,
<a name="l00372"></a>00372                                               NULL, NULL, &amp;tdata);
<a name="l00373"></a>00373         }
<a name="l00374"></a>00374 
<a name="l00375"></a>00375         <span class="keywordflow">if</span> (status == PJ_SUCCESS) {
<a name="l00376"></a>00376             *has_initial = PJ_TRUE;
<a name="l00377"></a>00377             pjsip_inv_send_msg(inv, tdata); 
<a name="l00378"></a>00378         } <span class="keywordflow">else</span> {
<a name="l00379"></a>00379             pjsip_inv_terminate(inv, 500, PJ_FALSE);
<a name="l00380"></a>00380             <span class="keywordflow">return</span> -1;
<a name="l00381"></a>00381         }
<a name="l00382"></a>00382     } <span class="keywordflow">else</span> {
<a name="l00383"></a>00383         *has_initial = PJ_TRUE;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385         status = pjsip_inv_send_msg(inv, tdata); 
<a name="l00386"></a>00386         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00387"></a>00387             pjsip_tx_data_dec_ref(tdata);
<a name="l00388"></a>00388             <span class="keywordflow">return</span> status;
<a name="l00389"></a>00389         }
<a name="l00390"></a>00390     }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392     <span class="keywordflow">return</span> status;
<a name="l00393"></a>00393 }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395 <span class="keyword">static</span> <span class="keywordtype">void</span> answer_timer_cb(<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *h, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm">pj_timer_entry</a> *entry)
<a name="l00396"></a>00396 {
<a name="l00397"></a>00397     <span class="keyword">struct </span>call *call = entry-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a96ce07b4b890b820ccd1e8365b88add6">user_data</a>;
<a name="l00398"></a>00398     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> has_initial = PJ_TRUE;
<a name="l00399"></a>00399 
<a name="l00400"></a>00400     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(h);
<a name="l00401"></a>00401 
<a name="l00402"></a>00402     entry-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a70aed199d89e16a05bd9643efd3d665d">id</a> = 0;
<a name="l00403"></a>00403     send_response(call-&gt;inv, NULL, 200, &amp;has_initial);
<a name="l00404"></a>00404 }
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_call_on_rx_request(pjsip_rx_data *rdata)
<a name="l00407"></a>00407 {
<a name="l00408"></a>00408     <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> call_user = { <span class="stringliteral">&quot;2&quot;</span>, 1 };
<a name="l00409"></a>00409     pjsip_uri *uri;
<a name="l00410"></a>00410     pjsip_sip_uri *sip_uri;
<a name="l00411"></a>00411     <span class="keyword">struct </span>call *call;
<a name="l00412"></a>00412     pjsip_dialog *dlg;
<a name="l00413"></a>00413     <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp;
<a name="l00414"></a>00414     pjsip_tx_data *tdata;
<a name="l00415"></a>00415     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> has_initial = PJ_FALSE;
<a name="l00416"></a>00416     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418     uri = pjsip_uri_get_uri(rdata-&gt;msg_info.msg-&gt;line.req.uri);
<a name="l00419"></a>00419 
<a name="l00420"></a>00420     <span class="comment">/* Only want to receive SIP/SIPS scheme */</span>
<a name="l00421"></a>00421     <span class="keywordflow">if</span> (!PJSIP_URI_SCHEME_IS_SIP(uri) &amp;&amp; !PJSIP_URI_SCHEME_IS_SIPS(uri))
<a name="l00422"></a>00422         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00423"></a>00423 
<a name="l00424"></a>00424     sip_uri = (pjsip_sip_uri*) uri;
<a name="l00425"></a>00425 
<a name="l00426"></a>00426     <span class="comment">/* Only want to handle INVITE requests. */</span>
<a name="l00427"></a>00427     <span class="keywordflow">if</span> (rdata-&gt;msg_info.msg-&gt;line.req.method.id != PJSIP_INVITE_METHOD) {
<a name="l00428"></a>00428         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00429"></a>00429     }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 
<a name="l00432"></a>00432     <span class="comment">/* Check for matching user part. Incoming requests will be handled </span>
<a name="l00433"></a>00433 <span class="comment">     * call-statefully if:</span>
<a name="l00434"></a>00434 <span class="comment">     *  - user part is &quot;2&quot;, or</span>
<a name="l00435"></a>00435 <span class="comment">     *  - user part is not &quot;0&quot; nor &quot;1&quot; and method is INVITE.</span>
<a name="l00436"></a>00436 <span class="comment">     */</span>
<a name="l00437"></a>00437     <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a>(&amp;sip_uri-&gt;user, &amp;call_user) == 0 ||
<a name="l00438"></a>00438         sip_uri-&gt;user.slen != 1 ||
<a name="l00439"></a>00439         (*sip_uri-&gt;user.ptr != <span class="charliteral">&#39;0&#39;</span> &amp;&amp; *sip_uri-&gt;user.ptr != <span class="charliteral">&#39;1&#39;</span>))
<a name="l00440"></a>00440     {
<a name="l00441"></a>00441         <span class="comment">/* Match */</span>
<a name="l00442"></a>00442 
<a name="l00443"></a>00443     } <span class="keywordflow">else</span> {
<a name="l00444"></a>00444         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00445"></a>00445     }
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 
<a name="l00448"></a>00448     <span class="comment">/* Verify that we can handle the request. */</span>
<a name="l00449"></a>00449     <span class="keywordflow">if</span> (app.real_sdp) {
<a name="l00450"></a>00450         <span class="keywordtype">unsigned</span> options = 0;
<a name="l00451"></a>00451         status = pjsip_inv_verify_request(rdata, &amp;options, NULL, NULL,
<a name="l00452"></a>00452                                           app.sip_endpt, &amp;tdata);
<a name="l00453"></a>00453         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00454"></a>00454 
<a name="l00455"></a>00455             <span class="comment">/*</span>
<a name="l00456"></a>00456 <span class="comment">             * No we can&#39;t handle the incoming INVITE request.</span>
<a name="l00457"></a>00457 <span class="comment">             */</span>
<a name="l00458"></a>00458 
<a name="l00459"></a>00459             <span class="keywordflow">if</span> (tdata) {
<a name="l00460"></a>00460                 pjsip_response_addr res_addr;
<a name="l00461"></a>00461 
<a name="l00462"></a>00462                 pjsip_get_response_addr(tdata-&gt;pool, rdata, &amp;res_addr);
<a name="l00463"></a>00463                 pjsip_endpt_send_response(app.sip_endpt, &amp;res_addr, tdata, 
<a name="l00464"></a>00464                                           NULL, NULL);
<a name="l00465"></a>00465 
<a name="l00466"></a>00466             } <span class="keywordflow">else</span> {
<a name="l00467"></a>00467 
<a name="l00468"></a>00468                 <span class="comment">/* Respond with 500 (Internal Server Error) */</span>
<a name="l00469"></a>00469                 pjsip_endpt_respond_stateless(app.sip_endpt, rdata, 500, NULL,
<a name="l00470"></a>00470                                               NULL, NULL);
<a name="l00471"></a>00471             }
<a name="l00472"></a>00472 
<a name="l00473"></a>00473             <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00474"></a>00474         } 
<a name="l00475"></a>00475     }
<a name="l00476"></a>00476 
<a name="l00477"></a>00477     <span class="comment">/* Create UAS dialog */</span>
<a name="l00478"></a>00478     status = pjsip_dlg_create_uas( pjsip_ua_instance(), rdata,
<a name="l00479"></a>00479                                    &amp;app.local_contact, &amp;dlg);
<a name="l00480"></a>00480     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00481"></a>00481         <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Unable to create dialog&quot;</span>);
<a name="l00482"></a>00482         pjsip_endpt_respond_stateless( app.sip_endpt, rdata, 
<a name="l00483"></a>00483                                        500, &amp;reason,
<a name="l00484"></a>00484                                        NULL, NULL);
<a name="l00485"></a>00485         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00486"></a>00486     }
<a name="l00487"></a>00487 
<a name="l00488"></a>00488     <span class="comment">/* Alloc call structure. */</span>
<a name="l00489"></a>00489     call = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a>(dlg-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> call));
<a name="l00490"></a>00490 
<a name="l00491"></a>00491     <span class="comment">/* Create SDP from PJMEDIA */</span>
<a name="l00492"></a>00492     <span class="keywordflow">if</span> (app.real_sdp) {
<a name="l00493"></a>00493         status = <a class="code" href="group__PJMED__ENDPT.htm#gaa49360a690c292dddd722b39c2f8c8bb">pjmedia_endpt_create_sdp</a>(app.med_endpt, rdata-&gt;tp_info.pool, 
<a name="l00494"></a>00494                                           app.skinfo_cnt, app.skinfo, 
<a name="l00495"></a>00495                                           &amp;sdp);
<a name="l00496"></a>00496     } <span class="keywordflow">else</span> {
<a name="l00497"></a>00497         sdp = app.dummy_sdp;
<a name="l00498"></a>00498     }
<a name="l00499"></a>00499 
<a name="l00500"></a>00500     <span class="comment">/* Create UAS invite session */</span>
<a name="l00501"></a>00501     status = pjsip_inv_create_uas( dlg, rdata, sdp, 0, &amp;call-&gt;inv);
<a name="l00502"></a>00502     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00503"></a>00503         pjsip_dlg_create_response(dlg, rdata, 500, NULL, &amp;tdata);
<a name="l00504"></a>00504         pjsip_dlg_send_response(dlg, pjsip_rdata_get_tsx(rdata), tdata);
<a name="l00505"></a>00505         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00506"></a>00506     }
<a name="l00507"></a>00507     
<a name="l00508"></a>00508     <span class="comment">/* Send 100/Trying if needed */</span>
<a name="l00509"></a>00509     <span class="keywordflow">if</span> (app.server.send_trying) {
<a name="l00510"></a>00510         status = send_response(call-&gt;inv, rdata, 100, &amp;has_initial);
<a name="l00511"></a>00511         <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00512"></a>00512             <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00513"></a>00513     }
<a name="l00514"></a>00514 
<a name="l00515"></a>00515     <span class="comment">/* Send 180/Ringing if needed */</span>
<a name="l00516"></a>00516     <span class="keywordflow">if</span> (app.server.send_ringing) {
<a name="l00517"></a>00517         status = send_response(call-&gt;inv, rdata, 180, &amp;has_initial);
<a name="l00518"></a>00518         <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00519"></a>00519             <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00520"></a>00520     }
<a name="l00521"></a>00521 
<a name="l00522"></a>00522     <span class="comment">/* Simulate call processing delay */</span>
<a name="l00523"></a>00523     <span class="keywordflow">if</span> (app.server.delay) {
<a name="l00524"></a>00524         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> delay;
<a name="l00525"></a>00525 
<a name="l00526"></a>00526         call-&gt;ans_timer.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a70aed199d89e16a05bd9643efd3d665d">id</a> = 1;
<a name="l00527"></a>00527         call-&gt;ans_timer.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a96ce07b4b890b820ccd1e8365b88add6">user_data</a> = call;
<a name="l00528"></a>00528         call-&gt;ans_timer.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__timer__entry.htm#a13e63641afbb94298b79967585c0f642">cb</a> = &amp;answer_timer_cb;
<a name="l00529"></a>00529         
<a name="l00530"></a>00530         delay.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 0;
<a name="l00531"></a>00531         delay.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = app.server.delay;
<a name="l00532"></a>00532         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0b28411e03320ad6bb5f3316125b461c">pj_time_val_normalize</a>(&amp;delay);
<a name="l00533"></a>00533 
<a name="l00534"></a>00534         pjsip_endpt_schedule_timer(app.sip_endpt, &amp;call-&gt;ans_timer, &amp;delay);
<a name="l00535"></a>00535 
<a name="l00536"></a>00536     } <span class="keywordflow">else</span> {
<a name="l00537"></a>00537         <span class="comment">/* Send the 200 response immediately . */</span>  
<a name="l00538"></a>00538         status = send_response(call-&gt;inv, rdata, 200, &amp;has_initial);
<a name="l00539"></a>00539         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#ga9a6f79ac0dc0677698c5735474adfad7">PJ_ASSERT_ON_FAIL</a>(status == PJ_SUCCESS, <span class="keywordflow">return</span> PJ_TRUE);
<a name="l00540"></a>00540     }
<a name="l00541"></a>00541 
<a name="l00542"></a>00542     <span class="comment">/* Done */</span>
<a name="l00543"></a>00543     app.server.cur_state.call_cnt++;
<a name="l00544"></a>00544 
<a name="l00545"></a>00545     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 
<a name="l00549"></a>00549 
<a name="l00550"></a>00550 <span class="comment">/**************************************************************************</span>
<a name="l00551"></a>00551 <span class="comment"> * Default handler when incoming request is not handled by any other</span>
<a name="l00552"></a>00552 <span class="comment"> * modules.</span>
<a name="l00553"></a>00553 <span class="comment"> */</span>
<a name="l00554"></a>00554 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_responder_on_rx_request(pjsip_rx_data *rdata);
<a name="l00555"></a>00555 
<a name="l00556"></a>00556 <span class="comment">/* Module to handle incoming requests statelessly.</span>
<a name="l00557"></a>00557 <span class="comment"> */</span>
<a name="l00558"></a>00558 <span class="keyword">static</span> pjsip_module mod_responder =
<a name="l00559"></a>00559 {
<a name="l00560"></a>00560     NULL, NULL,                     <span class="comment">/* prev, next.              */</span>
<a name="l00561"></a>00561     { <span class="stringliteral">&quot;mod-responder&quot;</span>, 13 },        <span class="comment">/* Name.                    */</span>
<a name="l00562"></a>00562     -1,                             <span class="comment">/* Id                       */</span>
<a name="l00563"></a>00563     PJSIP_MOD_PRIORITY_APPLICATION+1, <span class="comment">/* Priority               */</span>
<a name="l00564"></a>00564     NULL,                           <span class="comment">/* load()                   */</span>
<a name="l00565"></a>00565     NULL,                           <span class="comment">/* start()                  */</span>
<a name="l00566"></a>00566     NULL,                           <span class="comment">/* stop()                   */</span>
<a name="l00567"></a>00567     NULL,                           <span class="comment">/* unload()                 */</span>
<a name="l00568"></a>00568     &amp;mod_responder_on_rx_request,   <span class="comment">/* on_rx_request()          */</span>
<a name="l00569"></a>00569     NULL,                           <span class="comment">/* on_rx_response()         */</span>
<a name="l00570"></a>00570     NULL,                           <span class="comment">/* on_tx_request.           */</span>
<a name="l00571"></a>00571     NULL,                           <span class="comment">/* on_tx_response()         */</span>
<a name="l00572"></a>00572     NULL,                           <span class="comment">/* on_tsx_state()           */</span>
<a name="l00573"></a>00573 };
<a name="l00574"></a>00574 
<a name="l00575"></a>00575 
<a name="l00576"></a>00576 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_responder_on_rx_request(pjsip_rx_data *rdata)
<a name="l00577"></a>00577 {
<a name="l00578"></a>00578     <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Not expecting request at this URI&quot;</span>);
<a name="l00579"></a>00579 
<a name="l00580"></a>00580     <span class="comment">/*</span>
<a name="l00581"></a>00581 <span class="comment">     * Respond any requests (except ACK!) with 500.</span>
<a name="l00582"></a>00582 <span class="comment">     */</span>
<a name="l00583"></a>00583     <span class="keywordflow">if</span> (rdata-&gt;msg_info.msg-&gt;line.req.method.id != PJSIP_ACK_METHOD) {
<a name="l00584"></a>00584         pjsip_endpt_respond_stateless(app.sip_endpt, rdata, 500, &amp;reason,
<a name="l00585"></a>00585                                       NULL, NULL);
<a name="l00586"></a>00586     }
<a name="l00587"></a>00587 
<a name="l00588"></a>00588     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00589"></a>00589 }
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 
<a name="l00592"></a>00592 
<a name="l00593"></a>00593 <span class="comment">/*****************************************************************************</span>
<a name="l00594"></a>00594 <span class="comment"> * Below is a simple module to log all incoming and outgoing SIP messages</span>
<a name="l00595"></a>00595 <span class="comment"> */</span>
<a name="l00596"></a>00596 
<a name="l00597"></a>00597 
<a name="l00598"></a>00598 <span class="comment">/* Notification on incoming messages */</span>
<a name="l00599"></a>00599 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> logger_on_rx_msg(pjsip_rx_data *rdata)
<a name="l00600"></a>00600 {
<a name="l00601"></a>00601     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;RX %d bytes %s from %s %s:%d:\n&quot;</span>
<a name="l00602"></a>00602                          <span class="stringliteral">&quot;%.*s\n&quot;</span>
<a name="l00603"></a>00603                          <span class="stringliteral">&quot;--end msg--&quot;</span>,
<a name="l00604"></a>00604                          rdata-&gt;msg_info.len,
<a name="l00605"></a>00605                          pjsip_rx_data_get_info(rdata),
<a name="l00606"></a>00606                          rdata-&gt;tp_info.transport-&gt;type_name,
<a name="l00607"></a>00607                          rdata-&gt;pkt_info.src_name,
<a name="l00608"></a>00608                          rdata-&gt;pkt_info.src_port,
<a name="l00609"></a>00609                          (<span class="keywordtype">int</span>)rdata-&gt;msg_info.len,
<a name="l00610"></a>00610                          rdata-&gt;msg_info.msg_buf));
<a name="l00611"></a>00611     
<a name="l00612"></a>00612     <span class="comment">/* Always return false, otherwise messages will not get processed! */</span>
<a name="l00613"></a>00613     <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00614"></a>00614 }
<a name="l00615"></a>00615 
<a name="l00616"></a>00616 <span class="comment">/* Notification on outgoing messages */</span>
<a name="l00617"></a>00617 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> logger_on_tx_msg(pjsip_tx_data *tdata)
<a name="l00618"></a>00618 {
<a name="l00619"></a>00619     
<a name="l00620"></a>00620     <span class="comment">/* Important note:</span>
<a name="l00621"></a>00621 <span class="comment">     *  tp_info field is only valid after outgoing messages has passed</span>
<a name="l00622"></a>00622 <span class="comment">     *  transport layer. So don&#39;t try to access tp_info when the module</span>
<a name="l00623"></a>00623 <span class="comment">     *  has lower priority than transport layer.</span>
<a name="l00624"></a>00624 <span class="comment">     */</span>
<a name="l00625"></a>00625 
<a name="l00626"></a>00626     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;TX %d bytes %s to %s %s:%d:\n&quot;</span>
<a name="l00627"></a>00627                          <span class="stringliteral">&quot;%.*s\n&quot;</span>
<a name="l00628"></a>00628                          <span class="stringliteral">&quot;--end msg--&quot;</span>,
<a name="l00629"></a>00629                          (tdata-&gt;buf.cur - tdata-&gt;buf.start),
<a name="l00630"></a>00630                          pjsip_tx_data_get_info(tdata),
<a name="l00631"></a>00631                          tdata-&gt;tp_info.transport-&gt;type_name,
<a name="l00632"></a>00632                          tdata-&gt;tp_info.dst_name,
<a name="l00633"></a>00633                          tdata-&gt;tp_info.dst_port,
<a name="l00634"></a>00634                          (<span class="keywordtype">int</span>)(tdata-&gt;buf.cur - tdata-&gt;buf.start),
<a name="l00635"></a>00635                          tdata-&gt;buf.start));
<a name="l00636"></a>00636 
<a name="l00637"></a>00637     <span class="comment">/* Always return success, otherwise message will not get sent! */</span>
<a name="l00638"></a>00638     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00639"></a>00639 }
<a name="l00640"></a>00640 
<a name="l00641"></a>00641 <span class="comment">/* The module instance. */</span>
<a name="l00642"></a>00642 <span class="keyword">static</span> pjsip_module msg_logger = 
<a name="l00643"></a>00643 {
<a name="l00644"></a>00644     NULL, NULL,                         <span class="comment">/* prev, next.          */</span>
<a name="l00645"></a>00645     { <span class="stringliteral">&quot;mod-siprtp-log&quot;</span>, 14 },           <span class="comment">/* Name.                */</span>
<a name="l00646"></a>00646     -1,                                 <span class="comment">/* Id                   */</span>
<a name="l00647"></a>00647     PJSIP_MOD_PRIORITY_TRANSPORT_LAYER-1,<span class="comment">/* Priority            */</span>
<a name="l00648"></a>00648     NULL,                               <span class="comment">/* load()               */</span>
<a name="l00649"></a>00649     NULL,                               <span class="comment">/* start()              */</span>
<a name="l00650"></a>00650     NULL,                               <span class="comment">/* stop()               */</span>
<a name="l00651"></a>00651     NULL,                               <span class="comment">/* unload()             */</span>
<a name="l00652"></a>00652     &amp;logger_on_rx_msg,                  <span class="comment">/* on_rx_request()      */</span>
<a name="l00653"></a>00653     &amp;logger_on_rx_msg,                  <span class="comment">/* on_rx_response()     */</span>
<a name="l00654"></a>00654     &amp;logger_on_tx_msg,                  <span class="comment">/* on_tx_request.       */</span>
<a name="l00655"></a>00655     &amp;logger_on_tx_msg,                  <span class="comment">/* on_tx_response()     */</span>
<a name="l00656"></a>00656     NULL,                               <span class="comment">/* on_tsx_state()       */</span>
<a name="l00657"></a>00657 
<a name="l00658"></a>00658 };
<a name="l00659"></a>00659 
<a name="l00660"></a>00660 
<a name="l00661"></a>00661 
<a name="l00662"></a>00662 <span class="comment">/**************************************************************************</span>
<a name="l00663"></a>00663 <span class="comment"> * Test Client.</span>
<a name="l00664"></a>00664 <span class="comment"> */</span>
<a name="l00665"></a>00665 
<a name="l00666"></a>00666 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_test_on_rx_response(pjsip_rx_data *rdata);
<a name="l00667"></a>00667 
<a name="l00668"></a>00668 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_media_update( pjsip_inv_session *inv,
<a name="l00669"></a>00669                                   <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status);
<a name="l00670"></a>00670 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_state_changed( pjsip_inv_session *inv, 
<a name="l00671"></a>00671                                    pjsip_event *e);
<a name="l00672"></a>00672 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_forked(pjsip_inv_session *inv, pjsip_event *e);
<a name="l00673"></a>00673 
<a name="l00674"></a>00674 
<a name="l00675"></a>00675 <span class="comment">/* Module to handle incoming requests callly.</span>
<a name="l00676"></a>00676 <span class="comment"> */</span>
<a name="l00677"></a>00677 <span class="keyword">static</span> pjsip_module mod_test =
<a name="l00678"></a>00678 {
<a name="l00679"></a>00679     NULL, NULL,                     <span class="comment">/* prev, next.              */</span>
<a name="l00680"></a>00680     { <span class="stringliteral">&quot;mod-test&quot;</span>, 8 },              <span class="comment">/* Name.                    */</span>
<a name="l00681"></a>00681     -1,                             <span class="comment">/* Id                       */</span>
<a name="l00682"></a>00682     PJSIP_MOD_PRIORITY_APPLICATION, <span class="comment">/* Priority                 */</span>
<a name="l00683"></a>00683     NULL,                           <span class="comment">/* load()                   */</span>
<a name="l00684"></a>00684     NULL,                           <span class="comment">/* start()                  */</span>
<a name="l00685"></a>00685     NULL,                           <span class="comment">/* stop()                   */</span>
<a name="l00686"></a>00686     NULL,                           <span class="comment">/* unload()                 */</span>
<a name="l00687"></a>00687     NULL,                           <span class="comment">/* on_rx_request()          */</span>
<a name="l00688"></a>00688     &amp;mod_test_on_rx_response,       <span class="comment">/* on_rx_response()         */</span>
<a name="l00689"></a>00689     NULL,                           <span class="comment">/* on_tx_request.           */</span>
<a name="l00690"></a>00690     NULL,                           <span class="comment">/* on_tx_response()         */</span>
<a name="l00691"></a>00691     NULL,                           <span class="comment">/* on_tsx_state()           */</span>
<a name="l00692"></a>00692 };
<a name="l00693"></a>00693 
<a name="l00694"></a>00694 
<a name="l00695"></a>00695 <span class="keyword">static</span> <span class="keywordtype">void</span> report_completion(<span class="keywordtype">int</span> status_code)
<a name="l00696"></a>00696 {
<a name="l00697"></a>00697     app.client.job_finished++;
<a name="l00698"></a>00698     <span class="keywordflow">if</span> (status_code &gt;= 200 &amp;&amp; status_code &lt; 800)
<a name="l00699"></a>00699         app.client.response_codes[status_code]++;
<a name="l00700"></a>00700     app.client.total_responses++;
<a name="l00701"></a>00701     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;app.client.last_completion);
<a name="l00702"></a>00702 }
<a name="l00703"></a>00703 
<a name="l00704"></a>00704 
<a name="l00705"></a>00705 <span class="comment">/* Handler when response is received. */</span>
<a name="l00706"></a>00706 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> mod_test_on_rx_response(pjsip_rx_data *rdata)
<a name="l00707"></a>00707 {
<a name="l00708"></a>00708     <span class="keywordflow">if</span> (pjsip_rdata_get_tsx(rdata) == NULL) {
<a name="l00709"></a>00709         report_completion(rdata-&gt;msg_info.msg-&gt;line.status.code);
<a name="l00710"></a>00710     }
<a name="l00711"></a>00711 
<a name="l00712"></a>00712     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00713"></a>00713 }
<a name="l00714"></a>00714 
<a name="l00715"></a>00715 
<a name="l00716"></a>00716 <span class="comment">/*</span>
<a name="l00717"></a>00717 <span class="comment"> * Create app</span>
<a name="l00718"></a>00718 <span class="comment"> */</span>
<a name="l00719"></a>00719 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> create_app(<span class="keywordtype">void</span>)
<a name="l00720"></a>00720 {
<a name="l00721"></a>00721     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00722"></a>00722 
<a name="l00723"></a>00723     status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga069615152140fa2df009cebc8a36b769">pj_init</a>();
<a name="l00724"></a>00724     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00725"></a>00725         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error initializing pjlib&quot;</span>, status);
<a name="l00726"></a>00726         <span class="keywordflow">return</span> status;
<a name="l00727"></a>00727     }
<a name="l00728"></a>00728 
<a name="l00729"></a>00729     <span class="comment">/* init PJLIB-UTIL: */</span>
<a name="l00730"></a>00730     status = <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__BASE.htm#gaf44fef477c4b0e38a99004965fc55110">pjlib_util_init</a>();
<a name="l00731"></a>00731     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00732"></a>00732 
<a name="l00733"></a>00733     <span class="comment">/* Must create a pool factory before we can allocate any memory. */</span>
<a name="l00734"></a>00734     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__CACHING__POOL.htm#gafbf5400f191e2095240bc6472754e94f">pj_caching_pool_init</a>(&amp;app.cp, &amp;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL__FACTORY.htm#ga98cf758eafb888f318a8de7f396f47ca">pj_pool_factory_default_policy</a>, 
<a name="l00735"></a>00735                          CACHING_POOL_SIZE);
<a name="l00736"></a>00736 
<a name="l00737"></a>00737     <span class="comment">/* Create application pool for misc. */</span>
<a name="l00738"></a>00738     app.pool = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(&amp;app.cp.factory, <span class="stringliteral">&quot;app&quot;</span>, 1000, 1000, NULL);
<a name="l00739"></a>00739 
<a name="l00740"></a>00740     <span class="comment">/* Create the endpoint: */</span>
<a name="l00741"></a>00741     status = pjsip_endpt_create(&amp;app.cp.factory, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname</a>()-&gt;ptr, 
<a name="l00742"></a>00742                                 &amp;app.sip_endpt);
<a name="l00743"></a>00743     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00744"></a>00744 
<a name="l00745"></a>00745 
<a name="l00746"></a>00746     <span class="keywordflow">return</span> status;
<a name="l00747"></a>00747 }
<a name="l00748"></a>00748 
<a name="l00749"></a>00749 
<a name="l00750"></a>00750 <span class="comment">/*</span>
<a name="l00751"></a>00751 <span class="comment"> * Init SIP stack</span>
<a name="l00752"></a>00752 <span class="comment"> */</span>
<a name="l00753"></a>00753 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> init_sip()
<a name="l00754"></a>00754 {
<a name="l00755"></a>00755     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status = -1;
<a name="l00756"></a>00756 
<a name="l00757"></a>00757     <span class="comment">/* Add UDP/TCP transport. */</span>
<a name="l00758"></a>00758     {
<a name="l00759"></a>00759         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;
<a name="l00760"></a>00760         pjsip_host_port addrname;
<a name="l00761"></a>00761         <span class="keyword">const</span> <span class="keywordtype">char</span> *transport_type = NULL;
<a name="l00762"></a>00762 
<a name="l00763"></a>00763         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));
<a name="l00764"></a>00764         addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();
<a name="l00765"></a>00765         addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__in__addr.htm#aa438bba3f010df65ae964a41bccb156b">s_addr</a> = 0;
<a name="l00766"></a>00766         addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>((<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)app.local_port);
<a name="l00767"></a>00767 
<a name="l00768"></a>00768         <span class="keywordflow">if</span> (app.local_addr.slen) {
<a name="l00769"></a>00769             addrname.host = app.local_addr;
<a name="l00770"></a>00770             addrname.port = 5060;
<a name="l00771"></a>00771         } 
<a name="l00772"></a>00772         <span class="keywordflow">if</span> (app.local_port != 0)
<a name="l00773"></a>00773             addrname.port = app.local_port;
<a name="l00774"></a>00774 
<a name="l00775"></a>00775         <span class="keywordflow">if</span> (0) {
<a name="l00776"></a>00776 <span class="preprocessor">#if defined(PJ_HAS_TCP) &amp;&amp; PJ_HAS_TCP!=0</span>
<a name="l00777"></a>00777 <span class="preprocessor"></span>        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (app.use_tcp) {
<a name="l00778"></a>00778             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a> local_addr;
<a name="l00779"></a>00779             pjsip_tpfactory *tpfactory;
<a name="l00780"></a>00780             
<a name="l00781"></a>00781             transport_type = <span class="stringliteral">&quot;tcp&quot;</span>;
<a name="l00782"></a>00782             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;local_addr, 0, (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)app.local_port);
<a name="l00783"></a>00783             status = pjsip_tcp_transport_start(app.sip_endpt, &amp;local_addr,
<a name="l00784"></a>00784                                                app.thread_count, &amp;tpfactory);
<a name="l00785"></a>00785             <span class="keywordflow">if</span> (status == PJ_SUCCESS) {
<a name="l00786"></a>00786                 app.local_addr = tpfactory-&gt;addr_name.host;
<a name="l00787"></a>00787                 app.local_port = tpfactory-&gt;addr_name.port;
<a name="l00788"></a>00788             }
<a name="l00789"></a>00789 <span class="preprocessor">#endif</span>
<a name="l00790"></a>00790 <span class="preprocessor"></span>        } <span class="keywordflow">else</span> {
<a name="l00791"></a>00791             pjsip_transport *tp;
<a name="l00792"></a>00792 
<a name="l00793"></a>00793             transport_type = <span class="stringliteral">&quot;udp&quot;</span>;
<a name="l00794"></a>00794             status = pjsip_udp_transport_start(app.sip_endpt, &amp;addr, 
<a name="l00795"></a>00795                                                (app.local_addr.slen ? &amp;addrname:NULL),
<a name="l00796"></a>00796                                                app.thread_count, &amp;tp);
<a name="l00797"></a>00797             <span class="keywordflow">if</span> (status == PJ_SUCCESS) {
<a name="l00798"></a>00798                 app.local_addr = tp-&gt;local_name.host;
<a name="l00799"></a>00799                 app.local_port = tp-&gt;local_name.port;
<a name="l00800"></a>00800             }
<a name="l00801"></a>00801 
<a name="l00802"></a>00802         }
<a name="l00803"></a>00803         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00804"></a>00804             app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to start transport&quot;</span>, status);
<a name="l00805"></a>00805             <span class="keywordflow">return</span> status;
<a name="l00806"></a>00806         }
<a name="l00807"></a>00807 
<a name="l00808"></a>00808         app.local_uri.ptr = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(app.pool, 128);
<a name="l00809"></a>00809         app.local_uri.slen = pj_ansi_sprintf(app.local_uri.ptr, 
<a name="l00810"></a>00810                                              <span class="stringliteral">&quot;&lt;sip:pjsip-perf@%.*s:%d;transport=%s&gt;&quot;</span>,
<a name="l00811"></a>00811                                              (<span class="keywordtype">int</span>)app.local_addr.slen,
<a name="l00812"></a>00812                                              app.local_addr.ptr,
<a name="l00813"></a>00813                                              app.local_port,
<a name="l00814"></a>00814                                              transport_type);
<a name="l00815"></a>00815 
<a name="l00816"></a>00816         app.local_contact = app.local_uri;
<a name="l00817"></a>00817     }
<a name="l00818"></a>00818 
<a name="l00819"></a>00819     <span class="comment">/* </span>
<a name="l00820"></a>00820 <span class="comment">     * Init transaction layer.</span>
<a name="l00821"></a>00821 <span class="comment">     * This will create/initialize transaction hash tables etc.</span>
<a name="l00822"></a>00822 <span class="comment">     */</span>
<a name="l00823"></a>00823     status = pjsip_tsx_layer_init_module(app.sip_endpt);
<a name="l00824"></a>00824     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00825"></a>00825 
<a name="l00826"></a>00826     <span class="comment">/*  Initialize UA layer. */</span>
<a name="l00827"></a>00827     status = pjsip_ua_init_module( app.sip_endpt, NULL );
<a name="l00828"></a>00828     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00829"></a>00829 
<a name="l00830"></a>00830     <span class="comment">/* Initialize 100rel support */</span>
<a name="l00831"></a>00831     status = pjsip_100rel_init_module(app.sip_endpt);
<a name="l00832"></a>00832     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00833"></a>00833 
<a name="l00834"></a>00834     <span class="comment">/*  Init invite session module. */</span>
<a name="l00835"></a>00835     {
<a name="l00836"></a>00836         pjsip_inv_callback inv_cb;
<a name="l00837"></a>00837 
<a name="l00838"></a>00838         <span class="comment">/* Init the callback for INVITE session: */</span>
<a name="l00839"></a>00839         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;inv_cb, <span class="keyword">sizeof</span>(inv_cb));
<a name="l00840"></a>00840         inv_cb.on_state_changed = &amp;call_on_state_changed;
<a name="l00841"></a>00841         inv_cb.on_new_session = &amp;call_on_forked;
<a name="l00842"></a>00842         inv_cb.on_media_update = &amp;call_on_media_update;
<a name="l00843"></a>00843 
<a name="l00844"></a>00844         <span class="comment">/* Initialize invite session module:  */</span>
<a name="l00845"></a>00845         status = pjsip_inv_usage_init(app.sip_endpt, &amp;inv_cb);
<a name="l00846"></a>00846         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00847"></a>00847     }
<a name="l00848"></a>00848 
<a name="l00849"></a>00849     <span class="comment">/* Register our module to receive incoming requests. */</span>
<a name="l00850"></a>00850     status = pjsip_endpt_register_module( app.sip_endpt, &amp;mod_test);
<a name="l00851"></a>00851     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00852"></a>00852 
<a name="l00853"></a>00853 
<a name="l00854"></a>00854     <span class="comment">/* Register stateless server module */</span>
<a name="l00855"></a>00855     status = pjsip_endpt_register_module( app.sip_endpt, &amp;mod_stateless_server);
<a name="l00856"></a>00856     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00857"></a>00857 
<a name="l00858"></a>00858     <span class="comment">/* Register default responder module */</span>
<a name="l00859"></a>00859     status = pjsip_endpt_register_module( app.sip_endpt, &amp;mod_responder);
<a name="l00860"></a>00860     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00861"></a>00861 
<a name="l00862"></a>00862     <span class="comment">/* Register stateless server module */</span>
<a name="l00863"></a>00863     status = pjsip_endpt_register_module( app.sip_endpt, &amp;mod_stateful_server);
<a name="l00864"></a>00864     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00865"></a>00865 
<a name="l00866"></a>00866 
<a name="l00867"></a>00867     <span class="comment">/* Register call server module */</span>
<a name="l00868"></a>00868     status = pjsip_endpt_register_module( app.sip_endpt, &amp;mod_call_server);
<a name="l00869"></a>00869     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00870"></a>00870 
<a name="l00871"></a>00871 
<a name="l00872"></a>00872     <span class="comment">/* Done */</span>
<a name="l00873"></a>00873     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00874"></a>00874 }
<a name="l00875"></a>00875 
<a name="l00876"></a>00876 
<a name="l00877"></a>00877 <span class="comment">/*</span>
<a name="l00878"></a>00878 <span class="comment"> * Destroy SIP</span>
<a name="l00879"></a>00879 <span class="comment"> */</span>
<a name="l00880"></a>00880 <span class="keyword">static</span> <span class="keywordtype">void</span> destroy_app()
<a name="l00881"></a>00881 {
<a name="l00882"></a>00882     <span class="keywordtype">unsigned</span> i;
<a name="l00883"></a>00883 
<a name="l00884"></a>00884     app.thread_quit = 1;
<a name="l00885"></a>00885     <span class="keywordflow">for</span> (i=0; i&lt;app.thread_count; ++i) {
<a name="l00886"></a>00886         <span class="keywordflow">if</span> (app.thread[i]) {
<a name="l00887"></a>00887             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(app.thread[i]);
<a name="l00888"></a>00888             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(app.thread[i]);
<a name="l00889"></a>00889             app.thread[i] = NULL;
<a name="l00890"></a>00890         }
<a name="l00891"></a>00891     }
<a name="l00892"></a>00892 
<a name="l00893"></a>00893     <span class="keywordflow">if</span> (app.sip_endpt) {
<a name="l00894"></a>00894         pjsip_endpt_destroy(app.sip_endpt);
<a name="l00895"></a>00895         app.sip_endpt = NULL;
<a name="l00896"></a>00896     }
<a name="l00897"></a>00897 
<a name="l00898"></a>00898     <span class="keywordflow">if</span> (app.pool) {
<a name="l00899"></a>00899         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(app.pool);
<a name="l00900"></a>00900         app.pool = NULL;
<a name="l00901"></a>00901         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Peak memory size: %uMB&quot;</span>,
<a name="l00902"></a>00902                              app.cp.peak_used_size / 1000000));
<a name="l00903"></a>00903         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__CACHING__POOL.htm#ga4c912e7d9e08dae33c2fecea9f1949bc">pj_caching_pool_destroy</a>(&amp;app.cp);
<a name="l00904"></a>00904     }
<a name="l00905"></a>00905 
<a name="l00906"></a>00906     <span class="comment">/* Shutdown PJLIB */</span>
<a name="l00907"></a>00907     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gad42209dcf11f957ed9f1790e30f519cd">pj_shutdown</a>();
<a name="l00908"></a>00908 }
<a name="l00909"></a>00909 
<a name="l00910"></a>00910 
<a name="l00911"></a>00911 <span class="comment">/*</span>
<a name="l00912"></a>00912 <span class="comment"> * Init media stack.</span>
<a name="l00913"></a>00913 <span class="comment"> */</span>
<a name="l00914"></a>00914 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> init_media()
<a name="l00915"></a>00915 {
<a name="l00916"></a>00916     <span class="keywordtype">unsigned</span>    i;
<a name="l00917"></a>00917     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a> rtp_port;
<a name="l00918"></a>00918     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00919"></a>00919 
<a name="l00920"></a>00920 
<a name="l00921"></a>00921     <span class="comment">/* Initialize media endpoint so that at least error subsystem is properly</span>
<a name="l00922"></a>00922 <span class="comment">     * initialized.</span>
<a name="l00923"></a>00923 <span class="comment">     */</span>
<a name="l00924"></a>00924     status = <a class="code" href="group__PJMED__ENDPT.htm#ga2865efcd255dbcb05ede33dbae5c27f5">pjmedia_endpt_create</a>(&amp;app.cp.factory, 
<a name="l00925"></a>00925                                   pjsip_endpt_get_ioqueue(app.sip_endpt), 0, 
<a name="l00926"></a>00926                                   &amp;app.med_endpt);
<a name="l00927"></a>00927     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00928"></a>00928 
<a name="l00929"></a>00929 
<a name="l00930"></a>00930     <span class="comment">/* Must register all codecs to be supported */</span>
<a name="l00931"></a>00931 <span class="preprocessor">#if defined(PJMEDIA_HAS_G711_CODEC) &amp;&amp; PJMEDIA_HAS_G711_CODEC!=0</span>
<a name="l00932"></a>00932 <span class="preprocessor"></span>    <a class="code" href="group__PJMED__G711.htm#gaa4cc7591d63c308e1f2e7821240abf14">pjmedia_codec_g711_init</a>(app.med_endpt);
<a name="l00933"></a>00933 <span class="preprocessor">#endif</span>
<a name="l00934"></a>00934 <span class="preprocessor"></span><span class="preprocessor">#if defined(PJMEDIA_HAS_GSM_CODEC) &amp;&amp; PJMEDIA_HAS_GSM_CODEC!=0</span>
<a name="l00935"></a>00935 <span class="preprocessor"></span>    <a class="code" href="group__PJMED__GSM.htm#ga54c6443b9c2424912cdd6c872baab91d">pjmedia_codec_gsm_init</a>(app.med_endpt);
<a name="l00936"></a>00936 <span class="preprocessor">#endif</span>
<a name="l00937"></a>00937 <span class="preprocessor"></span><span class="preprocessor">#if defined(PJMEDIA_HAS_SPEEX_CODEC) &amp;&amp; PJMEDIA_HAS_SPEEX_CODEC!=0</span>
<a name="l00938"></a>00938 <span class="preprocessor"></span>    <a class="code" href="group__PJMED__SPEEX.htm#ga693061056507f242d547de4f84a10d3d">pjmedia_codec_speex_init</a>(app.med_endpt, <a class="code" href="group__PJMED__SPEEX.htm#gga16a76b551c3e7584d808452083192e54a63bde707bae70cbab4ad914222656660">PJMEDIA_SPEEX_NO_UWB</a>, 3, 3);
<a name="l00939"></a>00939 <span class="preprocessor">#endif</span>
<a name="l00940"></a>00940 <span class="preprocessor"></span><span class="preprocessor">#if defined(PJMEDIA_HAS_G722_CODEC) &amp;&amp; PJMEDIA_HAS_G722_CODEC!=0</span>
<a name="l00941"></a>00941 <span class="preprocessor"></span>    <a class="code" href="group__PJMED__G722.htm#gaebc40f2cfbc264d6a5e6f1db0ddc83fd">pjmedia_codec_g722_init</a>(app.med_endpt);
<a name="l00942"></a>00942 <span class="preprocessor">#endif</span>
<a name="l00943"></a>00943 <span class="preprocessor"></span><span class="preprocessor">#if defined(PJMEDIA_HAS_OPENCORE_AMRNB_CODEC) &amp;&amp; PJMEDIA_HAS_OPENCORE_AMRNB_CODEC!=0</span>
<a name="l00944"></a>00944 <span class="preprocessor"></span>    <a class="code" href="group__PJMED__OC__AMRNB.htm#ga02e779f05ff2e57c61a63d846cb85754">pjmedia_codec_opencore_amrnb_init</a>(app.med_endpt);
<a name="l00945"></a>00945 <span class="preprocessor">#endif</span>
<a name="l00946"></a>00946 <span class="preprocessor"></span>
<a name="l00947"></a>00947     <span class="comment">/* Init dummy socket addresses */</span>
<a name="l00948"></a>00948     app.skinfo_cnt = 0;
<a name="l00949"></a>00949     <span class="keywordflow">for</span> (i=0, rtp_port=4000; i&lt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(app.skinfo); ++i, rtp_port+=2) {
<a name="l00950"></a>00950         <a class="code" href="structpjmedia__sock__info.htm">pjmedia_sock_info</a> *skinfo;
<a name="l00951"></a>00951 
<a name="l00952"></a>00952         skinfo = &amp;app.skinfo[i];
<a name="l00953"></a>00953         
<a name="l00954"></a>00954         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;skinfo-&gt;<a class="code" href="structpjmedia__sock__info.htm#aa2cecdb5ff13922865a33d49f3ccd0c8">rtp_addr_name</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm#ab25ec448ae63acfdd2aa0f3ef2fd10b8">ipv4</a>, &amp;app.local_addr,
<a name="l00955"></a>00955                             (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)rtp_port);
<a name="l00956"></a>00956         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;skinfo-&gt;<a class="code" href="structpjmedia__sock__info.htm#aa2cecdb5ff13922865a33d49f3ccd0c8">rtp_addr_name</a>.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm#ab25ec448ae63acfdd2aa0f3ef2fd10b8">ipv4</a>, &amp;app.local_addr,
<a name="l00957"></a>00957                             (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)(rtp_port+1));
<a name="l00958"></a>00958         app.skinfo_cnt++;
<a name="l00959"></a>00959     }
<a name="l00960"></a>00960 
<a name="l00961"></a>00961     <span class="comment">/* Generate dummy SDP */</span>
<a name="l00962"></a>00962     dummy_sdp_str.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> = pj_ansi_strlen(dummy_sdp_str.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>);
<a name="l00963"></a>00963     status = <a class="code" href="group__PJMEDIA__SDP.htm#ga11acd6dd72b802c0133848ca83ace3b1">pjmedia_sdp_parse</a>(app.pool, dummy_sdp_str.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>, dummy_sdp_str.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a>, 
<a name="l00964"></a>00964                                &amp;app.dummy_sdp);
<a name="l00965"></a>00965     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00966"></a>00966         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error parsing dummy SDP&quot;</span>, status);
<a name="l00967"></a>00967         <span class="keywordflow">return</span> status;
<a name="l00968"></a>00968     }
<a name="l00969"></a>00969 
<a name="l00970"></a>00970 
<a name="l00971"></a>00971     <span class="comment">/* Done */</span>
<a name="l00972"></a>00972     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00973"></a>00973 }
<a name="l00974"></a>00974 
<a name="l00975"></a>00975 
<a name="l00976"></a>00976 <span class="comment">/* This is notification from the call about media negotiation</span>
<a name="l00977"></a>00977 <span class="comment"> * status. This is called for client calls only.</span>
<a name="l00978"></a>00978 <span class="comment"> */</span>
<a name="l00979"></a>00979 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_media_update( pjsip_inv_session *inv,
<a name="l00980"></a>00980                                   <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)
<a name="l00981"></a>00981 {
<a name="l00982"></a>00982     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00983"></a>00983         pjsip_tx_data *tdata;
<a name="l00984"></a>00984         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00985"></a>00985 
<a name="l00986"></a>00986         status = pjsip_inv_end_session(inv, PJSIP_SC_UNSUPPORTED_MEDIA_TYPE, 
<a name="l00987"></a>00987                                        NULL, &amp;tdata);
<a name="l00988"></a>00988         <span class="keywordflow">if</span> (status == PJ_SUCCESS &amp;&amp; tdata)
<a name="l00989"></a>00989             status = pjsip_inv_send_msg(inv, tdata);
<a name="l00990"></a>00990     }
<a name="l00991"></a>00991 }
<a name="l00992"></a>00992 
<a name="l00993"></a>00993 
<a name="l00994"></a>00994 <span class="comment">/* This is notification from the call when the call state has changed.</span>
<a name="l00995"></a>00995 <span class="comment"> * This is called for client calls only.</span>
<a name="l00996"></a>00996 <span class="comment"> */</span>
<a name="l00997"></a>00997 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_state_changed( pjsip_inv_session *inv, 
<a name="l00998"></a>00998                                    pjsip_event *e)
<a name="l00999"></a>00999 {
<a name="l01000"></a>01000     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);
<a name="l01001"></a>01001 
<a name="l01002"></a>01002     <span class="comment">/* Bail out if the session has been counted before */</span>
<a name="l01003"></a>01003     <span class="keywordflow">if</span> (inv-&gt;mod_data[mod_test.id] != NULL)
<a name="l01004"></a>01004         <span class="keywordflow">return</span>;
<a name="l01005"></a>01005 
<a name="l01006"></a>01006     <span class="comment">/* Bail out if this is not an outgoing call */</span>
<a name="l01007"></a>01007     <span class="keywordflow">if</span> (inv-&gt;role != PJSIP_UAC_ROLE)
<a name="l01008"></a>01008         <span class="keywordflow">return</span>;
<a name="l01009"></a>01009 
<a name="l01010"></a>01010     <span class="keywordflow">if</span> (inv-&gt;state == PJSIP_INV_STATE_CONFIRMED) {
<a name="l01011"></a>01011         pjsip_tx_data *tdata;
<a name="l01012"></a>01012         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01013"></a>01013 
<a name="l01014"></a>01014         <span class="comment">//report_completion(200);</span>
<a name="l01015"></a>01015         <span class="comment">//inv-&gt;mod_data[mod_test.id] = (void*)1;</span>
<a name="l01016"></a>01016 
<a name="l01017"></a>01017         status = pjsip_inv_end_session(inv, PJSIP_SC_OK, NULL, &amp;tdata);
<a name="l01018"></a>01018         <span class="keywordflow">if</span> (status == PJ_SUCCESS &amp;&amp; tdata)
<a name="l01019"></a>01019             status = pjsip_inv_send_msg(inv, tdata);
<a name="l01020"></a>01020 
<a name="l01021"></a>01021     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (inv-&gt;state == PJSIP_INV_STATE_DISCONNECTED) {
<a name="l01022"></a>01022         report_completion(inv-&gt;cause);
<a name="l01023"></a>01023         inv-&gt;mod_data[mod_test.id] = (<span class="keywordtype">void</span>*)1;
<a name="l01024"></a>01024     }
<a name="l01025"></a>01025 }
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 
<a name="l01028"></a>01028 <span class="comment">/* Not implemented for now */</span>
<a name="l01029"></a>01029 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_forked(pjsip_inv_session *inv, pjsip_event *e)
<a name="l01030"></a>01030 {
<a name="l01031"></a>01031     <span class="comment">/* Do nothing */</span>
<a name="l01032"></a>01032     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(inv);
<a name="l01033"></a>01033     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);
<a name="l01034"></a>01034 }
<a name="l01035"></a>01035 
<a name="l01036"></a>01036 
<a name="l01037"></a>01037 <span class="comment">/*</span>
<a name="l01038"></a>01038 <span class="comment"> * Make outgoing call.</span>
<a name="l01039"></a>01039 <span class="comment"> */</span>
<a name="l01040"></a>01040 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> make_call(<span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *dst_uri)
<a name="l01041"></a>01041 {
<a name="l01042"></a>01042     <span class="keyword">struct </span>call *call;
<a name="l01043"></a>01043     pjsip_dialog *dlg;
<a name="l01044"></a>01044     <a class="code" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp;
<a name="l01045"></a>01045     pjsip_tx_data *tdata;
<a name="l01046"></a>01046     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01047"></a>01047 
<a name="l01048"></a>01048 
<a name="l01049"></a>01049     <span class="comment">/* Create UAC dialog */</span>
<a name="l01050"></a>01050     status = pjsip_dlg_create_uac( pjsip_ua_instance(), 
<a name="l01051"></a>01051                                    &amp;app.local_uri,      <span class="comment">/* local URI        */</span>
<a name="l01052"></a>01052                                    &amp;app.local_contact,  <span class="comment">/* local Contact    */</span>
<a name="l01053"></a>01053                                    dst_uri,             <span class="comment">/* remote URI       */</span>
<a name="l01054"></a>01054                                    dst_uri,             <span class="comment">/* remote target    */</span>
<a name="l01055"></a>01055                                    &amp;dlg);               <span class="comment">/* dialog           */</span>
<a name="l01056"></a>01056     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01057"></a>01057         <span class="keywordflow">return</span> status;
<a name="l01058"></a>01058     }
<a name="l01059"></a>01059 
<a name="l01060"></a>01060     <span class="comment">/* Create call */</span>
<a name="l01061"></a>01061     call = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a>(dlg-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> call));
<a name="l01062"></a>01062 
<a name="l01063"></a>01063     <span class="comment">/* Create SDP */</span>
<a name="l01064"></a>01064     <span class="keywordflow">if</span> (app.real_sdp) {
<a name="l01065"></a>01065         status = <a class="code" href="group__PJMED__ENDPT.htm#gaa49360a690c292dddd722b39c2f8c8bb">pjmedia_endpt_create_sdp</a>(app.med_endpt, dlg-&gt;pool, 1, 
<a name="l01066"></a>01066                                           app.skinfo, &amp;sdp);
<a name="l01067"></a>01067         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01068"></a>01068             pjsip_dlg_terminate(dlg);
<a name="l01069"></a>01069             <span class="keywordflow">return</span> status;
<a name="l01070"></a>01070         }
<a name="l01071"></a>01071     } <span class="keywordflow">else</span>
<a name="l01072"></a>01072         sdp = app.dummy_sdp;
<a name="l01073"></a>01073 
<a name="l01074"></a>01074     <span class="comment">/* Create the INVITE session. */</span>
<a name="l01075"></a>01075     status = pjsip_inv_create_uac( dlg, sdp, 0, &amp;call-&gt;inv);
<a name="l01076"></a>01076     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01077"></a>01077         pjsip_dlg_terminate(dlg);
<a name="l01078"></a>01078         <span class="keywordflow">return</span> status;
<a name="l01079"></a>01079     }
<a name="l01080"></a>01080 
<a name="l01081"></a>01081 
<a name="l01082"></a>01082     <span class="comment">/* Create initial INVITE request.</span>
<a name="l01083"></a>01083 <span class="comment">     * This INVITE request will contain a perfectly good request and </span>
<a name="l01084"></a>01084 <span class="comment">     * an SDP body as well.</span>
<a name="l01085"></a>01085 <span class="comment">     */</span>
<a name="l01086"></a>01086     status = pjsip_inv_invite(call-&gt;inv, &amp;tdata);
<a name="l01087"></a>01087     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l01088"></a>01088 
<a name="l01089"></a>01089 
<a name="l01090"></a>01090     <span class="comment">/* Send initial INVITE request. </span>
<a name="l01091"></a>01091 <span class="comment">     * From now on, the invite session&#39;s state will be reported to us</span>
<a name="l01092"></a>01092 <span class="comment">     * via the invite session callbacks.</span>
<a name="l01093"></a>01093 <span class="comment">     */</span>
<a name="l01094"></a>01094     status = pjsip_inv_send_msg(call-&gt;inv, tdata);
<a name="l01095"></a>01095     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l01096"></a>01096 
<a name="l01097"></a>01097 
<a name="l01098"></a>01098     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l01099"></a>01099 }
<a name="l01100"></a>01100 
<a name="l01101"></a>01101 
<a name="l01102"></a>01102 <span class="comment">/*</span>
<a name="l01103"></a>01103 <span class="comment"> * Verify that valid SIP url is given.</span>
<a name="l01104"></a>01104 <span class="comment"> */</span>
<a name="l01105"></a>01105 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> verify_sip_url(<span class="keyword">const</span> <span class="keywordtype">char</span> *c_url)
<a name="l01106"></a>01106 {
<a name="l01107"></a>01107     pjsip_uri *p;
<a name="l01108"></a>01108     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *pool;
<a name="l01109"></a>01109     <span class="keywordtype">char</span> *url;
<a name="l01110"></a>01110     <span class="keywordtype">int</span> len = (c_url ? pj_ansi_strlen(c_url) : 0);
<a name="l01111"></a>01111 
<a name="l01112"></a>01112     <span class="keywordflow">if</span> (!len) <span class="keywordflow">return</span> -1;
<a name="l01113"></a>01113 
<a name="l01114"></a>01114     pool = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(&amp;app.cp.factory, <span class="stringliteral">&quot;check%p&quot;</span>, 1024, 0, NULL);
<a name="l01115"></a>01115     <span class="keywordflow">if</span> (!pool) <span class="keywordflow">return</span> PJ_ENOMEM;
<a name="l01116"></a>01116 
<a name="l01117"></a>01117     url = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, len+1);
<a name="l01118"></a>01118     pj_ansi_strcpy(url, c_url);
<a name="l01119"></a>01119     url[len] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l01120"></a>01120 
<a name="l01121"></a>01121     p = pjsip_parse_uri(pool, url, len, 0);
<a name="l01122"></a>01122     <span class="keywordflow">if</span> (!p || <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga508848e33f034d920be8333ccdf7e077">pj_stricmp2</a>(pjsip_uri_get_scheme(p), <span class="stringliteral">&quot;sip&quot;</span>) != 0)
<a name="l01123"></a>01123         p = NULL;
<a name="l01124"></a>01124 
<a name="l01125"></a>01125     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
<a name="l01126"></a>01126     <span class="keywordflow">return</span> p ? 0 : -1;
<a name="l01127"></a>01127 }
<a name="l01128"></a>01128 
<a name="l01129"></a>01129 
<a name="l01130"></a>01130 <span class="keyword">static</span> <span class="keywordtype">void</span> usage(<span class="keywordtype">void</span>)
<a name="l01131"></a>01131 {
<a name="l01132"></a>01132     printf(
<a name="l01133"></a>01133         <span class="stringliteral">&quot;Usage:\n&quot;</span>
<a name="l01134"></a>01134         <span class="stringliteral">&quot;   pjsip-perf [OPTIONS]        -- to start as server\n&quot;</span>
<a name="l01135"></a>01135         <span class="stringliteral">&quot;   pjsip-perf [OPTIONS] URL    -- to call server (possibly itself)\n&quot;</span>
<a name="l01136"></a>01136         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l01137"></a>01137         <span class="stringliteral">&quot;where:\n&quot;</span>
<a name="l01138"></a>01138         <span class="stringliteral">&quot;   URL                     The SIP URL to be contacted.\n&quot;</span>
<a name="l01139"></a>01139         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l01140"></a>01140         <span class="stringliteral">&quot;Client options:\n&quot;</span>
<a name="l01141"></a>01141         <span class="stringliteral">&quot;   --method=METHOD, -m     Set test method (set to INVITE for call benchmark)\n&quot;</span>
<a name="l01142"></a>01142         <span class="stringliteral">&quot;                           [default: OPTIONS]\n&quot;</span>
<a name="l01143"></a>01143         <span class="stringliteral">&quot;   --count=N, -n           Set total number of requests to initiate\n&quot;</span>
<a name="l01144"></a>01144         <span class="stringliteral">&quot;                           [default=%d]\n&quot;</span>
<a name="l01145"></a>01145         <span class="stringliteral">&quot;   --stateless, -s         Set to operate in stateless mode\n&quot;</span>
<a name="l01146"></a>01146         <span class="stringliteral">&quot;                           [default: stateful]\n&quot;</span>
<a name="l01147"></a>01147         <span class="stringliteral">&quot;   --timeout=SEC, -t       Set client timeout [default=60 sec]\n&quot;</span>
<a name="l01148"></a>01148         <span class="stringliteral">&quot;   --window=COUNT, -w      Set maximum outstanding job [default: %d]\n&quot;</span>
<a name="l01149"></a>01149         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l01150"></a>01150         <span class="stringliteral">&quot;SDP options (client and server):\n&quot;</span>
<a name="l01151"></a>01151         <span class="stringliteral">&quot;   --real-sdp              Generate real SDP from pjmedia, and also perform\n&quot;</span>
<a name="l01152"></a>01152         <span class="stringliteral">&quot;                           proper SDP negotiation [default: dummy]\n&quot;</span>
<a name="l01153"></a>01153         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l01154"></a>01154         <span class="stringliteral">&quot;Client and Server options:\n&quot;</span>
<a name="l01155"></a>01155         <span class="stringliteral">&quot;   --local-port=PORT, -p   Set local port [default: 5060]\n&quot;</span>
<a name="l01156"></a>01156         <span class="stringliteral">&quot;   --use-tcp, -T           Use TCP instead of UDP. Note that when started as\n&quot;</span>
<a name="l01157"></a>01157         <span class="stringliteral">&quot;                           client, you must add ;transport=tcp parameter to URL\n&quot;</span>
<a name="l01158"></a>01158         <span class="stringliteral">&quot;                           [default: no]\n&quot;</span>
<a name="l01159"></a>01159         <span class="stringliteral">&quot;   --thread-count=N        Set number of worker threads [default=1]\n&quot;</span>
<a name="l01160"></a>01160         <span class="stringliteral">&quot;   --trying                Send 100/Trying response (server, default no)\n&quot;</span>
<a name="l01161"></a>01161         <span class="stringliteral">&quot;   --ringing               Send 180/Ringing response (server, default no)\n&quot;</span>
<a name="l01162"></a>01162         <span class="stringliteral">&quot;   --delay=MS, -d          Delay answering call by MS (server, default no)\n&quot;</span>
<a name="l01163"></a>01163         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l01164"></a>01164         <span class="stringliteral">&quot;Misc options:\n&quot;</span>
<a name="l01165"></a>01165         <span class="stringliteral">&quot;   --help, -h              Display this screen\n&quot;</span>
<a name="l01166"></a>01166         <span class="stringliteral">&quot;   --verbose, -v           Verbose logging (put more than once for even more)\n&quot;</span>
<a name="l01167"></a>01167         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l01168"></a>01168         <span class="stringliteral">&quot;When started as server, pjsip-perf can be contacted on the following URIs:\n&quot;</span>
<a name="l01169"></a>01169         <span class="stringliteral">&quot;   - sip:0@server-addr     To handle requests statelessly.\n&quot;</span>
<a name="l01170"></a>01170         <span class="stringliteral">&quot;   - sip:1@server-addr     To handle requests statefully.\n&quot;</span>
<a name="l01171"></a>01171         <span class="stringliteral">&quot;   - sip:2@server-addr     To handle INVITE call.\n&quot;</span>,
<a name="l01172"></a>01172         DEFAULT_COUNT, JOB_WINDOW);
<a name="l01173"></a>01173 }
<a name="l01174"></a>01174 
<a name="l01175"></a>01175 
<a name="l01176"></a>01176 <span class="keyword">static</span> <span class="keywordtype">int</span> my_atoi(<span class="keyword">const</span> <span class="keywordtype">char</span> *s)
<a name="l01177"></a>01177 {
<a name="l01178"></a>01178     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> ss = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>((<span class="keywordtype">char</span>*)s);
<a name="l01179"></a>01179     <span class="keywordflow">return</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga0b12a5cc98e05ff6993aa02436246999">pj_strtoul</a>(&amp;ss);
<a name="l01180"></a>01180 }
<a name="l01181"></a>01181 
<a name="l01182"></a>01182 
<a name="l01183"></a>01183 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> init_options(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l01184"></a>01184 {
<a name="l01185"></a>01185     <span class="keyword">enum</span> { OPT_THREAD_COUNT = 1, OPT_REAL_SDP, OPT_TRYING, OPT_RINGING };
<a name="l01186"></a>01186     <span class="keyword">struct </span><a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/structpj__getopt__option.htm">pj_getopt_option</a> long_options[] = {
<a name="l01187"></a>01187         { <span class="stringliteral">&quot;local-port&quot;</span>,     1, 0, <span class="charliteral">&#39;p&#39;</span> },
<a name="l01188"></a>01188         { <span class="stringliteral">&quot;count&quot;</span>,          1, 0, <span class="charliteral">&#39;c&#39;</span> },
<a name="l01189"></a>01189         { <span class="stringliteral">&quot;thread-count&quot;</span>,   1, 0, OPT_THREAD_COUNT },
<a name="l01190"></a>01190         { <span class="stringliteral">&quot;method&quot;</span>,         1, 0, <span class="charliteral">&#39;m&#39;</span> },
<a name="l01191"></a>01191         { <span class="stringliteral">&quot;help&quot;</span>,           0, 0, <span class="charliteral">&#39;h&#39;</span> },
<a name="l01192"></a>01192         { <span class="stringliteral">&quot;stateless&quot;</span>,      0, 0, <span class="charliteral">&#39;s&#39;</span> },
<a name="l01193"></a>01193         { <span class="stringliteral">&quot;timeout&quot;</span>,        1, 0, <span class="charliteral">&#39;t&#39;</span> },
<a name="l01194"></a>01194         { <span class="stringliteral">&quot;real-sdp&quot;</span>,       0, 0, OPT_REAL_SDP },
<a name="l01195"></a>01195         { <span class="stringliteral">&quot;verbose&quot;</span>,        0, 0, <span class="charliteral">&#39;v&#39;</span> },
<a name="l01196"></a>01196         { <span class="stringliteral">&quot;use-tcp&quot;</span>,        0, 0, <span class="charliteral">&#39;T&#39;</span> },
<a name="l01197"></a>01197         { <span class="stringliteral">&quot;window&quot;</span>,         1, 0, <span class="charliteral">&#39;w&#39;</span> },
<a name="l01198"></a>01198         { <span class="stringliteral">&quot;delay&quot;</span>,          1, 0, <span class="charliteral">&#39;d&#39;</span> },
<a name="l01199"></a>01199         { <span class="stringliteral">&quot;trying&quot;</span>,         0, 0, OPT_TRYING},
<a name="l01200"></a>01200         { <span class="stringliteral">&quot;ringing&quot;</span>,        0, 0, OPT_RINGING},
<a name="l01201"></a>01201         { NULL, 0, 0, 0 },
<a name="l01202"></a>01202     };
<a name="l01203"></a>01203     <span class="keywordtype">int</span> c;
<a name="l01204"></a>01204     <span class="keywordtype">int</span> option_index;
<a name="l01205"></a>01205 
<a name="l01206"></a>01206     <span class="comment">/* Init default application configs */</span>
<a name="l01207"></a>01207     app.local_port = 5060;
<a name="l01208"></a>01208     app.thread_count = 1;
<a name="l01209"></a>01209     app.client.job_count = DEFAULT_COUNT;
<a name="l01210"></a>01210     app.client.method = *pjsip_get_options_method();
<a name="l01211"></a>01211     app.client.job_window = c = JOB_WINDOW;
<a name="l01212"></a>01212     app.client.timeout = 60;
<a name="l01213"></a>01213     app.log_level = 3;
<a name="l01214"></a>01214 
<a name="l01215"></a>01215 
<a name="l01216"></a>01216     <span class="comment">/* Parse options */</span>
<a name="l01217"></a>01217     pj_optind = 0;
<a name="l01218"></a>01218     <span class="keywordflow">while</span>((c=<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#gafcaf5634bffb80179fe8c8f535574a68">pj_getopt_long</a>(argc,argv, <span class="stringliteral">&quot;p:c:m:t:w:d:hsv&quot;</span>, 
<a name="l01219"></a>01219                             long_options, &amp;option_index))!=-1) 
<a name="l01220"></a>01220     {
<a name="l01221"></a>01221         <span class="keywordflow">switch</span> (c) {
<a name="l01222"></a>01222         <span class="keywordflow">case</span> <span class="charliteral">&#39;p&#39;</span>:
<a name="l01223"></a>01223             app.local_port = my_atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l01224"></a>01224             <span class="keywordflow">if</span> (app.local_port &lt; 0 || app.local_port &gt; 65535) {
<a name="l01225"></a>01225                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Invalid --local-port %s&quot;</span>, <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>));
<a name="l01226"></a>01226                 <span class="keywordflow">return</span> -1;
<a name="l01227"></a>01227             }
<a name="l01228"></a>01228             <span class="keywordflow">break</span>;
<a name="l01229"></a>01229 
<a name="l01230"></a>01230         <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
<a name="l01231"></a>01231             app.client.job_count = my_atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l01232"></a>01232             <span class="keywordflow">if</span> (app.client.job_count &lt; 0) {
<a name="l01233"></a>01233                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Invalid --local-port %s&quot;</span>, <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>));
<a name="l01234"></a>01234                 <span class="keywordflow">return</span> -1;
<a name="l01235"></a>01235             }
<a name="l01236"></a>01236             <span class="keywordflow">if</span> (app.client.job_count &gt; pjsip_cfg()-&gt;tsx.max_count)
<a name="l01237"></a>01237                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
<a name="l01238"></a>01238                           <span class="stringliteral">&quot;Warning: --count value (%d) exceeds maximum &quot;</span>
<a name="l01239"></a>01239                           <span class="stringliteral">&quot;transaction count (%d)&quot;</span>, app.client.job_count,
<a name="l01240"></a>01240                           pjsip_cfg()-&gt;tsx.max_count));
<a name="l01241"></a>01241             <span class="keywordflow">break</span>;
<a name="l01242"></a>01242 
<a name="l01243"></a>01243         <span class="keywordflow">case</span> OPT_THREAD_COUNT:
<a name="l01244"></a>01244             app.thread_count = my_atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l01245"></a>01245             <span class="keywordflow">if</span> (app.thread_count &lt; 1 || app.thread_count &gt; 16) {
<a name="l01246"></a>01246                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Invalid --thread-count %s&quot;</span>, <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>));
<a name="l01247"></a>01247                 <span class="keywordflow">return</span> -1;
<a name="l01248"></a>01248             }
<a name="l01249"></a>01249             <span class="keywordflow">break</span>;
<a name="l01250"></a>01250 
<a name="l01251"></a>01251         <span class="keywordflow">case</span> <span class="charliteral">&#39;m&#39;</span>:
<a name="l01252"></a>01252             {
<a name="l01253"></a>01253                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> temp = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>((<span class="keywordtype">char</span>*)<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l01254"></a>01254                 pjsip_method_init_np(&amp;app.client.method, &amp;temp);
<a name="l01255"></a>01255             }
<a name="l01256"></a>01256             <span class="keywordflow">break</span>;
<a name="l01257"></a>01257 
<a name="l01258"></a>01258         <span class="keywordflow">case</span> <span class="charliteral">&#39;h&#39;</span>:
<a name="l01259"></a>01259             usage();
<a name="l01260"></a>01260             <span class="keywordflow">return</span> -1;
<a name="l01261"></a>01261 
<a name="l01262"></a>01262         <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:
<a name="l01263"></a>01263             app.client.stateless = PJ_TRUE;
<a name="l01264"></a>01264             <span class="keywordflow">break</span>;
<a name="l01265"></a>01265 
<a name="l01266"></a>01266         <span class="keywordflow">case</span> OPT_REAL_SDP:
<a name="l01267"></a>01267             app.real_sdp = 1;
<a name="l01268"></a>01268             <span class="keywordflow">break</span>;
<a name="l01269"></a>01269 
<a name="l01270"></a>01270         <span class="keywordflow">case</span> <span class="charliteral">&#39;v&#39;</span>:
<a name="l01271"></a>01271             app.log_level++;
<a name="l01272"></a>01272             <span class="keywordflow">break</span>;
<a name="l01273"></a>01273 
<a name="l01274"></a>01274         <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:
<a name="l01275"></a>01275             app.client.timeout = my_atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l01276"></a>01276             <span class="keywordflow">if</span> (app.client.timeout &lt; 0 || app.client.timeout &gt; 600) {
<a name="l01277"></a>01277                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Invalid --timeout %s&quot;</span>, <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>));
<a name="l01278"></a>01278                 <span class="keywordflow">return</span> -1;
<a name="l01279"></a>01279             }
<a name="l01280"></a>01280             <span class="keywordflow">break</span>;
<a name="l01281"></a>01281 
<a name="l01282"></a>01282         <span class="keywordflow">case</span> <span class="charliteral">&#39;w&#39;</span>:
<a name="l01283"></a>01283             app.client.job_window = my_atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l01284"></a>01284             <span class="keywordflow">if</span> (app.client.job_window &lt;= 0) {
<a name="l01285"></a>01285                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Invalid --window %s&quot;</span>, <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>));
<a name="l01286"></a>01286                 <span class="keywordflow">return</span> -1;
<a name="l01287"></a>01287             }
<a name="l01288"></a>01288             <span class="keywordflow">break</span>;
<a name="l01289"></a>01289 
<a name="l01290"></a>01290         <span class="keywordflow">case</span> <span class="charliteral">&#39;T&#39;</span>:
<a name="l01291"></a>01291             app.use_tcp = PJ_TRUE;
<a name="l01292"></a>01292             <span class="keywordflow">break</span>;
<a name="l01293"></a>01293 
<a name="l01294"></a>01294         <span class="keywordflow">case</span> <span class="charliteral">&#39;d&#39;</span>:
<a name="l01295"></a>01295             app.server.delay = my_atoi(<a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>);
<a name="l01296"></a>01296             <span class="keywordflow">if</span> (app.server.delay &gt; 3600) {
<a name="l01297"></a>01297                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;I think --delay %s is too long&quot;</span>, 
<a name="l01298"></a>01298                           <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__GETOPT.htm#ga8c6ed35e8ccbf455fe91cd153134dbe8">pj_optarg</a>));
<a name="l01299"></a>01299                 <span class="keywordflow">return</span> -1;
<a name="l01300"></a>01300             }
<a name="l01301"></a>01301             <span class="keywordflow">break</span>;
<a name="l01302"></a>01302 
<a name="l01303"></a>01303         <span class="keywordflow">case</span> OPT_TRYING:
<a name="l01304"></a>01304             app.server.send_trying = 1;
<a name="l01305"></a>01305             <span class="keywordflow">break</span>;
<a name="l01306"></a>01306 
<a name="l01307"></a>01307         <span class="keywordflow">case</span> OPT_RINGING:
<a name="l01308"></a>01308             app.server.send_ringing = 1;
<a name="l01309"></a>01309             <span class="keywordflow">break</span>;
<a name="l01310"></a>01310 
<a name="l01311"></a>01311         <span class="keywordflow">default</span>:
<a name="l01312"></a>01312             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, 
<a name="l01313"></a>01313                       <span class="stringliteral">&quot;Invalid argument. Use --help to see help&quot;</span>));
<a name="l01314"></a>01314             <span class="keywordflow">return</span> -1;
<a name="l01315"></a>01315         }
<a name="l01316"></a>01316     }
<a name="l01317"></a>01317 
<a name="l01318"></a>01318     <span class="keywordflow">if</span> (pj_optind != argc) {
<a name="l01319"></a>01319 
<a name="l01320"></a>01320         <span class="keywordflow">if</span> (verify_sip_url(argv[pj_optind]) != PJ_SUCCESS) {
<a name="l01321"></a>01321             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;Invalid SIP URI %s&quot;</span>, argv[pj_optind]));
<a name="l01322"></a>01322             <span class="keywordflow">return</span> -1;
<a name="l01323"></a>01323         }
<a name="l01324"></a>01324         app.client.dst_uri = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(argv[pj_optind]);
<a name="l01325"></a>01325         
<a name="l01326"></a>01326         pj_optind++;
<a name="l01327"></a>01327 
<a name="l01328"></a>01328     }
<a name="l01329"></a>01329 
<a name="l01330"></a>01330     <span class="keywordflow">if</span> (pj_optind != argc) {
<a name="l01331"></a>01331         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(THIS_FILE, <span class="stringliteral">&quot;Error: unknown options %s&quot;</span>, argv[pj_optind]));
<a name="l01332"></a>01332         <span class="keywordflow">return</span> -1;
<a name="l01333"></a>01333     }
<a name="l01334"></a>01334 
<a name="l01335"></a>01335     <span class="keywordflow">return</span> 0;
<a name="l01336"></a>01336 }
<a name="l01337"></a>01337 
<a name="l01338"></a>01338 
<a name="l01339"></a>01339 <span class="comment">/* Send one stateless request */</span>
<a name="l01340"></a>01340 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> submit_stateless_job(<span class="keywordtype">void</span>)
<a name="l01341"></a>01341 {
<a name="l01342"></a>01342     pjsip_tx_data *tdata;
<a name="l01343"></a>01343     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01344"></a>01344 
<a name="l01345"></a>01345     status = pjsip_endpt_create_request(app.sip_endpt, &amp;app.client.method, 
<a name="l01346"></a>01346                                         &amp;app.client.dst_uri, &amp;app.local_uri,
<a name="l01347"></a>01347                                         &amp;app.client.dst_uri, &amp;app.local_contact,
<a name="l01348"></a>01348                                         NULL, -1, NULL, &amp;tdata);
<a name="l01349"></a>01349     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01350"></a>01350         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error creating request&quot;</span>, status);
<a name="l01351"></a>01351         report_completion(701);
<a name="l01352"></a>01352         <span class="keywordflow">return</span> status;
<a name="l01353"></a>01353     }
<a name="l01354"></a>01354 
<a name="l01355"></a>01355     status = pjsip_endpt_send_request_stateless(app.sip_endpt, tdata, NULL,
<a name="l01356"></a>01356                                                 NULL);
<a name="l01357"></a>01357     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01358"></a>01358         pjsip_tx_data_dec_ref(tdata);
<a name="l01359"></a>01359         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error sending stateless request&quot;</span>, status);
<a name="l01360"></a>01360         report_completion(701);
<a name="l01361"></a>01361         <span class="keywordflow">return</span> status;
<a name="l01362"></a>01362     }
<a name="l01363"></a>01363 
<a name="l01364"></a>01364     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l01365"></a>01365 }
<a name="l01366"></a>01366 
<a name="l01367"></a>01367 
<a name="l01368"></a>01368 <span class="comment">/* This callback is called when client transaction state has changed */</span>
<a name="l01369"></a>01369 <span class="keyword">static</span> <span class="keywordtype">void</span> tsx_completion_cb(<span class="keywordtype">void</span> *token, pjsip_event *event)
<a name="l01370"></a>01370 {
<a name="l01371"></a>01371     pjsip_transaction *tsx;
<a name="l01372"></a>01372 
<a name="l01373"></a>01373     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(token);
<a name="l01374"></a>01374 
<a name="l01375"></a>01375     <span class="keywordflow">if</span> (event-&gt;type != PJSIP_EVENT_TSX_STATE)
<a name="l01376"></a>01376         <span class="keywordflow">return</span>;
<a name="l01377"></a>01377 
<a name="l01378"></a>01378     tsx = <span class="keyword">event</span>-&gt;body.tsx_state.tsx;
<a name="l01379"></a>01379 
<a name="l01380"></a>01380     <span class="keywordflow">if</span> (tsx-&gt;mod_data[mod_test.id] != NULL) {
<a name="l01381"></a>01381         <span class="comment">/* This transaction has been calculated before */</span>
<a name="l01382"></a>01382         <span class="keywordflow">return</span>;
<a name="l01383"></a>01383     }
<a name="l01384"></a>01384 
<a name="l01385"></a>01385     <span class="keywordflow">if</span> (tsx-&gt;state==PJSIP_TSX_STATE_TERMINATED) {
<a name="l01386"></a>01386         report_completion(tsx-&gt;status_code);
<a name="l01387"></a>01387         tsx-&gt;mod_data[mod_test.id] = (<span class="keywordtype">void</span>*)1;
<a name="l01388"></a>01388     }
<a name="l01389"></a>01389     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tsx-&gt;method.id == PJSIP_INVITE_METHOD &amp;&amp;
<a name="l01390"></a>01390              tsx-&gt;state == PJSIP_TSX_STATE_CONFIRMED) {
<a name="l01391"></a>01391 
<a name="l01392"></a>01392         report_completion(tsx-&gt;status_code);
<a name="l01393"></a>01393         tsx-&gt;mod_data[mod_test.id] = (<span class="keywordtype">void</span>*)1;
<a name="l01394"></a>01394         
<a name="l01395"></a>01395     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tsx-&gt;state == PJSIP_TSX_STATE_COMPLETED) {
<a name="l01396"></a>01396 
<a name="l01397"></a>01397         report_completion(tsx-&gt;status_code);
<a name="l01398"></a>01398         tsx-&gt;mod_data[mod_test.id] = (<span class="keywordtype">void</span>*)1;
<a name="l01399"></a>01399 
<a name="l01400"></a>01400         TERMINATE_TSX(tsx, tsx-&gt;status_code);
<a name="l01401"></a>01401     }
<a name="l01402"></a>01402 }
<a name="l01403"></a>01403 
<a name="l01404"></a>01404 
<a name="l01405"></a>01405 <span class="comment">/* Send one stateful request */</span>
<a name="l01406"></a>01406 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> submit_job(<span class="keywordtype">void</span>)
<a name="l01407"></a>01407 {
<a name="l01408"></a>01408     pjsip_tx_data *tdata;
<a name="l01409"></a>01409     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01410"></a>01410 
<a name="l01411"></a>01411     status = pjsip_endpt_create_request(app.sip_endpt, &amp;app.client.method, 
<a name="l01412"></a>01412                                         &amp;app.client.dst_uri, &amp;app.local_uri,
<a name="l01413"></a>01413                                         &amp;app.client.dst_uri, &amp;app.local_contact,
<a name="l01414"></a>01414                                         NULL, -1, NULL, &amp;tdata);
<a name="l01415"></a>01415     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01416"></a>01416         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error creating request&quot;</span>, status);
<a name="l01417"></a>01417         report_completion(701);
<a name="l01418"></a>01418         <span class="keywordflow">return</span> status;
<a name="l01419"></a>01419     }
<a name="l01420"></a>01420 
<a name="l01421"></a>01421     status = pjsip_endpt_send_request(app.sip_endpt, tdata, -1, NULL, 
<a name="l01422"></a>01422                                       &amp;tsx_completion_cb);
<a name="l01423"></a>01423     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01424"></a>01424         app_perror(THIS_FILE, <span class="stringliteral">&quot;Error sending stateful request&quot;</span>, status);
<a name="l01425"></a>01425         <span class="comment">//should have been reported by tsx_completion_cb().</span>
<a name="l01426"></a>01426         <span class="comment">//report_completion(701);</span>
<a name="l01427"></a>01427         <span class="comment">//No longer necessary (r777)</span>
<a name="l01428"></a>01428         <span class="comment">//pjsip_tx_data_dec_ref(tdata);</span>
<a name="l01429"></a>01429     }
<a name="l01430"></a>01430     <span class="keywordflow">return</span> status;
<a name="l01431"></a>01431 }
<a name="l01432"></a>01432 
<a name="l01433"></a>01433 
<a name="l01434"></a>01434 <span class="comment">/* Client worker thread */</span>
<a name="l01435"></a>01435 <span class="keyword">static</span> <span class="keywordtype">int</span> client_thread(<span class="keywordtype">void</span> *arg)
<a name="l01436"></a>01436 {
<a name="l01437"></a>01437     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> end_time, last_report, now;
<a name="l01438"></a>01438     <span class="keywordtype">unsigned</span> thread_index = (unsigned)(<span class="keywordtype">long</span>)arg;
<a name="l01439"></a>01439     <span class="keywordtype">unsigned</span> cycle = 0, last_cycle = 0;
<a name="l01440"></a>01440 
<a name="l01441"></a>01441     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(100);
<a name="l01442"></a>01442 
<a name="l01443"></a>01443     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;end_time);
<a name="l01444"></a>01444     end_time.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> += app.client.timeout;
<a name="l01445"></a>01445 
<a name="l01446"></a>01446     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;last_report);
<a name="l01447"></a>01447 
<a name="l01448"></a>01448     <span class="keywordflow">if</span> (app.client.first_request.sec == 0) {
<a name="l01449"></a>01449         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;app.client.first_request);
<a name="l01450"></a>01450     }
<a name="l01451"></a>01451 
<a name="l01452"></a>01452     <span class="comment">/* Submit all jobs */</span>
<a name="l01453"></a>01453     <span class="keywordflow">while</span> (app.client.job_submitted &lt; app.client.job_count &amp;&amp; !app.thread_quit){
<a name="l01454"></a>01454         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> timeout = { 0, 1 };
<a name="l01455"></a>01455         <span class="keywordtype">unsigned</span> i;
<a name="l01456"></a>01456         <span class="keywordtype">int</span> outstanding;
<a name="l01457"></a>01457         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01458"></a>01458 
<a name="l01459"></a>01459         <span class="comment">/* Calculate current outstanding job */</span>
<a name="l01460"></a>01460         outstanding = app.client.job_submitted - app.client.job_finished;
<a name="l01461"></a>01461 
<a name="l01462"></a>01462         <span class="comment">/* Update stats on max outstanding jobs */</span>
<a name="l01463"></a>01463         <span class="keywordflow">if</span> (outstanding &gt; (<span class="keywordtype">int</span>)app.client.stat_max_window)
<a name="l01464"></a>01464             app.client.stat_max_window = outstanding;
<a name="l01465"></a>01465 
<a name="l01466"></a>01466         <span class="comment">/* Wait if there are more pending jobs than allowed in the</span>
<a name="l01467"></a>01467 <span class="comment">         * window. But spawn a new job anyway if no events are happening</span>
<a name="l01468"></a>01468 <span class="comment">         * after we wait for some time.</span>
<a name="l01469"></a>01469 <span class="comment">         */</span>
<a name="l01470"></a>01470         <span class="keywordflow">for</span> (i=0; outstanding &gt; (int)app.client.job_window &amp;&amp; i&lt;1000; ++i) {
<a name="l01471"></a>01471             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> wait = { 0, 500 };
<a name="l01472"></a>01472             <span class="keywordtype">unsigned</span> count = 0;
<a name="l01473"></a>01473 
<a name="l01474"></a>01474             pjsip_endpt_handle_events2(app.sip_endpt, &amp;wait, &amp;count);
<a name="l01475"></a>01475             outstanding = app.client.job_submitted - app.client.job_finished;
<a name="l01476"></a>01476 
<a name="l01477"></a>01477             <span class="keywordflow">if</span> (count == 0)
<a name="l01478"></a>01478                 <span class="keywordflow">break</span>;
<a name="l01479"></a>01479 
<a name="l01480"></a>01480             ++cycle;
<a name="l01481"></a>01481         }
<a name="l01482"></a>01482 
<a name="l01483"></a>01483 
<a name="l01484"></a>01484         <span class="comment">/* Submit one job */</span>
<a name="l01485"></a>01485         <span class="keywordflow">if</span> (app.client.method.id == PJSIP_INVITE_METHOD) {
<a name="l01486"></a>01486             status = make_call(&amp;app.client.dst_uri);
<a name="l01487"></a>01487         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (app.client.stateless) {
<a name="l01488"></a>01488             status = submit_stateless_job();
<a name="l01489"></a>01489         } <span class="keywordflow">else</span> {
<a name="l01490"></a>01490             status = submit_job();
<a name="l01491"></a>01491         }
<a name="l01492"></a>01492 
<a name="l01493"></a>01493         ++app.client.job_submitted;
<a name="l01494"></a>01494         ++cycle;
<a name="l01495"></a>01495 
<a name="l01496"></a>01496         <span class="comment">/* Handle event */</span>
<a name="l01497"></a>01497         pjsip_endpt_handle_events2(app.sip_endpt, &amp;timeout, NULL);
<a name="l01498"></a>01498 
<a name="l01499"></a>01499         <span class="comment">/* Check for time out, also print report */</span>
<a name="l01500"></a>01500         <span class="keywordflow">if</span> (cycle - last_cycle &gt;= 500) {
<a name="l01501"></a>01501             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);
<a name="l01502"></a>01502             <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gafe6b8b7461c59a2c9d1dbecd11a53d48">PJ_TIME_VAL_GTE</a>(now, end_time)) {
<a name="l01503"></a>01503                 <span class="keywordflow">break</span>;
<a name="l01504"></a>01504             }
<a name="l01505"></a>01505             last_cycle = cycle;
<a name="l01506"></a>01506 
<a name="l01507"></a>01507             
<a name="l01508"></a>01508             <span class="keywordflow">if</span> (thread_index == 0 &amp;&amp; now.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>-last_report.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> &gt;= 2) {
<a name="l01509"></a>01509                 printf(<span class="stringliteral">&quot;\r%d jobs started, %d completed...   &quot;</span>,
<a name="l01510"></a>01510                        app.client.job_submitted, app.client.job_finished);
<a name="l01511"></a>01511                 fflush(stdout);
<a name="l01512"></a>01512                 last_report = now;
<a name="l01513"></a>01513             }
<a name="l01514"></a>01514         }
<a name="l01515"></a>01515     }
<a name="l01516"></a>01516 
<a name="l01517"></a>01517     <span class="keywordflow">if</span> (app.client.requests_sent.sec == 0) {
<a name="l01518"></a>01518         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;app.client.requests_sent);
<a name="l01519"></a>01519     }
<a name="l01520"></a>01520 
<a name="l01521"></a>01521 
<a name="l01522"></a>01522     <span class="keywordflow">if</span> (thread_index == 0) {
<a name="l01523"></a>01523         printf(<span class="stringliteral">&quot;\r%d jobs started, %d completed%s\n&quot;</span>,
<a name="l01524"></a>01524                app.client.job_submitted, app.client.job_finished,
<a name="l01525"></a>01525                (app.client.job_submitted!=app.client.job_finished ? 
<a name="l01526"></a>01526                 <span class="stringliteral">&quot;, waiting...&quot;</span> : <span class="stringliteral">&quot;.&quot;</span>) );
<a name="l01527"></a>01527         fflush(stdout);
<a name="l01528"></a>01528     }
<a name="l01529"></a>01529 
<a name="l01530"></a>01530     <span class="comment">/* Wait until all jobs completes, or timed out */</span>
<a name="l01531"></a>01531     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);
<a name="l01532"></a>01532     <span class="keywordflow">while</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga9dd4507187780ed1e83a10176dc845b8">PJ_TIME_VAL_LT</a>(now, end_time) &amp;&amp; 
<a name="l01533"></a>01533            app.client.job_finished &lt; app.client.job_count &amp;&amp; 
<a name="l01534"></a>01534            !app.thread_quit) 
<a name="l01535"></a>01535     {
<a name="l01536"></a>01536         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> timeout = { 0, 1 };
<a name="l01537"></a>01537         <span class="keywordtype">unsigned</span> i;
<a name="l01538"></a>01538 
<a name="l01539"></a>01539         <span class="keywordflow">for</span> (i=0; i&lt;1000; ++i) {
<a name="l01540"></a>01540             <span class="keywordtype">unsigned</span> count;
<a name="l01541"></a>01541             count = 0;
<a name="l01542"></a>01542             pjsip_endpt_handle_events2(app.sip_endpt, &amp;timeout, &amp;count);
<a name="l01543"></a>01543             <span class="keywordflow">if</span> (count == 0)
<a name="l01544"></a>01544                 <span class="keywordflow">break</span>;
<a name="l01545"></a>01545         }
<a name="l01546"></a>01546 
<a name="l01547"></a>01547         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);
<a name="l01548"></a>01548     }
<a name="l01549"></a>01549 
<a name="l01550"></a>01550     <span class="comment">/* Wait couple of seconds to let jobs completes (e.g. ACKs to be sent)  */</span>
<a name="l01551"></a>01551     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);
<a name="l01552"></a>01552     end_time = now;
<a name="l01553"></a>01553     end_time.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> += 2;
<a name="l01554"></a>01554     <span class="keywordflow">while</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga9dd4507187780ed1e83a10176dc845b8">PJ_TIME_VAL_LT</a>(now, end_time)) 
<a name="l01555"></a>01555     {
<a name="l01556"></a>01556         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> timeout = { 0, 1 };
<a name="l01557"></a>01557         <span class="keywordtype">unsigned</span> i;
<a name="l01558"></a>01558 
<a name="l01559"></a>01559         <span class="keywordflow">for</span> (i=0; i&lt;1000; ++i) {
<a name="l01560"></a>01560             <span class="keywordtype">unsigned</span> count;
<a name="l01561"></a>01561             count = 0;
<a name="l01562"></a>01562             pjsip_endpt_handle_events2(app.sip_endpt, &amp;timeout, &amp;count);
<a name="l01563"></a>01563             <span class="keywordflow">if</span> (count == 0)
<a name="l01564"></a>01564                 <span class="keywordflow">break</span>;
<a name="l01565"></a>01565         }
<a name="l01566"></a>01566 
<a name="l01567"></a>01567         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);
<a name="l01568"></a>01568     }
<a name="l01569"></a>01569 
<a name="l01570"></a>01570     <span class="keywordflow">return</span> 0;
<a name="l01571"></a>01571 }
<a name="l01572"></a>01572 
<a name="l01573"></a>01573 
<a name="l01574"></a>01574 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *good_number(<span class="keywordtype">char</span> *buf, <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gac65eeb4771a6fc34225302fee5bcb7e2">pj_int32_t</a> val)
<a name="l01575"></a>01575 {
<a name="l01576"></a>01576     <span class="keywordflow">if</span> (val &lt; 1000) {
<a name="l01577"></a>01577         pj_ansi_sprintf(buf, <span class="stringliteral">&quot;%d&quot;</span>, val);
<a name="l01578"></a>01578     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (val &lt; 1000000) {
<a name="l01579"></a>01579         pj_ansi_sprintf(buf, <span class="stringliteral">&quot;%d.%dK&quot;</span>, 
<a name="l01580"></a>01580                         val / 1000,
<a name="l01581"></a>01581                         (val % 1000) / 100);
<a name="l01582"></a>01582     } <span class="keywordflow">else</span> {
<a name="l01583"></a>01583         pj_ansi_sprintf(buf, <span class="stringliteral">&quot;%d.%02dM&quot;</span>, 
<a name="l01584"></a>01584                         val / 1000000,
<a name="l01585"></a>01585                         (val % 1000000) / 10000);
<a name="l01586"></a>01586     }
<a name="l01587"></a>01587 
<a name="l01588"></a>01588     <span class="keywordflow">return</span> buf;
<a name="l01589"></a>01589 }
<a name="l01590"></a>01590 
<a name="l01591"></a>01591 
<a name="l01592"></a>01592 <span class="keyword">static</span> <span class="keywordtype">int</span> server_thread(<span class="keywordtype">void</span> *arg)
<a name="l01593"></a>01593 {
<a name="l01594"></a>01594     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> timeout = { 0, 1 };
<a name="l01595"></a>01595     <span class="keywordtype">unsigned</span> thread_index = (unsigned)(<span class="keywordtype">long</span>)arg;
<a name="l01596"></a>01596     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> last_report, next_report;
<a name="l01597"></a>01597 
<a name="l01598"></a>01598     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;last_report);
<a name="l01599"></a>01599     next_report = last_report;
<a name="l01600"></a>01600     next_report.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>++;
<a name="l01601"></a>01601 
<a name="l01602"></a>01602     <span class="keywordflow">while</span> (!app.thread_quit) {
<a name="l01603"></a>01603         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> now;
<a name="l01604"></a>01604         <span class="keywordtype">unsigned</span> i;
<a name="l01605"></a>01605 
<a name="l01606"></a>01606         <span class="keywordflow">for</span> (i=0; i&lt;100; ++i) {
<a name="l01607"></a>01607             <span class="keywordtype">unsigned</span> count = 0;
<a name="l01608"></a>01608             pjsip_endpt_handle_events2(app.sip_endpt, &amp;timeout, &amp;count);
<a name="l01609"></a>01609             <span class="keywordflow">if</span> (count == 0)
<a name="l01610"></a>01610                 <span class="keywordflow">break</span>;
<a name="l01611"></a>01611         }
<a name="l01612"></a>01612 
<a name="l01613"></a>01613         <span class="keywordflow">if</span> (thread_index == 0) {
<a name="l01614"></a>01614             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);
<a name="l01615"></a>01615 
<a name="l01616"></a>01616             <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gafe6b8b7461c59a2c9d1dbecd11a53d48">PJ_TIME_VAL_GTE</a>(now, next_report)) {
<a name="l01617"></a>01617                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> tmp;
<a name="l01618"></a>01618                 <span class="keywordtype">unsigned</span> msec;
<a name="l01619"></a>01619                 <span class="keywordtype">unsigned</span> stateless, stateful, call;
<a name="l01620"></a>01620                 <span class="keywordtype">char</span> str_stateless[32], str_stateful[32], str_call[32];
<a name="l01621"></a>01621 
<a name="l01622"></a>01622                 tmp = now;
<a name="l01623"></a>01623                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(tmp, last_report);
<a name="l01624"></a>01624                 msec = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(tmp);
<a name="l01625"></a>01625 
<a name="l01626"></a>01626                 last_report = now;
<a name="l01627"></a>01627                 next_report = last_report;
<a name="l01628"></a>01628                 next_report.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>++;
<a name="l01629"></a>01629 
<a name="l01630"></a>01630                 stateless = app.server.cur_state.stateless_cnt - app.server.prev_state.stateless_cnt;
<a name="l01631"></a>01631                 stateful = app.server.cur_state.stateful_cnt - app.server.prev_state.stateful_cnt;
<a name="l01632"></a>01632                 call = app.server.cur_state.call_cnt - app.server.prev_state.call_cnt;
<a name="l01633"></a>01633 
<a name="l01634"></a>01634                 good_number(str_stateless, app.server.cur_state.stateless_cnt);
<a name="l01635"></a>01635                 good_number(str_stateful, app.server.cur_state.stateful_cnt);
<a name="l01636"></a>01636                 good_number(str_call, app.server.cur_state.call_cnt);
<a name="l01637"></a>01637 
<a name="l01638"></a>01638                 printf(<span class="stringliteral">&quot;Total(rate): stateless:%s (%d/s), statefull:%s (%d/s), call:%s (%d/s)       \r&quot;</span>,
<a name="l01639"></a>01639                        str_stateless, stateless*1000/msec,
<a name="l01640"></a>01640                        str_stateful, stateful*1000/msec,
<a name="l01641"></a>01641                        str_call, call*1000/msec);
<a name="l01642"></a>01642                 fflush(stdout);
<a name="l01643"></a>01643 
<a name="l01644"></a>01644                 app.server.prev_state = app.server.cur_state;
<a name="l01645"></a>01645             }
<a name="l01646"></a>01646         }
<a name="l01647"></a>01647     }
<a name="l01648"></a>01648 
<a name="l01649"></a>01649     <span class="keywordflow">return</span> 0;
<a name="l01650"></a>01650 }
<a name="l01651"></a>01651 
<a name="l01652"></a>01652 <span class="keyword">static</span> <span class="keywordtype">void</span> write_report(<span class="keyword">const</span> <span class="keywordtype">char</span> *msg)
<a name="l01653"></a>01653 {
<a name="l01654"></a>01654     puts(msg);
<a name="l01655"></a>01655 
<a name="l01656"></a>01656 <span class="preprocessor">#if defined(PJ_WIN32) &amp;&amp; PJ_WIN32!=0</span>
<a name="l01657"></a>01657 <span class="preprocessor"></span>    OutputDebugString(msg);
<a name="l01658"></a>01658     OutputDebugString(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01659"></a>01659 <span class="preprocessor">#endif</span>
<a name="l01660"></a>01660 <span class="preprocessor"></span>}
<a name="l01661"></a>01661 
<a name="l01662"></a>01662 
<a name="l01663"></a>01663 <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l01664"></a>01664 {
<a name="l01665"></a>01665     <span class="keyword">static</span> <span class="keywordtype">char</span> report[1024];
<a name="l01666"></a>01666 
<a name="l01667"></a>01667     printf(<span class="stringliteral">&quot;PJSIP Performance Measurement Tool v%s\n&quot;</span>
<a name="l01668"></a>01668            <span class="stringliteral">&quot;(c)2006 pjsip.org\n\n&quot;</span>,
<a name="l01669"></a>01669            PJ_VERSION);
<a name="l01670"></a>01670 
<a name="l01671"></a>01671     <span class="keywordflow">if</span> (create_app() != 0)
<a name="l01672"></a>01672         <span class="keywordflow">return</span> 1;
<a name="l01673"></a>01673 
<a name="l01674"></a>01674     <span class="keywordflow">if</span> (init_options(argc, argv) != 0)
<a name="l01675"></a>01675         <span class="keywordflow">return</span> 1;
<a name="l01676"></a>01676 
<a name="l01677"></a>01677     <span class="keywordflow">if</span> (init_sip() != 0)
<a name="l01678"></a>01678         <span class="keywordflow">return</span> 1;
<a name="l01679"></a>01679 
<a name="l01680"></a>01680     <span class="keywordflow">if</span> (init_media() != 0)
<a name="l01681"></a>01681         <span class="keywordflow">return</span> 1;
<a name="l01682"></a>01682 
<a name="l01683"></a>01683     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#gab8f76697c525b7ce55a85da16442d0c1">pj_log_set_level</a>(app.log_level);
<a name="l01684"></a>01684 
<a name="l01685"></a>01685     <span class="keywordflow">if</span> (app.log_level &gt; 4) {
<a name="l01686"></a>01686         pjsip_endpt_register_module(app.sip_endpt, &amp;msg_logger);
<a name="l01687"></a>01687     }
<a name="l01688"></a>01688 
<a name="l01689"></a>01689 
<a name="l01690"></a>01690     <span class="comment">/* Misc infos */</span>
<a name="l01691"></a>01691     <span class="keywordflow">if</span> (app.client.dst_uri.slen != 0) {
<a name="l01692"></a>01692         <span class="keywordflow">if</span> (app.client.method.id == PJSIP_INVITE_METHOD) {
<a name="l01693"></a>01693             <span class="keywordflow">if</span> (app.client.stateless) {
<a name="l01694"></a>01694                 <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
<a name="l01695"></a>01695                           <span class="stringliteral">&quot;Info: --stateless option makes no sense for INVITE,&quot;</span>
<a name="l01696"></a>01696                           <span class="stringliteral">&quot; ignored.&quot;</span>));
<a name="l01697"></a>01697             }
<a name="l01698"></a>01698         }
<a name="l01699"></a>01699 
<a name="l01700"></a>01700     }
<a name="l01701"></a>01701 
<a name="l01702"></a>01702 
<a name="l01703"></a>01703 
<a name="l01704"></a>01704     <span class="keywordflow">if</span> (app.client.dst_uri.slen) {
<a name="l01705"></a>01705         <span class="comment">/* Client mode */</span>
<a name="l01706"></a>01706         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01707"></a>01707         <span class="keywordtype">char</span> test_type[64];
<a name="l01708"></a>01708         <span class="keywordtype">unsigned</span> msec_req, msec_res;
<a name="l01709"></a>01709         <span class="keywordtype">unsigned</span> i;
<a name="l01710"></a>01710 
<a name="l01711"></a>01711         <span class="comment">/* Get the job name */</span>
<a name="l01712"></a>01712         <span class="keywordflow">if</span> (app.client.method.id == PJSIP_INVITE_METHOD) {
<a name="l01713"></a>01713             pj_ansi_strcpy(test_type, <span class="stringliteral">&quot;INVITE calls&quot;</span>);
<a name="l01714"></a>01714         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (app.client.stateless) {
<a name="l01715"></a>01715             pj_ansi_sprintf(test_type, <span class="stringliteral">&quot;stateless %.*s requests&quot;</span>,
<a name="l01716"></a>01716                             (<span class="keywordtype">int</span>)app.client.method.name.slen,
<a name="l01717"></a>01717                             app.client.method.name.ptr);
<a name="l01718"></a>01718         } <span class="keywordflow">else</span> {
<a name="l01719"></a>01719             pj_ansi_sprintf(test_type, <span class="stringliteral">&quot;stateful %.*s requests&quot;</span>,
<a name="l01720"></a>01720                             (<span class="keywordtype">int</span>)app.client.method.name.slen,
<a name="l01721"></a>01721                             app.client.method.name.ptr);
<a name="l01722"></a>01722         }
<a name="l01723"></a>01723         
<a name="l01724"></a>01724 
<a name="l01725"></a>01725         printf(<span class="stringliteral">&quot;Sending %d %s to &#39;%.*s&#39; with %d maximum outstanding jobs, please wait..\n&quot;</span>, 
<a name="l01726"></a>01726                   app.client.job_count, test_type,
<a name="l01727"></a>01727                   (<span class="keywordtype">int</span>)app.client.dst_uri.slen, app.client.dst_uri.ptr,
<a name="l01728"></a>01728                   app.client.job_window);
<a name="l01729"></a>01729 
<a name="l01730"></a>01730         <span class="keywordflow">for</span> (i=0; i&lt;app.thread_count; ++i) {
<a name="l01731"></a>01731             status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>(app.pool, NULL, &amp;client_thread, 
<a name="l01732"></a>01732                                       (<span class="keywordtype">void</span>*)(<span class="keywordtype">long</span>)i, 0, 0, &amp;app.thread[i]);
<a name="l01733"></a>01733             <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01734"></a>01734                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to create thread&quot;</span>, status);
<a name="l01735"></a>01735                 <span class="keywordflow">return</span> 1;
<a name="l01736"></a>01736             }
<a name="l01737"></a>01737         }
<a name="l01738"></a>01738 
<a name="l01739"></a>01739         <span class="keywordflow">for</span> (i=0; i&lt;app.thread_count; ++i) {
<a name="l01740"></a>01740             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(app.thread[i]);
<a name="l01741"></a>01741             app.thread[i] = NULL;
<a name="l01742"></a>01742         }
<a name="l01743"></a>01743 
<a name="l01744"></a>01744         <span class="keywordflow">if</span> (app.client.last_completion.sec) {
<a name="l01745"></a>01745             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> duration;
<a name="l01746"></a>01746             duration = app.client.last_completion;
<a name="l01747"></a>01747             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(duration, app.client.first_request);
<a name="l01748"></a>01748             msec_res = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(duration);
<a name="l01749"></a>01749         } <span class="keywordflow">else</span> {
<a name="l01750"></a>01750             msec_res = app.client.timeout * 1000;
<a name="l01751"></a>01751         }
<a name="l01752"></a>01752 
<a name="l01753"></a>01753         <span class="keywordflow">if</span> (msec_res == 0) msec_res = 1;
<a name="l01754"></a>01754 
<a name="l01755"></a>01755         <span class="keywordflow">if</span> (app.client.requests_sent.sec) {
<a name="l01756"></a>01756             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> duration;
<a name="l01757"></a>01757             duration = app.client.requests_sent;
<a name="l01758"></a>01758             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(duration, app.client.first_request);
<a name="l01759"></a>01759             msec_req = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(duration);
<a name="l01760"></a>01760         } <span class="keywordflow">else</span> {
<a name="l01761"></a>01761             msec_req = app.client.timeout * 1000;
<a name="l01762"></a>01762         }
<a name="l01763"></a>01763 
<a name="l01764"></a>01764         <span class="keywordflow">if</span> (msec_req == 0) msec_req = 1;
<a name="l01765"></a>01765 
<a name="l01766"></a>01766         <span class="keywordflow">if</span> (app.client.job_submitted &lt; app.client.job_count)
<a name="l01767"></a>01767             puts(<span class="stringliteral">&quot;\ntimed-out!\n&quot;</span>);
<a name="l01768"></a>01768         <span class="keywordflow">else</span>
<a name="l01769"></a>01769             puts(<span class="stringliteral">&quot;\ndone.\n&quot;</span>);
<a name="l01770"></a>01770 
<a name="l01771"></a>01771         pj_ansi_snprintf(
<a name="l01772"></a>01772             report, <span class="keyword">sizeof</span>(report),
<a name="l01773"></a>01773             <span class="stringliteral">&quot;Total %d %s sent in %d ms at rate of %d/sec\n&quot;</span>
<a name="l01774"></a>01774             <span class="stringliteral">&quot;Total %d responses receieved in %d ms at rate of %d/sec:&quot;</span>,
<a name="l01775"></a>01775             app.client.job_submitted, test_type, msec_req, 
<a name="l01776"></a>01776             app.client.job_submitted * 1000 / msec_req,
<a name="l01777"></a>01777             app.client.total_responses, msec_res,
<a name="l01778"></a>01778             app.client.total_responses*1000/msec_res);
<a name="l01779"></a>01779         write_report(report);
<a name="l01780"></a>01780 
<a name="l01781"></a>01781         <span class="comment">/* Print detailed response code received */</span>
<a name="l01782"></a>01782         pj_ansi_sprintf(report, <span class="stringliteral">&quot;\nDetailed responses received:&quot;</span>);
<a name="l01783"></a>01783         write_report(report);
<a name="l01784"></a>01784 
<a name="l01785"></a>01785         <span class="keywordflow">for</span> (i=0; i&lt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(app.client.response_codes); ++i) {
<a name="l01786"></a>01786             <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *reason;
<a name="l01787"></a>01787 
<a name="l01788"></a>01788             <span class="keywordflow">if</span> (app.client.response_codes[i] == 0)
<a name="l01789"></a>01789                 <span class="keywordflow">continue</span>;
<a name="l01790"></a>01790 
<a name="l01791"></a>01791             reason = pjsip_get_status_text(i);
<a name="l01792"></a>01792             pj_ansi_snprintf( report, <span class="keyword">sizeof</span>(report),
<a name="l01793"></a>01793                               <span class="stringliteral">&quot; - %d responses:  %7d     (%.*s)&quot;</span>,
<a name="l01794"></a>01794                               i, app.client.response_codes[i],
<a name="l01795"></a>01795                               (<span class="keywordtype">int</span>)reason-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a>, reason-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>);
<a name="l01796"></a>01796             write_report(report);
<a name="l01797"></a>01797         }
<a name="l01798"></a>01798 
<a name="l01799"></a>01799         <span class="comment">/* Total responses and rate */</span>
<a name="l01800"></a>01800         pj_ansi_snprintf( report, <span class="keyword">sizeof</span>(report),
<a name="l01801"></a>01801             <span class="stringliteral">&quot;                    ------\n&quot;</span>
<a name="l01802"></a>01802             <span class="stringliteral">&quot; TOTAL responses:  %7d (rate=%d/sec)\n&quot;</span>,
<a name="l01803"></a>01803             app.client.total_responses, 
<a name="l01804"></a>01804             app.client.total_responses*1000/msec_res);
<a name="l01805"></a>01805 
<a name="l01806"></a>01806         write_report(report);
<a name="l01807"></a>01807 
<a name="l01808"></a>01808         pj_ansi_sprintf(report, <span class="stringliteral">&quot;Maximum outstanding job: %d&quot;</span>, 
<a name="l01809"></a>01809                         app.client.stat_max_window);
<a name="l01810"></a>01810         write_report(report);
<a name="l01811"></a>01811 
<a name="l01812"></a>01812 
<a name="l01813"></a>01813     } <span class="keywordflow">else</span> {
<a name="l01814"></a>01814         <span class="comment">/* Server mode */</span>
<a name="l01815"></a>01815         <span class="keywordtype">char</span> s[10], *unused;
<a name="l01816"></a>01816         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l01817"></a>01817         <span class="keywordtype">unsigned</span> i;
<a name="l01818"></a>01818 
<a name="l01819"></a>01819         puts(<span class="stringliteral">&quot;pjsip-perf started in server-mode&quot;</span>);
<a name="l01820"></a>01820 
<a name="l01821"></a>01821         printf(<span class="stringliteral">&quot;Receiving requests on the following URIs:\n&quot;</span>
<a name="l01822"></a>01822                <span class="stringliteral">&quot;  sip:0@%.*s:%d%s    for stateless handling\n&quot;</span>
<a name="l01823"></a>01823                <span class="stringliteral">&quot;  sip:1@%.*s:%d%s    for stateful handling\n&quot;</span>
<a name="l01824"></a>01824                <span class="stringliteral">&quot;  sip:2@%.*s:%d%s    for call handling\n&quot;</span>,
<a name="l01825"></a>01825                (<span class="keywordtype">int</span>)app.local_addr.slen,
<a name="l01826"></a>01826                app.local_addr.ptr,
<a name="l01827"></a>01827                app.local_port,
<a name="l01828"></a>01828                (app.use_tcp ? <span class="stringliteral">&quot;;transport=tcp&quot;</span> : <span class="stringliteral">&quot;&quot;</span>),
<a name="l01829"></a>01829                (<span class="keywordtype">int</span>)app.local_addr.slen,
<a name="l01830"></a>01830                app.local_addr.ptr,
<a name="l01831"></a>01831                app.local_port,
<a name="l01832"></a>01832                (app.use_tcp ? <span class="stringliteral">&quot;;transport=tcp&quot;</span> : <span class="stringliteral">&quot;&quot;</span>),
<a name="l01833"></a>01833                (<span class="keywordtype">int</span>)app.local_addr.slen,
<a name="l01834"></a>01834                app.local_addr.ptr,
<a name="l01835"></a>01835                app.local_port,
<a name="l01836"></a>01836                (app.use_tcp ? <span class="stringliteral">&quot;;transport=tcp&quot;</span> : <span class="stringliteral">&quot;&quot;</span>));
<a name="l01837"></a>01837         printf(<span class="stringliteral">&quot;INVITE with non-matching user part will be handled call-statefully\n&quot;</span>);
<a name="l01838"></a>01838 
<a name="l01839"></a>01839         <span class="keywordflow">for</span> (i=0; i&lt;app.thread_count; ++i) {
<a name="l01840"></a>01840             status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>(app.pool, NULL, &amp;server_thread, 
<a name="l01841"></a>01841                                       (<span class="keywordtype">void</span>*)(<span class="keywordtype">long</span>)i, 0, 0, &amp;app.thread[i]);
<a name="l01842"></a>01842             <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l01843"></a>01843                 app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to create thread&quot;</span>, status);
<a name="l01844"></a>01844                 <span class="keywordflow">return</span> 1;
<a name="l01845"></a>01845             }
<a name="l01846"></a>01846         }
<a name="l01847"></a>01847 
<a name="l01848"></a>01848         puts(<span class="stringliteral">&quot;\nPress &lt;ENTER&gt; to quit\n&quot;</span>);
<a name="l01849"></a>01849         fflush(stdout);
<a name="l01850"></a>01850         unused = fgets(s, <span class="keyword">sizeof</span>(s), stdin);
<a name="l01851"></a>01851         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(unused);
<a name="l01852"></a>01852 
<a name="l01853"></a>01853         app.thread_quit = PJ_TRUE;
<a name="l01854"></a>01854         <span class="keywordflow">for</span> (i=0; i&lt;app.thread_count; ++i) {
<a name="l01855"></a>01855             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(app.thread[i]);
<a name="l01856"></a>01856             app.thread[i] = NULL;
<a name="l01857"></a>01857         }
<a name="l01858"></a>01858 
<a name="l01859"></a>01859         puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01860"></a>01860     }
<a name="l01861"></a>01861 
<a name="l01862"></a>01862 
<a name="l01863"></a>01863     destroy_app();
<a name="l01864"></a>01864 
<a name="l01865"></a>01865     <span class="keywordflow">return</span> 0;
<a name="l01866"></a>01866 }
<a name="l01867"></a>01867 
</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJMEDIA small footprint Open Source media stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
