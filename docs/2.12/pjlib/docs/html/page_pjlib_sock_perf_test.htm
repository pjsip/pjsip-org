<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: Socket Performance (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Test: Socket Performance </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Test the performance of the socket communication. This will perform simple producer-consumer type of test, where we calculate how long does it take to send certain number of packets from producer to consumer.</p>
<p>This file is <b>pjlib-test/sock_perf.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* $Id$ */</span></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div><div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><span class="comment"> * (at your option) any later version.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div><div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;pj/compat/high_precision.h&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="preprocessor">#if INCLUDE_SOCK_PERF_TEST</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * sock_producer_consumer()</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Simple producer-consumer benchmarking. Send loop number of</span></div><div class="line"><span class="comment"> * buf_size size packets as fast as possible.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> sock_producer_consumer(<span class="keywordtype">int</span> sock_type,</div><div class="line">                                  <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> buf_size,</div><div class="line">                                  <span class="keywordtype">unsigned</span> loop, </div><div class="line">                                  <span class="keywordtype">unsigned</span> *p_bandwidth)</div><div class="line">{</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> consumer, producer;</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    <span class="keywordtype">char</span> *outgoing_buffer, *incoming_buffer;</div><div class="line">    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> start, stop;</div><div class="line">    <span class="keywordtype">unsigned</span> i;</div><div class="line">    pj_highprec_t elapsed, bandwidth;</div><div class="line">    pj_highprec_t total_received;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div><div class="line"></div><div class="line">    <span class="comment">/* Create pool. */</span></div><div class="line">    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, 4096, 4096, NULL);</div><div class="line">    <span class="keywordflow">if</span> (!pool)</div><div class="line">        <span class="keywordflow">return</span> -10;</div><div class="line"></div><div class="line">    <span class="comment">/* Create producer-consumer pair. */</span></div><div class="line">    rc = app_socketpair(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), sock_type, 0, &amp;consumer, &amp;producer);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: create socket pair&quot;</span>, rc);</div><div class="line">        <span class="keywordflow">return</span> -20;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Create buffers. */</span></div><div class="line">    outgoing_buffer = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, buf_size);</div><div class="line">    incoming_buffer = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, buf_size);</div><div class="line"></div><div class="line">    <span class="comment">/* Start loop. */</span></div><div class="line">    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;start);</div><div class="line">    total_received = 0;</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;loop; ++i) {</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent, part_received, received;</div><div class="line">        <a class="code" href="structpj__time__val.htm">pj_time_val</a> delay;</div><div class="line"></div><div class="line">        sent = buf_size;</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#ga21be8c2a1eb582bd13a801d4285f3ef9">pj_sock_send</a>(producer, outgoing_buffer, &amp;sent, 0);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || sent != (<a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>)buf_size) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: send()&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -61;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Repeat recv() until all data is part_received.</span></div><div class="line"><span class="comment">         * This applies only for non-UDP of course, since for UDP</span></div><div class="line"><span class="comment">         * we would expect all data to be part_received in one packet.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        received = 0;</div><div class="line">        <span class="keywordflow">do</span> {</div><div class="line">            part_received = buf_size-received;</div><div class="line">            rc = <a class="code" href="group__PJ__SOCK.htm#gaef84c78edb396f0e1522117c48bce530">pj_sock_recv</a>(consumer, incoming_buffer+received, </div><div class="line">                              &amp;part_received, 0);</div><div class="line">            <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">                app_perror(<span class="stringliteral">&quot;...recv error&quot;</span>, rc);</div><div class="line">                <span class="keywordflow">return</span> -70;</div><div class="line">            }</div><div class="line">            <span class="keywordflow">if</span> (part_received &lt;= 0) {</div><div class="line">                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: socket has closed (part_received=%d)!&quot;</span>,</div><div class="line">                          part_received));</div><div class="line">                <span class="keywordflow">return</span> -73;</div><div class="line">            }</div><div class="line">            <span class="keywordflow">if</span> ((<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>)part_received != buf_size-received) {</div><div class="line">                <span class="keywordflow">if</span> (sock_type != <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>()) {</div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: expecting %u bytes, got %u bytes&quot;</span>,</div><div class="line">                              buf_size-received, part_received));</div><div class="line">                    <span class="keywordflow">return</span> -76;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            received += part_received;</div><div class="line">        } <span class="keywordflow">while</span> ((<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>)received &lt; buf_size);</div><div class="line"></div><div class="line">        total_received += received;</div><div class="line"></div><div class="line">        <span class="comment">/* Stop test if it&#39;s been runnign for more than 10 secs. */</span></div><div class="line">        <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;stop);</div><div class="line">        delay = <a class="code" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time</a>(&amp;start, &amp;stop);</div><div class="line">        <span class="keywordflow">if</span> (delay.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> &gt; 10)</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Stop timer. */</span></div><div class="line">    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;stop);</div><div class="line"></div><div class="line">    elapsed = <a class="code" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a>(&amp;start, &amp;stop);</div><div class="line"></div><div class="line">    <span class="comment">/* bandwidth = total_received * 1000 / elapsed */</span></div><div class="line">    bandwidth = total_received;</div><div class="line">    pj_highprec_mul(bandwidth, 1000);</div><div class="line">    pj_highprec_div(bandwidth, elapsed);</div><div class="line">    </div><div class="line">    *p_bandwidth = (<a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>)bandwidth;</div><div class="line"></div><div class="line">    <span class="comment">/* Close sockets. */</span></div><div class="line">    <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(consumer);</div><div class="line">    <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(producer);</div><div class="line"></div><div class="line">    <span class="comment">/* Done */</span></div><div class="line">    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * sock_perf_test()</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Main test entry.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> sock_perf_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keyword">enum</span> { LOOP = 64 * 1024 };</div><div class="line">    <span class="keywordtype">int</span> rc;</div><div class="line">    <span class="keywordtype">unsigned</span> bandwidth;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...benchmarking socket &quot;</span></div><div class="line">                  <span class="stringliteral">&quot;(2 sockets, packet=512, single threaded):&quot;</span>));</div><div class="line"></div><div class="line">    <span class="comment">/* Disable this test on Symbian since UDP connect()/send() failed</span></div><div class="line"><span class="comment">     * with S60 3rd edition (including MR2).</span></div><div class="line"><span class="comment">     * See http://www.pjsip.org/trac/ticket/264</span></div><div class="line"><span class="comment">     */</span>    </div><div class="line"><span class="preprocessor">#if !defined(PJ_SYMBIAN) || PJ_SYMBIAN==0</span></div><div class="line">    <span class="comment">/* Benchmarking UDP */</span></div><div class="line">    rc = sock_producer_consumer(<a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 512, LOOP, &amp;bandwidth);</div><div class="line">    <span class="keywordflow">if</span> (rc != 0) <span class="keywordflow">return</span> rc;</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;....bandwidth UDP = %d KB/s&quot;</span>, bandwidth));</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <span class="comment">/* Benchmarking TCP */</span></div><div class="line">    rc = sock_producer_consumer(<a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 512, LOOP, &amp;bandwidth);</div><div class="line">    <span class="keywordflow">if</span> (rc != 0) <span class="keywordflow">return</span> rc;</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;....bandwidth TCP = %d KB/s&quot;</span>, bandwidth));</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> rc;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div><div class="line"><span class="comment"> * when this test is disabled. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> dummy_sock_perf_test;</div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_SOCK_PERF_TEST */</span><span class="preprocessor"></span></div><div class="line"></div><div class="line"></div></div><!-- fragment --> </div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
