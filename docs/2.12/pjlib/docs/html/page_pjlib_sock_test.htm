<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: Socket (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Test: Socket </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This file provides implementation of <b>sock_test()</b>. It tests the various aspects of the socket API.</p>
<h1><a class="anchor" id="sock_test_scope_sec"></a>
Scope of the Test</h1>
<p>The scope of the test:</p><ul>
<li>verify the validity of the address structs.</li>
<li>verify that address manipulation API works.</li>
<li>simple socket creation and destruction.</li>
<li>simple socket send/recv and sendto/recvfrom.</li>
<li>UDP connect()</li>
<li>send/recv big data.</li>
<li>all for both UDP and TCP.</li>
</ul>
<p>The APIs tested in this test:</p><ul>
<li><a class="el" href="group__PJ__SOCK.htm#ga9e5b6fdde1dbadb6d6c7fe6d97614ed0">pj_inet_aton()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga399118ab0e5fea21ba5599caa260bc20">pj_inet_ntoa()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga8fdeab44dae09560b1f87cf6570c97e5">pj_inet_pton()</a> (only if IPv6 is enabled)</li>
<li><a class="el" href="group__PJ__SOCK.htm#ga506ba0f8230021a6cdd1bdab22c32e2e">pj_inet_ntop()</a> (only if IPv6 is enabled)</li>
<li><a class="el" href="group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga21be8c2a1eb582bd13a801d4285f3ef9">pj_sock_send()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#gaef84c78edb396f0e1522117c48bce530">pj_sock_recv()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#gaa8bf01a1a29b8399d4eaf08bf278579a">pj_sock_recvfrom()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#gab351de456e475d5c50289a1cb079a8fe">pj_sock_connect()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga6ca05fa6aa8db88c19a60d793fa0cc6b">pj_sock_listen()</a></li>
<li><a class="el" href="group__PJ__SOCK.htm#ga51f53c8010bd8194e83c96e105f3c609">pj_sock_accept()</a></li>
<li><a class="el" href="group__pj__addr__resolve.htm#ga7c8264aa7743594d31766679dbae0b88">pj_gethostbyname()</a></li>
</ul>
<p>This file is <b>pjlib-test/sock.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* $Id$ */</span></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div><div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><span class="comment"> * (at your option) any later version.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div><div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="preprocessor">#if INCLUDE_SOCK_TEST</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define UDP_PORT        51234</span></div><div class="line"><span class="preprocessor">#define TCP_PORT        (UDP_PORT+10)</span></div><div class="line"><span class="preprocessor">#define BIG_DATA_LEN    8192</span></div><div class="line"><span class="preprocessor">#define ADDRESS         &quot;127.0.0.1&quot;</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">char</span> bigdata[BIG_DATA_LEN];</div><div class="line"><span class="keyword">static</span> <span class="keywordtype">char</span> bigbuffer[BIG_DATA_LEN];</div><div class="line"></div><div class="line"><span class="comment">/* Macro for checking the value of &quot;sin_len&quot; member of sockaddr</span></div><div class="line"><span class="comment"> * (it must always be zero).</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#if defined(PJ_SOCKADDR_HAS_LEN) &amp;&amp; PJ_SOCKADDR_HAS_LEN!=0</span></div><div class="line"><span class="preprocessor">#   define CHECK_SA_ZERO_LEN(addr, ret) \</span></div><div class="line"><span class="preprocessor">        if (((pj_addr_hdr*)(addr))-&gt;sa_zero_len != 0) \</span></div><div class="line"><span class="preprocessor">            return ret</span></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="preprocessor">#   define CHECK_SA_ZERO_LEN(addr, ret)</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> format_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(ADDRESS);</div><div class="line">    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p;</div><div class="line">    pj_in_addr addr;</div><div class="line">    <span class="keywordtype">char</span> zero[64];</div><div class="line">    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr2;</div><div class="line">    <span class="keyword">const</span> <a class="code" href="structpj__str__t.htm">pj_str_t</a> *hostname;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> A[] = {127, 0, 0, 1};</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...format_test()&quot;</span>));</div><div class="line">    </div><div class="line">    <span class="comment">/* pj_inet_aton() */</span></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga9e5b6fdde1dbadb6d6c7fe6d97614ed0">pj_inet_aton</a>(&amp;s, &amp;addr) != 1)</div><div class="line">        <span class="keywordflow">return</span> -10;</div><div class="line">    </div><div class="line">    <span class="comment">/* Check the result. */</span></div><div class="line">    p = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;addr;</div><div class="line">    <span class="keywordflow">if</span> (p[0]!=A[0] || p[1]!=A[1] || p[2]!=A[2] || p[3]!=A[3]) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;  error: mismatched address. p0=%d, p1=%d, &quot;</span></div><div class="line">                          <span class="stringliteral">&quot;p2=%d, p3=%d&quot;</span>, p[0] &amp; 0xFF, p[1] &amp; 0xFF, </div><div class="line">                           p[2] &amp; 0xFF, p[3] &amp; 0xFF));</div><div class="line">        <span class="keywordflow">return</span> -15;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* pj_inet_ntoa() */</span></div><div class="line">    p = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) <a class="code" href="group__PJ__SOCK.htm#ga399118ab0e5fea21ba5599caa260bc20">pj_inet_ntoa</a>(addr);</div><div class="line">    <span class="keywordflow">if</span> (!p)</div><div class="line">        <span class="keywordflow">return</span> -20;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga3321b5cee71785a7b450ad29afe0895b">pj_strcmp2</a>(&amp;s, (<span class="keywordtype">char</span>*)p) != 0)</div><div class="line">        <span class="keywordflow">return</span> -22;</div><div class="line"></div><div class="line"><span class="preprocessor">#if defined(PJ_HAS_IPV6) &amp;&amp; PJ_HAS_IPV6!=0</span></div><div class="line">    <span class="comment">/* pj_inet_pton() */</span></div><div class="line">    <span class="comment">/* pj_inet_ntop() */</span></div><div class="line">    {</div><div class="line">        <span class="keyword">const</span> <a class="code" href="structpj__str__t.htm">pj_str_t</a> s_ipv4 = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;127.0.0.1&quot;</span>);</div><div class="line">        <span class="keyword">const</span> <a class="code" href="structpj__str__t.htm">pj_str_t</a> s_ipv6 = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;fe80::2ff:83ff:fe7c:8b42&quot;</span>);</div><div class="line">        <span class="keywordtype">char</span> buf_ipv4[<a class="code" href="group__PJ__SOCK.htm#ga4d4616a16aa2f3dd1be104091215fdc8">PJ_INET_ADDRSTRLEN</a>];</div><div class="line">        <span class="keywordtype">char</span> buf_ipv6[<a class="code" href="group__PJ__SOCK.htm#ga29a062374255dd3f90272161610cc5e3">PJ_INET6_ADDRSTRLEN</a>];</div><div class="line">        pj_in_addr ipv4;</div><div class="line">        pj_in6_addr ipv6;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga8fdeab44dae09560b1f87cf6570c97e5">pj_inet_pton</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), &amp;s_ipv4, &amp;ipv4) != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            <span class="keywordflow">return</span> -24;</div><div class="line"></div><div class="line">        p = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;ipv4;</div><div class="line">        <span class="keywordflow">if</span> (p[0]!=A[0] || p[1]!=A[1] || p[2]!=A[2] || p[3]!=A[3]) {</div><div class="line">            <span class="keywordflow">return</span> -25;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga8fdeab44dae09560b1f87cf6570c97e5">pj_inet_pton</a>(<a class="code" href="group__PJ__SOCK.htm#ga60a867be35581f776aa88156505309de">pj_AF_INET6</a>(), &amp;s_ipv6, &amp;ipv6) != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            <span class="keywordflow">return</span> -26;</div><div class="line"></div><div class="line">        p = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;ipv6;</div><div class="line">        <span class="keywordflow">if</span> (p[0] != 0xfe || p[1] != 0x80 || p[2] != 0 || p[3] != 0 ||</div><div class="line">            p[4] != 0 || p[5] != 0 || p[6] != 0 || p[7] != 0 ||</div><div class="line">            p[8] != 0x02 || p[9] != 0xff || p[10] != 0x83 || p[11] != 0xff ||</div><div class="line">            p[12]!=0xfe || p[13]!=0x7c || p[14] != 0x8b || p[15]!=0x42)</div><div class="line">        {</div><div class="line">            <span class="keywordflow">return</span> -27;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga506ba0f8230021a6cdd1bdab22c32e2e">pj_inet_ntop</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), &amp;ipv4, buf_ipv4, <span class="keyword">sizeof</span>(buf_ipv4)) != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            <span class="keywordflow">return</span> -28;</div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga508848e33f034d920be8333ccdf7e077">pj_stricmp2</a>(&amp;s_ipv4, buf_ipv4) != 0)</div><div class="line">            <span class="keywordflow">return</span> -29;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga506ba0f8230021a6cdd1bdab22c32e2e">pj_inet_ntop</a>(<a class="code" href="group__PJ__SOCK.htm#ga60a867be35581f776aa88156505309de">pj_AF_INET6</a>(), &amp;ipv6, buf_ipv6, <span class="keyword">sizeof</span>(buf_ipv6)) != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            <span class="keywordflow">return</span> -30;</div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga508848e33f034d920be8333ccdf7e077">pj_stricmp2</a>(&amp;s_ipv6, buf_ipv6) != 0)</div><div class="line">            <span class="keywordflow">return</span> -31;</div><div class="line">    }</div><div class="line"></div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* PJ_HAS_IPV6 */</span><span class="preprocessor"></span></div><div class="line"></div><div class="line">    <span class="comment">/* Test that pj_sockaddr_in_init() initialize the whole structure, </span></div><div class="line"><span class="comment">     * including sin_zero_pad.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <a class="code" href="group__PJ__SOCK.htm#gae6169f27eb956287681a46ca9fecdafc">pj_sockaddr_in_init</a>(&amp;addr2, 0, 1000);</div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(zero, <span class="keyword">sizeof</span>(zero));</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(addr2.<a class="code" href="structpj__sockaddr__in.htm#afdc57a570a0d0a070c140592f938d51a">sin_zero_pad</a>, zero, <span class="keyword">sizeof</span>(addr2.<a class="code" href="structpj__sockaddr__in.htm#afdc57a570a0d0a070c140592f938d51a">sin_zero_pad</a>)) != 0)</div><div class="line">        <span class="keywordflow">return</span> -35;</div><div class="line"></div><div class="line">    <span class="comment">/* pj_gethostname() */</span></div><div class="line">    hostname = <a class="code" href="group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname</a>();</div><div class="line">    <span class="keywordflow">if</span> (!hostname || !hostname-&gt;<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a> || !hostname-&gt;<a class="code" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a>)</div><div class="line">        <span class="keywordflow">return</span> -40;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....hostname is %.*s&quot;</span>, </div><div class="line">              (<span class="keywordtype">int</span>)hostname-&gt;<a class="code" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a>, hostname-&gt;<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>));</div><div class="line"></div><div class="line">    <span class="comment">/* pj_gethostaddr() */</span></div><div class="line"></div><div class="line">    <span class="comment">/* Various constants */</span></div><div class="line"><span class="preprocessor">#if !defined(PJ_SYMBIAN) || PJ_SYMBIAN==0</span></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#gab432f047e1fc825427da8e69b2b79b16">PJ_AF_INET</a>==0xFFFF) <span class="keywordflow">return</span> -5500;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga4092bf46ceb78d847c0ed8ea48a41c7d">PJ_AF_INET6</a>==0xFFFF) <span class="keywordflow">return</span> -5501;</div><div class="line">    </div><div class="line">    <span class="comment">/* 0xFFFF could be a valid SOL_SOCKET (e.g: on some Win or Mac) */</span></div><div class="line">    <span class="comment">//if (PJ_SOL_SOCKET==0xFFFF) return -5503;</span></div><div class="line">    </div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga8d7b2d2566f35102de65c949f2b7bfbf">PJ_SOL_IP</a>==0xFFFF) <span class="keywordflow">return</span> -5502;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#gaef769c018c4dacc0abcad2f8e50c4d44">PJ_SOL_TCP</a>==0xFFFF) <span class="keywordflow">return</span> -5510;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga6adb3a705620c0d3e6b8f818e6635e2e">PJ_SOL_UDP</a>==0xFFFF) <span class="keywordflow">return</span> -5520;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga573bc0c707807620528353b41bce927f">PJ_SOL_IPV6</a>==0xFFFF) <span class="keywordflow">return</span> -5530;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga2956ad61c83d89a6d05162fbf25f3189">PJ_SO_TYPE</a>==0xFFFF) <span class="keywordflow">return</span> -5540;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga728a78d7c0f12efc7ff337707fc83c6a">PJ_SO_RCVBUF</a>==0xFFFF) <span class="keywordflow">return</span> -5550;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga21788080c4678f2b27f8be649bc1a09a">PJ_SO_SNDBUF</a>==0xFFFF) <span class="keywordflow">return</span> -5560;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga74b596544d0e34eb65072d9338c669af">PJ_TCP_NODELAY</a>==0xFFFF) <span class="keywordflow">return</span> -5570;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga6de653f01377c35e4be52626f7a1a8a9">PJ_SO_REUSEADDR</a>==0xFFFF) <span class="keywordflow">return</span> -5580;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#gab8ece577d6b066445dc4dae7ce19d0db">PJ_MSG_OOB</a>==0xFFFF) <span class="keywordflow">return</span> -5590;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga7cd045bfebde8359b3f05aafd1779120">PJ_MSG_PEEK</a>==0xFFFF) <span class="keywordflow">return</span> -5600;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> parse_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line"><span class="preprocessor">#define IPv4    1</span></div><div class="line"><span class="preprocessor">#define IPv6    2</span></div><div class="line"></div><div class="line">    <span class="keyword">struct </span>test_t {</div><div class="line">        <span class="keyword">const</span> <span class="keywordtype">char</span>  *input;</div><div class="line">        <span class="keywordtype">int</span>          result_af;</div><div class="line">        <span class="keyword">const</span> <span class="keywordtype">char</span>  *result_ip;</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>  result_port;</div><div class="line">    };</div><div class="line">    <span class="keyword">struct </span>test_t valid_tests[] = </div><div class="line">    {</div><div class="line">        <span class="comment">/* IPv4 */</span></div><div class="line">        { <span class="stringliteral">&quot;10.0.0.1:80&quot;</span>, IPv4, <span class="stringliteral">&quot;10.0.0.1&quot;</span>, 80},</div><div class="line">        { <span class="stringliteral">&quot;10.0.0.1&quot;</span>, IPv4, <span class="stringliteral">&quot;10.0.0.1&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;10.0.0.1:&quot;</span>, IPv4, <span class="stringliteral">&quot;10.0.0.1&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;10.0.0.1:0&quot;</span>, IPv4, <span class="stringliteral">&quot;10.0.0.1&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;:80&quot;</span>, IPv4, <span class="stringliteral">&quot;0.0.0.0&quot;</span>, 80},</div><div class="line">        { <span class="stringliteral">&quot;:&quot;</span>, IPv4, <span class="stringliteral">&quot;0.0.0.0&quot;</span>, 0},</div><div class="line"><span class="preprocessor">#if !PJ_SYMBIAN</span></div><div class="line">        { <span class="stringliteral">&quot;localhost&quot;</span>, IPv4, <span class="stringliteral">&quot;127.0.0.1&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;localhost:&quot;</span>, IPv4, <span class="stringliteral">&quot;127.0.0.1&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;localhost:80&quot;</span>, IPv4, <span class="stringliteral">&quot;127.0.0.1&quot;</span>, 80},</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if defined(PJ_HAS_IPV6) &amp;&amp; PJ_HAS_IPV6</span></div><div class="line">        { <span class="stringliteral">&quot;fe::01:80&quot;</span>, IPv6, <span class="stringliteral">&quot;fe::01:80&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;[fe::01]:80&quot;</span>, IPv6, <span class="stringliteral">&quot;fe::01&quot;</span>, 80},</div><div class="line">        { <span class="stringliteral">&quot;fe::01&quot;</span>, IPv6, <span class="stringliteral">&quot;fe::01&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;[fe::01]&quot;</span>, IPv6, <span class="stringliteral">&quot;fe::01&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;fe::01:&quot;</span>, IPv6, <span class="stringliteral">&quot;fe::01&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;[fe::01]:&quot;</span>, IPv6, <span class="stringliteral">&quot;fe::01&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;::&quot;</span>, IPv6, <span class="stringliteral">&quot;::0&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;[::]&quot;</span>, IPv6, <span class="stringliteral">&quot;::&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;:::&quot;</span>, IPv6, <span class="stringliteral">&quot;::&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;[::]:&quot;</span>, IPv6, <span class="stringliteral">&quot;::&quot;</span>, 0},</div><div class="line">        { <span class="stringliteral">&quot;:::80&quot;</span>, IPv6, <span class="stringliteral">&quot;::&quot;</span>, 80},</div><div class="line">        { <span class="stringliteral">&quot;[::]:80&quot;</span>, IPv6, <span class="stringliteral">&quot;::&quot;</span>, 80},</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">    };</div><div class="line">    <span class="keyword">struct </span>test_t invalid_tests[] = </div><div class="line">    {</div><div class="line">        <span class="comment">/* IPv4 */</span></div><div class="line">        { <span class="stringliteral">&quot;10.0.0.1:abcd&quot;</span>, IPv4},   <span class="comment">/* port not numeric */</span></div><div class="line">        { <span class="stringliteral">&quot;10.0.0.1:-1&quot;</span>, IPv4},     <span class="comment">/* port contains illegal character */</span></div><div class="line">        { <span class="stringliteral">&quot;10.0.0.1:123456&quot;</span>, IPv4}, <span class="comment">/* port too big     */</span></div><div class="line">        <span class="comment">//this actually is fine on my Mac OS 10.9</span></div><div class="line">        <span class="comment">//it will be resolved with gethostbyname() and something is returned!</span></div><div class="line">        <span class="comment">//{ &quot;1.2.3.4.5:80&quot;, IPv4},    /* invalid IP */</span></div><div class="line">        { <span class="stringliteral">&quot;10:0:80&quot;</span>, IPv4},         <span class="comment">/* hostname has colon */</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if defined(PJ_HAS_IPV6) &amp;&amp; PJ_HAS_IPV6</span></div><div class="line">        { <span class="stringliteral">&quot;[fe::01]:abcd&quot;</span>, IPv6},   <span class="comment">/* port not numeric */</span></div><div class="line">        { <span class="stringliteral">&quot;[fe::01]:-1&quot;</span>, IPv6},     <span class="comment">/* port contains illegal character */</span></div><div class="line">        { <span class="stringliteral">&quot;[fe::01]:123456&quot;</span>, IPv6}, <span class="comment">/* port too big     */</span></div><div class="line">        { <span class="stringliteral">&quot;fe::01:02::03:04:80&quot;</span>, IPv6},     <span class="comment">/* invalid IP */</span></div><div class="line">        { <span class="stringliteral">&quot;[fe::01:02::03:04]:80&quot;</span>, IPv6},   <span class="comment">/* invalid IP */</span></div><div class="line">        { <span class="stringliteral">&quot;[fe:01&quot;</span>, IPv6},          <span class="comment">/* Unterminated bracket */</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">    };</div><div class="line"></div><div class="line">    <span class="keywordtype">unsigned</span> i;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...IP address parsing&quot;</span>));</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(valid_tests); ++i) {</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line">        <a class="code" href="structpj__str__t.htm">pj_str_t</a> input;</div><div class="line">        <a class="code" href="unionpj__sockaddr.htm">pj_sockaddr</a> addr, result;</div><div class="line"></div><div class="line">        <span class="keywordflow">switch</span> (valid_tests[i].result_af) {</div><div class="line">        <span class="keywordflow">case</span> IPv4:</div><div class="line">            valid_tests[i].result_af = <a class="code" href="group__PJ__SOCK.htm#gab432f047e1fc825427da8e69b2b79b16">PJ_AF_INET</a>;</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        <span class="keywordflow">case</span> IPv6:</div><div class="line">            valid_tests[i].result_af = <a class="code" href="group__PJ__SOCK.htm#ga4092bf46ceb78d847c0ed8ea48a41c7d">PJ_AF_INET6</a>;</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        <span class="keywordflow">default</span>:</div><div class="line">            <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(!<span class="stringliteral">&quot;Invalid AF!&quot;</span>);</div><div class="line">            <span class="keywordflow">continue</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Try parsing with PJ_AF_UNSPEC */</span></div><div class="line">        status = <a class="code" href="group__PJ__SOCK.htm#ga1562332273aa3900dc549cffd5b5c4e4">pj_sockaddr_parse</a>(<a class="code" href="group__PJ__SOCK.htm#gadc28a871617da78cc6e52e5b5179505d">PJ_AF_UNSPEC</a>, 0, </div><div class="line">                                   <a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;input, valid_tests[i].input), </div><div class="line">                                   &amp;addr);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;.... failed when parsing %s (i=%d)&quot;</span>, </div><div class="line">                      valid_tests[i].input, i));</div><div class="line">            <span class="keywordflow">return</span> -10;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Check &quot;sin_len&quot; member of parse result */</span></div><div class="line">        CHECK_SA_ZERO_LEN(&amp;addr, -20);</div><div class="line"></div><div class="line">        <span class="comment">/* Build the correct result */</span></div><div class="line">        status = <a class="code" href="group__PJ__SOCK.htm#ga14a50bd931bd5ee1fcc064ad701d64b6">pj_sockaddr_init</a>(valid_tests[i].result_af,</div><div class="line">                                  &amp;result,</div><div class="line">                                  <a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;input, valid_tests[i].result_ip), </div><div class="line">                                  valid_tests[i].result_port);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;.... error building IP address %s&quot;</span>, </div><div class="line">                      valid_tests[i].input));</div><div class="line">            <span class="keywordflow">return</span> -30;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Compare the result */</span></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga5048603d35a51e80268e961697623141">pj_sockaddr_cmp</a>(&amp;addr, &amp;result) != 0) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;.... parsed result mismatched for %s&quot;</span>, </div><div class="line">                      valid_tests[i].input));</div><div class="line">            <span class="keywordflow">return</span> -40;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Parse again with the specified af */</span></div><div class="line">        status = <a class="code" href="group__PJ__SOCK.htm#ga1562332273aa3900dc549cffd5b5c4e4">pj_sockaddr_parse</a>(valid_tests[i].result_af, 0, </div><div class="line">                                   <a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;input, valid_tests[i].input), </div><div class="line">                                   &amp;addr);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;.... failed when parsing %s&quot;</span>, </div><div class="line">                      valid_tests[i].input));</div><div class="line">            <span class="keywordflow">return</span> -50;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Check &quot;sin_len&quot; member of parse result */</span></div><div class="line">        CHECK_SA_ZERO_LEN(&amp;addr, -55);</div><div class="line"></div><div class="line">        <span class="comment">/* Compare the result again */</span></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga5048603d35a51e80268e961697623141">pj_sockaddr_cmp</a>(&amp;addr, &amp;result) != 0) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;.... parsed result mismatched for %s&quot;</span>, </div><div class="line">                      valid_tests[i].input));</div><div class="line">            <span class="keywordflow">return</span> -60;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(invalid_tests); ++i) {</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line">        <a class="code" href="structpj__str__t.htm">pj_str_t</a> input;</div><div class="line">        <a class="code" href="unionpj__sockaddr.htm">pj_sockaddr</a> addr;</div><div class="line"></div><div class="line">        <span class="keywordflow">switch</span> (invalid_tests[i].result_af) {</div><div class="line">        <span class="keywordflow">case</span> IPv4:</div><div class="line">            invalid_tests[i].result_af = <a class="code" href="group__PJ__SOCK.htm#gab432f047e1fc825427da8e69b2b79b16">PJ_AF_INET</a>;</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        <span class="keywordflow">case</span> IPv6:</div><div class="line">            invalid_tests[i].result_af = <a class="code" href="group__PJ__SOCK.htm#ga4092bf46ceb78d847c0ed8ea48a41c7d">PJ_AF_INET6</a>;</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        <span class="keywordflow">default</span>:</div><div class="line">            <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(!<span class="stringliteral">&quot;Invalid AF!&quot;</span>);</div><div class="line">            <span class="keywordflow">continue</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Try parsing with PJ_AF_UNSPEC */</span></div><div class="line">        status = <a class="code" href="group__PJ__SOCK.htm#ga1562332273aa3900dc549cffd5b5c4e4">pj_sockaddr_parse</a>(<a class="code" href="group__PJ__SOCK.htm#gadc28a871617da78cc6e52e5b5179505d">PJ_AF_UNSPEC</a>, 0, </div><div class="line">                                   <a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;input, invalid_tests[i].input), </div><div class="line">                                   &amp;addr);</div><div class="line">        <span class="keywordflow">if</span> (status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(1,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;.... expecting failure when parsing %s&quot;</span>, </div><div class="line">                      invalid_tests[i].input));</div><div class="line">            <span class="keywordflow">return</span> -100;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> purity_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...purity_test()&quot;</span>));</div><div class="line"></div><div class="line"><span class="preprocessor">#if defined(PJ_SOCKADDR_HAS_LEN) &amp;&amp; PJ_SOCKADDR_HAS_LEN!=0</span></div><div class="line">    <span class="comment">/* Check on &quot;sin_len&quot; member of sockaddr */</span></div><div class="line">    {</div><div class="line">        <span class="keyword">const</span> <a class="code" href="structpj__str__t.htm">pj_str_t</a> str_ip = {<span class="stringliteral">&quot;1.1.1.1&quot;</span>, 7};</div><div class="line">        <a class="code" href="unionpj__sockaddr.htm">pj_sockaddr</a> addr[16];</div><div class="line">        <a class="code" href="structpj__addrinfo.htm">pj_addrinfo</a> ai[16];</div><div class="line">        <span class="keywordtype">unsigned</span> cnt;</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div><div class="line"></div><div class="line">        <span class="comment">/* pj_enum_ip_interface() */</span></div><div class="line">        cnt = <a class="code" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(addr);</div><div class="line">        rc = <a class="code" href="group__pj__ip__helper.htm#gab983d56df83721c32feeb2fe0d394e69">pj_enum_ip_interface</a>(<a class="code" href="group__PJ__SOCK.htm#ga70ea77cd531607c6c3ce586d6fbd007d">pj_AF_UNSPEC</a>(), &amp;cnt, addr);</div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            <span class="keywordflow">while</span> (cnt--)</div><div class="line">                CHECK_SA_ZERO_LEN(&amp;addr[cnt], -10);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* pj_gethostip() on IPv4 */</span></div><div class="line">        rc = <a class="code" href="group__pj__addr__resolve.htm#ga410b1bd02dcabf108b129e95368beef4">pj_gethostip</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), &amp;addr[0]);</div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            CHECK_SA_ZERO_LEN(&amp;addr[0], -20);</div><div class="line"></div><div class="line">        <span class="comment">/* pj_gethostip() on IPv6 */</span></div><div class="line">        rc = <a class="code" href="group__pj__addr__resolve.htm#ga410b1bd02dcabf108b129e95368beef4">pj_gethostip</a>(<a class="code" href="group__PJ__SOCK.htm#ga60a867be35581f776aa88156505309de">pj_AF_INET6</a>(), &amp;addr[0]);</div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            CHECK_SA_ZERO_LEN(&amp;addr[0], -30);</div><div class="line"></div><div class="line">        <span class="comment">/* pj_getdefaultipinterface() on IPv4 */</span></div><div class="line">        rc = <a class="code" href="group__pj__addr__resolve.htm#gae9a1ddbc8b068fad022db4661bcb9937">pj_getdefaultipinterface</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), &amp;addr[0]);</div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            CHECK_SA_ZERO_LEN(&amp;addr[0], -40);</div><div class="line"></div><div class="line">        <span class="comment">/* pj_getdefaultipinterface() on IPv6 */</span></div><div class="line">        rc = <a class="code" href="group__pj__addr__resolve.htm#gae9a1ddbc8b068fad022db4661bcb9937">pj_getdefaultipinterface</a>(<a class="code" href="group__PJ__SOCK.htm#ga60a867be35581f776aa88156505309de">pj_AF_INET6</a>(), &amp;addr[0]);</div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">            CHECK_SA_ZERO_LEN(&amp;addr[0], -50);</div><div class="line"></div><div class="line">        <span class="comment">/* pj_getaddrinfo() on a host name */</span></div><div class="line">        cnt = <a class="code" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(ai);</div><div class="line">        rc = <a class="code" href="group__pj__addr__resolve.htm#gaaf5df28bb11ef770eb4ef5cca7b8f9b2">pj_getaddrinfo</a>(<a class="code" href="group__PJ__SOCK.htm#ga70ea77cd531607c6c3ce586d6fbd007d">pj_AF_UNSPEC</a>(), <a class="code" href="group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname</a>(), &amp;cnt, ai);</div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            <span class="keywordflow">while</span> (cnt--)</div><div class="line">                CHECK_SA_ZERO_LEN(&amp;ai[cnt].ai_addr, -60);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* pj_getaddrinfo() on an IP address */</span></div><div class="line">        cnt = <a class="code" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(ai);</div><div class="line">        rc = <a class="code" href="group__pj__addr__resolve.htm#gaaf5df28bb11ef770eb4ef5cca7b8f9b2">pj_getaddrinfo</a>(<a class="code" href="group__PJ__SOCK.htm#ga70ea77cd531607c6c3ce586d6fbd007d">pj_AF_UNSPEC</a>(), &amp;str_ip, &amp;cnt, ai);</div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            <span class="keywordflow">while</span> (cnt--)</div><div class="line">                CHECK_SA_ZERO_LEN(&amp;ai[cnt].ai_addr, -70);</div><div class="line">        }</div><div class="line">    }</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> simple_sock_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> types[2];</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock;</div><div class="line">    <span class="keywordtype">int</span> i;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc = <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>;</div><div class="line"></div><div class="line">    types[0] = <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>();</div><div class="line">    types[1] = <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>();</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...simple_sock_test()&quot;</span>));</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;(<a class="code" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>)(<span class="keyword">sizeof</span>(types)/<span class="keyword">sizeof</span>(types[0])); ++i) {</div><div class="line">        </div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), types[i], 0, &amp;sock);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: unable to create socket&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        } <span class="keywordflow">else</span> {</div><div class="line">            rc = <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(sock);</div><div class="line">            <span class="keywordflow">if</span> (rc != 0) {</div><div class="line">                app_perror(<span class="stringliteral">&quot;...error: close socket&quot;</span>, rc);</div><div class="line">                <span class="keywordflow">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> rc;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> send_recv_test(<span class="keywordtype">int</span> sock_type,</div><div class="line">                          <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> ss, <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> cs,</div><div class="line">                          <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> *dstaddr, <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> *srcaddr, </div><div class="line">                          <span class="keywordtype">int</span> addrlen)</div><div class="line">{</div><div class="line">    <span class="keyword">enum</span> { DATA_LEN = 16 };</div><div class="line">    <span class="keywordtype">char</span> senddata[DATA_LEN+4], recvdata[DATA_LEN+4];</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent, received, total_received;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div><div class="line"></div><div class="line">    TRACE_((<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....create_random_string()&quot;</span>));</div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a>(senddata, DATA_LEN);</div><div class="line">    senddata[DATA_LEN-1] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * Test send/recv small data.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    TRACE_((<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....sendto()&quot;</span>));</div><div class="line">    <span class="keywordflow">if</span> (dstaddr) {</div><div class="line">        sent = DATA_LEN;</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a>(cs, senddata, &amp;sent, 0, dstaddr, addrlen);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || sent != DATA_LEN) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...sendto error&quot;</span>, rc);</div><div class="line">            rc = -140; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line">    } <span class="keywordflow">else</span> {</div><div class="line">        sent = DATA_LEN;</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#ga21be8c2a1eb582bd13a801d4285f3ef9">pj_sock_send</a>(cs, senddata, &amp;sent, 0);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || sent != DATA_LEN) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...send error&quot;</span>, rc);</div><div class="line">            rc = -145; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    TRACE_((<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....recv()&quot;</span>));</div><div class="line">    <span class="keywordflow">if</span> (srcaddr) {</div><div class="line">        <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> addr;</div><div class="line">        <span class="keywordtype">int</span> srclen = <span class="keyword">sizeof</span>(addr);</div><div class="line">        </div><div class="line">        <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;addr, <span class="keyword">sizeof</span>(addr));</div><div class="line"></div><div class="line">        received = DATA_LEN;</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#gaa8bf01a1a29b8399d4eaf08bf278579a">pj_sock_recvfrom</a>(ss, recvdata, &amp;received, 0, &amp;addr, &amp;srclen);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || received != DATA_LEN) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...recvfrom error&quot;</span>, rc);</div><div class="line">            rc = -150; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line">        <span class="keywordflow">if</span> (srclen != addrlen)</div><div class="line">            <span class="keywordflow">return</span> -151;</div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__SOCK.htm#ga5048603d35a51e80268e961697623141">pj_sockaddr_cmp</a>(&amp;addr, srcaddr) != 0) {</div><div class="line">            <span class="keywordtype">char</span> srcaddr_str[32], addr_str[32];</div><div class="line">            strcpy(srcaddr_str, <a class="code" href="group__PJ__SOCK.htm#ga399118ab0e5fea21ba5599caa260bc20">pj_inet_ntoa</a>(srcaddr-&gt;<a class="code" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a>));</div><div class="line">            strcpy(addr_str, <a class="code" href="group__PJ__SOCK.htm#ga399118ab0e5fea21ba5599caa260bc20">pj_inet_ntoa</a>(addr.<a class="code" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a>));</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: src address mismatch (original=%s, &quot;</span></div><div class="line">                              <span class="stringliteral">&quot;recvfrom addr=%s)&quot;</span>, </div><div class="line">                              srcaddr_str, addr_str));</div><div class="line">            <span class="keywordflow">return</span> -152;</div><div class="line">        }</div><div class="line">        </div><div class="line">    } <span class="keywordflow">else</span> {</div><div class="line">        <span class="comment">/* Repeat recv() until all data is received.</span></div><div class="line"><span class="comment">         * This applies only for non-UDP of course, since for UDP</span></div><div class="line"><span class="comment">         * we would expect all data to be received in one packet.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        total_received = 0;</div><div class="line">        <span class="keywordflow">do</span> {</div><div class="line">            received = DATA_LEN-total_received;</div><div class="line">            rc = <a class="code" href="group__PJ__SOCK.htm#gaef84c78edb396f0e1522117c48bce530">pj_sock_recv</a>(ss, recvdata+total_received, &amp;received, 0);</div><div class="line">            <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">                app_perror(<span class="stringliteral">&quot;...recv error&quot;</span>, rc);</div><div class="line">                rc = -155; <span class="keywordflow">goto</span> on_error;</div><div class="line">            }</div><div class="line">            <span class="keywordflow">if</span> (received &lt;= 0) {</div><div class="line">                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: socket has closed! (received=%d)&quot;</span>,</div><div class="line">                          received));</div><div class="line">                rc = -156; <span class="keywordflow">goto</span> on_error;</div><div class="line">            }</div><div class="line">            <span class="keywordflow">if</span> (received != DATA_LEN-total_received) {</div><div class="line">                <span class="keywordflow">if</span> (sock_type != <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>()) {</div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: expecting %u bytes, got %u bytes&quot;</span>,</div><div class="line">                              DATA_LEN-total_received, received));</div><div class="line">                    rc = -157; <span class="keywordflow">goto</span> on_error;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            total_received += received;</div><div class="line">        } <span class="keywordflow">while</span> (total_received &lt; DATA_LEN);</div><div class="line">    }</div><div class="line"></div><div class="line">    TRACE_((<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....memcmp()&quot;</span>));</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(senddata, recvdata, DATA_LEN) != 0) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>,<span class="stringliteral">&quot;...error: received data mismatch &quot;</span></div><div class="line">                     <span class="stringliteral">&quot;(got:&#39;%s&#39; expecting:&#39;%s&#39;&quot;</span>,</div><div class="line">                     recvdata, senddata));</div><div class="line">        rc = -160; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * Test send/recv big data.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    TRACE_((<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....sendto()&quot;</span>));</div><div class="line">    <span class="keywordflow">if</span> (dstaddr) {</div><div class="line">        sent = BIG_DATA_LEN;</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#ga9a84c286a4b7061503628b02d62f249a">pj_sock_sendto</a>(cs, bigdata, &amp;sent, 0, dstaddr, addrlen);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || sent != BIG_DATA_LEN) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...sendto error&quot;</span>, rc);</div><div class="line">            rc = -161; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line">    } <span class="keywordflow">else</span> {</div><div class="line">        sent = BIG_DATA_LEN;</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#ga21be8c2a1eb582bd13a801d4285f3ef9">pj_sock_send</a>(cs, bigdata, &amp;sent, 0);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> || sent != BIG_DATA_LEN) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...send error&quot;</span>, rc);</div><div class="line">            rc = -165; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    TRACE_((<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....recv()&quot;</span>));</div><div class="line"></div><div class="line">    <span class="comment">/* Repeat recv() until all data is received.</span></div><div class="line"><span class="comment">     * This applies only for non-UDP of course, since for UDP</span></div><div class="line"><span class="comment">     * we would expect all data to be received in one packet.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    total_received = 0;</div><div class="line">    <span class="keywordflow">do</span> {</div><div class="line">        received = BIG_DATA_LEN-total_received;</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#gaef84c78edb396f0e1522117c48bce530">pj_sock_recv</a>(ss, bigbuffer+total_received, &amp;received, 0);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...recv error&quot;</span>, rc);</div><div class="line">            rc = -170; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line">        <span class="keywordflow">if</span> (received &lt;= 0) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: socket has closed! (received=%d)&quot;</span>,</div><div class="line">                      received));</div><div class="line">            rc = -173; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line">        <span class="keywordflow">if</span> (received != BIG_DATA_LEN-total_received) {</div><div class="line">            <span class="keywordflow">if</span> (sock_type != <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>()) {</div><div class="line">                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: expecting %u bytes, got %u bytes&quot;</span>,</div><div class="line">                          BIG_DATA_LEN-total_received, received));</div><div class="line">                rc = -176; <span class="keywordflow">goto</span> on_error;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        total_received += received;</div><div class="line">    } <span class="keywordflow">while</span> (total_received &lt; BIG_DATA_LEN);</div><div class="line"></div><div class="line">    TRACE_((<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....memcmp()&quot;</span>));</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga81417b253e8d0f658d2fe73e9eeb6bb5">pj_memcmp</a>(bigdata, bigbuffer, BIG_DATA_LEN) != 0) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: received data has been altered!&quot;</span>));</div><div class="line">        rc = -180; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line">    </div><div class="line">    rc = 0;</div><div class="line"></div><div class="line">on_error:</div><div class="line">    <span class="keywordflow">return</span> rc;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> udp_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> cs = <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>, ss = <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>;</div><div class="line">    <a class="code" href="structpj__sockaddr__in.htm">pj_sockaddr_in</a> dstaddr, srcaddr;</div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc = 0, retval;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...udp_test()&quot;</span>));</div><div class="line"></div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;ss);</div><div class="line">    <span class="keywordflow">if</span> (rc != 0) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create socket&quot;</span>, rc);</div><div class="line">        <span class="keywordflow">return</span> -100;</div><div class="line">    }</div><div class="line"></div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#gaeec96c063aafa1d7c19b33590997bcff">pj_sock_socket</a>(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), 0, &amp;cs);</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> -110;</div><div class="line"></div><div class="line">    <span class="comment">/* Bind server socket. */</span></div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;dstaddr, <span class="keyword">sizeof</span>(dstaddr));</div><div class="line">    dstaddr.<a class="code" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();</div><div class="line">    dstaddr.<a class="code" href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="code" href="group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>(UDP_PORT);</div><div class="line">    dstaddr.<a class="code" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a> = <a class="code" href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a>(<a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;s, ADDRESS));</div><div class="line">    </div><div class="line">    <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(ss, &amp;dstaddr, <span class="keyword">sizeof</span>(dstaddr))) != 0) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...bind error udp:&quot;</span>ADDRESS, rc);</div><div class="line">        rc = -120; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Bind client socket. */</span></div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;srcaddr, <span class="keyword">sizeof</span>(srcaddr));</div><div class="line">    srcaddr.<a class="code" href="structpj__sockaddr__in.htm#ab298fd61a3f2bf3036fe414740a53cc6">sin_family</a> = <a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>();</div><div class="line">    srcaddr.<a class="code" href="structpj__sockaddr__in.htm#a0e60b93d03fa052211bb6131e64bdda1">sin_port</a> = <a class="code" href="group__PJ__SOCK.htm#ga25ce2f95b79d3556375804123a5eb77e">pj_htons</a>(UDP_PORT-1);</div><div class="line">    srcaddr.<a class="code" href="structpj__sockaddr__in.htm#ad1ed5a34d99da0d23e65b3b3b5fad228">sin_addr</a> = <a class="code" href="group__PJ__SOCK.htm#gabcef38a6393a6c8e398b7e3ee2dac7d1">pj_inet_addr</a>(<a class="code" href="group__PJ__PSTR.htm#ga5a57d48a802ff650d8e5186cf65b7c4a">pj_cstr</a>(&amp;s, ADDRESS));</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__SOCK.htm#ga173d6da92ef0a4f0df062bf377b4d626">pj_sock_bind</a>(cs, &amp;srcaddr, <span class="keyword">sizeof</span>(srcaddr))) != 0) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...bind error&quot;</span>, rc);</div><div class="line">        rc = -121; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line">            </div><div class="line">    <span class="comment">/* Test send/recv, with sendto */</span></div><div class="line">    rc = send_recv_test(<a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), ss, cs, &amp;dstaddr, NULL, </div><div class="line">                        <span class="keyword">sizeof</span>(dstaddr));</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">goto</span> on_error;</div><div class="line"></div><div class="line">    <span class="comment">/* Test send/recv, with sendto and recvfrom */</span></div><div class="line">    rc = send_recv_test(<a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), ss, cs, &amp;dstaddr, </div><div class="line">                        &amp;srcaddr, <span class="keyword">sizeof</span>(dstaddr));</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">goto</span> on_error;</div><div class="line"></div><div class="line">    <span class="comment">/* Disable this test on Symbian since UDP connect()/send() failed</span></div><div class="line"><span class="comment">     * with S60 3rd edition (including MR2).</span></div><div class="line"><span class="comment">     * See http://www.pjsip.org/trac/ticket/264</span></div><div class="line"><span class="comment">     */</span>    </div><div class="line"><span class="preprocessor">#if !defined(PJ_SYMBIAN) || PJ_SYMBIAN==0</span></div><div class="line">    <span class="comment">/* connect() the sockets. */</span></div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#gab351de456e475d5c50289a1cb079a8fe">pj_sock_connect</a>(cs, &amp;dstaddr, <span class="keyword">sizeof</span>(dstaddr));</div><div class="line">    <span class="keywordflow">if</span> (rc != 0) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...connect() error&quot;</span>, rc);</div><div class="line">        rc = -122; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Test send/recv with send() */</span></div><div class="line">    rc = send_recv_test(<a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), ss, cs, NULL, NULL, 0);</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">goto</span> on_error;</div><div class="line"></div><div class="line">    <span class="comment">/* Test send/recv with send() and recvfrom */</span></div><div class="line">    rc = send_recv_test(<a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), ss, cs, NULL, &amp;srcaddr, </div><div class="line">                        <span class="keyword">sizeof</span>(srcaddr));</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">goto</span> on_error;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">on_error:</div><div class="line">    retval = rc;</div><div class="line">    <span class="keywordflow">if</span> (cs != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(cs);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error in closing socket&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -1000;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (ss != <a class="code" href="group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>) {</div><div class="line">        rc = <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ss);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error in closing socket&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -1010;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> retval;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> tcp_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> cs, ss;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc = 0, retval;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...tcp_test()&quot;</span>));</div><div class="line"></div><div class="line">    rc = app_socketpair(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), 0, &amp;ss, &amp;cs);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: app_socketpair():&quot;</span>, rc);</div><div class="line">        <span class="keywordflow">return</span> -2000;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Test send/recv with send() and recv() */</span></div><div class="line">    retval = send_recv_test(<a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), ss, cs, NULL, NULL, 0);</div><div class="line"></div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(cs);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error in closing socket&quot;</span>, rc);</div><div class="line">        <span class="keywordflow">return</span> -2000;</div><div class="line">    }</div><div class="line"></div><div class="line">    rc = <a class="code" href="group__PJ__SOCK.htm#ga2f8faea76a64620b13a720227df927bb">pj_sock_close</a>(ss);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error in closing socket&quot;</span>, rc);</div><div class="line">        <span class="keywordflow">return</span> -2010;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> retval;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> ioctl_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> gethostbyname_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> host;</div><div class="line">    <a class="code" href="structpj__hostent.htm">pj_hostent</a> he;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...gethostbyname_test()&quot;</span>));</div><div class="line"></div><div class="line">    <span class="comment">/* Testing pj_gethostbyname() with invalid host */</span></div><div class="line">    host = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;an-invalid-host-name&quot;</span>);</div><div class="line">    status = <a class="code" href="group__pj__addr__resolve.htm#ga7c8264aa7743594d31766679dbae0b88">pj_gethostbyname</a>(&amp;host, &amp;he);</div><div class="line"></div><div class="line">    <span class="comment">/* Must return failure! */</span></div><div class="line">    <span class="keywordflow">if</span> (status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">        <span class="keywordflow">return</span> -20100;</div><div class="line">    <span class="keywordflow">else</span></div><div class="line">        <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#if 0</span></div><div class="line"><span class="preprocessor">#include &quot;../pj/os_symbian.h&quot;</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> connect_test()</div><div class="line">{</div><div class="line">        RSocketServ rSockServ;</div><div class="line">        RSocket rSock;</div><div class="line">        TInetAddr inetAddr;</div><div class="line">        TRequestStatus reqStatus;</div><div class="line">        <span class="keywordtype">char</span> buffer[16];</div><div class="line">        TPtrC8 data((<span class="keyword">const</span> TUint8*)buffer, (TInt)<span class="keyword">sizeof</span>(buffer));</div><div class="line">        <span class="keywordtype">int</span> rc;</div><div class="line">        </div><div class="line">        rc = rSockServ.Connect();</div><div class="line">        <span class="keywordflow">if</span> (rc != KErrNone)</div><div class="line">                <span class="keywordflow">return</span> rc;</div><div class="line">        </div><div class="line">        rc = rSock.Open(rSockServ, KAfInet, KSockDatagram, KProtocolInetUdp);</div><div class="line">        <span class="keywordflow">if</span> (rc != KErrNone) </div><div class="line">        {               </div><div class="line">                rSockServ.Close();</div><div class="line">                <span class="keywordflow">return</span> rc;</div><div class="line">        }</div><div class="line">        </div><div class="line">        inetAddr.Init(KAfInet);</div><div class="line">        inetAddr.Input(_L(<span class="stringliteral">&quot;127.0.0.1&quot;</span>));</div><div class="line">        inetAddr.SetPort(80);</div><div class="line">        </div><div class="line">        rSock.Connect(inetAddr, reqStatus);</div><div class="line">        User::WaitForRequest(reqStatus);</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (reqStatus != KErrNone) {</div><div class="line">                rSock.Close();</div><div class="line">                rSockServ.Close();</div><div class="line">                <span class="keywordflow">return</span> rc;</div><div class="line">        }</div><div class="line">    </div><div class="line">        rSock.Send(data, 0, reqStatus);</div><div class="line">        User::WaitForRequest(reqStatus);</div><div class="line">        </div><div class="line">        <span class="keywordflow">if</span> (reqStatus!=KErrNone) {</div><div class="line">                rSock.Close();</div><div class="line">                rSockServ.Close();</div><div class="line">                <span class="keywordflow">return</span> rc;</div><div class="line">        }</div><div class="line">        </div><div class="line">        rSock.Close();</div><div class="line">        rSockServ.Close();</div><div class="line">        <span class="keywordflow">return</span> KErrNone;</div><div class="line">}</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> sock_test()</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> rc;</div><div class="line">    </div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a>(bigdata, BIG_DATA_LEN);</div><div class="line"></div><div class="line"><span class="comment">// Enable this to demonstrate the error witn S60 3rd Edition MR2</span></div><div class="line"><span class="preprocessor">#if 0</span></div><div class="line">    rc = connect_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">    </div><div class="line">    rc = format_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = parse_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = purity_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = gethostbyname_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = simple_sock_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = ioctl_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = udp_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = tcp_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div><div class="line"><span class="comment"> * when this test is disabled. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> dummy_sock_test;</div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_SOCK_TEST */</span><span class="preprocessor"></span></div><div class="line"></div></div><!-- fragment --> </div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
