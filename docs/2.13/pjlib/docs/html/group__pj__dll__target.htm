<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Building Dynamic Link Libraries (DLL/DSO) (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">Building Dynamic Link Libraries (DLL/DSO)<div class="ingroups"><a class="el" href="group__pj__config.htm">Build Configuration</a></div></div></div>
</div><!--header-->
<div class="contents">
<p >The libraries support generation of dynamic link libraries for Symbian ABIv2 target (.dso/Dynamic Shared Object files, in Symbian terms). Similar procedures may be applied for Win32 DLL with some modification.</p>
<p >Depending on the platforms, these steps may be necessary in order to produce the dynamic libraries:</p><ul>
<li>Create the (Visual Studio) projects to produce DLL output. PJLIB does not provide ready to use project files to produce DLL, so you need to create these projects yourself. For Symbian, the MMP files have been setup to produce DSO files for targets that require them.</li>
<li>In the (Visual Studio) projects, some macros need to be declared so that appropriate modifiers are added to symbol declarations and definitions. Please see the macro section below for information regarding these macros. For Symbian, these have been taken care by the MMP files.</li>
<li>Some build systems require .DEF file to be specified when creating the DLL. For Symbian, .DEF files are included in pjlib distribution, in <code>pjlib/build.symbian</code> directory. These DEF files are created by running <code>./makedef.sh all</code> from this directory, inside Mingw.</li>
</ul>
<p >Macros related for building DLL/DSO files:</p><ul>
<li>For platforms that supports dynamic link libraries generation, it must declare <code>PJ_EXPORT_SPECIFIER</code> macro which value contains the prefix to be added to symbol definition, to export this symbol in the DLL/DSO. For example, on Win32/Visual Studio, the value of this macro is <em>__declspec(dllexport)</em>, and for ARM ABIv2/Symbian, the value is <em>EXPORT_C</em>.</li>
<li>For platforms that supports linking with dynamic link libraries, it must declare <code>PJ_IMPORT_SPECIFIER</code> macro which value contains the prefix to be added to symbol declaration, to import this symbol from a DLL/DSO. For example, on Win32/Visual Studio, the value of this macro is <em>__declspec(dllimport)</em>, and for ARM ABIv2/Symbian, the value is <em>IMPORT_C</em>.</li>
<li>Both <code>PJ_EXPORT_SPECIFIER</code> and <code>PJ_IMPORT_SPECIFIER</code> macros above can be declared in your <em>config_site.h</em> if they are not declared by pjlib.</li>
<li>When PJLIB is built as DLL/DSO, both <code>PJ_DLL</code> and <code>PJ_EXPORTING</code> macros must be declared, so that <code>PJ_EXPORT_SPECIFIER</code> modifier will be added into function definition.</li>
<li>When application wants to link dynamically with PJLIB, then it must declare <code>PJ_DLL</code> macro when using/including PJLIB header, so that <code>PJ_IMPORT_SPECIFIER</code> modifier is properly added into symbol declarations.</li>
</ul>
<p >When <b>PJ_DLL</b> macro is not declared, static linking is assumed.</p>
<p >For example, here are some settings to produce DLLs with Visual Studio on Windows/Win32:</p><ul>
<li>Create Visual Studio projects to produce DLL. Add the appropriate project dependencies to avoid link errors.</li>
<li>In the projects, declare <code>PJ_DLL</code> and <code>PJ_EXPORTING</code> macros.</li>
<li>Declare these macros in your <code>config_site.h</code>: <pre class="fragment">       #define PJ_EXPORT_SPECIFIER  __declspec(dllexport)
       #define PJ_IMPORT_SPECIFIER  __declspec(dllimport)
</pre></li>
<li>And in the application (that links with the DLL) project, add <code>PJ_DLL</code> in the macro declarations. </li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
