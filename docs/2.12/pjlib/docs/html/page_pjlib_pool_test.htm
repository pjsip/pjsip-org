<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: Pool (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Test: Pool </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This file provides implementation of <b>pool_test()</b>. It tests the functionality of the memory pool.</p>
<p>This file is <b>pjlib-test/pool.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* $Id$ */</span></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div><div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><span class="comment"> * (at your option) any later version.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div><div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="pool_8h.htm">pj/pool.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;pj/pool_buf.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="rand_8h.htm">pj/rand.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="log_8h.htm">pj/log.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="except_8h.htm">pj/except.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if INCLUDE_POOL_TEST</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define SIZE    4096</span></div><div class="line"></div><div class="line"><span class="comment">/* Normally we should throw exception when memory alloc fails.</span></div><div class="line"><span class="comment"> * Here we do nothing so that the flow will go back to original caller,</span></div><div class="line"><span class="comment"> * which will test the result using NULL comparison. Normally caller will</span></div><div class="line"><span class="comment"> * catch the exception instead of checking for NULLs.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> null_callback(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</div><div class="line">{</div><div class="line">    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(pool);</div><div class="line">    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(size);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#define GET_FREE(p)     (pj_pool_get_capacity(p)-pj_pool_get_used_size(p))</span></div><div class="line"></div><div class="line"><span class="comment">/* Test that the capacity and used size reported by the pool is correct. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> capacity_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, SIZE, 0, &amp;null_callback);</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> freesize;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...capacity_test()&quot;</span>));</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (!pool)</div><div class="line">        <span class="keywordflow">return</span> -200;</div><div class="line"></div><div class="line">    freesize = GET_FREE(pool);</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, freesize) == NULL) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: wrong freesize %u reported&quot;</span>,</div><div class="line">                          freesize));</div><div class="line">        <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">        <span class="keywordflow">return</span> -210;</div><div class="line">    }</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Test that the alignment works. */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> pool_alignment_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    <span class="keywordtype">void</span> *ptr;</div><div class="line">    <span class="keyword">enum</span> { MEMSIZE = 64, LOOP = 100 };</div><div class="line">    <span class="keywordtype">unsigned</span> i;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...alignment test&quot;</span>));</div><div class="line"></div><div class="line">    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, <a class="code" href="group__PJ__POOL.htm#ga1c2e8be344e0e510145d5888636538be">PJ_POOL_SIZE</a>+MEMSIZE, MEMSIZE, NULL);</div><div class="line">    <span class="keywordflow">if</span> (!pool)</div><div class="line">        <span class="keywordflow">return</span> -300;</div><div class="line"></div><div class="line"><span class="preprocessor">#define IS_ALIGNED(p)   ((((unsigned long)(pj_ssize_t)p) &amp; \</span></div><div class="line"><span class="preprocessor">                           (PJ_POOL_ALIGNMENT-1)) == 0)</span></div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {</div><div class="line">        <span class="comment">/* Test first allocation */</span></div><div class="line">        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);</div><div class="line">        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {</div><div class="line">            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">            <span class="keywordflow">return</span> -310;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Test subsequent allocation */</span></div><div class="line">        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);</div><div class="line">        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {</div><div class="line">            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">            <span class="keywordflow">return</span> -320;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Test allocation after new block is created */</span></div><div class="line">        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, MEMSIZE*2+1);</div><div class="line">        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {</div><div class="line">            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">            <span class="keywordflow">return</span> -330;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Reset the pool */</span></div><div class="line">        <a class="code" href="group__PJ__POOL.htm#ga8bfe679642e35ec7f1f6704f55a1610c">pj_pool_reset</a>(pool);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Done */</span></div><div class="line">    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Test that the alignment works for pool on buf. */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> pool_buf_alignment_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    <span class="keywordtype">char</span> buf[512];</div><div class="line">    <span class="keywordtype">void</span> *ptr;</div><div class="line">    <span class="keyword">enum</span> { LOOP = 100 };</div><div class="line">    <span class="keywordtype">unsigned</span> i;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...pool_buf alignment test&quot;</span>));</div><div class="line"></div><div class="line">    pool = <a class="code" href="group__PJ__POOL__BUFFER.htm#ga57c62164684222744367e6ed93bb0253">pj_pool_create_on_buf</a>(NULL, buf, <span class="keyword">sizeof</span>(buf));</div><div class="line">    <span class="keywordflow">if</span> (!pool)</div><div class="line">        <span class="keywordflow">return</span> -400;</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {</div><div class="line">        <span class="comment">/* Test first allocation */</span></div><div class="line">        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);</div><div class="line">        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {</div><div class="line">            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">            <span class="keywordflow">return</span> -410;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Test subsequent allocation */</span></div><div class="line">        ptr = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 1);</div><div class="line">        <span class="keywordflow">if</span> (!IS_ALIGNED(ptr)) {</div><div class="line">            <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">            <span class="keywordflow">return</span> -420;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Reset the pool */</span></div><div class="line">        <a class="code" href="group__PJ__POOL.htm#ga8bfe679642e35ec7f1f6704f55a1610c">pj_pool_reset</a>(pool);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Done */</span></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Test function to drain the pool&#39;s space. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> drain_test(<a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size, <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> increment)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, size, increment, </div><div class="line">                                     &amp;null_callback);</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> freesize;</div><div class="line">    <span class="keywordtype">void</span> *p;</div><div class="line">    <span class="keywordtype">int</span> status = 0;</div><div class="line">    </div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...drain_test(%d,%d)&quot;</span>, size, increment));</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (!pool)</div><div class="line">        <span class="keywordflow">return</span> -10;</div><div class="line"></div><div class="line">    <span class="comment">/* Get free size */</span></div><div class="line">    freesize = GET_FREE(pool);</div><div class="line">    <span class="keywordflow">if</span> (freesize &lt; 1) {</div><div class="line">        status=-15; </div><div class="line">        <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Drain the pool until there&#39;s nothing left. */</span></div><div class="line">    <span class="keywordflow">while</span> (freesize &gt; 0) {</div><div class="line">        <span class="keywordtype">int</span> size2;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (freesize &gt; 255)</div><div class="line">            size2 = ((<a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() &amp; 0x000000FF) + <a class="code" href="group__PJ__POOL.htm#ga83e2da94131c06db0b620d4fc65c6abb">PJ_POOL_ALIGNMENT</a>) &amp; </div><div class="line">                   ~(<a class="code" href="group__PJ__POOL.htm#ga83e2da94131c06db0b620d4fc65c6abb">PJ_POOL_ALIGNMENT</a> - 1);</div><div class="line">        <span class="keywordflow">else</span></div><div class="line">            size2 = (<a class="code" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>)freesize;</div><div class="line"></div><div class="line">        p = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, size2);</div><div class="line">        <span class="keywordflow">if</span> (!p) {</div><div class="line">            status=-20; <span class="keywordflow">goto</span> on_error;</div><div class="line">        }</div><div class="line"></div><div class="line">        freesize -= size2;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Check that capacity is zero. */</span></div><div class="line">    <span class="keywordflow">if</span> (GET_FREE(pool) != 0) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....error: returned free=%u (expecting 0)&quot;</span>,</div><div class="line">                  GET_FREE(pool)));</div><div class="line">        status=-30; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Try to allocate once more */</span></div><div class="line">    p = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 257);</div><div class="line">    <span class="keywordflow">if</span> (!p) {</div><div class="line">        status=-40; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Check that capacity is NOT zero. */</span></div><div class="line">    <span class="keywordflow">if</span> (GET_FREE(pool) == 0) {</div><div class="line">        status=-50; <span class="keywordflow">goto</span> on_error;</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">on_error:</div><div class="line">    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">    <span class="keywordflow">return</span> status;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Test the buffer based pool */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> pool_buf_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keyword">enum</span> { STATIC_BUF_SIZE = 40 };</div><div class="line">    <span class="comment">/* 16 is the internal struct in pool_buf */</span></div><div class="line">    <span class="keyword">static</span> <span class="keywordtype">char</span> buf[ STATIC_BUF_SIZE + <span class="keyword">sizeof</span>(<a class="code" href="structpj__pool__t.htm">pj_pool_t</a>) + </div><div class="line">                     <span class="keyword">sizeof</span>(<a class="code" href="structpj__pool__block.htm">pj_pool_block</a>) + 2 * <a class="code" href="group__PJ__POOL.htm#ga83e2da94131c06db0b620d4fc65c6abb">PJ_POOL_ALIGNMENT</a>];</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    <span class="keywordtype">void</span> *p;</div><div class="line">    <a class="code" href="except_8h.htm#ae6b16c80d1dd667bf1adaa659ed6e95c">PJ_USE_EXCEPTION</a>;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...pool_buf test&quot;</span>));</div><div class="line"></div><div class="line">    pool = <a class="code" href="group__PJ__POOL__BUFFER.htm#ga57c62164684222744367e6ed93bb0253">pj_pool_create_on_buf</a>(<span class="stringliteral">&quot;no name&quot;</span>, buf, <span class="keyword">sizeof</span>(buf));</div><div class="line">    <span class="keywordflow">if</span> (!pool)</div><div class="line">        <span class="keywordflow">return</span> -70;</div><div class="line"></div><div class="line">    <span class="comment">/* Drain the pool */</span></div><div class="line">    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {</div><div class="line">        <span class="keywordflow">if</span> ((p=<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, STATIC_BUF_SIZE/2)) == NULL)</div><div class="line">            <span class="keywordflow">return</span> -75;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> ((p=<a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, STATIC_BUF_SIZE/2)) == NULL)</div><div class="line">            <span class="keywordflow">return</span> -76;</div><div class="line">    }</div><div class="line">    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {</div><div class="line">        <span class="keywordflow">return</span> -77;</div><div class="line">    }</div><div class="line">    <a class="code" href="except_8h.htm#aa9e7a44e709211c2d4346146eb2ecf45">PJ_END</a>;</div><div class="line"></div><div class="line">    <span class="comment">/* On the next alloc, exception should be thrown */</span></div><div class="line">    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {</div><div class="line">        p = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, STATIC_BUF_SIZE);</div><div class="line">        <span class="keywordflow">if</span> (p != NULL) {</div><div class="line">            <span class="comment">/* This is unexpected, the alloc should fail */</span></div><div class="line">            <span class="keywordflow">return</span> -78;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {</div><div class="line">        <span class="comment">/* This is the expected result */</span></div><div class="line">    }</div><div class="line">    <a class="code" href="except_8h.htm#aa9e7a44e709211c2d4346146eb2ecf45">PJ_END</a>;</div><div class="line"></div><div class="line">    <span class="comment">/* Done */</span></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> pool_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keyword">enum</span> { LOOP = 2 };</div><div class="line">    <span class="keywordtype">int</span> loop;</div><div class="line">    <span class="keywordtype">int</span> rc;</div><div class="line"></div><div class="line">    rc = capacity_test();</div><div class="line">    <span class="keywordflow">if</span> (rc) <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = pool_alignment_test();</div><div class="line">    <span class="keywordflow">if</span> (rc) <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = pool_buf_alignment_test();</div><div class="line">    <span class="keywordflow">if</span> (rc) <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (loop=0; loop&lt;LOOP; ++loop) {</div><div class="line">        <span class="comment">/* Test that the pool should grow automaticly. */</span></div><div class="line">        rc = drain_test(SIZE, SIZE);</div><div class="line">        <span class="keywordflow">if</span> (rc != 0) <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">        <span class="comment">/* Test situation where pool is not allowed to grow. </span></div><div class="line"><span class="comment">         * We expect the test to return correct error.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        rc = drain_test(SIZE, 0);</div><div class="line">        <span class="keywordflow">if</span> (rc != -40) <span class="keywordflow">return</span> rc;</div><div class="line">    }</div><div class="line"></div><div class="line">    rc = pool_buf_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div><div class="line"><span class="comment"> * when this test is disabled. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> dummy_pool_test;</div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_POOL_TEST */</span><span class="preprocessor"></span></div><div class="line"></div></div><!-- fragment --> </div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
