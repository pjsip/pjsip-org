<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Stack/Buffer Based Memory Pool Allocator (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>Stack/Buffer Based Memory Pool Allocator<br/>
<small>
[<a class="el" href="group__PJ__POOL__GROUP.htm">Fast Memory Pool</a>]</small>
</h1>  </div>
</div>
<div class="contents">

<p>Stack/buffer based pool.  
<a href="#_details">More...</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">PJ_BEGIN_DECL <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__POOL__BUFFER.htm#ga57c62164684222744367e6ed93bb0253">pj_pool_create_on_buf</a> (const char *name, void *buf, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Stack/buffer based pool. </p>
<p>This section describes an implementation of memory pool which uses memory allocated from the stack. Application creates this pool by specifying a buffer (which can be allocated from static memory or stack variable), and then use normal pool API to access/use the pool.</p>
<p>If the buffer specified during pool creation is a buffer located in the stack, the pool will be invalidated (or implicitly destroyed) when the execution leaves the enclosing block containing the buffer. Note that application must make sure that any objects allocated from this pool (such as mutexes) have been destroyed before the pool gets invalidated.</p>
<p>Sample usage:</p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">  #include &lt;pjlib.h&gt;</span>

  <span class="keyword">static</span> <span class="keywordtype">void</span> test()
  {
    <span class="keywordtype">char</span> buffer[500];
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <span class="keywordtype">void</span> *p;

    pool = <a class="code" href="group__PJ__POOL__BUFFER.htm#ga57c62164684222744367e6ed93bb0253">pj_pool_create_on_buf</a>(<span class="stringliteral">&quot;thepool&quot;</span>, buffer, <span class="keyword">sizeof</span>(buffer));

    <span class="comment">// Use the pool as usual</span>
    p = <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, ...);
    ...

    <span class="comment">// No need to release the pool</span>
  }

  <span class="keywordtype">int</span> main()
  {
    <a class="code" href="group__PJ__BASIC.htm#ga069615152140fa2df009cebc8a36b769">pj_init</a>();
    test();
    <span class="keywordflow">return</span> 0;
  }
</pre></div> <hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga57c62164684222744367e6ed93bb0253"></a><!-- doxytag: member="pool_buf.h::pj_pool_create_on_buf" ref="ga57c62164684222744367e6ed93bb0253" args="(const char *name, void *buf, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PJ_BEGIN_DECL <a class="el" href="structpj__pool__t.htm">pj_pool_t</a>* pj_pool_create_on_buf </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create the pool using the specified buffer as the pool's memory. Subsequent allocations made from the pool will use the memory from this buffer.</p>
<p>If the buffer specified in the parameter is a buffer located in the stack, the pool will be invalid (or implicitly destroyed) when the execution leaves the enclosing block containing the buffer. Note that application must make sure that any objects allocated from this pool (such as mutexes) have been destroyed before the pool gets invalidated.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Optional pool name. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>Buffer to be used by the pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The size of the buffer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The memory pool instance. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
