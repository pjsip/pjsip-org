<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Simple STUN Helper (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB-UTIL Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Simple STUN Helper<div class="ingroups"><a class="el" href="group__PJ__PROTOCOLS.htm">Protocols</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>A simple and small footprint STUN resolution helper.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjstun__setting.htm">pjstun_setting</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaac0cc7867194f78245408c416242c3f5"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJLIB__UTIL__STUN__CLIENT.htm#gaac0cc7867194f78245408c416242c3f5">pjstun_get_mapped_addr</a> (<a class="elRef" href="../../../pjlib/docs/html/structpj__pool__factory.htm">pj_pool_factory</a> *pf, int sock_cnt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock[], const <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *srv1, int port1, const <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *srv2, int port2, <a class="elRef" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a> mapped_addr[])</td></tr>
<tr class="separator:gaac0cc7867194f78245408c416242c3f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6cd3c7db6654e9f9273135b9e4fcfeed"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJLIB__UTIL__STUN__CLIENT.htm#ga6cd3c7db6654e9f9273135b9e4fcfeed">pjstun_get_mapped_addr2</a> (<a class="elRef" href="../../../pjlib/docs/html/structpj__pool__factory.htm">pj_pool_factory</a> *pf, const <a class="el" href="structpjstun__setting.htm">pjstun_setting</a> *opt, int sock_cnt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> sock[], <a class="elRef" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a> mapped_addr[])</td></tr>
<tr class="separator:ga6cd3c7db6654e9f9273135b9e4fcfeed"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >A simple and small footprint STUN resolution helper. </p>
<p >This is the older implementation of STUN client, with only one function provided (<a class="el" href="group__PJLIB__UTIL__STUN__CLIENT.htm#gaac0cc7867194f78245408c416242c3f5">pjstun_get_mapped_addr()</a>) to retrieve the public IP address of multiple sockets. </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="gaac0cc7867194f78245408c416242c3f5" name="gaac0cc7867194f78245408c416242c3f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaac0cc7867194f78245408c416242c3f5">&#9670;&nbsp;</a></span>pjstun_get_mapped_addr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjstun_get_mapped_addr </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__pool__factory.htm">pj_pool_factory</a> *&#160;</td>
          <td class="paramname"><em>pf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock_cnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>&#160;</td>
          <td class="paramname"><em>sock</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>srv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>port1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *&#160;</td>
          <td class="paramname"><em>srv2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>port2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a>&#160;</td>
          <td class="paramname"><em>mapped_addr</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This is the main function to request the mapped address of local sockets to multiple STUN servers. This function is able to find the mapped addresses of multiple sockets simultaneously, and for each socket, two requests will be sent to two different STUN servers to see if both servers get the same public address for the same socket. (Note that application can specify the same address for the two servers, but still two requests will be sent for each server).</p>
<p >This function will perform necessary retransmissions of the requests if response is not received within a predetermined period. When all responses have been received, the function will compare the mapped addresses returned by the servers, and when both are equal, the address will be returned in <em>mapped_addr</em> argument.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pf</td><td>The pool factory where memory will be allocated from. </td></tr>
    <tr><td class="paramname">sock_cnt</td><td>Number of sockets in the socket array. </td></tr>
    <tr><td class="paramname">sock</td><td>Array of local UDP sockets which public addresses are to be queried from the STUN servers. </td></tr>
    <tr><td class="paramname">srv1</td><td>Host name or IP address string of the first STUN server. </td></tr>
    <tr><td class="paramname">port1</td><td>The port number of the first STUN server. </td></tr>
    <tr><td class="paramname">srv2</td><td>Host name or IP address string of the second STUN server. </td></tr>
    <tr><td class="paramname">port2</td><td>The port number of the second STUN server. </td></tr>
    <tr><td class="paramname">mapped_addr</td><td>Array to receive the mapped public address of the local UDP sockets, when the function returns PJ_SUCCESS.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>This functions returns PJ_SUCCESS if responses are received from all servers AND all servers returned the same mapped public address. Otherwise this function may return one of the following error codes:<ul>
<li>PJLIB_UTIL_ESTUNNOTRESPOND: no respons from servers.</li>
<li>PJLIB_UTIL_ESTUNSYMMETRIC: different mapped addresses are returned by servers.</li>
<li>etc. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ga6cd3c7db6654e9f9273135b9e4fcfeed" name="ga6cd3c7db6654e9f9273135b9e4fcfeed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6cd3c7db6654e9f9273135b9e4fcfeed">&#9670;&nbsp;</a></span>pjstun_get_mapped_addr2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjstun_get_mapped_addr2 </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__pool__factory.htm">pj_pool_factory</a> *&#160;</td>
          <td class="paramname"><em>pf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjstun__setting.htm">pjstun_setting</a> *&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock_cnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>&#160;</td>
          <td class="paramname"><em>sock</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__sockaddr__in.htm">pj_sockaddr_in</a>&#160;</td>
          <td class="paramname"><em>mapped_addr</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Another version of mapped address resolution of local sockets to multiple STUN servers configured in <a class="el" href="structpjstun__setting.htm">pjstun_setting</a>. This function is able to find the mapped addresses of multiple sockets simultaneously, and for each socket, two requests will be sent to two different STUN servers to see if both servers get the same public address for the same socket. (Note that application can specify the same address for the two servers, but still two requests will be sent for each server).</p>
<p >This function will perform necessary retransmissions of the requests if response is not received within a predetermined period. When all responses have been received, the function will compare the mapped addresses returned by the servers, and when both are equal, the address will be returned in <em>mapped_addr</em> argument.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pf</td><td>The pool factory where memory will be allocated from. </td></tr>
    <tr><td class="paramname">opt</td><td>The STUN settings. </td></tr>
    <tr><td class="paramname">sock_cnt</td><td>Number of sockets in the socket array. </td></tr>
    <tr><td class="paramname">sock</td><td>Array of local UDP sockets which public addresses are to be queried from the STUN servers. </td></tr>
    <tr><td class="paramname">mapped_addr</td><td>Array to receive the mapped public address of the local UDP sockets, when the function returns PJ_SUCCESS.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>This functions returns PJ_SUCCESS if responses are received from all servers AND all servers returned the same mapped public address. Otherwise this function may return one of the following error codes:<ul>
<li>PJLIB_UTIL_ESTUNNOTRESPOND: no respons from servers.</li>
<li>PJLIB_UTIL_ESTUNSYMMETRIC: different mapped addresses are returned by servers.</li>
<li>etc. </li>
</ul>
</dd></dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac961f7d199eeed7666ab3ec2442c1b00">PJ_END_DECL</a>.</p>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB-UTIL Open Source, small footprint, and portable asynchronous/caching DNS resolver, text scanner, STUN client, and XML library<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
