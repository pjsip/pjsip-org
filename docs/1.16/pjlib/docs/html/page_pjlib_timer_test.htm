<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Timer (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Timer </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation of <b>timer_test()</b>. It tests the functionality of the timer heap.</p>
<p>This file is <b>pjlib-test/timer.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: timer.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>

<span class="preprocessor">#if INCLUDE_TIMER_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>

<span class="preprocessor">#define LOOP            16</span>
<span class="preprocessor"></span><span class="preprocessor">#define MIN_COUNT       250</span>
<span class="preprocessor"></span><span class="preprocessor">#define MAX_COUNT       (LOOP * MIN_COUNT)</span>
<span class="preprocessor"></span><span class="preprocessor">#define MIN_DELAY       2</span>
<span class="preprocessor"></span><span class="preprocessor">#define D               (MAX_COUNT / 32000)</span>
<span class="preprocessor"></span><span class="preprocessor">#define DELAY           (D &lt; MIN_DELAY ? MIN_DELAY : D)</span>
<span class="preprocessor"></span><span class="preprocessor">#define THIS_FILE       &quot;timer_test&quot;</span>
<span class="preprocessor"></span>

<span class="keyword">static</span> <span class="keywordtype">void</span> timer_callback(<a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *ht, <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *e)
{
    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(ht);
    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);
}

<span class="keyword">static</span> <span class="keywordtype">int</span> test_timer_heap(<span class="keywordtype">void</span>)
{
    <span class="keywordtype">int</span> i, j;
    <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *entry;
    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;
    <a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *timer;
    <a class="code" href="structpj__time__val.htm">pj_time_val</a> delay;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;    <span class="keywordtype">int</span> err=0;
    <span class="keywordtype">unsigned</span> size, count;

    size = <a class="code" href="group__PJ__TIMER.htm#gab14375d4993080837ae1709c74796ca7">pj_timer_heap_mem_size</a>(MAX_COUNT)+MAX_COUNT*<span class="keyword">sizeof</span>(<a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a>);
    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>( mem, NULL, size, 4000, NULL);
    <span class="keywordflow">if</span> (!pool) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: unable to create pool of %u bytes&quot;</span>,
                  size));
        <span class="keywordflow">return</span> -10;
    }

    entry = (<a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a>*)<a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, MAX_COUNT, <span class="keyword">sizeof</span>(*entry));
    <span class="keywordflow">if</span> (!entry)
        <span class="keywordflow">return</span> -20;

    <span class="keywordflow">for</span> (i=0; i&lt;MAX_COUNT; ++i) {
        entry[i].<a class="code" href="structpj__timer__entry.htm#a13e63641afbb94298b79967585c0f642">cb</a> = &amp;timer_callback;
    }
    rc = <a class="code" href="group__PJ__TIMER.htm#gac23ecc3a7d6779be2183149da9a841d5">pj_timer_heap_create</a>(pool, MAX_COUNT, &amp;timer);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...error: unable to create timer heap&quot;</span>, rc);
        <span class="keywordflow">return</span> -30;
    }

    count = MIN_COUNT;
    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {
        <span class="keywordtype">int</span> early = 0;
        <span class="keywordtype">int</span> done=0;
        <span class="keywordtype">int</span> cancelled=0;
        <span class="keywordtype">int</span> rc;
        <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t1, t2, t_sched, t_cancel, t_poll;
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> now, expire;

        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);
        <a class="code" href="group__PJ__RAND.htm#gab1a26d78213bb31ec7ecd0dddde3f787">pj_srand</a>(now.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>);
        t_sched.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = t_cancel.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = t_poll.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;

        <span class="comment">// Register timers</span>
        <span class="keywordflow">for</span> (j=0; j&lt;(int)count; ++j) {
            delay.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % DELAY;
            delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % 1000;

            <span class="comment">// Schedule timer</span>
            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);
            rc = <a class="code" href="group__PJ__TIMER.htm#ga70651768f9361e9cda3c1d24fec924f7">pj_timer_heap_schedule</a>(timer, &amp;entry[j], &amp;delay);
            <span class="keywordflow">if</span> (rc != 0)
                <span class="keywordflow">return</span> -40;
            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);

            t_sched.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);

            <span class="comment">// Poll timers.</span>
            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);
            rc = <a class="code" href="group__PJ__TIMER.htm#ga591fb436503b441ef00e6a4fe2a3117f">pj_timer_heap_poll</a>(timer, NULL);
            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);
            <span class="keywordflow">if</span> (rc &gt; 0) {
                t_poll.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);
                early += rc;
            }
        }

        <span class="comment">// Set the time where all timers should finish</span>
        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;expire);
        delay.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = DELAY; 
        delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;
        <a class="code" href="group__PJ__TIME.htm#ga4eb53e12a590f9f09172602e21e9911f">PJ_TIME_VAL_ADD</a>(expire, delay);

        <span class="comment">// Wait unfil all timers finish, cancel some of them.</span>
        <span class="keywordflow">do</span> {
            <span class="keywordtype">int</span> index = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % count;
            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);
            rc = <a class="code" href="group__PJ__TIMER.htm#ga522fb9ade28878a32d7c76e4f90f35ee">pj_timer_heap_cancel</a>(timer, &amp;entry[index]);
            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);
            <span class="keywordflow">if</span> (rc &gt; 0) {
                cancelled += rc;
                t_cancel.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);
            }

            <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);

            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);
<span class="preprocessor">#if defined(PJ_SYMBIAN) &amp;&amp; PJ_SYMBIAN!=0</span>
<span class="preprocessor"></span>            <span class="comment">/* On Symbian, we must use OS poll (Active Scheduler poll) since </span>
<span class="comment">             * timer is implemented using Active Object.</span>
<span class="comment">             */</span>
            rc = 0;
            <span class="keywordflow">while</span> (<a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 0))
                ++rc;
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>            rc = <a class="code" href="group__PJ__TIMER.htm#ga591fb436503b441ef00e6a4fe2a3117f">pj_timer_heap_poll</a>(timer, NULL);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);
            <span class="keywordflow">if</span> (rc &gt; 0) {
                done += rc;
                t_poll.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);
            }

        } <span class="keywordflow">while</span> (<a class="code" href="group__PJ__TIME.htm#ga33a03349659e92074f1d39a137047385">PJ_TIME_VAL_LTE</a>(now, expire)&amp;&amp;<a class="code" href="group__PJ__TIMER.htm#ga0d2e2c0a9fad51dc159848aa412c9b1b">pj_timer_heap_count</a>(timer) &gt; 0);

        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__TIMER.htm#ga0d2e2c0a9fad51dc159848aa412c9b1b">pj_timer_heap_count</a>(timer)) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;ERROR: %d timers left&quot;</span>, 
                       <a class="code" href="group__PJ__TIMER.htm#ga0d2e2c0a9fad51dc159848aa412c9b1b">pj_timer_heap_count</a>(timer)));
            ++err;
        }
        t_sched.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> /= count; 
        t_cancel.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> /= count;
        t_poll.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> /= count;
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, 
                <span class="stringliteral">&quot;...ok (count:%d, early:%d, cancelled:%d, &quot;</span>
                <span class="stringliteral">&quot;sched:%d, cancel:%d poll:%d)&quot;</span>, 
                count, early, cancelled, t_sched.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>, t_cancel.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>,
                t_poll.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>));

        count = count * 2;
        <span class="keywordflow">if</span> (count &gt; MAX_COUNT)
            <span class="keywordflow">break</span>;
    }

    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);
    <span class="keywordflow">return</span> err;
}


<span class="keywordtype">int</span> timer_test()
{
    <span class="keywordflow">return</span> test_timer_heap();
}

<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_timer_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_TIMER_TEST */</span>


</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
