<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Exception Handling (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Exception Handling<div class="ingroups"><a class="el" href="group__PJ__MISC.htm">Miscelaneous</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gacf20c1cddd2875d1353d4d8d6672040e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__EXCEPT.htm#gacf20c1cddd2875d1353d4d8d6672040e">pj_exception_id_alloc</a> (const char *name, <a class="el" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> *id)</td></tr>
<tr class="separator:gacf20c1cddd2875d1353d4d8d6672040e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec8f315655bffd077875e6bfbfc0a156"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__EXCEPT.htm#gaec8f315655bffd077875e6bfbfc0a156">pj_exception_id_free</a> (<a class="el" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> id)</td></tr>
<tr class="separator:gaec8f315655bffd077875e6bfbfc0a156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ad4985730d5f311fcf9568335d8b1f6"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__EXCEPT.htm#ga3ad4985730d5f311fcf9568335d8b1f6">pj_exception_id_name</a> (<a class="el" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> id)</td></tr>
<tr class="separator:ga3ad4985730d5f311fcf9568335d8b1f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h1><a class="anchor" id="pj_except_sample_sec"></a>
Quick Example</h1>
<p>For the impatient, take a look at some examples:</p><ul>
<li><a class="el" href="page_pjlib_samples_except_c.htm">Example: Exception Handling</a></li>
<li><a class="el" href="page_pjlib_exception_test.htm">Test: Exception Handling</a></li>
</ul>
<h1><a class="anchor" id="pj_except_except"></a>
Exception Handling</h1>
<p>This module provides exception handling syntactically similar to C++ in C language. In Win32 systems, it uses Windows Structured Exception Handling (SEH) if macro PJ_EXCEPTION_USE_WIN32_SEH is non-zero. Otherwise it will use setjmp() and longjmp().</p>
<p>On some platforms where setjmp/longjmp is not available, setjmp/longjmp implementation is provided. See &lt;pj/compat/setjmp.h&gt; for compatibility.</p>
<p>The exception handling mechanism is completely thread safe, so the exception thrown by one thread will not interfere with other thread.</p>
<p>The exception handling constructs are similar to C++. The blocks will be constructed similar to the following sample:</p>
<pre class="fragment"> #define NO_MEMORY     1
 #define SYNTAX_ERROR  2

 int sample1()
 {
    PJ_USE_EXCEPTION;  // declare local exception stack.

    PJ_TRY {
      ...// do something..
    }
    PJ_CATCH(NO_MEMORY) {
      ... // handle exception 1
    }
    PJ_END;
 }

 int sample2()
 {
    PJ_USE_EXCEPTION;  // declare local exception stack.

    PJ_TRY {
      ...// do something..
    }
    PJ_CATCH_ANY {
       if (PJ_GET_EXCEPTION() == NO_MEMORY)
          ...; // handle no memory situation
       else if (PJ_GET_EXCEPTION() == SYNTAX_ERROR)
          ...; // handle syntax error
    }
    PJ_END;
 }</pre><p>The above sample uses hard coded exception ID. It is <b>strongly</b> recommended that applications request a unique exception ID instead of hard coded value like above.</p>
<h1><a class="anchor" id="pj_except_reg"></a>
Exception ID Allocation</h1>
<p>To ensure that exception ID (number) are used consistently and to prevent ID collisions in an application, it is strongly suggested that applications allocate an exception ID for each possible exception type. As a bonus of this process, the application can identify the name of the exception when the particular exception is thrown.</p>
<p>Exception ID management are performed with the following APIs:</p><ul>
<li><a class="el" href="group__PJ__EXCEPT.htm#gacf20c1cddd2875d1353d4d8d6672040e">pj_exception_id_alloc()</a>.</li>
<li><a class="el" href="group__PJ__EXCEPT.htm#gaec8f315655bffd077875e6bfbfc0a156">pj_exception_id_free()</a>.</li>
<li><a class="el" href="group__PJ__EXCEPT.htm#ga3ad4985730d5f311fcf9568335d8b1f6">pj_exception_id_name()</a>.</li>
</ul>
<p>PJLIB itself automatically allocates one exception id, i.e. #PJ_NO_MEMORY_EXCEPTION which is declared in &lt;<a class="el" href="pool_8h.htm" title="Memory Pool. ">pj/pool.h</a>&gt;. This exception ID is raised by default pool policy when it fails to allocate memory.</p>
<p>CAVEATS:</p><ul>
<li>unlike C++ exception, the scheme here won't call destructors of local objects if exception is thrown. Care must be taken when a function hold some resorce such as pool or mutex etc.</li>
<li>You CAN NOT make nested exception in one single function without using a nested PJ_USE_EXCEPTION. Samples: <pre class="fragment">      void wrong_sample()
      {
          PJ_USE_EXCEPTION;

          PJ_TRY {
        // Do stuffs
        ...
          }
          PJ_CATCH_ANY {
        // Do other stuffs
        ....
        ..

        // The following block is WRONG! You MUST declare 
        // PJ_USE_EXCEPTION once again in this block.
        PJ_TRY {
            ..
        }
        PJ_CATCH_ANY {
            ..
        }
        PJ_END;
          }
          PJ_END;
      }</pre></li>
<li>You MUST NOT exit the function inside the PJ_TRY block. The correct way is to return from the function after PJ_END block is executed. For example, the following code will yield crash not in this code, but rather in the subsequent execution of PJ_TRY block: <pre class="fragment">      void wrong_sample()
      {
          PJ_USE_EXCEPTION;

          PJ_TRY {
        // do some stuffs
        ...
        return;         &lt;======= DO NOT DO THIS!
          }
          PJ_CATCH_ANY {
          }
          PJ_END;
      }
</pre></li>
<li>You can not provide more than PJ_CATCH or PJ_CATCH_ANY nor use PJ_CATCH and PJ_CATCH_ANY for a single PJ_TRY.</li>
<li>Exceptions will always be caught by the first handler (unlike C++ where exception is only caught if the type matches.</li>
</ul>
<h1><a class="anchor" id="PJ_EX_KEYWORDS"></a>
Keywords</h1>
<h2><a class="anchor" id="PJ_THROW"></a>
PJ_THROW(expression)</h2>
<p>Throw an exception. The expression thrown is an integer as the result of the <em>expression</em>. This keyword can be specified anywhere within the program.</p>
<h2><a class="anchor" id="PJ_USE_EXCEPTION"></a>
PJ_USE_EXCEPTION</h2>
<p>Specify this in the variable definition section of the function block (or any blocks) to specify that the block has <em>PJ_TRY/PJ_CATCH</em> exception block. Actually, this is just a macro to declare local variable which is used to push the exception state to the exception stack. Note: you must specify PJ_USE_EXCEPTION as the last statement in the local variable declarations, since it may evaluate to nothing.</p>
<h2><a class="anchor" id="PJ_TRY"></a>
PJ_TRY</h2>
<p>The <em>PJ_TRY</em> keyword is typically followed by a block. If an exception is thrown in this block, then the execution will resume to the <em>PJ_CATCH</em> handler.</p>
<h2><a class="anchor" id="PJ_CATCH"></a>
PJ_CATCH(expression)</h2>
<p>The <em>PJ_CATCH</em> is normally followed by a block. This block will be executed if the exception being thrown is equal to the expression specified in the <em>PJ_CATCH</em>.</p>
<h2><a class="anchor" id="PJ_CATCH_ANY"></a>
PJ_CATCH_ANY</h2>
<p>The <em>PJ_CATCH</em> is normally followed by a block. This block will be executed if any exception was raised in the TRY block.</p>
<h2><a class="anchor" id="PJ_END"></a>
PJ_END</h2>
<p>Specify this keyword to mark the end of <em>PJ_TRY</em> / <em>PJ_CATCH</em> blocks.</p>
<h2><a class="anchor" id="PJ_GET_EXCEPTION"></a>
PJ_GET_EXCEPTION(void)</h2>
<p>Get the last exception thrown. This macro is normally called inside the <em>PJ_CATCH</em> or <em>PJ_CATCH_ANY</em> block, altough it can be used anywhere where the <em>PJ_USE_EXCEPTION</em> definition is in scope.</p>
<h1><a class="anchor" id="pj_except_examples_sec"></a>
Examples</h1>
<p>For some examples on how to use the exception construct, please see:</p><ul>
<li><a class="el" href="page_pjlib_samples_except_c.htm">Example: Exception Handling</a></li>
<li><a class="el" href="page_pjlib_exception_test.htm">Test: Exception Handling</a> </li>
</ul>
<h2 class="groupheader">Function Documentation</h2>
<a id="gacf20c1cddd2875d1353d4d8d6672040e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacf20c1cddd2875d1353d4d8d6672040e">&#9670;&nbsp;</a></span>pj_exception_id_alloc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_exception_id_alloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a> *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Allocate a unique exception id. Applications don't have to allocate a unique exception ID before using the exception construct. However, by doing so it ensures that there is no collisions of exception ID.</p>
<p>As a bonus, when exception number is acquired through this function, the library can assign name to the exception (only if PJ_HAS_EXCEPTION_NAMES is enabled (default is yes)) and find out the exception name when it catches an exception.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name to be associated with the exception ID. </td></tr>
    <tr><td class="paramname">id</td><td>Pointer to receive the ID.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success or PJ_ETOOMANY if the library is running out out ids. </dd></dl>

</div>
</div>
<a id="gaec8f315655bffd077875e6bfbfc0a156"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaec8f315655bffd077875e6bfbfc0a156">&#9670;&nbsp;</a></span>pj_exception_id_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_exception_id_free </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Free an exception id.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>The exception ID.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS or the appropriate error code. </dd></dl>

</div>
</div>
<a id="ga3ad4985730d5f311fcf9568335d8b1f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3ad4985730d5f311fcf9568335d8b1f6">&#9670;&nbsp;</a></span>pj_exception_id_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* pj_exception_id_name </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gadbdae1fb41fc46b5deb255e8d0eeedab">pj_exception_id_t</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Retrieve name associated with the exception id.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>The exception ID.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The name associated with the specified ID. </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
