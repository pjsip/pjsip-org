<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Exception Handling (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Exception Handling </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation of <b>exception_test()</b>. It tests the functionality of the exception handling API.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>This test use static ID not acquired through proper registration. This is not recommended, since it may create ID collissions.</dd></dl>
<h2><a class="anchor" id="exception_test_sec"></a>
Scope of the Test</h2>
<p>Some scenarios tested:</p>
<ul>
<li>no exception situation</li>
<li>basic TRY/CATCH</li>
<li>multiple exception handlers</li>
<li>default handlers</li>
</ul>
<p>This file is <b>pjlib-test/exception.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: exception.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>


<span class="preprocessor">#if INCLUDE_EXCEPTION_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>

<span class="preprocessor">#define ID_1    1</span>
<span class="preprocessor"></span><span class="preprocessor">#define ID_2    2</span>
<span class="preprocessor"></span>
<span class="keyword">static</span> <span class="keywordtype">int</span> throw_id_1(<span class="keywordtype">void</span>)
{
    <a class="code" href="except_8h.htm#a82f4cda6bfb8c0d5c1452a2314a8ec9c">PJ_THROW</a>( ID_1 );
    PJ_UNREACHED(<span class="keywordflow">return</span> -1;)
}

<span class="keyword">static</span> <span class="keywordtype">int</span> throw_id_2(<span class="keywordtype">void</span>)
{
    <a class="code" href="except_8h.htm#a82f4cda6bfb8c0d5c1452a2314a8ec9c">PJ_THROW</a>( ID_2 );
    PJ_UNREACHED(<span class="keywordflow">return</span> -1;)
}

<span class="keyword">static</span> <span class="keywordtype">int</span> try_catch_test(<span class="keywordtype">void</span>)
{
    PJ_USE_EXCEPTION;
    <span class="keywordtype">int</span> rc = -200;

    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        <a class="code" href="except_8h.htm#a82f4cda6bfb8c0d5c1452a2314a8ec9c">PJ_THROW</a>(ID_1);
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        rc = 0;
    }
    PJ_END;
    <span class="keywordflow">return</span> rc;
}

<span class="keyword">static</span> <span class="keywordtype">int</span> throw_in_handler(<span class="keywordtype">void</span>)
{
    PJ_USE_EXCEPTION;
    <span class="keywordtype">int</span> rc = 0;

    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        <a class="code" href="except_8h.htm#a82f4cda6bfb8c0d5c1452a2314a8ec9c">PJ_THROW</a>(ID_1);
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="keywordflow">if</span> (<a class="code" href="except_8h.htm#a9309a179331c0fbcea0c2d62864419af">PJ_GET_EXCEPTION</a>() != ID_1)
            rc = -300;
        <span class="keywordflow">else</span>
            <a class="code" href="except_8h.htm#a82f4cda6bfb8c0d5c1452a2314a8ec9c">PJ_THROW</a>(ID_2);
    }
    PJ_END;
    <span class="keywordflow">return</span> rc;
}

<span class="keyword">static</span> <span class="keywordtype">int</span> return_in_handler(<span class="keywordtype">void</span>)
{
    PJ_USE_EXCEPTION;

    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        <a class="code" href="except_8h.htm#a82f4cda6bfb8c0d5c1452a2314a8ec9c">PJ_THROW</a>(ID_1);
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="keywordflow">return</span> 0;
    }
    PJ_END;
    <span class="keywordflow">return</span> -400;
}


<span class="keyword">static</span> <span class="keywordtype">int</span> test(<span class="keywordtype">void</span>)
{
    <span class="keywordtype">int</span> rc = 0;
    PJ_USE_EXCEPTION;

    <span class="comment">/*</span>
<span class="comment">     * No exception situation.</span>
<span class="comment">     */</span>
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        rc = rc;
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        rc = -3;
    }
    PJ_END;

    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;


    <span class="comment">/*</span>
<span class="comment">     * Basic TRY/CATCH</span>
<span class="comment">     */</span> 
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        rc = throw_id_1();

        <span class="comment">// should not reach here.</span>
        rc = -10;
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="keywordtype">int</span> <span class="keywordtype">id</span> = <a class="code" href="except_8h.htm#a9309a179331c0fbcea0c2d62864419af">PJ_GET_EXCEPTION</a>();
        <span class="keywordflow">if</span> (<span class="keywordtype">id</span> != ID_1) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...error: got unexpected exception %d (%s)&quot;</span>, 
                      <span class="keywordtype">id</span>, <a class="code" href="group__PJ__EXCEPT.htm#ga3ad4985730d5f311fcf9568335d8b1f6">pj_exception_id_name</a>(<span class="keywordtype">id</span>)));
            <span class="keywordflow">if</span> (!rc) rc = -20;
        }
    }
    PJ_END;

    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    <span class="comment">/*</span>
<span class="comment">     * Multiple exceptions handlers</span>
<span class="comment">     */</span>
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        rc = throw_id_2();
        <span class="comment">// should not reach here.</span>
        rc = -25;
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="keywordflow">switch</span> (<a class="code" href="except_8h.htm#a9309a179331c0fbcea0c2d62864419af">PJ_GET_EXCEPTION</a>()) {
        <span class="keywordflow">case</span> ID_1:
            <span class="keywordflow">if</span> (!rc) rc = -30; <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> ID_2:
            <span class="keywordflow">if</span> (!rc) rc = 0; <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
            <span class="keywordflow">if</span> (!rc) rc = -40;
            <span class="keywordflow">break</span>;
        }
    }
    PJ_END;

    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    <span class="comment">/*</span>
<span class="comment">     * Test default handler.</span>
<span class="comment">     */</span>
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        rc = throw_id_1();
        <span class="comment">// should not reach here</span>
        rc = -50;
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="keywordflow">switch</span> (<a class="code" href="except_8h.htm#a9309a179331c0fbcea0c2d62864419af">PJ_GET_EXCEPTION</a>()) {
        <span class="keywordflow">case</span> ID_1:
            <span class="keywordflow">if</span> (!rc) rc = 0;
            <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
            <span class="keywordflow">if</span> (!rc) rc = -60;
            <span class="keywordflow">break</span>;
        }
    }
    PJ_END;

    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    <span class="comment">/*</span>
<span class="comment">     * Nested handlers</span>
<span class="comment">     */</span>
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        rc = try_catch_test();
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        rc = -70;
    }
    PJ_END;

    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    <span class="comment">/*</span>
<span class="comment">     * Throwing exception inside handler</span>
<span class="comment">     */</span>
    rc = -80;
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        <span class="keywordtype">int</span> rc2;
        rc2 = throw_in_handler();
        <span class="keywordflow">if</span> (rc2)
            rc = rc2;
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        <span class="keywordflow">if</span> (<a class="code" href="except_8h.htm#a9309a179331c0fbcea0c2d62864419af">PJ_GET_EXCEPTION</a>() == ID_2) {
            rc = 0;
        } <span class="keywordflow">else</span> {
            rc = -90;
        }
    }
    PJ_END;

    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;


    <span class="comment">/*</span>
<span class="comment">     * Return from handler. Returning from the function inside a handler</span>
<span class="comment">     * should be okay (though returning from the function inside the</span>
<span class="comment">     * PJ_TRY block IS NOT OKAY!!). We want to test to see if handler</span>
<span class="comment">     * is cleaned up properly, but not sure how to do this.</span>
<span class="comment">     */</span>
    <a class="code" href="except_8h.htm#a5f05874fb937ac2f5ce1dc9c0aff63cd">PJ_TRY</a> {
        <span class="keywordtype">int</span> rc2;
        rc2 = return_in_handler();
        <span class="keywordflow">if</span> (rc2)
            rc = rc2;
    }
    <a class="code" href="except_8h.htm#a02e140a2b9d9c7090e1daa947459bb28">PJ_CATCH_ANY</a> {
        rc = -100;
    }
    PJ_END;


    <span class="keywordflow">return</span> 0;
}

<span class="keywordtype">int</span> exception_test(<span class="keywordtype">void</span>)
{
    <span class="keywordtype">int</span> i, rc;
    <span class="keyword">enum</span> { LOOP = 10 };

    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {
        <span class="keywordflow">if</span> ((rc=test()) != 0) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;...failed at i=%d (rc=%d)&quot;</span>, i, rc));
            <span class="keywordflow">return</span> rc;
        }
    }
    <span class="keywordflow">return</span> 0;
}

<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_exception_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_EXCEPTION_TEST */</span>


</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
