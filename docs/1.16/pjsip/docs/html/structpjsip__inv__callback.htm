<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJSIP Reference: pjsip_inv_callback Struct Reference (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>

<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="functions.htm"><span>Data&nbsp;Fields</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<h1>pjsip_inv_callback Struct Reference<br/>
<small>
[<a class="el" href="group__PJSIP__INV.htm">INVITE Session</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="pjsip_inv_callback" -->
<p><code>#include &lt;sip_inv.h&gt;</code></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#aabf40987d5cb9296a2eea1a10534a061">on_state_changed</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#adf8e43e12064218cc3b9312a9c357cf3">on_new_session</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#acdca7ffb5ac919b3c953c1bd49b4db6f">on_tsx_state_changed</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__transaction.htm">pjsip_transaction</a> *tsx, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#ac00375557fbf4799b0dabf77d4670a8b">on_rx_offer</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="elRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *offer)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#a4ff99849a667789ddecf334bf9881165">on_create_offer</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="elRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **p_offer)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#aaafbe25fa41f5aa57dfe5a42bf025f2d">on_media_update</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv_ses, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#ae8399c3c867f8a48c2a764e022c2ad95">on_send_ack</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a>(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjsip__inv__callback.htm#a72c8204876e3c863c735e29d3dbd8762">on_redirected</a> )(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="el" href="structpjsip__uri.htm">pjsip_uri</a> *target, const <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>This structure contains callbacks to be registered by application to receieve notifications from the framework about various events in the invite session. </p>
<hr/><h2>Field Documentation</h2>
<a class="anchor" id="aabf40987d5cb9296a2eea1a10534a061"></a><!-- doxytag: member="pjsip_inv_callback::on_state_changed" ref="aabf40987d5cb9296a2eea1a10534a061" args=")(pjsip_inv_session *inv, pjsip_event *e)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpjsip__inv__callback.htm#aabf40987d5cb9296a2eea1a10534a061">pjsip_inv_callback::on_state_changed</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is called when the invite sesion state has changed. Application should inspect the session state (inv_sess-&gt;state) to get the current state of the session.</p>
<p>This callback is mandatory.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inv</em>&nbsp;</td><td>The invite session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>e</em>&nbsp;</td><td>The event which has caused the invite session's state to change. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adf8e43e12064218cc3b9312a9c357cf3"></a><!-- doxytag: member="pjsip_inv_callback::on_new_session" ref="adf8e43e12064218cc3b9312a9c357cf3" args=")(pjsip_inv_session *inv, pjsip_event *e)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpjsip__inv__callback.htm#adf8e43e12064218cc3b9312a9c357cf3">pjsip_inv_callback::on_new_session</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is called when the invite usage module has created a new dialog and invite because of forked outgoing request.</p>
<p>This callback is mandatory.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inv</em>&nbsp;</td><td>The new invite session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>e</em>&nbsp;</td><td>The event which has caused the dialog to fork. The type of this event can be either PJSIP_EVENT_RX_MSG or PJSIP_EVENT_RX_200_MSG. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acdca7ffb5ac919b3c953c1bd49b4db6f"></a><!-- doxytag: member="pjsip_inv_callback::on_tsx_state_changed" ref="acdca7ffb5ac919b3c953c1bd49b4db6f" args=")(pjsip_inv_session *inv, pjsip_transaction *tsx, pjsip_event *e)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpjsip__inv__callback.htm#acdca7ffb5ac919b3c953c1bd49b4db6f">pjsip_inv_callback::on_tsx_state_changed</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__transaction.htm">pjsip_transaction</a> *tsx, <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is called whenever any transactions within the session has changed their state. Application MAY implement this callback, e.g. to monitor the progress of an outgoing request, or to send response to unhandled incoming request (such as INFO).</p>
<p>This callback is optional.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inv</em>&nbsp;</td><td>The invite session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>tsx</em>&nbsp;</td><td>The transaction, which state has changed. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>e</em>&nbsp;</td><td>The event which has caused the transation state's to change. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac00375557fbf4799b0dabf77d4670a8b"></a><!-- doxytag: member="pjsip_inv_callback::on_rx_offer" ref="ac00375557fbf4799b0dabf77d4670a8b" args=")(pjsip_inv_session *inv, const pjmedia_sdp_session *offer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpjsip__inv__callback.htm#ac00375557fbf4799b0dabf77d4670a8b">pjsip_inv_callback::on_rx_offer</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="elRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *offer)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is called when the invite session has received new offer from peer. Application can inspect the remote offer in "offer", and set the SDP answer with <a class="el" href="group__PJSIP__INV.htm#gaaeb5c21d71241a68497079cf9c4c2af5">pjsip_inv_set_sdp_answer()</a>. When the application sends a SIP message to send the answer, this SDP answer will be negotiated with the offer, and the result will be sent with the SIP message.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inv</em>&nbsp;</td><td>The invite session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>offer</em>&nbsp;</td><td>Remote offer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4ff99849a667789ddecf334bf9881165"></a><!-- doxytag: member="pjsip_inv_callback::on_create_offer" ref="a4ff99849a667789ddecf334bf9881165" args=")(pjsip_inv_session *inv, pjmedia_sdp_session **p_offer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpjsip__inv__callback.htm#a4ff99849a667789ddecf334bf9881165">pjsip_inv_callback::on_create_offer</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="elRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> **p_offer)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is optional, and it is used to ask the application to create a fresh offer, when the invite session has received re-INVITE without offer. This offer then will be sent in the 200/OK response to the re-INVITE request.</p>
<p>If application doesn't implement this callback, the invite session will send the currently active SDP as the offer.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inv</em>&nbsp;</td><td>The invite session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p_offer</em>&nbsp;</td><td>Pointer to receive the SDP offer created by application. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aaafbe25fa41f5aa57dfe5a42bf025f2d"></a><!-- doxytag: member="pjsip_inv_callback::on_media_update" ref="aaafbe25fa41f5aa57dfe5a42bf025f2d" args=")(pjsip_inv_session *inv_ses, pj_status_t status)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpjsip__inv__callback.htm#aaafbe25fa41f5aa57dfe5a42bf025f2d">pjsip_inv_callback::on_media_update</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv_ses, <a class="elRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is called after SDP offer/answer session has completed. The status argument specifies the status of the offer/answer, as returned by <a class="elRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__SDP__NEG.htm#ga994a5de52f98b1ea7fc931a21f58e4ca">pjmedia_sdp_neg_negotiate()</a>.</p>
<p>This callback is optional (from the point of view of the framework), but all useful applications normally need to implement this callback.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inv</em>&nbsp;</td><td>The invite session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>status</em>&nbsp;</td><td>The negotiation status. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae8399c3c867f8a48c2a764e022c2ad95"></a><!-- doxytag: member="pjsip_inv_callback::on_send_ack" ref="ae8399c3c867f8a48c2a764e022c2ad95" args=")(pjsip_inv_session *inv, pjsip_rx_data *rdata)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpjsip__inv__callback.htm#ae8399c3c867f8a48c2a764e022c2ad95">pjsip_inv_callback::on_send_ack</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="el" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is called when the framework needs to send ACK request after it receives incoming 2xx response for INVITE. It allows application to manually handle the transmission of ACK request, which is required by some 3PCC scenarios. If this callback is not implemented, the framework will handle the ACK transmission automatically.</p>
<p>When this callback is overridden, application may delay the sending of the ACK request (for example, when it needs to wait for answer from the other call leg, in 3PCC scenarios).</p>
<p>Application creates the ACK request</p>
<p>Once it has sent the ACK request, the framework will keep this ACK request in the cache. Subsequent receipt of 2xx response will not cause this callback to be called, and instead automatic retransmission of this ACK request from the cache will be done by the framework.</p>
<p>This callback is optional. </p>

</div>
</div>
<a class="anchor" id="a72c8204876e3c863c735e29d3dbd8762"></a><!-- doxytag: member="pjsip_inv_callback::on_redirected" ref="a72c8204876e3c863c735e29d3dbd8762" args=")(pjsip_inv_session *inv, const pjsip_uri *target, const pjsip_event *e)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a>(* <a class="el" href="structpjsip__inv__callback.htm#a72c8204876e3c863c735e29d3dbd8762">pjsip_inv_callback::on_redirected</a>)(<a class="el" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, const <a class="el" href="structpjsip__uri.htm">pjsip_uri</a> *target, const <a class="el" href="structpjsip__event.htm">pjsip_event</a> *e)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This callback is called when the session is about to resend the INVITE request to the specified target, following the previously received redirection response.</p>
<p>Application may accept the redirection to the specified target (the default behavior if this callback is implemented), reject this target only and make the session continue to try the next target in the list if such target exists, stop the whole redirection process altogether and cause the session to be disconnected, or defer the decision to ask for user confirmation.</p>
<p>This callback is optional. If this callback is not implemented, the default behavior is to NOT follow the redirection response.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inv</em>&nbsp;</td><td>The invite session. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>target</em>&nbsp;</td><td>The current target to be tried. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>e</em>&nbsp;</td><td>The event that caused this callback to be called. This could be the receipt of 3xx response, or 4xx/5xx response received for the INVITE sent to subsequent targets, or NULL if this callback is called from within <a class="el" href="group__PJSIP__INV.htm#gabbba2ef44235adfc49911b729010073f">pjsip_inv_process_redirect()</a> context.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Action to be performed for the target. Set this parameter to one of the value below:<ul>
<li>PJSIP_REDIRECT_ACCEPT: immediately accept the redirection to this target. When set, the session will immediately resend INVITE request to the target after this callback returns.</li>
<li>PJSIP_REDIRECT_REJECT: immediately reject this target. The session will continue retrying with next target if present, or disconnect the call if there is no more target to try.</li>
<li>PJSIP_REDIRECT_STOP: stop the whole redirection process and immediately disconnect the call. The <a class="el" href="structpjsip__inv__callback.htm#aabf40987d5cb9296a2eea1a10534a061">on_state_changed()</a> callback will be called with PJSIP_INV_STATE_DISCONNECTED state immediately after this callback returns.</li>
<li>PJSIP_REDIRECT_PENDING: set to this value if no decision can be made immediately (for example to request confirmation from user). Application then MUST call <a class="el" href="group__PJSIP__INV.htm#gabbba2ef44235adfc49911b729010073f">pjsip_inv_process_redirect()</a> to either accept or reject the redirection upon getting user decision. </li>
</ul>
</dd></dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li><a class="el" href="sip__inv_8h.htm">sip_inv.h</a></li>
</ul>
</div>
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
