<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Media Transport (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJMEDIA Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#groups">Modules</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Media Transport</div></div>
</div><!--header-->
<div class="contents">

<p>Transports.The media transport (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a>) is the object to send and receive media packets over the network. The media transport interface allows the library to be extended to support different types of transports to send and receive packets.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="groups" name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem:group__PJMEDIA__TRANSPORT__ADAPTER__SAMPLE"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT__ADAPTER__SAMPLE.htm">Sample Transport Adapter</a></td></tr>
<tr class="memdesc:group__PJMEDIA__TRANSPORT__ADAPTER__SAMPLE"><td class="mdescLeft">&#160;</td><td class="mdescRight">Example on how to create transport adapter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__PJMEDIA__TRANSPORT__ICE"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT__ICE.htm">ICE Media Transport</a></td></tr>
<tr class="memdesc:group__PJMEDIA__TRANSPORT__ICE"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interactive Connectivity Establishment (ICE) transport. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__PJMEDIA__TRANSPORT__LOOP"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT__LOOP.htm">Loopback Media Transport</a></td></tr>
<tr class="memdesc:group__PJMEDIA__TRANSPORT__LOOP"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loopback transport for testing. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__PJMEDIA__TRANSPORT__SRTP"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT__SRTP.htm">Secure RTP (SRTP) Media Transport</a></td></tr>
<tr class="memdesc:group__PJMEDIA__TRANSPORT__SRTP"><td class="mdescLeft">&#160;</td><td class="mdescRight">Media transport adapter to add SRTP feature to existing transports. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__PJMEDIA__TRANSPORT__UDP"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT__UDP.htm">UDP Media Transport</a></td></tr>
<tr class="memdesc:group__PJMEDIA__TRANSPORT__UDP"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of media transport with UDP sockets. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjmedia__sock__info.htm">pjmedia_sock_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjmedia__transport__specific__info.htm">pjmedia_transport_specific_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjmedia__tp__cb__param.htm">pjmedia_tp_cb_param</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpjmedia__transport__attach__param.htm">pjmedia_transport_attach_param</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="enum-members" name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga6c5cd2067701addc315c62b3c19f6d88"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga6c5cd2067701addc315c62b3c19f6d88">pjmedia_tranport_media_option</a> { <br />
&#160;&#160;<a class="el" href="group__PJMEDIA__TRANSPORT.htm#gga6c5cd2067701addc315c62b3c19f6d88ad7167494132abac5ca8a94d6c4d35eb0">PJMEDIA_TPMED_NO_TRANSPORT_CHECKING</a> = 1
, <br />
&#160;&#160;<a class="el" href="group__PJMEDIA__TRANSPORT.htm#gga6c5cd2067701addc315c62b3c19f6d88a8d3b4fbcbfde97405f3e14856ae72278">PJMEDIA_TPMED_RTCP_MUX</a> = 2
<br />
 }</td></tr>
<tr class="separator:ga6c5cd2067701addc315c62b3c19f6d88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab718206fdd0c1afa059fabb6f78ebed0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gab718206fdd0c1afa059fabb6f78ebed0">pjmedia_transport_type</a> { <br />
&#160;&#160;<a class="el" href="group__PJMEDIA__TRANSPORT.htm#ggab718206fdd0c1afa059fabb6f78ebed0a0e0211f7fb56656b56ce71f710f0fc69">PJMEDIA_TRANSPORT_TYPE_UDP</a>
, <br />
&#160;&#160;<a class="el" href="group__PJMEDIA__TRANSPORT.htm#ggab718206fdd0c1afa059fabb6f78ebed0acf8b7cbb3a294ff688a803d26683380f">PJMEDIA_TRANSPORT_TYPE_ICE</a>
, <br />
&#160;&#160;<a class="el" href="group__PJMEDIA__TRANSPORT.htm#ggab718206fdd0c1afa059fabb6f78ebed0a269d8bcef7b08718af5c77a00bb2fd59">PJMEDIA_TRANSPORT_TYPE_SRTP</a>
, <br />
&#160;&#160;<a class="el" href="group__PJMEDIA__TRANSPORT.htm#ggab718206fdd0c1afa059fabb6f78ebed0ab9d4d644c6d1617ec84fb62080265c38">PJMEDIA_TRANSPORT_TYPE_LOOP</a>
, <br />
&#160;&#160;<a class="el" href="group__PJMEDIA__TRANSPORT.htm#ggab718206fdd0c1afa059fabb6f78ebed0a1bbd75d51f49d8b7c52dcefdd23447ad">PJMEDIA_TRANSPORT_TYPE_USER</a>
<br />
 }</td></tr>
<tr class="separator:gab718206fdd0c1afa059fabb6f78ebed0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gab293d1afad42d1f49745f3fcd235fa17"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gab293d1afad42d1f49745f3fcd235fa17">pjmedia_transport_info_init</a> (<a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *info)</td></tr>
<tr class="separator:gab293d1afad42d1f49745f3fcd235fa17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga213beab16cd5d94437c2890b9f3fe75b"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga213beab16cd5d94437c2890b9f3fe75b">pjmedia_transport_get_info</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, <a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *info)</td></tr>
<tr class="separator:ga213beab16cd5d94437c2890b9f3fe75b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade9cd634f787b0a538b546bf6025a4fd"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gade9cd634f787b0a538b546bf6025a4fd">pjmedia_transport_info_get_spc_info</a> (<a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *info, <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gab718206fdd0c1afa059fabb6f78ebed0">pjmedia_transport_type</a> type)</td></tr>
<tr class="separator:gade9cd634f787b0a538b546bf6025a4fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga303953c3f8dbdf05b2b4ee9745f504c5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga303953c3f8dbdf05b2b4ee9745f504c5">pjmedia_transport_info_get_transport</a> (<a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *info, <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gab718206fdd0c1afa059fabb6f78ebed0">pjmedia_transport_type</a> type)</td></tr>
<tr class="separator:ga303953c3f8dbdf05b2b4ee9745f504c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga429ab084acabe3ceaba6e3647deaee8f"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga429ab084acabe3ceaba6e3647deaee8f">pjmedia_transport_attach2</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, <a class="el" href="structpjmedia__transport__attach__param.htm">pjmedia_transport_attach_param</a> *att_param)</td></tr>
<tr class="separator:ga429ab084acabe3ceaba6e3647deaee8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33a9285c010f2527e647f0b5871f881e"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, void *user_data, const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *rem_addr, const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *rem_rtcp, unsigned addr_len, void(*rtp_cb)(void *user_data, void *pkt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>), void(*rtcp_cb)(void *usr_data, void *pkt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>))</td></tr>
<tr class="separator:ga33a9285c010f2527e647f0b5871f881e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad0b1f17d5920dd05b3832886b68d9c24"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gad0b1f17d5920dd05b3832886b68d9c24">pjmedia_transport_detach</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, void *user_data)</td></tr>
<tr class="separator:gad0b1f17d5920dd05b3832886b68d9c24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79db5c82268501ec3bf7c1897c0b3626"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga79db5c82268501ec3bf7c1897c0b3626">pjmedia_transport_send_rtp</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, const void *pkt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:ga79db5c82268501ec3bf7c1897c0b3626"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5fe97ac16287563420950a8b87d247b4"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga5fe97ac16287563420950a8b87d247b4">pjmedia_transport_send_rtcp</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, const void *pkt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:ga5fe97ac16287563420950a8b87d247b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad6203fbcee81df1321ca7b19e7ad3fa6"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gad6203fbcee81df1321ca7b19e7ad3fa6">pjmedia_transport_send_rtcp2</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *addr, unsigned addr_len, const void *pkt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr class="separator:gad6203fbcee81df1321ca7b19e7ad3fa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80efd3ecee40e4002c955fa77ac201a6"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga80efd3ecee40e4002c955fa77ac201a6">pjmedia_transport_media_create</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, <a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *sdp_pool, unsigned options, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *rem_sdp, unsigned media_index)</td></tr>
<tr class="separator:ga80efd3ecee40e4002c955fa77ac201a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9c2d4242cb711d849f801c567c225b4"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gae9c2d4242cb711d849f801c567c225b4">pjmedia_transport_encode_sdp</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, <a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *sdp_pool, <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *rem_sdp, unsigned media_index)</td></tr>
<tr class="separator:gae9c2d4242cb711d849f801c567c225b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74ab1c1b9b09d75865a231519bb58aa7"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga74ab1c1b9b09d75865a231519bb58aa7">pjmedia_transport_media_start</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, <a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *tmp_pool, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp_local, const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *sdp_remote, unsigned media_index)</td></tr>
<tr class="separator:ga74ab1c1b9b09d75865a231519bb58aa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed068de25cc5cbda27c1b7058597d3b5"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gaed068de25cc5cbda27c1b7058597d3b5">pjmedia_transport_media_stop</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp)</td></tr>
<tr class="separator:gaed068de25cc5cbda27c1b7058597d3b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0114fa7e20cb17c645701b2dbda96452"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga0114fa7e20cb17c645701b2dbda96452">pjmedia_transport_close</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp)</td></tr>
<tr class="separator:ga0114fa7e20cb17c645701b2dbda96452"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga30e410ca02a4e815346b5e5fa505e7b5"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga30e410ca02a4e815346b5e5fa505e7b5">pjmedia_transport_simulate_lost</a> (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *tp, <a class="el" href="group__PJMEDIA__TYPES.htm#gaf19d0dce3e3c99a3b9514726c28baa30">pjmedia_dir</a> dir, unsigned pct_lost)</td></tr>
<tr class="separator:ga30e410ca02a4e815346b5e5fa505e7b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >The media transport is declared as <a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> "class", which declares "interfaces" to use the class in <a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a> structure. For the user of the media transport (normally the user of media transport is media stream, see <a class="el" href="group__PJMED__STRM.htm">Streams</a>), these transport "methods" are wrapped with API such as <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach()</a>, so it should not need to call the function pointer inside <a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a> directly.</p>
<p >The connection between <a class="el" href="group__PJMED__STRM.htm">Streams</a> and media transport is shown in the diagram below:</p>
<div class="image">
<img src="media-transport.PNG" alt=""/>
</div>
<h1><a class="anchor" id="PJMEDIA_TRANSPORT_H_USING"></a>
Basic Media Transport Usage</h1>
<p >The media transport's life-cycle normally follows the following stages.</p>
<h2><a class="anchor" id="PJMEDIA_TRANSPORT_H_CREATE"></a>
Creating the Media Transport</h2>
<p >Application creates the media transport when it needs to establish media session to remote peer. The media transport is created using specific function to create that particular transport; for example, for UDP media transport, it is created with <a class="el" href="group__PJMEDIA__TRANSPORT__UDP.htm#ga49aab76356420412d96ee1c2d519301b">pjmedia_transport_udp_create()</a> or <a class="el" href="group__PJMEDIA__TRANSPORT__UDP.htm#ga8baf23a6ec9268aed82a53ed6b1e366f">pjmedia_transport_udp_create2()</a> functions. Different media transports will provide different API to create those transports.</p>
<p >Alternatively, application may create pool of media transports when it is first started up. Using this approach probably is better, since application has to specify the RTP port when sending the initial session establishment request (e.g. SIP INVITE request), thus if application only creates the media transport later when media is to be established (normally when 200/OK is received, or when 18x is received for early media), there is a possibility that the particular RTP port might have been occupied by other programs. Also it is more efficient since sockets don't need to be closed and re-opened between calls.</p>
<h2><a class="anchor" id="PJMEDIA_TRANSPORT_H_ATTACH"></a>
Attaching and Using the Media Transport.</h2>
<p >Application specifies the media transport instance when creating the media session (<a class="el" href="group__PJMEDIA__SESSION.htm#ga6bb6bcc4721ca9f357b5e3bb750378c6">pjmedia_session_create()</a>). Alternatively, it may create the media stream directly with <a class="el" href="group__PJMED__STRM.htm#ga67575c8e7b15e325b98ebaa89639b550">pjmedia_stream_create()</a> and specify the transport instance in the argument. (Note: media session is a high-level abstraction for media communications between two endpoints, and it may contain more than one media streams, for example, an audio stream and a video stream).</p>
<p >When stream is created, it will "attach" itself to the media transport by calling <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach()</a>, which is a thin wrapper which calls "attach()" method of the media transport's "virtual function pointer" (<a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a>). Among other things, the stream specifies two callback functions to the transport: one callback function will be called by transport when it receives RTP packet, and another callback for incoming RTCP packet. The <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach()</a> function also establish the destination of the outgoing RTP and RTCP packets.</p>
<p >When the stream needs to send outgoing RTP/RTCP packets, it will call <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga79db5c82268501ec3bf7c1897c0b3626">pjmedia_transport_send_rtp()</a> and <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga5fe97ac16287563420950a8b87d247b4">pjmedia_transport_send_rtcp()</a> of the media transport API, which is a thin wrapper to call send_rtp() and send_rtcp() methods in the media transport's "virtual function 
   pointer" (<a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a>).</p>
<p >When the stream is destroyed, it will "detach" itself from the media transport by calling <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gad0b1f17d5920dd05b3832886b68d9c24">pjmedia_transport_detach()</a>, which is a thin wrapper which calls "detach()" method of the media transport's "virtual function pointer" (<a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a>). After the transport is detached from its user (the stream), it will no longer report incoming RTP/RTCP packets to the stream, and it will refuse to send outgoing packets since the destination has been cleared.</p>
<h2><a class="anchor" id="PJMEDIA_TRANSPORT_H_REUSE"></a>
Reusing the Media Transport.</h2>
<p >After transport has been detached, application may re-attach the transport to another stream if it wants to. Detaching and re-attaching media transport may be preferable than closing and re-opening the transport, since it is more efficient (sockets don't need to be closed and re-opened). However it is up to the application to choose which method is most suitable for its uses.</p>
<h2><a class="anchor" id="PJMEDIA_TRANSPORT_H_DESTROY"></a>
Destroying the Media Transport.</h2>
<p >Finally if application no longer needs the media transport, it will call <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga0114fa7e20cb17c645701b2dbda96452">pjmedia_transport_close()</a> function, which is thin wrapper which calls "destroy()" method of the media transport's "virtual function 
   pointer" (<a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a>). This function releases all resources used by the transport, such as sockets and memory.</p>
<h1><a class="anchor" id="offer_answer"></a>
Interaction with SDP Offer/Answer</h1>
<p >For basic UDP transport, the <a class="el" href="group__PJMEDIA__TRANSPORT.htm#PJMEDIA_TRANSPORT_H_USING">Basic Media Transport Usage</a> above is sufficient to use the media transport. However, more complex media transports such as <a class="el" href="group__PJMEDIA__TRANSPORT__SRTP.htm">Secure RTP (SRTP) Media Transport</a> and <a class="el" href="group__PJMEDIA__TRANSPORT__ICE.htm">ICE Media Transport</a> requires closer interactions with SDP offer and answer negotiation.</p>
<p >The media transports can interact with the SDP offer/answer via these APIs:</p><ul>
<li><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga80efd3ecee40e4002c955fa77ac201a6">pjmedia_transport_media_create()</a>, to initialize the media transport for new media session,</li>
<li><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gae9c2d4242cb711d849f801c567c225b4">pjmedia_transport_encode_sdp()</a>, to encode SDP offer or answer,</li>
<li><a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga74ab1c1b9b09d75865a231519bb58aa7">pjmedia_transport_media_start()</a>, to activate the settings that have been negotiated by SDP offer answer, and</li>
<li><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gaed068de25cc5cbda27c1b7058597d3b5">pjmedia_transport_media_stop()</a>, to deinitialize the media transport and reset the transport to its idle state.</li>
</ul>
<p >The usage of these API in the context of SDP offer answer will be described below.</p>
<h2><a class="anchor" id="media_create"></a>
Initializing Transport for New Session</h2>
<p >Application must call <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga80efd3ecee40e4002c955fa77ac201a6">pjmedia_transport_media_create()</a> before using the transport for a new session.</p>
<h2><a class="anchor" id="creat_oa"></a>
Creating SDP Offer and Answer</h2>
<p >The <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gae9c2d4242cb711d849f801c567c225b4">pjmedia_transport_encode_sdp()</a> is used to put additional information from the transport to the local SDP, before the SDP is sent and negotiated with remote SDP.</p>
<p >When creating an offer, call <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gae9c2d4242cb711d849f801c567c225b4">pjmedia_transport_encode_sdp()</a> with local SDP (and NULL as <em>rem_sdp</em>). The media transport will add the relevant attributes in the local SDP. Application then gives the local SDP to the invite session to be sent to remote agent.</p>
<p >When creating an answer, also call <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gae9c2d4242cb711d849f801c567c225b4">pjmedia_transport_encode_sdp()</a>, but this time specify both local and remote SDP to the function. The media transport will once again modify the local SDP and add relevant attributes to the local SDP, if the appropriate attributes related to the transport functionality are present in remote offer. The remote SDP does not contain the relevant attributes, then the specific transport functionality will not be activated for the session.</p>
<p >The <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gae9c2d4242cb711d849f801c567c225b4">pjmedia_transport_encode_sdp()</a> should also be called when application sends subsequent SDP offer or answer. The media transport will encode the appropriate attributes based on the state of the session.</p>
<h2><a class="anchor" id="media_start"></a>
Offer/Answer Completion</h2>
<p >Once both local and remote SDP have been negotiated by the <a class="el" href="group__PJMEDIA__SDP__NEG.htm">SDP Negotiation State Machine (Offer/Answer Model, RFC 3264)</a> (normally this is part of PJSIP invite session), application should give both local and remote SDP to <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga74ab1c1b9b09d75865a231519bb58aa7">pjmedia_transport_media_start()</a> so that the settings are activated for the session. This function should be called for both initial and subsequent SDP negotiation.</p>
<h2><a class="anchor" id="media_stop"></a>
Stopping Transport</h2>
<p >Once session is stop application must call <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gaed068de25cc5cbda27c1b7058597d3b5">pjmedia_transport_media_stop()</a> to deactivate the transport feature. Application may reuse the transport for subsequent media session by repeating the <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga80efd3ecee40e4002c955fa77ac201a6">pjmedia_transport_media_create()</a>, <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gae9c2d4242cb711d849f801c567c225b4">pjmedia_transport_encode_sdp()</a>, <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga74ab1c1b9b09d75865a231519bb58aa7">pjmedia_transport_media_start()</a>, and <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gaed068de25cc5cbda27c1b7058597d3b5">pjmedia_transport_media_stop()</a> above.</p>
<h1><a class="anchor" id="PJMEDIA_TRANSPORT_H_IMPL"></a>
Implementing Media Transport</h1>
<p >To implement a new type of media transport, one needs to "subclass" the media transport "class" (<a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a>) by providing the "methods" in the media transport "interface" (<a class="el" href="structpjmedia__transport__op.htm">pjmedia_transport_op</a>), and provides a function to create this new type of transport (similar to <a class="el" href="group__PJMEDIA__TRANSPORT__UDP.htm#ga49aab76356420412d96ee1c2d519301b">pjmedia_transport_udp_create()</a> function).</p>
<p >The media transport is expected to run indepently, that is there should be no polling like function to poll the transport for incoming RTP/RTCP packets. This normally can be done by registering the media sockets to the media endpoint's IOQueue, which allows the transport to be notified when incoming packet has arrived.</p>
<p >Alternatively, media transport may utilize thread(s) internally to wait for incoming packets. The thread then will call the appropriate RTP or RTCP callback provided by its user (stream) whenever packet is received. If the transport's user is a stream, then the callbacks provided by the stream will be thread-safe, so the transport may call these callbacks without having to serialize the access with some mutex protection. But the media transport may still have to protect its internal data with mutex protection, since it may be called by application's thread (for example, to send RTP/RTCP packets). </p>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="ga6c5cd2067701addc315c62b3c19f6d88" name="ga6c5cd2067701addc315c62b3c19f6d88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6c5cd2067701addc315c62b3c19f6d88">&#9670;&nbsp;</a></span>pjmedia_tranport_media_option</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga6c5cd2067701addc315c62b3c19f6d88">pjmedia_tranport_media_option</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This enumeration specifies the general behaviour of media processing </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="gga6c5cd2067701addc315c62b3c19f6d88ad7167494132abac5ca8a94d6c4d35eb0" name="gga6c5cd2067701addc315c62b3c19f6d88ad7167494132abac5ca8a94d6c4d35eb0"></a>PJMEDIA_TPMED_NO_TRANSPORT_CHECKING&#160;</td><td class="fielddoc"><p >When this flag is specified, the transport will not perform media transport validation, this is useful when transport is stacked with other transport, for example when transport UDP is stacked under transport SRTP, media transport validation only need to be done by transport SRTP. </p>
</td></tr>
<tr><td class="fieldname"><a id="gga6c5cd2067701addc315c62b3c19f6d88a8d3b4fbcbfde97405f3e14856ae72278" name="gga6c5cd2067701addc315c62b3c19f6d88a8d3b4fbcbfde97405f3e14856ae72278"></a>PJMEDIA_TPMED_RTCP_MUX&#160;</td><td class="fielddoc"><p >When this flag is specified, the transport will allow multiplexing RTP and RTCP, i.e. if the remote agrees, RTCP will be sent using the same socket for RTP. </p>
</td></tr>
</table>

</div>
</div>
<a id="gab718206fdd0c1afa059fabb6f78ebed0" name="gab718206fdd0c1afa059fabb6f78ebed0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab718206fdd0c1afa059fabb6f78ebed0">&#9670;&nbsp;</a></span>pjmedia_transport_type</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJMEDIA__TRANSPORT.htm#gab718206fdd0c1afa059fabb6f78ebed0">pjmedia_transport_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Media transport type. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ggab718206fdd0c1afa059fabb6f78ebed0a0e0211f7fb56656b56ce71f710f0fc69" name="ggab718206fdd0c1afa059fabb6f78ebed0a0e0211f7fb56656b56ce71f710f0fc69"></a>PJMEDIA_TRANSPORT_TYPE_UDP&#160;</td><td class="fielddoc"><p >Media transport using standard UDP </p>
</td></tr>
<tr><td class="fieldname"><a id="ggab718206fdd0c1afa059fabb6f78ebed0acf8b7cbb3a294ff688a803d26683380f" name="ggab718206fdd0c1afa059fabb6f78ebed0acf8b7cbb3a294ff688a803d26683380f"></a>PJMEDIA_TRANSPORT_TYPE_ICE&#160;</td><td class="fielddoc"><p >Media transport using ICE </p>
</td></tr>
<tr><td class="fieldname"><a id="ggab718206fdd0c1afa059fabb6f78ebed0a269d8bcef7b08718af5c77a00bb2fd59" name="ggab718206fdd0c1afa059fabb6f78ebed0a269d8bcef7b08718af5c77a00bb2fd59"></a>PJMEDIA_TRANSPORT_TYPE_SRTP&#160;</td><td class="fielddoc"><p >Media transport SRTP, this transport is actually security adapter to be stacked with other transport to enable encryption on the underlying transport. </p>
</td></tr>
<tr><td class="fieldname"><a id="ggab718206fdd0c1afa059fabb6f78ebed0ab9d4d644c6d1617ec84fb62080265c38" name="ggab718206fdd0c1afa059fabb6f78ebed0ab9d4d644c6d1617ec84fb62080265c38"></a>PJMEDIA_TRANSPORT_TYPE_LOOP&#160;</td><td class="fielddoc"><p >Loopback media transport </p>
</td></tr>
<tr><td class="fieldname"><a id="ggab718206fdd0c1afa059fabb6f78ebed0a1bbd75d51f49d8b7c52dcefdd23447ad" name="ggab718206fdd0c1afa059fabb6f78ebed0a1bbd75d51f49d8b7c52dcefdd23447ad"></a>PJMEDIA_TRANSPORT_TYPE_USER&#160;</td><td class="fielddoc"><p >Start of user defined transport. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="gab293d1afad42d1f49745f3fcd235fa17" name="gab293d1afad42d1f49745f3fcd235fa17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab293d1afad42d1f49745f3fcd235fa17">&#9670;&nbsp;</a></span>pjmedia_transport_info_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pjmedia_transport_info_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initialize transport info.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">info</td><td>Transport info to be initialized. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero()</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gab44152e660cc3fd044afd590eeea78bc">PJ_INVALID_SOCKET</a>, <a class="el" href="structpjmedia__sock__info.htm#a8af8b0319794f25ca76558e1f366ae7b">pjmedia_sock_info::rtcp_sock</a>, <a class="el" href="structpjmedia__sock__info.htm#a395a2e6c8068ff137bfc64d06c3c5358">pjmedia_sock_info::rtp_sock</a>, and <a class="el" href="structpjmedia__transport__info.htm#a0d8a2639d0a981e9e025d71e200160cb">pjmedia_transport_info::sock_info</a>.</p>

</div>
</div>
<a id="ga213beab16cd5d94437c2890b9f3fe75b" name="ga213beab16cd5d94437c2890b9f3fe75b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga213beab16cd5d94437c2890b9f3fe75b">&#9670;&nbsp;</a></span>pjmedia_transport_get_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_get_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get media transport info from the specified transport and all underlying transports if any. The transport also contains information about socket info which describes the local address of the transport, and would be needed for example to fill in the "c=" and "m=" line of local SDP.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The transport. </td></tr>
    <tr><td class="paramname">info</td><td>Media transport info to be initialized.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__op.htm#a189d38598a32c2268ffe1afbf80bdedb">pjmedia_transport_op::get_info</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__errnum.htm#gad936a8c8015657f459b859764bdbf08d">PJ_ENOTSUP</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="gade9cd634f787b0a538b546bf6025a4fd" name="gade9cd634f787b0a538b546bf6025a4fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gade9cd634f787b0a538b546bf6025a4fd">&#9670;&nbsp;</a></span>pjmedia_transport_info_get_spc_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * pjmedia_transport_info_get_spc_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gab718206fdd0c1afa059fabb6f78ebed0">pjmedia_transport_type</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Utility API to get transport type specific info from the specified media transport info.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">info</td><td>Media transport info. </td></tr>
    <tr><td class="paramname">type</td><td>Media transport type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to media transport specific info, or NULL if specific info for the transport type is not found. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__specific__info.htm#a98abbd4fbe72135e18b92bf53562e58f">pjmedia_transport_specific_info::buffer</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, <a class="el" href="structpjmedia__transport__info.htm#aadebe7bf15ff33201affab5f6f6f630d">pjmedia_transport_info::spc_info</a>, <a class="el" href="structpjmedia__transport__info.htm#adf5914ae3877b35c6cadb3d8c729d134">pjmedia_transport_info::specific_info_cnt</a>, and <a class="el" href="structpjmedia__transport__specific__info.htm#aa9b7aaf08d4c9efe6151d8df23f3c934">pjmedia_transport_specific_info::type</a>.</p>

</div>
</div>
<a id="ga303953c3f8dbdf05b2b4ee9745f504c5" name="ga303953c3f8dbdf05b2b4ee9745f504c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga303953c3f8dbdf05b2b4ee9745f504c5">&#9670;&nbsp;</a></span>pjmedia_transport_info_get_transport()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> * pjmedia_transport_info_get_transport </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport__info.htm">pjmedia_transport_info</a> *&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__TRANSPORT.htm#gab718206fdd0c1afa059fabb6f78ebed0">pjmedia_transport_type</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Utility API to get the transport instance from the specified media transport info.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">info</td><td>Media transport info. </td></tr>
    <tr><td class="paramname">type</td><td>Media transport type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The media transport instance, or NULL if the transport type is not found. </dd></dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, <a class="el" href="structpjmedia__transport__info.htm#aadebe7bf15ff33201affab5f6f6f630d">pjmedia_transport_info::spc_info</a>, <a class="el" href="structpjmedia__transport__info.htm#adf5914ae3877b35c6cadb3d8c729d134">pjmedia_transport_info::specific_info_cnt</a>, <a class="el" href="structpjmedia__transport__specific__info.htm#a4fe54966ccaa6f4b842552f2f15c3f94">pjmedia_transport_specific_info::tp</a>, and <a class="el" href="structpjmedia__transport__specific__info.htm#aa9b7aaf08d4c9efe6151d8df23f3c934">pjmedia_transport_specific_info::type</a>.</p>

</div>
</div>
<a id="ga429ab084acabe3ceaba6e3647deaee8f" name="ga429ab084acabe3ceaba6e3647deaee8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga429ab084acabe3ceaba6e3647deaee8f">&#9670;&nbsp;</a></span>pjmedia_transport_attach2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_attach2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport__attach__param.htm">pjmedia_transport_attach_param</a> *&#160;</td>
          <td class="paramname"><em>att_param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Attach callbacks to be called on receipt of incoming RTP/RTCP packets. This is just a simple wrapper which calls <code>attach2()</code> member of the transport if it is implemented, otherwise it calls <code>attach()</code> member of the transport.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">att_param</td><td>The transport attach param.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__attach__param.htm#a1704d6c378d19a50de3ad58d9d251d45">pjmedia_transport_attach_param::addr_len</a>, <a class="el" href="structpjmedia__transport__op.htm#a36308e5b7c854e92db3e5498356f71d5">pjmedia_transport_op::attach</a>, <a class="el" href="structpjmedia__transport__op.htm#a13aae422b7a5b0c3fbc9ed7f0ee26cb6">pjmedia_transport_op::attach2</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a869515e9143af15622dffb0e4764992d">pjmedia_transport_attach_param::rem_addr</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a45548bc7161f70df7c4353c0a7616180">pjmedia_transport_attach_param::rem_rtcp</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a642d0d86d96815757bce2392549824fb">pjmedia_transport_attach_param::rtcp_cb</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a3b043730cd07d41d2f1d5adb9573e07a">pjmedia_transport_attach_param::rtp_cb</a>, and <a class="el" href="structpjmedia__transport__attach__param.htm#a7fdffdf7e9133b2472c7f32c9d1a410c">pjmedia_transport_attach_param::user_data</a>.</p>

</div>
</div>
<a id="ga33a9285c010f2527e647f0b5871f881e" name="ga33a9285c010f2527e647f0b5871f881e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga33a9285c010f2527e647f0b5871f881e">&#9670;&nbsp;</a></span>pjmedia_transport_attach()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_attach </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>rem_addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>rem_rtcp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>addr_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(void *user_data, void *pkt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>)&#160;</td>
          <td class="paramname"><em>rtp_cb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(void *usr_data, void *pkt, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>)&#160;</td>
          <td class="paramname"><em>rtcp_cb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Attach callbacks to be called on receipt of incoming RTP/RTCP packets. This is just a simple wrapper which calls <code>attach()</code> member of the transport.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">user_data</td><td>Arbitrary user data to be set when the callbacks are called. </td></tr>
    <tr><td class="paramname">rem_addr</td><td>Remote RTP address to send RTP packet to. </td></tr>
    <tr><td class="paramname">rem_rtcp</td><td>Optional remote RTCP address. If the argument is NULL or if the address is zero, the RTCP address will be calculated from the RTP address (which is RTP port plus one). </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of the remote address. </td></tr>
    <tr><td class="paramname">rtp_cb</td><td>Callback to be called when RTP packet is received on the transport. </td></tr>
    <tr><td class="paramname">rtcp_cb</td><td>Callback to be called when RTCP packet is received on the transport.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__attach__param.htm#a1704d6c378d19a50de3ad58d9d251d45">pjmedia_transport_attach_param::addr_len</a>, <a class="el" href="structpjmedia__transport__op.htm#a36308e5b7c854e92db3e5498356f71d5">pjmedia_transport_op::attach</a>, <a class="el" href="structpjmedia__transport__op.htm#a13aae422b7a5b0c3fbc9ed7f0ee26cb6">pjmedia_transport_op::attach2</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero()</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga0e46ff41f3a185d176aa73beb2766e2e">pj_memcpy()</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gae9e8046558f069dfa813df2a8206bee4">pj_sockaddr_cp()</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga2dd0f70bfe56b8a4d6cf5bc66b6d59f5">pj_sockaddr_get_port()</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#gad853a2ced5062f688b8d38a773fc3c40">pj_sockaddr_has_addr()</a>, <a class="elRef" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga54bf7416903f8f9c154e784cd2a9dcf7">pj_sockaddr_set_port()</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a869515e9143af15622dffb0e4764992d">pjmedia_transport_attach_param::rem_addr</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a45548bc7161f70df7c4353c0a7616180">pjmedia_transport_attach_param::rem_rtcp</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a642d0d86d96815757bce2392549824fb">pjmedia_transport_attach_param::rtcp_cb</a>, <a class="el" href="structpjmedia__transport__attach__param.htm#a3b043730cd07d41d2f1d5adb9573e07a">pjmedia_transport_attach_param::rtp_cb</a>, and <a class="el" href="structpjmedia__transport__attach__param.htm#a7fdffdf7e9133b2472c7f32c9d1a410c">pjmedia_transport_attach_param::user_data</a>.</p>

</div>
</div>
<a id="gad0b1f17d5920dd05b3832886b68d9c24" name="gad0b1f17d5920dd05b3832886b68d9c24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad0b1f17d5920dd05b3832886b68d9c24">&#9670;&nbsp;</a></span>pjmedia_transport_detach()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pjmedia_transport_detach </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Detach callbacks from the transport. This is just a simple wrapper which calls <code>detach()</code> member of the transport. After the transport is detached, it will ignore incoming RTP/RTCP packets, and will refuse to send outgoing RTP/RTCP packets. Application may re-attach the media transport to another transport user (e.g. stream) after the transport has been detached.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">user_data</td><td>User data which must match the previously set value on attachment. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__op.htm#a174794e7c0387a5b2c648a2c3c1ed4a2">pjmedia_transport_op::detach</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="ga79db5c82268501ec3bf7c1897c0b3626" name="ga79db5c82268501ec3bf7c1897c0b3626"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga79db5c82268501ec3bf7c1897c0b3626">&#9670;&nbsp;</a></span>pjmedia_transport_send_rtp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_send_rtp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pkt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send RTP packet with the specified media transport. This is just a simple wrapper which calls <code>send_rtp()</code> member of the transport. The RTP packet will be delivered to the destination address specified in <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach()</a> function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">pkt</td><td>The packet to send. </td></tr>
    <tr><td class="paramname">size</td><td>Size of the packet.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, and <a class="el" href="structpjmedia__transport__op.htm#ad5f5c0dce82eb54b58292a6b4e2e0e19">pjmedia_transport_op::send_rtp</a>.</p>

</div>
</div>
<a id="ga5fe97ac16287563420950a8b87d247b4" name="ga5fe97ac16287563420950a8b87d247b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5fe97ac16287563420950a8b87d247b4">&#9670;&nbsp;</a></span>pjmedia_transport_send_rtcp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_send_rtcp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pkt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send RTCP packet with the specified media transport. This is just a simple wrapper which calls <code>send_rtcp()</code> member of the transport. The RTCP packet will be delivered to the destination address specified in <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach()</a> function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">pkt</td><td>The packet to send. </td></tr>
    <tr><td class="paramname">size</td><td>Size of the packet.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, and <a class="el" href="structpjmedia__transport__op.htm#a619eb98fa9287390ca15f5752120f19f">pjmedia_transport_op::send_rtcp</a>.</p>

</div>
</div>
<a id="gad6203fbcee81df1321ca7b19e7ad3fa6" name="gad6203fbcee81df1321ca7b19e7ad3fa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad6203fbcee81df1321ca7b19e7ad3fa6">&#9670;&nbsp;</a></span>pjmedia_transport_send_rtcp2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_send_rtcp2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&#160;</td>
          <td class="paramname"><em>addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>addr_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pkt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send RTCP packet with the specified media transport. This is just a simple wrapper which calls <code>send_rtcp2()</code> member of the transport. The RTCP packet will be delivered to the destination address specified in param addr, if addr is NULL, RTCP packet will be delivered to destination address specified in <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga33a9285c010f2527e647f0b5871f881e">pjmedia_transport_attach()</a> function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">addr</td><td>The destination address. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of destination address. </td></tr>
    <tr><td class="paramname">pkt</td><td>The packet to send. </td></tr>
    <tr><td class="paramname">size</td><td>Size of the packet.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, and <a class="el" href="structpjmedia__transport__op.htm#ae43172011d6d166b1b265a5f012a7844">pjmedia_transport_op::send_rtcp2</a>.</p>

</div>
</div>
<a id="ga80efd3ecee40e4002c955fa77ac201a6" name="ga80efd3ecee40e4002c955fa77ac201a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga80efd3ecee40e4002c955fa77ac201a6">&#9670;&nbsp;</a></span>pjmedia_transport_media_create()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_media_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>sdp_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&#160;</td>
          <td class="paramname"><em>rem_sdp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>media_index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Prepare the media transport for a new media session, Application must call this function before starting a new media session using this transport.</p>
<p >This is just a simple wrapper which calls <code>media_create()</code> member of the transport.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">sdp_pool</td><td>Pool object to allocate memory related to SDP messaging components. </td></tr>
    <tr><td class="paramname">options</td><td>Option flags, from <a class="el" href="group__PJMEDIA__TRANSPORT.htm#ga6c5cd2067701addc315c62b3c19f6d88">pjmedia_tranport_media_option</a> </td></tr>
    <tr><td class="paramname">rem_sdp</td><td>Remote SDP if local SDP is an answer, otherwise specify NULL if SDP is an offer. </td></tr>
    <tr><td class="paramname">media_index</td><td>Media index in SDP.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__op.htm#abd6d1810e8e78390c7318b63c76acfb9">pjmedia_transport_op::media_create</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="gae9c2d4242cb711d849f801c567c225b4" name="gae9c2d4242cb711d849f801c567c225b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae9c2d4242cb711d849f801c567c225b4">&#9670;&nbsp;</a></span>pjmedia_transport_encode_sdp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_encode_sdp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>sdp_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&#160;</td>
          <td class="paramname"><em>sdp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&#160;</td>
          <td class="paramname"><em>rem_sdp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>media_index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Put transport specific information into the SDP. This function can be called to put transport specific information in the initial or subsequent SDP offer or answer.</p>
<p >This is just a simple wrapper which calls <code>encode_sdp()</code> member of the transport.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">sdp_pool</td><td>Pool object to allocate memory related to SDP messaging components. </td></tr>
    <tr><td class="paramname">sdp</td><td>The local SDP to be filled in information from the media transport. </td></tr>
    <tr><td class="paramname">rem_sdp</td><td>Remote SDP if local SDP is an answer, otherwise specify NULL if SDP is an offer. </td></tr>
    <tr><td class="paramname">media_index</td><td>Media index in SDP.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__op.htm#ad0ec61cd4319cd6acbf832a31bab2ac8">pjmedia_transport_op::encode_sdp</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="ga74ab1c1b9b09d75865a231519bb58aa7" name="ga74ab1c1b9b09d75865a231519bb58aa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga74ab1c1b9b09d75865a231519bb58aa7">&#9670;&nbsp;</a></span>pjmedia_transport_media_start()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_media_start </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjlib/docs/html/structpj__pool__t.htm">pj_pool_t</a> *&#160;</td>
          <td class="paramname"><em>tmp_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&#160;</td>
          <td class="paramname"><em>sdp_local</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *&#160;</td>
          <td class="paramname"><em>sdp_remote</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>media_index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Start the transport session with the settings in both local and remote SDP. The actual work that is done by this function depends on the underlying transport type. For SRTP, this will activate the encryption and decryption based on the keys found the SDPs. For ICE, this will start ICE negotiation according to the information found in the SDPs.</p>
<p >This is just a simple wrapper which calls <code>media_start()</code> member of the transport.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">tmp_pool</td><td>The memory pool for allocating temporary objects. </td></tr>
    <tr><td class="paramname">sdp_local</td><td>Local SDP. </td></tr>
    <tr><td class="paramname">sdp_remote</td><td>Remote SDP. </td></tr>
    <tr><td class="paramname">media_index</td><td>Media index in the SDP.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__op.htm#a6f8b8800b74db65ffaa43eb05062e8d5">pjmedia_transport_op::media_start</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="gaed068de25cc5cbda27c1b7058597d3b5" name="gaed068de25cc5cbda27c1b7058597d3b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaed068de25cc5cbda27c1b7058597d3b5">&#9670;&nbsp;</a></span>pjmedia_transport_media_stop()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_media_stop </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This API should be called when the session is stopped, to allow the media transport to release its resources used for the session.</p>
<p >This is just a simple wrapper which calls <code>media_stop()</code> member of the transport.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__op.htm#abcb6c4a4ee38f07ca4e412f70f455768">pjmedia_transport_op::media_stop</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>.</p>

</div>
</div>
<a id="ga0114fa7e20cb17c645701b2dbda96452" name="ga0114fa7e20cb17c645701b2dbda96452"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0114fa7e20cb17c645701b2dbda96452">&#9670;&nbsp;</a></span>pjmedia_transport_close()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_close </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Close media transport. This is just a simple wrapper which calls <code>destroy()</code> member of the transport. This function will free all resources created by this transport (such as sockets, memory, etc.).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport__op.htm#a335f5ccc73d585413148621460c407b9">pjmedia_transport_op::destroy</a>, <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, and <a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>.</p>

</div>
</div>
<a id="ga30e410ca02a4e815346b5e5fa505e7b5" name="ga30e410ca02a4e815346b5e5fa505e7b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga30e410ca02a4e815346b5e5fa505e7b5">&#9670;&nbsp;</a></span>pjmedia_transport_simulate_lost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pjmedia_transport_simulate_lost </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpjmedia__transport.htm">pjmedia_transport</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJMEDIA__TYPES.htm#gaf19d0dce3e3c99a3b9514726c28baa30">pjmedia_dir</a>&#160;</td>
          <td class="paramname"><em>dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>pct_lost</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Simulate packet lost in the specified direction (for testing purposes). When enabled, the transport will randomly drop packets to the specified direction.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The media transport. </td></tr>
    <tr><td class="paramname">dir</td><td>Media direction to which packets will be randomly dropped. </td></tr>
    <tr><td class="paramname">pct_lost</td><td>Percent lost (0-100). Set to zero to disable packet lost simulation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success. </dd></dl>

<p class="reference">References <a class="el" href="structpjmedia__transport.htm#abbe9c2c1084b24952138ff84b6f64302">pjmedia_transport::op</a>, <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>, and <a class="el" href="structpjmedia__transport__op.htm#a2488d3c467aebaaaf43bd50beb10989b">pjmedia_transport_op::simulate_lost</a>.</p>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJMEDIA small footprint Open Source media stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
