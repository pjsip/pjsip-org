<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj::Call Class Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacepj.htm">pj</a></li><li class="navelem"><a class="el" href="classpj_1_1Call.htm">Call</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle"><div class="title">pj::Call Class Reference<div class="ingroups"><a class="el" href="group__PJSUA2__Ref.htm">pjsua2 API Reference</a> &raquo; <a class="el" href="group__PJSUA2__CALL.htm">Call</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;call.hpp&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad59d2f208484888ec23258903af54310"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ad59d2f208484888ec23258903af54310">Call</a> (<a class="el" href="classpj_1_1Account.htm">Account</a> &amp;acc, int call_id=PJSUA_INVALID_ID)</td></tr>
<tr class="separator:ad59d2f208484888ec23258903af54310"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a520f8861df92de903c04dc9e572705c0"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a520f8861df92de903c04dc9e572705c0">~Call</a> ()</td></tr>
<tr class="separator:a520f8861df92de903c04dc9e572705c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa788a45ff63f556c939c094efb3b3370"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1CallInfo.htm">CallInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#aa788a45ff63f556c939c094efb3b3370">getInfo</a> () const  throw (Error)</td></tr>
<tr class="separator:aa788a45ff63f556c939c094efb3b3370"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44f226dbb25b6fcac439e48220d13225"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a44f226dbb25b6fcac439e48220d13225">isActive</a> () const</td></tr>
<tr class="separator:a44f226dbb25b6fcac439e48220d13225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf68f770d982e9ae27241249001b8414"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#abf68f770d982e9ae27241249001b8414">getId</a> () const</td></tr>
<tr class="separator:abf68f770d982e9ae27241249001b8414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a092b306f311b003e47ab283ef4d1f668"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a092b306f311b003e47ab283ef4d1f668">hasMedia</a> () const</td></tr>
<tr class="separator:a092b306f311b003e47ab283ef4d1f668"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85de5d493fc926946a2e675ecc07954b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1Media.htm">Media</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a85de5d493fc926946a2e675ecc07954b">getMedia</a> (unsigned med_idx) const</td></tr>
<tr class="separator:a85de5d493fc926946a2e675ecc07954b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d4a963c047173a0faa4869413fef3cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a7d4a963c047173a0faa4869413fef3cd">getAudioMedia</a> (int med_idx) const  throw (Error)</td></tr>
<tr class="separator:a7d4a963c047173a0faa4869413fef3cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaee78a0ee73cb8bf52a95f68a1a0e9b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1VideoMedia.htm">VideoMedia</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#aaee78a0ee73cb8bf52a95f68a1a0e9b6">getEncodingVideoMedia</a> (int med_idx) const  throw (Error)</td></tr>
<tr class="separator:aaee78a0ee73cb8bf52a95f68a1a0e9b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4996d428e88ee07a5feb9bb24ee82cfe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpj_1_1VideoMedia.htm">VideoMedia</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a4996d428e88ee07a5feb9bb24ee82cfe">getDecodingVideoMedia</a> (int med_idx) const  throw (Error)</td></tr>
<tr class="separator:a4996d428e88ee07a5feb9bb24ee82cfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7116d07b31522727c5b60a740e2e6bdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSIP__DIALOG.htm#ga78a1bd1fc30a0850704bdaa5c8bad369">pjsip_dialog_cap_status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a7116d07b31522727c5b60a740e2e6bdb">remoteHasCap</a> (int htype, const string &amp;hname, const string &amp;token) const</td></tr>
<tr class="separator:a7116d07b31522727c5b60a740e2e6bdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6639766a6d0eefcfad29484c763916d8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a6639766a6d0eefcfad29484c763916d8">setUserData</a> (<a class="el" href="group__PJSUA2__TYPES.htm#ga5d3c76912c9b255080f7f21002a6b8ae">Token</a> user_data)</td></tr>
<tr class="separator:a6639766a6d0eefcfad29484c763916d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7df1846659f739d41cd759c48e222174"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSUA2__TYPES.htm#ga5d3c76912c9b255080f7f21002a6b8ae">Token</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a7df1846659f739d41cd759c48e222174">getUserData</a> () const</td></tr>
<tr class="separator:a7df1846659f739d41cd759c48e222174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0534a14867dbed77c5599408ec5121b1"><td class="memItemLeft" align="right" valign="top"><a class="elRef" href="../../../pjnath/docs/html/group__PJNATH__NAT__DETECT.htm#ga07c3bec1eee4e02ea2fd5f03299d913d">pj_stun_nat_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a0534a14867dbed77c5599408ec5121b1">getRemNatType</a> ()  throw (Error)</td></tr>
<tr class="separator:a0534a14867dbed77c5599408ec5121b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14a03dcd13f8a8c711d72f4e33063962"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a14a03dcd13f8a8c711d72f4e33063962">makeCall</a> (const string &amp;dst_uri, const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a14a03dcd13f8a8c711d72f4e33063962"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9cd10733d250bcafddd991cd5542db8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#af9cd10733d250bcafddd991cd5542db8">answer</a> (const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:af9cd10733d250bcafddd991cd5542db8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dccfab5a07017b4cb2831f125842479"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a3dccfab5a07017b4cb2831f125842479">hangup</a> (const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a3dccfab5a07017b4cb2831f125842479"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae59362803a6433a6b3d52ddf36643236"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ae59362803a6433a6b3d52ddf36643236">setHold</a> (const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:ae59362803a6433a6b3d52ddf36643236"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7312e0fe1a11d2810190953c1cd80401"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a7312e0fe1a11d2810190953c1cd80401">reinvite</a> (const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a7312e0fe1a11d2810190953c1cd80401"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40a429f7c08eb6bd2fd2c045ceeb0c79"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a40a429f7c08eb6bd2fd2c045ceeb0c79">update</a> (const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a40a429f7c08eb6bd2fd2c045ceeb0c79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b43ff893d30c3445d4832a216c302d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a10b43ff893d30c3445d4832a216c302d">xfer</a> (const string &amp;dest, const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a10b43ff893d30c3445d4832a216c302d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ec22832c2dbc8afdb68521767073015"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a2ec22832c2dbc8afdb68521767073015">xferReplaces</a> (const <a class="el" href="classpj_1_1Call.htm">Call</a> &amp;dest_call, const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a2ec22832c2dbc8afdb68521767073015"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1e566ea2b4dbcb3557e8a211c4e8e0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#aec1e566ea2b4dbcb3557e8a211c4e8e0">processRedirect</a> (<a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a> cmd)  throw (Error)</td></tr>
<tr class="separator:aec1e566ea2b4dbcb3557e8a211c4e8e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaba286d32943a1c50828c98163b568f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#adaba286d32943a1c50828c98163b568f">dialDtmf</a> (const string &amp;digits)  throw (Error)</td></tr>
<tr class="separator:adaba286d32943a1c50828c98163b568f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49cefb07567a5abb06279721597f94fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a49cefb07567a5abb06279721597f94fb">sendDtmf</a> (const <a class="el" href="structpj_1_1CallSendDtmfParam.htm">CallSendDtmfParam</a> &amp;param)  throw (Error)</td></tr>
<tr class="separator:a49cefb07567a5abb06279721597f94fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae985d1a096e5b21c724589ac1eed2467"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ae985d1a096e5b21c724589ac1eed2467">sendInstantMessage</a> (const <a class="el" href="structpj_1_1SendInstantMessageParam.htm">SendInstantMessageParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:ae985d1a096e5b21c724589ac1eed2467"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9785908a52298ac463fa78994b3d6578"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a9785908a52298ac463fa78994b3d6578">sendTypingIndication</a> (const <a class="el" href="structpj_1_1SendTypingIndicationParam.htm">SendTypingIndicationParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a9785908a52298ac463fa78994b3d6578"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88cd4e7fe1b1ebd2292877b5555c0d45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a88cd4e7fe1b1ebd2292877b5555c0d45">sendRequest</a> (const <a class="el" href="structpj_1_1CallSendRequestParam.htm">CallSendRequestParam</a> &amp;prm)  throw (Error)</td></tr>
<tr class="separator:a88cd4e7fe1b1ebd2292877b5555c0d45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25a614f8239a8c49eef53e4798e0fdb0"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a25a614f8239a8c49eef53e4798e0fdb0">dump</a> (bool with_media, const string indent)  throw (Error)</td></tr>
<tr class="separator:a25a614f8239a8c49eef53e4798e0fdb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cfaa57767932774273bec569f60c090"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a3cfaa57767932774273bec569f60c090">vidGetStreamIdx</a> () const</td></tr>
<tr class="separator:a3cfaa57767932774273bec569f60c090"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85865596f7978e304be37086c2bca778"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a85865596f7978e304be37086c2bca778">vidStreamIsRunning</a> (int med_idx, <a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__TYPES.htm#gaf19d0dce3e3c99a3b9514726c28baa30">pjmedia_dir</a> dir) const</td></tr>
<tr class="separator:a85865596f7978e304be37086c2bca778"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad679a98078afe7c1350553e1493fe40e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ad679a98078afe7c1350553e1493fe40e">vidSetStream</a> (<a class="el" href="group__PJSUA__LIB__CALL.htm#ga8a7b29df0618360407b8aae888421a36">pjsua_call_vid_strm_op</a> op, const <a class="el" href="structpj_1_1CallVidSetStreamParam.htm">CallVidSetStreamParam</a> &amp;param)  throw (Error)</td></tr>
<tr class="separator:ad679a98078afe7c1350553e1493fe40e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10afa2ffc3f1c27921159d5b83a55ba3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a10afa2ffc3f1c27921159d5b83a55ba3">audStreamModifyCodecParam</a> (int med_idx, const <a class="el" href="structpj_1_1CodecParam.htm">CodecParam</a> &amp;param)  throw (Error)</td></tr>
<tr class="separator:a10afa2ffc3f1c27921159d5b83a55ba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7f9428a14ed8f09ffb151c698d353d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1StreamInfo.htm">StreamInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a9e7f9428a14ed8f09ffb151c698d353d">getStreamInfo</a> (unsigned med_idx) const  throw (Error)</td></tr>
<tr class="separator:a9e7f9428a14ed8f09ffb151c698d353d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ae46dca289ba8f06ef80c8bb3323f11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1StreamStat.htm">StreamStat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a4ae46dca289ba8f06ef80c8bb3323f11">getStreamStat</a> (unsigned med_idx) const  throw (Error)</td></tr>
<tr class="separator:a4ae46dca289ba8f06ef80c8bb3323f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc77cc1e89b4dcb11b7d2cc558e64635"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1MediaTransportInfo.htm">MediaTransportInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#abc77cc1e89b4dcb11b7d2cc558e64635">getMedTransportInfo</a> (unsigned med_idx) const  throw (Error)</td></tr>
<tr class="separator:abc77cc1e89b4dcb11b7d2cc558e64635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8316460b2e48bc18d896686eb6d6e90f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a8316460b2e48bc18d896686eb6d6e90f">processMediaUpdate</a> (<a class="el" href="structpj_1_1OnCallMediaStateParam.htm">OnCallMediaStateParam</a> &amp;prm)</td></tr>
<tr class="separator:a8316460b2e48bc18d896686eb6d6e90f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad30317b7a189540a2fa3ce3c59355381"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ad30317b7a189540a2fa3ce3c59355381">processStateChange</a> (<a class="el" href="structpj_1_1OnCallStateParam.htm">OnCallStateParam</a> &amp;prm)</td></tr>
<tr class="separator:ad30317b7a189540a2fa3ce3c59355381"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6346fb46307057308e0fff0118306206"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a6346fb46307057308e0fff0118306206">onCallState</a> (<a class="el" href="structpj_1_1OnCallStateParam.htm">OnCallStateParam</a> &amp;prm)</td></tr>
<tr class="separator:a6346fb46307057308e0fff0118306206"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f1c9ac9751962a7c685f181005d5867"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a7f1c9ac9751962a7c685f181005d5867">onCallTsxState</a> (<a class="el" href="structpj_1_1OnCallTsxStateParam.htm">OnCallTsxStateParam</a> &amp;prm)</td></tr>
<tr class="separator:a7f1c9ac9751962a7c685f181005d5867"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac12a07c788e683aa62aaf8f6e89fcd13"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ac12a07c788e683aa62aaf8f6e89fcd13">onCallMediaState</a> (<a class="el" href="structpj_1_1OnCallMediaStateParam.htm">OnCallMediaStateParam</a> &amp;prm)</td></tr>
<tr class="separator:ac12a07c788e683aa62aaf8f6e89fcd13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b524a15eb38e5aeba9f85eebfb96f77"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a6b524a15eb38e5aeba9f85eebfb96f77">onCallSdpCreated</a> (<a class="el" href="structpj_1_1OnCallSdpCreatedParam.htm">OnCallSdpCreatedParam</a> &amp;prm)</td></tr>
<tr class="separator:a6b524a15eb38e5aeba9f85eebfb96f77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6d77799ba55d05fbefc3769b353ae1e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#af6d77799ba55d05fbefc3769b353ae1e">onStreamPreCreate</a> (<a class="el" href="structpj_1_1OnStreamPreCreateParam.htm">OnStreamPreCreateParam</a> &amp;prm)</td></tr>
<tr class="separator:af6d77799ba55d05fbefc3769b353ae1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abff1d3672115d8ba2745b3c99b17b49c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#abff1d3672115d8ba2745b3c99b17b49c">onStreamCreated</a> (<a class="el" href="structpj_1_1OnStreamCreatedParam.htm">OnStreamCreatedParam</a> &amp;prm)</td></tr>
<tr class="separator:abff1d3672115d8ba2745b3c99b17b49c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ba1a4493ca571c39925c0b1d12a014"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ac6ba1a4493ca571c39925c0b1d12a014">onStreamDestroyed</a> (<a class="el" href="structpj_1_1OnStreamDestroyedParam.htm">OnStreamDestroyedParam</a> &amp;prm)</td></tr>
<tr class="separator:ac6ba1a4493ca571c39925c0b1d12a014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6ea8bd174a76a5c8ba33e87aa9106f6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ae6ea8bd174a76a5c8ba33e87aa9106f6">onDtmfDigit</a> (<a class="el" href="structpj_1_1OnDtmfDigitParam.htm">OnDtmfDigitParam</a> &amp;prm)</td></tr>
<tr class="separator:ae6ea8bd174a76a5c8ba33e87aa9106f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7893f0b39383c67d3a1c4dc6a54dd737"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a7893f0b39383c67d3a1c4dc6a54dd737">onDtmfEvent</a> (<a class="el" href="structpj_1_1OnDtmfEventParam.htm">OnDtmfEventParam</a> &amp;prm)</td></tr>
<tr class="separator:a7893f0b39383c67d3a1c4dc6a54dd737"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c4bcb16e0043526621acf891c6cbc7e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a9c4bcb16e0043526621acf891c6cbc7e">onCallTransferRequest</a> (<a class="el" href="structpj_1_1OnCallTransferRequestParam.htm">OnCallTransferRequestParam</a> &amp;prm)</td></tr>
<tr class="separator:a9c4bcb16e0043526621acf891c6cbc7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f9f1f4dc6589e6b817eb8f0b705741d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a2f9f1f4dc6589e6b817eb8f0b705741d">onCallTransferStatus</a> (<a class="el" href="structpj_1_1OnCallTransferStatusParam.htm">OnCallTransferStatusParam</a> &amp;prm)</td></tr>
<tr class="separator:a2f9f1f4dc6589e6b817eb8f0b705741d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae56f88566598aafa2d3bc132ddc07c91"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ae56f88566598aafa2d3bc132ddc07c91">onCallReplaceRequest</a> (<a class="el" href="structpj_1_1OnCallReplaceRequestParam.htm">OnCallReplaceRequestParam</a> &amp;prm)</td></tr>
<tr class="separator:ae56f88566598aafa2d3bc132ddc07c91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aace52022f01e0a0e609265121ac3f45d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#aace52022f01e0a0e609265121ac3f45d">onCallReplaced</a> (<a class="el" href="structpj_1_1OnCallReplacedParam.htm">OnCallReplacedParam</a> &amp;prm)</td></tr>
<tr class="separator:aace52022f01e0a0e609265121ac3f45d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dc4171ff5a4c5e66f9cc48947e99f40"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a0dc4171ff5a4c5e66f9cc48947e99f40">onCallRxOffer</a> (<a class="el" href="structpj_1_1OnCallRxOfferParam.htm">OnCallRxOfferParam</a> &amp;prm)</td></tr>
<tr class="separator:a0dc4171ff5a4c5e66f9cc48947e99f40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d6056508c6d4e666d7f9cdeb7afa3cc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a7d6056508c6d4e666d7f9cdeb7afa3cc">onCallRxReinvite</a> (<a class="el" href="structpj_1_1OnCallRxReinviteParam.htm">OnCallRxReinviteParam</a> &amp;prm)</td></tr>
<tr class="separator:a7d6056508c6d4e666d7f9cdeb7afa3cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59e2735ae892cc6f70f4501df1edf4b8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a59e2735ae892cc6f70f4501df1edf4b8">onCallTxOffer</a> (<a class="el" href="structpj_1_1OnCallTxOfferParam.htm">OnCallTxOfferParam</a> &amp;prm)</td></tr>
<tr class="separator:a59e2735ae892cc6f70f4501df1edf4b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a953f792e54d1a79017ca375aa1bf2357"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a953f792e54d1a79017ca375aa1bf2357">onInstantMessage</a> (<a class="el" href="structpj_1_1OnInstantMessageParam.htm">OnInstantMessageParam</a> &amp;prm)</td></tr>
<tr class="separator:a953f792e54d1a79017ca375aa1bf2357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9013d1314161b840e43192bc75d2c953"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a9013d1314161b840e43192bc75d2c953">onInstantMessageStatus</a> (<a class="el" href="structpj_1_1OnInstantMessageStatusParam.htm">OnInstantMessageStatusParam</a> &amp;prm)</td></tr>
<tr class="separator:a9013d1314161b840e43192bc75d2c953"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f38207566d5b238af88e708c9590cac"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a6f38207566d5b238af88e708c9590cac">onTypingIndication</a> (<a class="el" href="structpj_1_1OnTypingIndicationParam.htm">OnTypingIndicationParam</a> &amp;prm)</td></tr>
<tr class="separator:a6f38207566d5b238af88e708c9590cac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fd60c59752c4cc2a5d6742e2a255bc8"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a4fd60c59752c4cc2a5d6742e2a255bc8">onCallRedirected</a> (<a class="el" href="structpj_1_1OnCallRedirectedParam.htm">OnCallRedirectedParam</a> &amp;prm)</td></tr>
<tr class="separator:a4fd60c59752c4cc2a5d6742e2a255bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f74a82432a691d997e1eed48a95b4a4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a3f74a82432a691d997e1eed48a95b4a4">onCallMediaTransportState</a> (<a class="el" href="structpj_1_1OnCallMediaTransportStateParam.htm">OnCallMediaTransportStateParam</a> &amp;prm)</td></tr>
<tr class="separator:a3f74a82432a691d997e1eed48a95b4a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae07aa6a38de8798262ec30ee27d9fba6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ae07aa6a38de8798262ec30ee27d9fba6">onCallMediaEvent</a> (<a class="el" href="structpj_1_1OnCallMediaEventParam.htm">OnCallMediaEventParam</a> &amp;prm)</td></tr>
<tr class="separator:ae07aa6a38de8798262ec30ee27d9fba6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5b42bdbe506b948f7a304a762f404d7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#ab5b42bdbe506b948f7a304a762f404d7">onCreateMediaTransport</a> (<a class="el" href="structpj_1_1OnCreateMediaTransportParam.htm">OnCreateMediaTransportParam</a> &amp;prm)</td></tr>
<tr class="separator:ab5b42bdbe506b948f7a304a762f404d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33f7e81d49974c9e039f0c319a7a411e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a33f7e81d49974c9e039f0c319a7a411e">onCreateMediaTransportSrtp</a> (<a class="el" href="structpj_1_1OnCreateMediaTransportSrtpParam.htm">OnCreateMediaTransportSrtpParam</a> &amp;prm)</td></tr>
<tr class="separator:a33f7e81d49974c9e039f0c319a7a411e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a2047d0f608199732de21aece77f7fc46"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classpj_1_1Call.htm">Call</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1Call.htm#a2047d0f608199732de21aece77f7fc46">lookup</a> (int call_id)</td></tr>
<tr class="separator:a2047d0f608199732de21aece77f7fc46"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a500d74fc41e3ab6b4889a579193566ed"><td class="memItemLeft" align="right" valign="top"><a id="a500d74fc41e3ab6b4889a579193566ed" name="a500d74fc41e3ab6b4889a579193566ed"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Endpoint</b></td></tr>
<tr class="separator:a500d74fc41e3ab6b4889a579193566ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p ><a class="el" href="classpj_1_1Call.htm">Call</a>. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad59d2f208484888ec23258903af54310" name="ad59d2f208484888ec23258903af54310"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad59d2f208484888ec23258903af54310">&#9670;&nbsp;</a></span>Call()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj::Call::Call </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpj_1_1Account.htm">Account</a> &amp;&#160;</td>
          <td class="paramname"><em>acc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>call_id</em> = <code>PJSUA_INVALID_ID</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Constructor. </p>

</div>
</div>
<a id="a520f8861df92de903c04dc9e572705c0" name="a520f8861df92de903c04dc9e572705c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a520f8861df92de903c04dc9e572705c0">&#9670;&nbsp;</a></span>~Call()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual pj::Call::~Call </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa788a45ff63f556c939c094efb3b3370" name="aa788a45ff63f556c939c094efb3b3370"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa788a45ff63f556c939c094efb3b3370">&#9670;&nbsp;</a></span>getInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1CallInfo.htm">CallInfo</a> pj::Call::getInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Obtain detail information about this call.</p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classpj_1_1Call.htm">Call</a> info. </dd></dl>

</div>
</div>
<a id="a44f226dbb25b6fcac439e48220d13225" name="a44f226dbb25b6fcac439e48220d13225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44f226dbb25b6fcac439e48220d13225">&#9670;&nbsp;</a></span>isActive()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::Call::isActive </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if this call has active INVITE session and the INVITE session has not been disconnected.</p>
<dl class="section return"><dt>Returns</dt><dd>True if call is active. </dd></dl>

</div>
</div>
<a id="abf68f770d982e9ae27241249001b8414" name="abf68f770d982e9ae27241249001b8414"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf68f770d982e9ae27241249001b8414">&#9670;&nbsp;</a></span>getId()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::Call::getId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get PJSUA-LIB call ID or index associated with this call.</p>
<dl class="section return"><dt>Returns</dt><dd>Integer greater than or equal to zero. </dd></dl>

</div>
</div>
<a id="a2047d0f608199732de21aece77f7fc46" name="a2047d0f608199732de21aece77f7fc46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2047d0f608199732de21aece77f7fc46">&#9670;&nbsp;</a></span>lookup()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classpj_1_1Call.htm">Call</a> * pj::Call::lookup </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>call_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Get the <a class="el" href="classpj_1_1Call.htm">Call</a> class for the specified call Id.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">call_id</td><td>The call ID to lookup</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The <a class="el" href="classpj_1_1Call.htm">Call</a> instance or NULL if not found. </dd></dl>

</div>
</div>
<a id="a092b306f311b003e47ab283ef4d1f668" name="a092b306f311b003e47ab283ef4d1f668"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a092b306f311b003e47ab283ef4d1f668">&#9670;&nbsp;</a></span>hasMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::Call::hasMedia </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if call has an active media session.</p>
<dl class="section return"><dt>Returns</dt><dd>True if yes. </dd></dl>

</div>
</div>
<a id="a85de5d493fc926946a2e675ecc07954b" name="a85de5d493fc926946a2e675ecc07954b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85de5d493fc926946a2e675ecc07954b">&#9670;&nbsp;</a></span>getMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1Media.htm">Media</a> * pj::Call::getMedia </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>med_idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Warning: deprecated, use <a class="el" href="classpj_1_1Call.htm#a7d4a963c047173a0faa4869413fef3cd">getAudioMedia()</a> instead. This function is not safe in multithreaded environment.</p>
<p >Get media for the specified media index.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The media or NULL if invalid or inactive. </dd></dl>

</div>
</div>
<a id="a7d4a963c047173a0faa4869413fef3cd" name="a7d4a963c047173a0faa4869413fef3cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d4a963c047173a0faa4869413fef3cd">&#9670;&nbsp;</a></span>getAudioMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1AudioMedia.htm">AudioMedia</a> pj::Call::getAudioMedia </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>med_idx</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get audio media for the specified media index. If the specified media index is not audio or invalid or inactive, exception will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> index, or -1 to specify any first audio media registered in the conference bridge.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The audio media. </dd></dl>

</div>
</div>
<a id="aaee78a0ee73cb8bf52a95f68a1a0e9b6" name="aaee78a0ee73cb8bf52a95f68a1a0e9b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaee78a0ee73cb8bf52a95f68a1a0e9b6">&#9670;&nbsp;</a></span>getEncodingVideoMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1VideoMedia.htm">VideoMedia</a> pj::Call::getEncodingVideoMedia </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>med_idx</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get video media in encoding direction for the specified media index. If the specified media index is not video or invalid or the direction is receive only, exception will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> index, or -1 to specify any first video media with encoding direction registered in the conference bridge.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The video media. </dd></dl>

</div>
</div>
<a id="a4996d428e88ee07a5feb9bb24ee82cfe" name="a4996d428e88ee07a5feb9bb24ee82cfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4996d428e88ee07a5feb9bb24ee82cfe">&#9670;&nbsp;</a></span>getDecodingVideoMedia()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpj_1_1VideoMedia.htm">VideoMedia</a> pj::Call::getDecodingVideoMedia </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>med_idx</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get video media in decoding direction for the specified media index. If the specified media index is not video or invalid or the direction is send only, exception will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> index, or -1 to specify any first video media with decoding direction registered in the conference bridge.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The video media. </dd></dl>

</div>
</div>
<a id="a7116d07b31522727c5b60a740e2e6bdb" name="a7116d07b31522727c5b60a740e2e6bdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7116d07b31522727c5b60a740e2e6bdb">&#9670;&nbsp;</a></span>remoteHasCap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSIP__DIALOG.htm#ga78a1bd1fc30a0850704bdaa5c8bad369">pjsip_dialog_cap_status</a> pj::Call::remoteHasCap </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>htype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>hname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>token</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check if remote peer support the specified capability.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">htype</td><td>The header type (pjsip_hdr_e) to be checked, which value may be:<ul>
<li>PJSIP_H_ACCEPT</li>
<li>PJSIP_H_ALLOW</li>
<li>PJSIP_H_SUPPORTED </li>
</ul>
</td></tr>
    <tr><td class="paramname">hname</td><td>If htype specifies PJSIP_H_OTHER, then the header name must be supplied in this argument. Otherwise the value must be set to empty string (""). </td></tr>
    <tr><td class="paramname">token</td><td>The capability token to check. For example, if <em>htype</em> is PJSIP_H_ALLOW, then <em>token</em> specifies the method names; if <em>htype</em> is PJSIP_H_SUPPORTED, then <em>token</em> specifies the extension names such as "100rel".</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJSIP_DIALOG_CAP_SUPPORTED if the specified capability is explicitly supported, see pjsip_dialog_cap_status for more info. </dd></dl>

</div>
</div>
<a id="a6639766a6d0eefcfad29484c763916d8" name="a6639766a6d0eefcfad29484c763916d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6639766a6d0eefcfad29484c763916d8">&#9670;&nbsp;</a></span>setUserData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::setUserData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJSUA2__TYPES.htm#ga5d3c76912c9b255080f7f21002a6b8ae">Token</a>&#160;</td>
          <td class="paramname"><em>user_data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Attach application specific data to the call. Application can then inspect this data by calling <a class="el" href="classpj_1_1Call.htm#a7df1846659f739d41cd759c48e222174">getUserData()</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">user_data</td><td>Arbitrary data to be attached to the call. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7df1846659f739d41cd759c48e222174" name="a7df1846659f739d41cd759c48e222174"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7df1846659f739d41cd759c48e222174">&#9670;&nbsp;</a></span>getUserData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSUA2__TYPES.htm#ga5d3c76912c9b255080f7f21002a6b8ae">Token</a> pj::Call::getUserData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get user data attached to the call, which has been previously set with <a class="el" href="classpj_1_1Call.htm#a6639766a6d0eefcfad29484c763916d8">setUserData()</a>.</p>
<dl class="section return"><dt>Returns</dt><dd>The user data. </dd></dl>

</div>
</div>
<a id="a0534a14867dbed77c5599408ec5121b1" name="a0534a14867dbed77c5599408ec5121b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0534a14867dbed77c5599408ec5121b1">&#9670;&nbsp;</a></span>getRemNatType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="elRef" href="../../../pjnath/docs/html/group__PJNATH__NAT__DETECT.htm#ga07c3bec1eee4e02ea2fd5f03299d913d">pj_stun_nat_type</a> pj::Call::getRemNatType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the NAT type of remote's endpoint. This is a proprietary feature of PJSUA-LIB which sends its NAT type in the SDP when <em>natTypeInSdp</em> is set in <a class="el" href="structpj_1_1UaConfig.htm">UaConfig</a>.</p>
<p >This function can only be called after SDP has been received from remote, which means for incoming call, this function can be called as soon as call is received as long as incoming call contains SDP, and for outgoing call, this function can be called only after SDP is received (normally in 200/OK response to INVITE). As a general case, application should call this function after or in <em><a class="el" href="classpj_1_1Call.htm#ac12a07c788e683aa62aaf8f6e89fcd13">onCallMediaState()</a></em> callback.</p>
<dl class="section return"><dt>Returns</dt><dd>The NAT type.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpj_1_1Endpoint.htm#afeb592e0c164f806c1f2cc1e71cc8ed7">Endpoint::natGetType()</a>, natTypeInSdp </dd></dl>

</div>
</div>
<a id="a14a03dcd13f8a8c711d72f4e33063962" name="a14a03dcd13f8a8c711d72f4e33063962"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14a03dcd13f8a8c711d72f4e33063962">&#9670;&nbsp;</a></span>makeCall()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::makeCall </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>dst_uri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Make outgoing call to the specified URI.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst_uri</td><td>URI to be put in the To header (normally is the same as the target URI). </td></tr>
    <tr><td class="paramname">prm.opt</td><td>Optional call setting. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional headers etc to be added to outgoing INVITE request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af9cd10733d250bcafddd991cd5542db8" name="af9cd10733d250bcafddd991cd5542db8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9cd10733d250bcafddd991cd5542db8">&#9670;&nbsp;</a></span>answer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::answer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send response to incoming INVITE request with call setting param. Depending on the status code specified as parameter, this function may send provisional response, establish the call, or terminate the call. Notes about call setting:</p><ul>
<li>if call setting is changed in the subsequent call to this function, only the first call setting supplied will applied. So normally application will not supply call setting before getting confirmation from the user.</li>
<li>if no call setting is supplied when SDP has to be sent, i.e: answer with status code 183 or 2xx, the default call setting will be used, check <a class="el" href="structpj_1_1CallSetting.htm">CallSetting</a> for its default values.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.opt</td><td>Optional call setting. </td></tr>
    <tr><td class="paramname">prm.statusCode</td><td>Status code, (100-699). </td></tr>
    <tr><td class="paramname">prm.reason</td><td>Optional reason phrase. If empty, default text will be used. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional list of headers etc to be added to outgoing response message. Note that this message data will be persistent in all next answers/responses for this INVITE request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3dccfab5a07017b4cb2831f125842479" name="a3dccfab5a07017b4cb2831f125842479"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dccfab5a07017b4cb2831f125842479">&#9670;&nbsp;</a></span>hangup()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::hangup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Hangup call by using method that is appropriate according to the call state. This function is different than answering the call with 3xx-6xx response (with <a class="el" href="classpj_1_1Call.htm#af9cd10733d250bcafddd991cd5542db8">answer()</a>), in that this function will hangup the call regardless of the state and role of the call, while <a class="el" href="classpj_1_1Call.htm#af9cd10733d250bcafddd991cd5542db8">answer()</a> only works with incoming calls on EARLY state.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.statusCode</td><td>Optional status code to be sent when we're rejecting incoming call. If the value is zero, "603/Decline" will be sent. </td></tr>
    <tr><td class="paramname">prm.reason</td><td>Optional reason phrase to be sent when we're rejecting incoming call. If empty, default text will be used. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional list of headers etc to be added to outgoing request/response message. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae59362803a6433a6b3d52ddf36643236" name="ae59362803a6433a6b3d52ddf36643236"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae59362803a6433a6b3d52ddf36643236">&#9670;&nbsp;</a></span>setHold()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::setHold </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold. The final status of the request itself will be reported on the <em><a class="el" href="classpj_1_1Call.htm#ac12a07c788e683aa62aaf8f6e89fcd13">onCallMediaState()</a></em> callback, which inform the application that the media state of the call has changed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.options</td><td>Bitmask of pjsua_call_flag constants. Currently, only the flag PJSUA_CALL_UPDATE_CONTACT can be used. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional message components to be sent with the request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7312e0fe1a11d2810190953c1cd80401" name="a7312e0fe1a11d2810190953c1cd80401"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7312e0fe1a11d2810190953c1cd80401">&#9670;&nbsp;</a></span>reinvite()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::reinvite </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send re-INVITE. The final status of the request itself will be reported on the <em><a class="el" href="classpj_1_1Call.htm#ac12a07c788e683aa62aaf8f6e89fcd13">onCallMediaState()</a></em> callback, which inform the application that the media state of the call has changed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.opt</td><td>Optional call setting, if empty, the current call setting will remain unchanged. </td></tr>
    <tr><td class="paramname">prm.opt.flag</td><td>Bitmask of pjsua_call_flag constants. Specifying PJSUA_CALL_UNHOLD here will release call hold. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional message components to be sent with the request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a40a429f7c08eb6bd2fd2c045ceeb0c79" name="a40a429f7c08eb6bd2fd2c045ceeb0c79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40a429f7c08eb6bd2fd2c045ceeb0c79">&#9670;&nbsp;</a></span>update()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::update </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send UPDATE request.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.opt</td><td>Optional call setting, if empty, the current call setting will remain unchanged. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional message components to be sent with the request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a10b43ff893d30c3445d4832a216c302d" name="a10b43ff893d30c3445d4832a216c302d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10b43ff893d30c3445d4832a216c302d">&#9670;&nbsp;</a></span>xfer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::xfer </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initiate call transfer to the specified address. This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.</p>
<p >If application is interested to monitor the successfulness and the progress of the transfer request, it can implement <em><a class="el" href="classpj_1_1Call.htm#a2f9f1f4dc6589e6b817eb8f0b705741d">onCallTransferStatus()</a></em> callback which will report the progress of the call transfer request.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dest</td><td>URI of new target to be contacted. The URI may be in name address or addr-spec format. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional message components to be sent with the request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2ec22832c2dbc8afdb68521767073015" name="a2ec22832c2dbc8afdb68521767073015"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ec22832c2dbc8afdb68521767073015">&#9670;&nbsp;</a></span>xferReplaces()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::xferReplaces </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classpj_1_1Call.htm">Call</a> &amp;&#160;</td>
          <td class="paramname"><em>dest_call</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallOpParam.htm">CallOpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initiate attended call transfer. This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of <em>destCall</em>. The party at <em>dest_call</em> then should "replace" the call with us with the new call from the REFER recipient.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dest_call</td><td>The call to be replaced. </td></tr>
    <tr><td class="paramname">prm.options</td><td>Application may specify PJSUA_XFER_NO_REQUIRE_REPLACES to suppress the inclusion of "Require: replaces" in the outgoing INVITE request created by the REFER request. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional message components to be sent with the request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aec1e566ea2b4dbcb3557e8a211c4e8e0" name="aec1e566ea2b4dbcb3557e8a211c4e8e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec1e566ea2b4dbcb3557e8a211c4e8e0">&#9670;&nbsp;</a></span>processRedirect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::processRedirect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a>&#160;</td>
          <td class="paramname"><em>cmd</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Accept or reject redirection response. Application MUST call this function after it signaled PJSIP_REDIRECT_PENDING in the <em><a class="el" href="classpj_1_1Call.htm#a4fd60c59752c4cc2a5d6742e2a255bc8">onCallRedirected()</a></em> callback, to notify the call whether to accept or reject the redirection to the current target. Application can use the combination of PJSIP_REDIRECT_PENDING command in <em><a class="el" href="classpj_1_1Call.htm#a4fd60c59752c4cc2a5d6742e2a255bc8">onCallRedirected()</a></em> callback and this function to ask for user permission before redirecting the call.</p>
<p >Note that if the application chooses to reject or stop redirection (by using PJSIP_REDIRECT_REJECT or PJSIP_REDIRECT_STOP respectively), the call disconnection callback will be called before this function returns. And if the application rejects the target, the <em><a class="el" href="classpj_1_1Call.htm#a4fd60c59752c4cc2a5d6742e2a255bc8">onCallRedirected()</a></em> callback may also be called before this function returns if there is another target to try.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cmd</td><td>Redirection operation to be applied to the current target. The semantic of this argument is similar to the description in the <em><a class="el" href="classpj_1_1Call.htm#a4fd60c59752c4cc2a5d6742e2a255bc8">onCallRedirected()</a></em> callback, except that the PJSIP_REDIRECT_PENDING is not accepted here. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adaba286d32943a1c50828c98163b568f" name="adaba286d32943a1c50828c98163b568f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaba286d32943a1c50828c98163b568f">&#9670;&nbsp;</a></span>dialDtmf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::dialDtmf </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>digits</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send DTMF digits to remote using RFC 2833 payload formats.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">digits</td><td>DTMF string digits to be sent. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a49cefb07567a5abb06279721597f94fb" name="a49cefb07567a5abb06279721597f94fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49cefb07567a5abb06279721597f94fb">&#9670;&nbsp;</a></span>sendDtmf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::sendDtmf </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallSendDtmfParam.htm">CallSendDtmfParam</a> &amp;&#160;</td>
          <td class="paramname"><em>param</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send DTMF digits to remote.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">param</td><td>The send DTMF parameter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae985d1a096e5b21c724589ac1eed2467" name="ae985d1a096e5b21c724589ac1eed2467"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae985d1a096e5b21c724589ac1eed2467">&#9670;&nbsp;</a></span>sendInstantMessage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::sendInstantMessage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1SendInstantMessageParam.htm">SendInstantMessageParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send instant messaging inside INVITE session.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.contentType</td><td>MIME type. </td></tr>
    <tr><td class="paramname">prm.content</td><td>The message content. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional list of headers etc to be included in outgoing request. The body descriptor in the txOption is ignored. </td></tr>
    <tr><td class="paramname">prm.userData</td><td>Optional user data, which will be given back when the IM callback is called. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9785908a52298ac463fa78994b3d6578" name="a9785908a52298ac463fa78994b3d6578"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9785908a52298ac463fa78994b3d6578">&#9670;&nbsp;</a></span>sendTypingIndication()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::sendTypingIndication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1SendTypingIndicationParam.htm">SendTypingIndicationParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send IM typing indication inside INVITE session.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.isTyping</td><td>True to indicate to remote that local person is currently typing an IM. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional list of headers etc to be included in outgoing request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a88cd4e7fe1b1ebd2292877b5555c0d45" name="a88cd4e7fe1b1ebd2292877b5555c0d45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88cd4e7fe1b1ebd2292877b5555c0d45">&#9670;&nbsp;</a></span>sendRequest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::sendRequest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallSendRequestParam.htm">CallSendRequestParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Send arbitrary request with the call. This is useful for example to send INFO request. Note that application should not use this function to send requests which would change the invite session's state, such as re-INVITE, UPDATE, PRACK, and BYE.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm.method</td><td>SIP method of the request. </td></tr>
    <tr><td class="paramname">prm.txOption</td><td>Optional message body and/or list of headers to be included in outgoing request. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a25a614f8239a8c49eef53e4798e0fdb0" name="a25a614f8239a8c49eef53e4798e0fdb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25a614f8239a8c49eef53e4798e0fdb0">&#9670;&nbsp;</a></span>dump()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string pj::Call::dump </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>with_media</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string&#160;</td>
          <td class="paramname"><em>indent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Dump call and media statistics to string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">with_media</td><td>True to include media information too. </td></tr>
    <tr><td class="paramname">indent</td><td>Spaces for left indentation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classpj_1_1Call.htm">Call</a> dump and media statistics string. </dd></dl>

</div>
</div>
<a id="a3cfaa57767932774273bec569f60c090" name="a3cfaa57767932774273bec569f60c090"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cfaa57767932774273bec569f60c090">&#9670;&nbsp;</a></span>vidGetStreamIdx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::Call::vidGetStreamIdx </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the media stream index of the default video stream in the call. Typically this will just retrieve the stream index of the first activated video stream in the call. If none is active, it will return the first inactive video stream.</p>
<dl class="section return"><dt>Returns</dt><dd>The media stream index or -1 if no video stream is present in the call. </dd></dl>

</div>
</div>
<a id="a85865596f7978e304be37086c2bca778" name="a85865596f7978e304be37086c2bca778"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85865596f7978e304be37086c2bca778">&#9670;&nbsp;</a></span>vidStreamIsRunning()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::Call::vidStreamIsRunning </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>med_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__TYPES.htm#gaf19d0dce3e3c99a3b9514726c28baa30">pjmedia_dir</a>&#160;</td>
          <td class="paramname"><em>dir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Determine if video stream for the specified call is currently running (i.e. has been created, started, and not being paused) for the specified direction.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> stream index, or -1 to specify default video media. </td></tr>
    <tr><td class="paramname">dir</td><td>The direction to be checked.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if stream is currently running for the specified direction. </dd></dl>

</div>
</div>
<a id="ad679a98078afe7c1350553e1493fe40e" name="ad679a98078afe7c1350553e1493fe40e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad679a98078afe7c1350553e1493fe40e">&#9670;&nbsp;</a></span>vidSetStream()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::vidSetStream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJSUA__LIB__CALL.htm#ga8a7b29df0618360407b8aae888421a36">pjsua_call_vid_strm_op</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CallVidSetStreamParam.htm">CallVidSetStreamParam</a> &amp;&#160;</td>
          <td class="paramname"><em>param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Add, remove, modify, and/or manipulate video media stream for the specified call. This may trigger a re-INVITE or UPDATE to be sent for the call.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">op</td><td>The video stream operation to be performed, possible values are pjsua_call_vid_strm_op. </td></tr>
    <tr><td class="paramname">param</td><td>The parameters for the video stream operation (see <a class="el" href="structpj_1_1CallVidSetStreamParam.htm">CallVidSetStreamParam</a>). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a10afa2ffc3f1c27921159d5b83a55ba3" name="a10afa2ffc3f1c27921159d5b83a55ba3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10afa2ffc3f1c27921159d5b83a55ba3">&#9670;&nbsp;</a></span>audStreamModifyCodecParam()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::audStreamModifyCodecParam </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>med_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1CodecParam.htm">CodecParam</a> &amp;&#160;</td>
          <td class="paramname"><em>param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Modify the audio stream's codec parameter after the codec is opened. Note that not all codec parameters can be modified during run-time. Currently, only Opus codec supports changing key codec parameters such as bitrate and bandwidth, while other codecs may only be able to modify minor settings such as VAD or PLC.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> stream index, or -1 to specify default audio media. </td></tr>
    <tr><td class="paramname">param</td><td>The new codec parameter.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>PJ_SUCCESS on success. </dd></dl>

</div>
</div>
<a id="a9e7f9428a14ed8f09ffb151c698d353d" name="a9e7f9428a14ed8f09ffb151c698d353d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e7f9428a14ed8f09ffb151c698d353d">&#9670;&nbsp;</a></span>getStreamInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1StreamInfo.htm">StreamInfo</a> pj::Call::getStreamInfo </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>med_idx</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get media stream info for the specified media index.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> stream index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The stream info. </dd></dl>

</div>
</div>
<a id="a4ae46dca289ba8f06ef80c8bb3323f11" name="a4ae46dca289ba8f06ef80c8bb3323f11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ae46dca289ba8f06ef80c8bb3323f11">&#9670;&nbsp;</a></span>getStreamStat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1StreamStat.htm">StreamStat</a> pj::Call::getStreamStat </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>med_idx</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get media stream statistic for the specified media index.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> stream index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The stream statistic. </dd></dl>

</div>
</div>
<a id="abc77cc1e89b4dcb11b7d2cc558e64635" name="abc77cc1e89b4dcb11b7d2cc558e64635"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc77cc1e89b4dcb11b7d2cc558e64635">&#9670;&nbsp;</a></span>getMedTransportInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1MediaTransportInfo.htm">MediaTransportInfo</a> pj::Call::getMedTransportInfo </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>med_idx</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get media transport info for the specified media index.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">med_idx</td><td><a class="el" href="classpj_1_1Media.htm">Media</a> stream index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The transport info. </dd></dl>

</div>
</div>
<a id="a8316460b2e48bc18d896686eb6d6e90f" name="a8316460b2e48bc18d896686eb6d6e90f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8316460b2e48bc18d896686eb6d6e90f">&#9670;&nbsp;</a></span>processMediaUpdate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::processMediaUpdate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallMediaStateParam.htm">OnCallMediaStateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Internal function (callled by <a class="el" href="classpj_1_1Endpoint.htm">Endpoint</a>( to process update to call medias when call media state changes. </p>

</div>
</div>
<a id="ad30317b7a189540a2fa3ce3c59355381" name="ad30317b7a189540a2fa3ce3c59355381"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad30317b7a189540a2fa3ce3c59355381">&#9670;&nbsp;</a></span>processStateChange()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::Call::processStateChange </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallStateParam.htm">OnCallStateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Internal function (called by <a class="el" href="classpj_1_1Endpoint.htm">Endpoint</a>) to process call state change. </p>

</div>
</div>
<a id="a6346fb46307057308e0fff0118306206" name="a6346fb46307057308e0fff0118306206"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6346fb46307057308e0fff0118306206">&#9670;&nbsp;</a></span>onCallState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallStateParam.htm">OnCallStateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when call state has changed. Application may then query the call info to get the detail call states by calling <a class="el" href="classpj_1_1Call.htm#aa788a45ff63f556c939c094efb3b3370">getInfo()</a> function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a7f1c9ac9751962a7c685f181005d5867" name="a7f1c9ac9751962a7c685f181005d5867"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f1c9ac9751962a7c685f181005d5867">&#9670;&nbsp;</a></span>onCallTsxState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallTsxState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallTsxStateParam.htm">OnCallTsxStateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >This is a general notification callback which is called whenever a transaction within the call has changed state. Application can implement this callback for example to monitor the state of outgoing requests, or to answer unhandled incoming requests (such as INFO) with a final response.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ac12a07c788e683aa62aaf8f6e89fcd13" name="ac12a07c788e683aa62aaf8f6e89fcd13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac12a07c788e683aa62aaf8f6e89fcd13">&#9670;&nbsp;</a></span>onCallMediaState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallMediaState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallMediaStateParam.htm">OnCallMediaStateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when media state in the call has changed. Normal application would need to implement this callback, e.g. to connect the call's media to sound device. When ICE is used, this callback will also be called to report ICE negotiation failure.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a6b524a15eb38e5aeba9f85eebfb96f77" name="a6b524a15eb38e5aeba9f85eebfb96f77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b524a15eb38e5aeba9f85eebfb96f77">&#9670;&nbsp;</a></span>onCallSdpCreated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallSdpCreated </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallSdpCreatedParam.htm">OnCallSdpCreatedParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when a call has just created a local SDP (for initial or subsequent SDP offer/answer). Application can implement this callback to modify the SDP, before it is being sent and/or negotiated with remote SDP, for example to apply per account/call basis codecs priority or to add custom/proprietary SDP attributes.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="af6d77799ba55d05fbefc3769b353ae1e" name="af6d77799ba55d05fbefc3769b353ae1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6d77799ba55d05fbefc3769b353ae1e">&#9670;&nbsp;</a></span>onStreamPreCreate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onStreamPreCreate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnStreamPreCreateParam.htm">OnStreamPreCreateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when an audio media session is about to be created (as opposed to on_stream_created() and on_stream_created2() which are called <em>after</em> the session has been created). The application may change some stream info parameter values, i.e: jbInit, jbMinPre, jbMaxPre, jbMax, useKa, rtcpSdesByeDisabled, jbDiscardAlgo (audio), vidCodecParam.encFmt (video).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="abff1d3672115d8ba2745b3c99b17b49c" name="abff1d3672115d8ba2745b3c99b17b49c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abff1d3672115d8ba2745b3c99b17b49c">&#9670;&nbsp;</a></span>onStreamCreated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onStreamCreated </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnStreamCreatedParam.htm">OnStreamCreatedParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when audio media session is created and before it is registered to the conference bridge. Application may return different audio media port if it has added media processing port to the stream. This media port then will be added to the conference bridge instead.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ac6ba1a4493ca571c39925c0b1d12a014" name="ac6ba1a4493ca571c39925c0b1d12a014"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6ba1a4493ca571c39925c0b1d12a014">&#9670;&nbsp;</a></span>onStreamDestroyed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onStreamDestroyed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnStreamDestroyedParam.htm">OnStreamDestroyedParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when audio media session has been unregistered from the conference bridge and about to be destroyed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ae6ea8bd174a76a5c8ba33e87aa9106f6" name="ae6ea8bd174a76a5c8ba33e87aa9106f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6ea8bd174a76a5c8ba33e87aa9106f6">&#9670;&nbsp;</a></span>onDtmfDigit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onDtmfDigit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnDtmfDigitParam.htm">OnDtmfDigitParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application upon incoming DTMF digits.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a7893f0b39383c67d3a1c4dc6a54dd737" name="a7893f0b39383c67d3a1c4dc6a54dd737"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7893f0b39383c67d3a1c4dc6a54dd737">&#9670;&nbsp;</a></span>onDtmfEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onDtmfEvent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnDtmfEventParam.htm">OnDtmfEventParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application upon incoming DTMF events.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a9c4bcb16e0043526621acf891c6cbc7e" name="a9c4bcb16e0043526621acf891c6cbc7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c4bcb16e0043526621acf891c6cbc7e">&#9670;&nbsp;</a></span>onCallTransferRequest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallTransferRequest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallTransferRequestParam.htm">OnCallTransferRequestParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application on call being transferred (i.e. REFER is received). Application can decide to accept/reject transfer request by setting the code (default is 202). When this callback is not implemented, the default behavior is to accept the transfer.</p>
<p >If application decides to accept the transfer request, it must also instantiate the new <a class="el" href="classpj_1_1Call.htm">Call</a> object for the transfer operation and return this new <a class="el" href="classpj_1_1Call.htm">Call</a> object to prm.newCall. For the new <a class="el" href="classpj_1_1Call.htm">Call</a> instance, the account should use the same account as this call and the call ID must be set to PJSUA_INVALID_ID.</p>
<p >If application does not specify new <a class="el" href="classpj_1_1Call.htm">Call</a> object, library will reuse the existing <a class="el" href="classpj_1_1Call.htm">Call</a> object for initiating the new call (to the transfer destination). In this case, any events from both calls (transferred and transferring) will be delivered to the same <a class="el" href="classpj_1_1Call.htm">Call</a> object, where the call ID will be switched back and forth between callbacks. Application must be careful to not destroy the <a class="el" href="classpj_1_1Call.htm">Call</a> object when receiving disconnection event of the transferred call after the transfer process is completed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a2f9f1f4dc6589e6b817eb8f0b705741d" name="a2f9f1f4dc6589e6b817eb8f0b705741d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f9f1f4dc6589e6b817eb8f0b705741d">&#9670;&nbsp;</a></span>onCallTransferStatus()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallTransferStatus </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallTransferStatusParam.htm">OnCallTransferStatusParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application of the status of previously sent call transfer request. Application can monitor the status of the call transfer request, for example to decide whether to terminate existing call.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ae56f88566598aafa2d3bc132ddc07c91" name="ae56f88566598aafa2d3bc132ddc07c91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae56f88566598aafa2d3bc132ddc07c91">&#9670;&nbsp;</a></span>onCallReplaceRequest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallReplaceRequest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallReplaceRequestParam.htm">OnCallReplaceRequestParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application about incoming INVITE with Replaces header. Application may reject the request by setting non-2xx code.</p>
<p >In this callback, application should create a new <a class="el" href="classpj_1_1Call.htm">Call</a> instance and return the <a class="el" href="classpj_1_1Call.htm">Call</a> object via prm.newCall. In creating the new <a class="el" href="classpj_1_1Call.htm">Call</a> instance, the account should use the same account as this call and the call ID must be set to PJSUA_INVALID_ID.</p>
<p >If application does not specify new <a class="el" href="classpj_1_1Call.htm">Call</a> object, library will reuse the existing <a class="el" href="classpj_1_1Call.htm">Call</a> object for callbacks. In this case, any events from both calls (replaced and new) will be delivered to the same <a class="el" href="classpj_1_1Call.htm">Call</a> object, where the call ID will be switched back and forth between callbacks. Application must be careful to not destroy the <a class="el" href="classpj_1_1Call.htm">Call</a> object when receiving disconnection event of the replaced call after the transfer process is completed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="aace52022f01e0a0e609265121ac3f45d" name="aace52022f01e0a0e609265121ac3f45d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aace52022f01e0a0e609265121ac3f45d">&#9670;&nbsp;</a></span>onCallReplaced()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallReplaced </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallReplacedParam.htm">OnCallReplacedParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application that an existing call has been replaced with a new call. This happens when PJSUA-API receives incoming INVITE request with Replaces header.</p>
<p >After this callback is called, normally PJSUA-API will disconnect this call and establish a new call.</p>
<p >If not yet done in <a class="el" href="classpj_1_1Call.htm#ae56f88566598aafa2d3bc132ddc07c91">onCallReplaceRequest()</a>, application can create the new <a class="el" href="classpj_1_1Call.htm">Call</a> instance and return the <a class="el" href="classpj_1_1Call.htm">Call</a> object via prm.newCall. In creating the new <a class="el" href="classpj_1_1Call.htm">Call</a> instance, the account should use the same account as this call and the call ID must be set to prm.newCallId.</p>
<p >If the new <a class="el" href="classpj_1_1Call.htm">Call</a> instance has been setup in <a class="el" href="classpj_1_1Call.htm#ae56f88566598aafa2d3bc132ddc07c91">onCallReplaceRequest()</a>, the prm.newCall should contain the new <a class="el" href="classpj_1_1Call.htm">Call</a> instance and application MUST not change it.</p>
<p >If application does not specify new <a class="el" href="classpj_1_1Call.htm">Call</a> object, library will reuse the existing <a class="el" href="classpj_1_1Call.htm">Call</a> object for callbacks. In this case, any events from both calls (replaced and new) will be delivered to the same <a class="el" href="classpj_1_1Call.htm">Call</a> object, where the call ID will be switched back and forth between callbacks. Application must be careful to not destroy the <a class="el" href="classpj_1_1Call.htm">Call</a> object when receiving disconnection event of the replaced call after the transfer process is completed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a0dc4171ff5a4c5e66f9cc48947e99f40" name="a0dc4171ff5a4c5e66f9cc48947e99f40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0dc4171ff5a4c5e66f9cc48947e99f40">&#9670;&nbsp;</a></span>onCallRxOffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallRxOffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallRxOfferParam.htm">OnCallRxOfferParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when call has received new offer from remote (i.e. re-INVITE/UPDATE with SDP is received). Application can decide to accept/reject the offer by setting the code (default is 200). If the offer is accepted, application can update the call setting to be applied in the answer. When this callback is not implemented, the default behavior is to accept the offer using current call setting.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a7d6056508c6d4e666d7f9cdeb7afa3cc" name="a7d6056508c6d4e666d7f9cdeb7afa3cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d6056508c6d4e666d7f9cdeb7afa3cc">&#9670;&nbsp;</a></span>onCallRxReinvite()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallRxReinvite </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallRxReinviteParam.htm">OnCallRxReinviteParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when call has received a re-INVITE offer from the peer. It allows more fine-grained control over the response to a re-INVITE. If application sets async to PJ_TRUE, it can send the reply manually using the function <a class="el" href="classpj_1_1Call.htm#af9cd10733d250bcafddd991cd5542db8">pj::Call::answer()</a> and setting the SDP answer. Otherwise, by default the re-INVITE will be answered automatically after the callback returns.</p>
<p >Currently, this callback is only called for re-INVITE with SDP, but app should be prepared to handle the case of re-INVITE without SDP.</p>
<p >Remarks: If manually answering at a later timing, application may need to monitor <a class="el" href="classpj_1_1Call.htm#a7f1c9ac9751962a7c685f181005d5867">onCallTsxState()</a> callback to check whether the re-INVITE is already answered automatically with 487 due to being cancelled.</p>
<p >Note: <a class="el" href="classpj_1_1Call.htm#a0dc4171ff5a4c5e66f9cc48947e99f40">onCallRxOffer()</a> will still be called after this callback, but only if prm.async is false and prm.code is 200. </p>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a59e2735ae892cc6f70f4501df1edf4b8" name="a59e2735ae892cc6f70f4501df1edf4b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59e2735ae892cc6f70f4501df1edf4b8">&#9670;&nbsp;</a></span>onCallTxOffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallTxOffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallTxOfferParam.htm">OnCallTxOfferParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application when call has received INVITE with no SDP offer. Application can update the call setting (e.g: add audio/video), or enable/disable codecs, or update other media session settings from within the callback, however, as mandated by the standard (RFC3261 section 14.2), it must ensure that the update overlaps with the existing media session (in codecs, transports, or other parameters) that require support from the peer, this is to avoid the need for the peer to reject the offer.</p>
<p >When this callback is not implemented, the default behavior is to send SDP offer using current active media session (with all enabled codecs on each media type).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a953f792e54d1a79017ca375aa1bf2357" name="a953f792e54d1a79017ca375aa1bf2357"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a953f792e54d1a79017ca375aa1bf2357">&#9670;&nbsp;</a></span>onInstantMessage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onInstantMessage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnInstantMessageParam.htm">OnInstantMessageParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application on incoming MESSAGE request.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a9013d1314161b840e43192bc75d2c953" name="a9013d1314161b840e43192bc75d2c953"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9013d1314161b840e43192bc75d2c953">&#9670;&nbsp;</a></span>onInstantMessageStatus()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onInstantMessageStatus </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnInstantMessageStatusParam.htm">OnInstantMessageStatusParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application about the delivery status of outgoing MESSAGE request.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a6f38207566d5b238af88e708c9590cac" name="a6f38207566d5b238af88e708c9590cac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f38207566d5b238af88e708c9590cac">&#9670;&nbsp;</a></span>onTypingIndication()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onTypingIndication </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnTypingIndicationParam.htm">OnTypingIndicationParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notify application about typing indication.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a4fd60c59752c4cc2a5d6742e2a255bc8" name="a4fd60c59752c4cc2a5d6742e2a255bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fd60c59752c4cc2a5d6742e2a255bc8">&#9670;&nbsp;</a></span>onCallRedirected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#gaa99c427ca4668e49f1c3f6e25b10516c">pjsip_redirect_op</a> pj::Call::onCallRedirected </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallRedirectedParam.htm">OnCallRedirectedParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >This callback is called when the call is about to resend the INVITE request to the specified target, following the previously received redirection response.</p>
<p >Application may accept the redirection to the specified target, reject this target only and make the session continue to try the next target in the list if such target exists, stop the whole redirection process altogether and cause the session to be disconnected, or defer the decision to ask for user confirmation.</p>
<p >This callback is optional, the default behavior is to NOT follow the redirection response.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Action to be performed for the target. Set this parameter to one of the value below:<ul>
<li>PJSIP_REDIRECT_ACCEPT: immediately accept the redirection. When set, the call will immediately resend INVITE request to the target.</li>
<li>PJSIP_REDIRECT_ACCEPT_REPLACE: immediately accept the redirection and replace the To header with the current target. When set, the call will immediately resend INVITE request to the target.</li>
<li>PJSIP_REDIRECT_REJECT: immediately reject this target. The call will continue retrying with next target if present, or disconnect the call if there is no more target to try.</li>
<li>PJSIP_REDIRECT_STOP: stop the whole redirection process and immediately disconnect the call. The <a class="el" href="classpj_1_1Call.htm#a6346fb46307057308e0fff0118306206">onCallState()</a> callback will be called with PJSIP_INV_STATE_DISCONNECTED state immediately after this callback returns.</li>
<li>PJSIP_REDIRECT_PENDING: set to this value if no decision can be made immediately (for example to request confirmation from user). Application then MUST call <a class="el" href="classpj_1_1Call.htm#aec1e566ea2b4dbcb3557e8a211c4e8e0">processRedirect()</a> to either accept or reject the redirection upon getting user decision. </li>
</ul>
</dd></dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>, and <a class="el" href="group__PJSIP__ENDPT__TARGET__URI.htm#ggaa99c427ca4668e49f1c3f6e25b10516ca9126f8b69b48238fbd1288830d45e94b">PJSIP_REDIRECT_STOP</a>.</p>

</div>
</div>
<a id="a3f74a82432a691d997e1eed48a95b4a4" name="a3f74a82432a691d997e1eed48a95b4a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f74a82432a691d997e1eed48a95b4a4">&#9670;&nbsp;</a></span>onCallMediaTransportState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallMediaTransportState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallMediaTransportStateParam.htm">OnCallMediaTransportStateParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >This callback is called when media transport state is changed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ae07aa6a38de8798262ec30ee27d9fba6" name="ae07aa6a38de8798262ec30ee27d9fba6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae07aa6a38de8798262ec30ee27d9fba6">&#9670;&nbsp;</a></span>onCallMediaEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCallMediaEvent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCallMediaEventParam.htm">OnCallMediaEventParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Notification about media events such as video notifications. This callback will most likely be called from media threads, thus application must not perform heavy processing in this callback. Especially, application must not destroy the call or media in this callback. If application needs to perform more complex tasks to handle the event, it should post the task to another thread.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="ab5b42bdbe506b948f7a304a762f404d7" name="ab5b42bdbe506b948f7a304a762f404d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5b42bdbe506b948f7a304a762f404d7">&#9670;&nbsp;</a></span>onCreateMediaTransport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCreateMediaTransport </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCreateMediaTransportParam.htm">OnCreateMediaTransportParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >This callback can be used by application to implement custom media transport adapter for the call, or to replace the media transport with something completely new altogether.</p>
<p >This callback is called when a new call is created. The library has created a media transport for the call, and it is provided as the <em>mediaTp</em> argument of this callback. The callback may change it with the instance of media transport to be used by the call.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<a id="a33f7e81d49974c9e039f0c319a7a411e" name="a33f7e81d49974c9e039f0c319a7a411e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33f7e81d49974c9e039f0c319a7a411e">&#9670;&nbsp;</a></span>onCreateMediaTransportSrtp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void pj::Call::onCreateMediaTransportSrtp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj_1_1OnCreateMediaTransportSrtpParam.htm">OnCreateMediaTransportSrtpParam</a> &amp;&#160;</td>
          <td class="paramname"><em>prm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >Warning: deprecated and may be removed in future release. Application can set SRTP crypto settings (including keys) and keying methods via AccountConfig.mediaConfig.srtpOpt. See also ticket #2100.</p>
<p >This callback is called when SRTP media transport is created. Application can modify the SRTP setting <em>srtpOpt</em> to specify the cryptos and keys which are going to be used. Note that application should not modify the field <em><a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__srtp__setting.htm#a912b18bf7e03f7ed58149582d65ddb7a">pjmedia_srtp_setting.close_member_tp</a></em> and can only modify the field <em><a class="elRef" href="../../../pjmedia/docs/html/structpjmedia__srtp__setting.htm#a247239189c89255899f73619b777b1be">pjmedia_srtp_setting.use</a></em> for initial INVITE.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prm</td><td>Callback parameter. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="elRef" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="call_8hpp.htm">call.hpp</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
