<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Sleep, Time, and Timestamp (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Sleep, Time, and Timestamp </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation of <b>sleep_test()</b>.</p>
<h2><a class="anchor" id="sleep_test_sec"></a>
Scope of the Test</h2>
<p>This tests:</p>
<ul>
<li>whether <a class="el" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep()</a> works.</li>
<li>whether <a class="el" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday()</a> works.</li>
<li>whether <a class="el" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp()</a> and friends works.</li>
</ul>
<p>API tested:</p>
<ul>
<li><a class="el" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep()</a></li>
<li><a class="el" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday()</a></li>
<li><a class="el" href="group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB()</a></li>
<li><a class="el" href="group__PJ__TIME.htm#ga33a03349659e92074f1d39a137047385">PJ_TIME_VAL_LTE()</a></li>
<li><a class="el" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp()</a></li>
<li><a class="el" href="group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq()</a> (implicitly)</li>
<li><a class="el" href="group__PJ__TIMESTAMP.htm#gad4cb75af00fbf3a55a5e6a4825624dff">pj_elapsed_time()</a></li>
<li><a class="el" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec()</a></li>
</ul>
<p>This file is <b>pjlib-test/sleep.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: sleep.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>

<span class="preprocessor">#if INCLUDE_SLEEP_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#include &lt;pjlib.h&gt;</span>

<span class="preprocessor">#define THIS_FILE   &quot;sleep_test&quot;</span>
<span class="preprocessor"></span>
<span class="keyword">static</span> <span class="keywordtype">int</span> simple_sleep_test(<span class="keywordtype">void</span>)
{
    <span class="keyword">enum</span> { COUNT = 10 };
    <span class="keywordtype">int</span> i;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;
    
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..will write messages every 1 second:&quot;</span>));
    
    <span class="keywordflow">for</span> (i=0; i&lt;COUNT; ++i) {
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> tv;
        <a class="code" href="structpj__parsed__time.htm">pj_parsed_time</a> pt;

        rc = <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1000);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_thread_sleep()&quot;</span>, rc);
            <span class="keywordflow">return</span> -10;
        }

        rc = <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tv);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_gettimeofday()&quot;</span>, rc);
            <span class="keywordflow">return</span> -11;
        }

        <a class="code" href="group__PJ__TIME.htm#gad82b73b1187d98baba15328a90b8cf2e">pj_time_decode</a>(&amp;tv, &amp;pt);

        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
                  <span class="stringliteral">&quot;...%04d-%02d-%02d %02d:%02d:%02d.%03d&quot;</span>,
                  pt.<a class="code" href="structpj__parsed__time.htm#a2db2ac0e15af85af99e75189a5bfd0f8">year</a>, pt.<a class="code" href="structpj__parsed__time.htm#afb8d3aea54a058a60e8727f077bcef1c">mon</a>, pt.<a class="code" href="structpj__parsed__time.htm#aa356207416f9cc04ec4055f9a8bf3da3">day</a>,
                  pt.<a class="code" href="structpj__parsed__time.htm#a1e47294449fb5f873a810e4bb21545ef">hour</a>, pt.<a class="code" href="structpj__parsed__time.htm#a748e0af4b2caef0e8296fcd5a4181d69">min</a>, pt.<a class="code" href="structpj__parsed__time.htm#a002f185290c683cf4b3d2057a6582b63">sec</a>, pt.<a class="code" href="structpj__parsed__time.htm#a2eeb5a81049643e0536c518bd0483498">msec</a>));

    }

    <span class="keywordflow">return</span> 0;
}

<span class="keyword">static</span> <span class="keywordtype">int</span> sleep_duration_test(<span class="keywordtype">void</span>)
{
    <span class="keyword">enum</span> { MIS = 20};
    <span class="keywordtype">unsigned</span> duration[] = { 2000, 1000, 500, 200, 100 };
    <span class="keywordtype">unsigned</span> i;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;..running sleep duration test&quot;</span>));

    <span class="comment">/* Test pj_thread_sleep() and pj_gettimeofday() */</span>
    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(duration); ++i) {
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> start, stop;
        <a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> msec;

        <span class="comment">/* Mark start of test. */</span>
        rc = <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;start);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_gettimeofday()&quot;</span>, rc);
            <span class="keywordflow">return</span> -10;
        }

        <span class="comment">/* Sleep */</span>
        rc = <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(duration[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_thread_sleep()&quot;</span>, rc);
            <span class="keywordflow">return</span> -20;
        }

        <span class="comment">/* Mark end of test. */</span>
        rc = <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;stop);

        <span class="comment">/* Calculate duration (store in stop). */</span>
        <a class="code" href="group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(stop, start);

        <span class="comment">/* Convert to msec. */</span>
        msec = <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(stop);

        <span class="comment">/* Check if it&#39;s within range. */</span>
        <span class="keywordflow">if</span> (msec &lt; duration[i] * (100-MIS)/100 ||
            msec &gt; duration[i] * (100+MIS)/100)
        {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
                      <span class="stringliteral">&quot;...error: slept for %d ms instead of %d ms &quot;</span>
                      <span class="stringliteral">&quot;(outside %d%% err window)&quot;</span>,
                      msec, duration[i], MIS));
            <span class="keywordflow">return</span> -30;
        }
    }


    <span class="comment">/* Test pj_thread_sleep() and pj_get_timestamp() and friends */</span>
    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code" href="group__PJ__BASIC.htm#gacd8459212a1e5175eeb04e3a6cd76659">PJ_ARRAY_SIZE</a>(duration); ++i) {
        <a class="code" href="structpj__time__val.htm">pj_time_val</a> t1, t2;
        <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> start, stop;
        <a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> msec;

        <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(0);

        <span class="comment">/* Mark start of test. */</span>
        rc = <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;start);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_get_timestamp()&quot;</span>, rc);
            <span class="keywordflow">return</span> -60;
        }

        <span class="comment">/* ..also with gettimeofday() */</span>
        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;t1);

        <span class="comment">/* Sleep */</span>
        rc = <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(duration[i]);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...error: pj_thread_sleep()&quot;</span>, rc);
            <span class="keywordflow">return</span> -70;
        }

        <span class="comment">/* Mark end of test. */</span>
        <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;stop);

        <span class="comment">/* ..also with gettimeofday() */</span>
        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;t2);

        <span class="comment">/* Compare t1 and t2. */</span>
        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__TIME.htm#ga9dd4507187780ed1e83a10176dc845b8">PJ_TIME_VAL_LT</a>(t2, t1)) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: t2 is less than t1!!&quot;</span>));
            <span class="keywordflow">return</span> -75;
        }

        <span class="comment">/* Get elapsed time in msec */</span>
        msec = <a class="code" href="group__PJ__TIMESTAMP.htm#ga2e09f4da6b04d417e1acd11b477ed6a2">pj_elapsed_msec</a>(&amp;start, &amp;stop);

        <span class="comment">/* Check if it&#39;s within range. */</span>
        <span class="keywordflow">if</span> (msec &lt; duration[i] * (100-MIS)/100 ||
            msec &gt; duration[i] * (100+MIS)/100)
        {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
                      <span class="stringliteral">&quot;...error: slept for %d ms instead of %d ms &quot;</span>
                      <span class="stringliteral">&quot;(outside %d%% err window)&quot;</span>,
                      msec, duration[i], MIS));
            <a class="code" href="group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(t2, t1);
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, 
                      <span class="stringliteral">&quot;...info: gettimeofday() reported duration is &quot;</span>
                      <span class="stringliteral">&quot;%d msec&quot;</span>,
                      <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(t2)));

            <span class="keywordflow">return</span> -76;
        }
    }

    <span class="comment">/* All done. */</span>
    <span class="keywordflow">return</span> 0;
}

<span class="keywordtype">int</span> sleep_test()
{
    <span class="keywordtype">int</span> rc;

    rc = simple_sleep_test();
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>)
        <span class="keywordflow">return</span> rc;

    rc = sleep_duration_test();
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>)
        <span class="keywordflow">return</span> rc;

    <span class="keywordflow">return</span> 0;
}

<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_sleep_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_SLEEP_TEST */</span>
</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
