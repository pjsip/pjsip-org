<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: math.h Source File (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>math.h</h1>  </div>
</div>
<div class="contents">
<a href="math_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: math.h 3553 2011-05-05 06:14:19Z nanang $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef __PJ_MATH_H__</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define __PJ_MATH_H__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="string_8h.htm" title="PJLIB String Operations.">pj/string.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;pj/compat/high_precision.h&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <a class="code" href="group__pj__config.htm#ga288f0f20eddba864219d6d9b3cd006e1">PJ_BEGIN_DECL</a>
<a name="l00033"></a>00033 
<a name="l00048"></a><a class="code" href="group__pj__math.htm#ga814ddb5f676502bc1f9befd55553c56c">00048</a> <span class="preprocessor">#define PJ_PI               3.14159265358979323846      </span><span class="comment">/* pi       */</span>
<a name="l00049"></a>00049 <span class="preprocessor">#define PJ_1_PI             0.318309886183790671538     </span><span class="comment">/* 1/pi     */</span>
<a name="l00050"></a>00050 
<a name="l00054"></a><a class="code" href="group__pj__math.htm#gaa7b07dd46330ab0b48df24d65fb7f66d">00054</a> <span class="preprocessor">#define PJ_ABS(x)       ((x) &gt;  0 ? (x) : -(x))</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#define PJ_MAX(x, y)    ((x) &gt; (y)? (x) : (y))</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#define PJ_MIN(x, y)    ((x) &lt; (y)? (x) : (y))</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span>
<a name="l00061"></a><a class="code" href="structpj__math__stat.htm">00061</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structpj__math__stat.htm">pj_math_stat</a>
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063     <span class="keywordtype">int</span>              n;         <span class="comment">/* number of samples    */</span>
<a name="l00064"></a>00064     <span class="keywordtype">int</span>              max;       <span class="comment">/* maximum value        */</span>
<a name="l00065"></a>00065     <span class="keywordtype">int</span>              min;       <span class="comment">/* minimum value        */</span>
<a name="l00066"></a>00066     <span class="keywordtype">int</span>              last;      <span class="comment">/* last value           */</span>
<a name="l00067"></a>00067     <span class="keywordtype">int</span>              mean;      <span class="comment">/* mean                 */</span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <span class="comment">/* Private members */</span>
<a name="l00070"></a>00070 <span class="preprocessor">#if PJ_HAS_FLOATING_POINT</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>    <span class="keywordtype">float</span>            fmean_;    <span class="comment">/* mean(floating point) */</span>
<a name="l00072"></a>00072 <span class="preprocessor">#else</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span>    <span class="keywordtype">int</span>              mean_res_; <span class="comment">/* mean residu          */</span>
<a name="l00074"></a>00074 <span class="preprocessor">#endif</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span>    pj_highprec_t    m2_;       <span class="comment">/* variance * n         */</span>
<a name="l00076"></a>00076 } <a class="code" href="structpj__math__stat.htm">pj_math_stat</a>;
<a name="l00077"></a>00077 
<a name="l00085"></a><a class="code" href="group__pj__math.htm#gaadcb593adf282a5997a36c88ace41d58">00085</a> <a class="code" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(<span class="keywordtype">unsigned</span>) <a class="code" href="group__pj__math.htm#gaadcb593adf282a5997a36c88ace41d58">pj_isqrt</a>(<span class="keywordtype">unsigned</span> i)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087     <span class="keywordtype">unsigned</span> res = 1, prev;
<a name="l00088"></a>00088     
<a name="l00089"></a>00089     <span class="comment">/* Rough guess, calculate half bit of input */</span>
<a name="l00090"></a>00090     prev = i &gt;&gt; 2;
<a name="l00091"></a>00091     <span class="keywordflow">while</span> (prev) {
<a name="l00092"></a>00092         prev &gt;&gt;= 2;
<a name="l00093"></a>00093         res &lt;&lt;= 1;
<a name="l00094"></a>00094     }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="comment">/* Babilonian method */</span>
<a name="l00097"></a>00097     <span class="keywordflow">do</span> {
<a name="l00098"></a>00098         prev = res;
<a name="l00099"></a>00099         res = (prev + i/prev) &gt;&gt; 1;
<a name="l00100"></a>00100     } <span class="keywordflow">while</span> ((prev+res)&gt;&gt;1 != res);
<a name="l00101"></a>00101 
<a name="l00102"></a>00102     <span class="keywordflow">return</span> res;
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00110"></a><a class="code" href="group__pj__math.htm#gaa8a95eefaca81c25e82d2f806c9839d0">00110</a> <a class="code" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__pj__math.htm#gaa8a95eefaca81c25e82d2f806c9839d0">pj_math_stat_init</a>(<a class="code" href="structpj__math__stat.htm">pj_math_stat</a> *stat)
<a name="l00111"></a>00111 {
<a name="l00112"></a>00112     <a class="code" href="group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(stat, <span class="keyword">sizeof</span>(<a class="code" href="structpj__math__stat.htm">pj_math_stat</a>));
<a name="l00113"></a>00113 }
<a name="l00114"></a>00114 
<a name="l00121"></a><a class="code" href="group__pj__math.htm#ga526941d79980b6eeb036d8e24c6f0612">00121</a> <a class="code" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__pj__math.htm#ga526941d79980b6eeb036d8e24c6f0612">pj_math_stat_update</a>(<a class="code" href="structpj__math__stat.htm">pj_math_stat</a> *stat, <span class="keywordtype">int</span> val)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123 <span class="preprocessor">#if PJ_HAS_FLOATING_POINT</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span>    <span class="keywordtype">float</span>            delta;
<a name="l00125"></a>00125 <span class="preprocessor">#else</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span>    <span class="keywordtype">int</span>              delta;
<a name="l00127"></a>00127 <span class="preprocessor">#endif</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span>
<a name="l00129"></a>00129     stat-&gt;last = val;
<a name="l00130"></a>00130     
<a name="l00131"></a>00131     <span class="keywordflow">if</span> (stat-&gt;n++) {
<a name="l00132"></a>00132         <span class="keywordflow">if</span> (stat-&gt;min &gt; val)
<a name="l00133"></a>00133             stat-&gt;min = val;
<a name="l00134"></a>00134         <span class="keywordflow">if</span> (stat-&gt;max &lt; val)
<a name="l00135"></a>00135             stat-&gt;max = val;
<a name="l00136"></a>00136     } <span class="keywordflow">else</span> {
<a name="l00137"></a>00137         stat-&gt;min = stat-&gt;max = val;
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="preprocessor">#if PJ_HAS_FLOATING_POINT</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>    delta = val - stat-&gt;fmean_;
<a name="l00142"></a>00142     stat-&gt;fmean_ += delta/stat-&gt;n;
<a name="l00143"></a>00143     
<a name="l00144"></a>00144     <span class="comment">/* Return mean value with &#39;rounding&#39; */</span>
<a name="l00145"></a>00145     stat-&gt;mean = (int) (stat-&gt;fmean_ + 0.5);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     stat-&gt;m2_ += (int)(delta * (val-stat-&gt;fmean_));
<a name="l00148"></a>00148 <span class="preprocessor">#else</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span>    delta = val - stat-&gt;mean;
<a name="l00150"></a>00150     stat-&gt;mean += delta/stat-&gt;n;
<a name="l00151"></a>00151     stat-&gt;mean_res_ += delta % stat-&gt;n;
<a name="l00152"></a>00152     <span class="keywordflow">if</span> (stat-&gt;mean_res_ &gt;= stat-&gt;n) {
<a name="l00153"></a>00153         ++stat-&gt;mean;
<a name="l00154"></a>00154         stat-&gt;mean_res_ -= stat-&gt;n;
<a name="l00155"></a>00155     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stat-&gt;mean_res_ &lt;= -stat-&gt;n) {
<a name="l00156"></a>00156         --stat-&gt;mean;
<a name="l00157"></a>00157         stat-&gt;mean_res_ += stat-&gt;n;
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     stat-&gt;m2_ += delta * (val-stat-&gt;mean);
<a name="l00161"></a>00161 <span class="preprocessor">#endif</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span>}
<a name="l00163"></a>00163 
<a name="l00171"></a><a class="code" href="group__pj__math.htm#gababaa62bc96c00c48310e7aa4dc3481d">00171</a> <a class="code" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(<span class="keywordtype">unsigned</span>) <a class="code" href="group__pj__math.htm#gababaa62bc96c00c48310e7aa4dc3481d">pj_math_stat_get_stddev</a>(const <a class="code" href="structpj__math__stat.htm">pj_math_stat</a> *stat)
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173     <span class="keywordflow">if</span> (stat-&gt;n == 0) <span class="keywordflow">return</span> 0;
<a name="l00174"></a>00174     <span class="keywordflow">return</span> (<a class="code" href="group__pj__math.htm#gaadcb593adf282a5997a36c88ace41d58">pj_isqrt</a>((<span class="keywordtype">unsigned</span>)(stat-&gt;m2_/stat-&gt;n)));
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00186"></a><a class="code" href="group__pj__math.htm#ga6a7d2418cf24b3e5f7d9e451b7a320e0">00186</a> <a class="code" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__pj__math.htm#ga6a7d2418cf24b3e5f7d9e451b7a320e0">pj_math_stat_set_stddev</a>(<a class="code" href="structpj__math__stat.htm">pj_math_stat</a> *stat, <span class="keywordtype">unsigned</span> dev)
<a name="l00187"></a>00187 {
<a name="l00188"></a>00188     <span class="keywordflow">if</span> (stat-&gt;n == 0) 
<a name="l00189"></a>00189         stat-&gt;n = 1;
<a name="l00190"></a>00190     stat-&gt;m2_ = dev*dev*stat-&gt;n;
<a name="l00191"></a>00191 }
<a name="l00192"></a>00192 
<a name="l00195"></a>00195 <a class="code" href="group__pj__config.htm#gac961f7d199eeed7666ab3ec2442c1b00">PJ_END_DECL</a>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="preprocessor">#endif </span><span class="comment">/* __PJ_MATH_H__ */</span>
</pre></div></div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
