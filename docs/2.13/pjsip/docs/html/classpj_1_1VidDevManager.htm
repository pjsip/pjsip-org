<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj::VidDevManager Class Reference (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacepj.htm">pj</a></li><li class="navelem"><a class="el" href="classpj_1_1VidDevManager.htm">VidDevManager</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle"><div class="title">pj::VidDevManager Class Reference<div class="ingroups"><a class="el" href="group__PJSUA2__Ref.htm">pjsua2 API Reference</a> &raquo; <a class="el" href="group__PJSUA2__MED.htm">Media</a></div></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;media.hpp&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abbb27fe4200b31009f8177ad0070ba97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#abbb27fe4200b31009f8177ad0070ba97">initSubsys</a> ()  throw (Error)</td></tr>
<tr class="separator:abbb27fe4200b31009f8177ad0070ba97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6f0390e830c78e8ad58c90eba8ce18f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#ad6f0390e830c78e8ad58c90eba8ce18f">refreshDevs</a> ()  throw (Error)</td></tr>
<tr class="separator:ad6f0390e830c78e8ad58c90eba8ce18f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa276bd2ba34a9027e30991075549c89d"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#aa276bd2ba34a9027e30991075549c89d">getDevCount</a> ()</td></tr>
<tr class="separator:aa276bd2ba34a9027e30991075549c89d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30ca8de7dbb46faff52a9de0ef4bb1fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1VideoDevInfo.htm">VideoDevInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#a30ca8de7dbb46faff52a9de0ef4bb1fe">getDevInfo</a> (int dev_id) const  throw (Error)</td></tr>
<tr class="separator:a30ca8de7dbb46faff52a9de0ef4bb1fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a957c362010ce565dac67d89d6c230984"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="group__PJSUA2__MED.htm#gaa7f26e54e8d0d6fa602ac2b661e944af">VideoDevInfoVector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#a957c362010ce565dac67d89d6c230984">enumDev</a> ()  throw (Error)</td></tr>
<tr class="separator:a957c362010ce565dac67d89d6c230984"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add8aa38adf332999499ba83fcac2859e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJSUA2__MED.htm#ga37e70b3854ce5440fd4305074207c610">VideoDevInfoVector2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#add8aa38adf332999499ba83fcac2859e">enumDev2</a> () const  throw (Error)</td></tr>
<tr class="separator:add8aa38adf332999499ba83fcac2859e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfeb555ca8dbb4514fd140d490d07986"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#abfeb555ca8dbb4514fd140d490d07986">lookupDev</a> (const string &amp;drv_name, const string &amp;dev_name) const  throw (Error)</td></tr>
<tr class="separator:abfeb555ca8dbb4514fd140d490d07986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0633046066c62dac8e9648187877248"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#ae0633046066c62dac8e9648187877248">capName</a> (<a class="elRef" href="../../../pjmedia/docs/html/group__video__device__reference.htm#gacbc64bd86db0daa9764383e782826da9">pjmedia_vid_dev_cap</a> cap) const</td></tr>
<tr class="separator:ae0633046066c62dac8e9648187877248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfed7710dbfe3735b8473aa46ec1521e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#adfed7710dbfe3735b8473aa46ec1521e">setFormat</a> (int dev_id, const <a class="el" href="structpj_1_1MediaFormatVideo.htm">MediaFormatVideo</a> &amp;format, bool keep)  throw (Error)</td></tr>
<tr class="separator:adfed7710dbfe3735b8473aa46ec1521e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a949105a43d64e007c78a493ba8b0dfd1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1MediaFormatVideo.htm">MediaFormatVideo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#a949105a43d64e007c78a493ba8b0dfd1">getFormat</a> (int dev_id) const  throw (Error)</td></tr>
<tr class="separator:a949105a43d64e007c78a493ba8b0dfd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68dcef60dfe33d7a19e62e9b365905ae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#a68dcef60dfe33d7a19e62e9b365905ae">setInputScale</a> (int dev_id, const <a class="el" href="structpj_1_1MediaSize.htm">MediaSize</a> &amp;scale, bool keep)  throw (Error)</td></tr>
<tr class="separator:a68dcef60dfe33d7a19e62e9b365905ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37f3b5646877b1cea72db90cb6b8cc59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj_1_1MediaSize.htm">MediaSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#a37f3b5646877b1cea72db90cb6b8cc59">getInputScale</a> (int dev_id) const  throw (Error)</td></tr>
<tr class="separator:a37f3b5646877b1cea72db90cb6b8cc59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5e1bb348700893a106f5382121cbe47"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#af5e1bb348700893a106f5382121cbe47">setOutputWindowFlags</a> (int dev_id, int flags, bool keep)  throw (Error)</td></tr>
<tr class="separator:af5e1bb348700893a106f5382121cbe47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad523c642a8d368837500da70e961ee06"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#ad523c642a8d368837500da70e961ee06">getOutputWindowFlags</a> (int dev_id)  throw (Error)</td></tr>
<tr class="separator:ad523c642a8d368837500da70e961ee06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbba63126a5018ae8831e743e2bbcb0b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#acbba63126a5018ae8831e743e2bbcb0b">switchDev</a> (int dev_id, const <a class="el" href="structpj_1_1VideoSwitchParam.htm">VideoSwitchParam</a> &amp;param)  throw (Error)</td></tr>
<tr class="separator:acbba63126a5018ae8831e743e2bbcb0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6f113dcb03c891ad88fb498092a45d0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#ab6f113dcb03c891ad88fb498092a45d0">isCaptureActive</a> (int dev_id) const</td></tr>
<tr class="separator:ab6f113dcb03c891ad88fb498092a45d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48024bf45c9cbaba085702ba879d8f0d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpj_1_1VidDevManager.htm#a48024bf45c9cbaba085702ba879d8f0d">setCaptureOrient</a> (<a class="elRef" href="../../../pjmedia/docs/html/group__video__device__reference.htm#ga06048b2846c1bbcee038450c4ef2d934">pjmedia_vid_dev_index</a> dev_id, <a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__TYPES.htm#ga1a508d266d0f43c395d41d793e56417e">pjmedia_orient</a> orient, bool keep=true)  throw (Error)</td></tr>
<tr class="separator:a48024bf45c9cbaba085702ba879d8f0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a500d74fc41e3ab6b4889a579193566ed"><td class="memItemLeft" align="right" valign="top"><a id="a500d74fc41e3ab6b4889a579193566ed" name="a500d74fc41e3ab6b4889a579193566ed"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Endpoint</b></td></tr>
<tr class="separator:a500d74fc41e3ab6b4889a579193566ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >Video device manager. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="abbb27fe4200b31009f8177ad0070ba97" name="abbb27fe4200b31009f8177ad0070ba97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbb27fe4200b31009f8177ad0070ba97">&#9670;&nbsp;</a></span>initSubsys()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::VidDevManager::initSubsys </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Initialize the video device subsystem. This will register all supported video device factories to the video device subsystem.</p>
<p >By default, library will initialize video device subsystem automatically on library initialization, so application will never need to invoke this function. However, when PJSUA_DONT_INIT_VID_DEV_SUBSYS is set to non-zero, application should invoke this function before accessing video device. </p>

</div>
</div>
<a id="ad6f0390e830c78e8ad58c90eba8ce18f" name="ad6f0390e830c78e8ad58c90eba8ce18f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6f0390e830c78e8ad58c90eba8ce18f">&#9670;&nbsp;</a></span>refreshDevs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::VidDevManager::refreshDevs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Refresh the list of video devices installed in the system. This function will only refresh the list of video device so all active video streams will be unaffected. After refreshing the device list, application MUST make sure to update all index references to video devices (i.e. all variables of type pjmedia_vid_dev_index) before calling any function that accepts video device index as its parameter. </p>

</div>
</div>
<a id="aa276bd2ba34a9027e30991075549c89d" name="aa276bd2ba34a9027e30991075549c89d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa276bd2ba34a9027e30991075549c89d">&#9670;&nbsp;</a></span>getDevCount()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj::VidDevManager::getDevCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the number of video devices installed in the system.</p>
<dl class="section return"><dt>Returns</dt><dd>The number of devices. </dd></dl>

</div>
</div>
<a id="a30ca8de7dbb46faff52a9de0ef4bb1fe" name="a30ca8de7dbb46faff52a9de0ef4bb1fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30ca8de7dbb46faff52a9de0ef4bb1fe">&#9670;&nbsp;</a></span>getDevInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1VideoDevInfo.htm">VideoDevInfo</a> pj::VidDevManager::getDevInfo </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Retrieve the video device info for the specified device index. <br  />
</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The list of video device info </dd></dl>

</div>
</div>
<a id="a957c362010ce565dac67d89d6c230984" name="a957c362010ce565dac67d89d6c230984"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a957c362010ce565dac67d89d6c230984">&#9670;&nbsp;</a></span>enumDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="group__PJSUA2__MED.htm#gaa7f26e54e8d0d6fa602ac2b661e944af">VideoDevInfoVector</a> &amp; pj::VidDevManager::enumDev </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Warning: deprecated, use <a class="el" href="classpj_1_1VidDevManager.htm#add8aa38adf332999499ba83fcac2859e">enumDev2()</a> instead. This function is not safe in multithreaded environment.</p>
<p >Enum all video devices installed in the system.</p>
<dl class="section return"><dt>Returns</dt><dd>The list of video device info </dd></dl>

</div>
</div>
<a id="add8aa38adf332999499ba83fcac2859e" name="add8aa38adf332999499ba83fcac2859e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add8aa38adf332999499ba83fcac2859e">&#9670;&nbsp;</a></span>enumDev2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJSUA2__MED.htm#ga37e70b3854ce5440fd4305074207c610">VideoDevInfoVector2</a> pj::VidDevManager::enumDev2 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Enum all video devices installed in the system.</p>
<dl class="section return"><dt>Returns</dt><dd>The list of video device info </dd></dl>

</div>
</div>
<a id="abfeb555ca8dbb4514fd140d490d07986" name="abfeb555ca8dbb4514fd140d490d07986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfeb555ca8dbb4514fd140d490d07986">&#9670;&nbsp;</a></span>lookupDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::VidDevManager::lookupDev </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>drv_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>dev_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Lookup device index based on the driver and device name.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">drv_name</td><td>The driver name. </td></tr>
    <tr><td class="paramname">dev_name</td><td>The device name.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The device ID. If the device is not found, <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown. </dd></dl>

</div>
</div>
<a id="ae0633046066c62dac8e9648187877248" name="ae0633046066c62dac8e9648187877248"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0633046066c62dac8e9648187877248">&#9670;&nbsp;</a></span>capName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string pj::VidDevManager::capName </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" href="../../../pjmedia/docs/html/group__video__device__reference.htm#gacbc64bd86db0daa9764383e782826da9">pjmedia_vid_dev_cap</a>&#160;</td>
          <td class="paramname"><em>cap</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get string info for the specified capability.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cap</td><td>The capability ID.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Capability name. </dd></dl>

</div>
</div>
<a id="adfed7710dbfe3735b8473aa46ec1521e" name="adfed7710dbfe3735b8473aa46ec1521e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfed7710dbfe3735b8473aa46ec1521e">&#9670;&nbsp;</a></span>setFormat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::VidDevManager::setFormat </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1MediaFormatVideo.htm">MediaFormatVideo</a> &amp;&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure video format capability to the video device. If video device is currently active, the method will forward the setting to the video device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_VID_DEV_CAP_FORMAT capability in <a class="el" href="structpj_1_1VideoDevInfo.htm#ac96f9d79f43faa6b04e8045c85bda5b7">VideoDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the video device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id. <br  />
 </td></tr>
    <tr><td class="paramname">format</td><td>The video format. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a949105a43d64e007c78a493ba8b0dfd1" name="a949105a43d64e007c78a493ba8b0dfd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a949105a43d64e007c78a493ba8b0dfd1">&#9670;&nbsp;</a></span>getFormat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1MediaFormatVideo.htm">MediaFormatVideo</a> pj::VidDevManager::getFormat </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the video format capability to the video device. If video device is currently active, the method will forward the request to the video device. If video device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_VID_DEV_CAP_FORMAT capability in <a class="el" href="structpj_1_1VideoDevInfo.htm#ac96f9d79f43faa6b04e8045c85bda5b7">VideoDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>keep The video format. </dd></dl>

</div>
</div>
<a id="a68dcef60dfe33d7a19e62e9b365905ae" name="a68dcef60dfe33d7a19e62e9b365905ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68dcef60dfe33d7a19e62e9b365905ae">&#9670;&nbsp;</a></span>setInputScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::VidDevManager::setInputScale </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1MediaSize.htm">MediaSize</a> &amp;&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure video format capability to the video device. If video device is currently active, the method will forward the setting to the video device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_VID_DEV_CAP_INPUT_SCALE capability in <a class="el" href="structpj_1_1VideoDevInfo.htm#ac96f9d79f43faa6b04e8045c85bda5b7">VideoDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the video device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id. </td></tr>
    <tr><td class="paramname">scale</td><td>The video scale. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a37f3b5646877b1cea72db90cb6b8cc59" name="a37f3b5646877b1cea72db90cb6b8cc59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37f3b5646877b1cea72db90cb6b8cc59">&#9670;&nbsp;</a></span>getInputScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj_1_1MediaSize.htm">MediaSize</a> pj::VidDevManager::getInputScale </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em></td><td>)</td>
          <td> const</td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the video input scale capability to the video device. If video device is currently active, the method will forward the request to the video device. If video device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_VID_DEV_CAP_FORMAT capability in <a class="el" href="structpj_1_1VideoDevInfo.htm#ac96f9d79f43faa6b04e8045c85bda5b7">VideoDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>keep The video format. </dd></dl>

</div>
</div>
<a id="af5e1bb348700893a106f5382121cbe47" name="af5e1bb348700893a106f5382121cbe47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5e1bb348700893a106f5382121cbe47">&#9670;&nbsp;</a></span>setOutputWindowFlags()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::VidDevManager::setOutputWindowFlags </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure fast switching to another video device. If video device is currently active, the method will forward the setting to the video device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in <a class="el" href="structpj_1_1VideoDevInfo.htm#ac96f9d79f43faa6b04e8045c85bda5b7">VideoDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<p >Note that in case the setting is kept for future use, it will be applied to any devices, even when application has changed the video device to be used.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id. </td></tr>
    <tr><td class="paramname">flags</td><td>The video window flag. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad523c642a8d368837500da70e961ee06" name="ad523c642a8d368837500da70e961ee06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad523c642a8d368837500da70e961ee06">&#9670;&nbsp;</a></span>getOutputWindowFlags()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj::VidDevManager::getOutputWindowFlags </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em></td><td>)</td>
          <td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Get the window output flags capability to the video device. If video device is currently active, the method will forward the request to the video device. If video device is currently inactive, and if application had previously set the setting and mark the setting as kept, then that setting will be returned. Otherwise, this method will raise error.</p>
<p >This method is only valid if the device has PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in <a class="el" href="structpj_1_1VideoDevInfo.htm#ac96f9d79f43faa6b04e8045c85bda5b7">VideoDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>keep The video format. </dd></dl>

</div>
</div>
<a id="acbba63126a5018ae8831e743e2bbcb0b" name="acbba63126a5018ae8831e743e2bbcb0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbba63126a5018ae8831e743e2bbcb0b">&#9670;&nbsp;</a></span>switchDev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::VidDevManager::switchDev </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj_1_1VideoSwitchParam.htm">VideoSwitchParam</a> &amp;&#160;</td>
          <td class="paramname"><em>param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure fast switching to another video device. If video device is currently active, the method will forward the setting to the video device instance to be applied immediately, if it supports it.</p>
<p >This method is only valid if the device has PJMEDIA_VID_DEV_CAP_SWITCH capability in <a class="el" href="structpj_1_1VideoDevInfo.htm#ac96f9d79f43faa6b04e8045c85bda5b7">VideoDevInfo.caps</a> flags, otherwise <a class="el" href="structpj_1_1Error.htm">Error</a> will be thrown.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id. </td></tr>
    <tr><td class="paramname">param</td><td>The video switch param. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab6f113dcb03c891ad88fb498092a45d0" name="ab6f113dcb03c891ad88fb498092a45d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6f113dcb03c891ad88fb498092a45d0">&#9670;&nbsp;</a></span>isCaptureActive()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pj::VidDevManager::isCaptureActive </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dev_id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >Check whether the video capture device is currently active, i.e. if a video preview has been started or there is a video call using the device. <br  />
</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if it's active. </dd></dl>

</div>
</div>
<a id="a48024bf45c9cbaba085702ba879d8f0d" name="a48024bf45c9cbaba085702ba879d8f0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48024bf45c9cbaba085702ba879d8f0d">&#9670;&nbsp;</a></span>setCaptureOrient()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj::VidDevManager::setCaptureOrient </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" href="../../../pjmedia/docs/html/group__video__device__reference.htm#ga06048b2846c1bbcee038450c4ef2d934">pjmedia_vid_dev_index</a>&#160;</td>
          <td class="paramname"><em>dev_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" href="../../../pjmedia/docs/html/group__PJMEDIA__TYPES.htm#ga1a508d266d0f43c395d41d793e56417e">pjmedia_orient</a>&#160;</td>
          <td class="paramname"><em>orient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
        <tr>
          <td align="right">throw </td><td>(</td><td colspan="2"><a class="el" href="structpj_1_1Error.htm">Error</a></td>
        </tr>
        <tr>
          <td align="right"></td><td>)</td><td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >This will configure video orientation of the video capture device. If the device is currently active (i.e. if there is a video call using the device or a video preview has been started), the method will forward the setting to the video device instance to be applied immediately, if it supports it.</p>
<p >The setting will be saved for future opening of the video device, if the "keep" argument is set to true. If the video device is currently inactive, and the "keep" argument is false, this method will throw <a class="el" href="structpj_1_1Error.htm">Error</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dev_id</td><td>The video device id </td></tr>
    <tr><td class="paramname">orient</td><td>The video orientation. </td></tr>
    <tr><td class="paramname">keep</td><td>Specify whether the setting is to be kept for future use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="media_8hpp.htm">media.hpp</a></li>
</ul>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
