<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: Timer (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Test: Timer </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This file provides implementation of <b>timer_test()</b>. It tests the functionality of the timer heap.</p>
<p>This file is <b>pjlib-test/timer.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* $Id$ */</span></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div><div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><span class="comment"> * (at your option) any later version.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div><div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if INCLUDE_TIMER_TEST</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define LOOP            16</span></div><div class="line"><span class="preprocessor">#define MIN_COUNT       250</span></div><div class="line"><span class="preprocessor">#define MAX_COUNT       (LOOP * MIN_COUNT)</span></div><div class="line"><span class="preprocessor">#define MIN_DELAY       2</span></div><div class="line"><span class="preprocessor">#define D               (MAX_COUNT / 32000)</span></div><div class="line"><span class="preprocessor">#define DELAY           (D &lt; MIN_DELAY ? MIN_DELAY : D)</span></div><div class="line"><span class="preprocessor">#define THIS_FILE       &quot;timer_test&quot;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> timer_callback(<a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *ht, <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *e)</div><div class="line">{</div><div class="line">    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(ht);</div><div class="line">    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> test_timer_heap(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> i, j;</div><div class="line">    <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *entry;</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *timer;</div><div class="line">    <a class="code" href="structpj__time__val.htm">pj_time_val</a> delay;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line">    <span class="keywordtype">int</span> err=0;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size;</div><div class="line">    <span class="keywordtype">unsigned</span> count;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...Basic test&quot;</span>));</div><div class="line"></div><div class="line">    size = <a class="code" href="group__PJ__TIMER.htm#gab14375d4993080837ae1709c74796ca7">pj_timer_heap_mem_size</a>(MAX_COUNT)+MAX_COUNT*<span class="keyword">sizeof</span>(<a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a>);</div><div class="line">    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>( mem, NULL, size, 4000, NULL);</div><div class="line">    <span class="keywordflow">if</span> (!pool) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: unable to create pool of %u bytes&quot;</span>,</div><div class="line">                  size));</div><div class="line">        <span class="keywordflow">return</span> -10;</div><div class="line">    }</div><div class="line"></div><div class="line">    entry = (<a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a>*)<a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, MAX_COUNT, <span class="keyword">sizeof</span>(*entry));</div><div class="line">    <span class="keywordflow">if</span> (!entry)</div><div class="line">        <span class="keywordflow">return</span> -20;</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;MAX_COUNT; ++i) {</div><div class="line">        entry[i].<a class="code" href="structpj__timer__entry.htm#a13e63641afbb94298b79967585c0f642">cb</a> = &amp;timer_callback;</div><div class="line">    }</div><div class="line">    status = <a class="code" href="group__PJ__TIMER.htm#gac23ecc3a7d6779be2183149da9a841d5">pj_timer_heap_create</a>(pool, MAX_COUNT, &amp;timer);</div><div class="line">    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create timer heap&quot;</span>, status);</div><div class="line">        <span class="keywordflow">return</span> -30;</div><div class="line">    }</div><div class="line"></div><div class="line">    count = MIN_COUNT;</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;LOOP; ++i) {</div><div class="line">        <span class="keywordtype">int</span> early = 0;</div><div class="line">        <span class="keywordtype">int</span> done=0;</div><div class="line">        <span class="keywordtype">int</span> cancelled=0;</div><div class="line">        <span class="keywordtype">int</span> rc;</div><div class="line">        <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t1, t2, t_sched, t_cancel, t_poll;</div><div class="line">        <a class="code" href="structpj__time__val.htm">pj_time_val</a> now, expire;</div><div class="line"></div><div class="line">        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);</div><div class="line">        <a class="code" href="group__PJ__RAND.htm#gab1a26d78213bb31ec7ecd0dddde3f787">pj_srand</a>(now.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>);</div><div class="line">        t_sched.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = t_cancel.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = t_poll.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;</div><div class="line"></div><div class="line">        <span class="comment">// Register timers</span></div><div class="line">        <span class="keywordflow">for</span> (j=0; j&lt;(<a class="code" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>)count; ++j) {</div><div class="line">            delay.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % DELAY;</div><div class="line">            delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % 1000;</div><div class="line"></div><div class="line">            <span class="comment">// Schedule timer</span></div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div><div class="line">            rc = <a class="code" href="group__PJ__TIMER.htm#ga70651768f9361e9cda3c1d24fec924f7">pj_timer_heap_schedule</a>(timer, &amp;entry[j], &amp;delay);</div><div class="line">            <span class="keywordflow">if</span> (rc != 0)</div><div class="line">                <span class="keywordflow">return</span> -40;</div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);</div><div class="line"></div><div class="line">            t_sched.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);</div><div class="line"></div><div class="line">            <span class="comment">// Poll timers.</span></div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div><div class="line">            rc = <a class="code" href="group__PJ__TIMER.htm#ga591fb436503b441ef00e6a4fe2a3117f">pj_timer_heap_poll</a>(timer, NULL);</div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);</div><div class="line">            <span class="keywordflow">if</span> (rc &gt; 0) {</div><div class="line">                t_poll.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);</div><div class="line">                early += rc;</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// Set the time where all timers should finish</span></div><div class="line">        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;expire);</div><div class="line">        delay.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = DELAY; </div><div class="line">        delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = 0;</div><div class="line">        <a class="code" href="group__PJ__TIME.htm#ga4eb53e12a590f9f09172602e21e9911f">PJ_TIME_VAL_ADD</a>(expire, delay);</div><div class="line"></div><div class="line">        <span class="comment">// Wait unfil all timers finish, cancel some of them.</span></div><div class="line">        <span class="keywordflow">do</span> {</div><div class="line">            <span class="keywordtype">int</span> index = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % count;</div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div><div class="line">            rc = <a class="code" href="group__PJ__TIMER.htm#ga522fb9ade28878a32d7c76e4f90f35ee">pj_timer_heap_cancel</a>(timer, &amp;entry[index]);</div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);</div><div class="line">            <span class="keywordflow">if</span> (rc &gt; 0) {</div><div class="line">                cancelled += rc;</div><div class="line">                t_cancel.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);</div><div class="line">            }</div><div class="line"></div><div class="line">            <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);</div><div class="line"></div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div><div class="line"><span class="preprocessor">#if defined(PJ_SYMBIAN) &amp;&amp; PJ_SYMBIAN!=0</span></div><div class="line">            <span class="comment">/* On Symbian, we must use OS poll (Active Scheduler poll) since </span></div><div class="line"><span class="comment">             * timer is implemented using Active Object.</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            rc = 0;</div><div class="line">            <span class="keywordflow">while</span> (<a class="code" href="group__PJ__SYMBIAN__OS.htm#ga275984ae4a88fbf747275284fee70f62">pj_symbianos_poll</a>(-1, 0))</div><div class="line">                ++rc;</div><div class="line"><span class="preprocessor">#else</span></div><div class="line">            rc = <a class="code" href="group__PJ__TIMER.htm#ga591fb436503b441ef00e6a4fe2a3117f">pj_timer_heap_poll</a>(timer, NULL);</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);</div><div class="line">            <span class="keywordflow">if</span> (rc &gt; 0) {</div><div class="line">                done += rc;</div><div class="line">                t_poll.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> += (t2.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> - t1.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>);</div><div class="line">            }</div><div class="line"></div><div class="line">        } <span class="keywordflow">while</span> (<a class="code" href="group__PJ__TIME.htm#ga33a03349659e92074f1d39a137047385">PJ_TIME_VAL_LTE</a>(now, expire)&amp;&amp;<a class="code" href="group__PJ__TIMER.htm#ga0d2e2c0a9fad51dc159848aa412c9b1b">pj_timer_heap_count</a>(timer) &gt; 0);</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__TIMER.htm#ga0d2e2c0a9fad51dc159848aa412c9b1b">pj_timer_heap_count</a>(timer)) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;ERROR: %d timers left&quot;</span>, </div><div class="line">                       <a class="code" href="group__PJ__TIMER.htm#ga0d2e2c0a9fad51dc159848aa412c9b1b">pj_timer_heap_count</a>(timer)));</div><div class="line">            ++err;</div><div class="line">        }</div><div class="line">        t_sched.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> /= count; </div><div class="line">        t_cancel.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> /= count;</div><div class="line">        t_poll.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> /= count;</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4, (THIS_FILE, </div><div class="line">                <span class="stringliteral">&quot;...ok (count:%d, early:%d, cancelled:%d, &quot;</span></div><div class="line">                <span class="stringliteral">&quot;sched:%d, cancel:%d poll:%d)&quot;</span>, </div><div class="line">                count, early, cancelled, t_sched.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>, t_cancel.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>,</div><div class="line">                t_poll.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>));</div><div class="line"></div><div class="line">        count = count * 2;</div><div class="line">        <span class="keywordflow">if</span> (count &gt; MAX_COUNT)</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line">    <span class="keywordflow">return</span> err;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/***************</span></div><div class="line"><span class="comment"> * Stress test *</span></div><div class="line"><span class="comment"> ***************</span></div><div class="line"><span class="comment"> * Test scenario (if RANDOMIZED_TEST is 0):</span></div><div class="line"><span class="comment"> * 1. Create and schedule a number of timer entries.</span></div><div class="line"><span class="comment"> * 2. Start threads for polling (simulating normal worker thread).</span></div><div class="line"><span class="comment"> *    Each expired entry will try to cancel and re-schedule itself</span></div><div class="line"><span class="comment"> *    from within the callback.</span></div><div class="line"><span class="comment"> * 3. Start threads for cancelling random entries. Each successfully</span></div><div class="line"><span class="comment"> *    cancelled entry will be re-scheduled after some random delay.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Test scenario (if RANDOMIZED_TEST is 1):</span></div><div class="line"><span class="comment"> * 1. Create and schedule a number of timer entries.</span></div><div class="line"><span class="comment"> * 2. Start threads which will, based on a configurable probability</span></div><div class="line"><span class="comment"> *    setting, randomly perform timer scheduling, cancelling, or</span></div><div class="line"><span class="comment"> *    polling (simulating normal worker thread).</span></div><div class="line"><span class="comment"> * This test is considered a failure if:</span></div><div class="line"><span class="comment"> * - It triggers assertion/crash.</span></div><div class="line"><span class="comment"> * - There&#39;s an error message in the log, which indicates a potential</span></div><div class="line"><span class="comment"> *   bug in the implementation (note that race message is ok).</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#define RANDOMIZED_TEST 1</span></div><div class="line"><span class="preprocessor">#define SIMULATE_CRASH  PJ_TIMER_USE_COPY</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if RANDOMIZED_TEST</span></div><div class="line"><span class="preprocessor">    #define ST_STRESS_THREAD_COUNT          20</span></div><div class="line"><span class="preprocessor">    #define ST_POLL_THREAD_COUNT            0</span></div><div class="line"><span class="preprocessor">    #define ST_CANCEL_THREAD_COUNT          0</span></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="preprocessor">    #define ST_STRESS_THREAD_COUNT          0</span></div><div class="line"><span class="preprocessor">    #define ST_POLL_THREAD_COUNT            10</span></div><div class="line"><span class="preprocessor">    #define ST_CANCEL_THREAD_COUNT          10</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define ST_ENTRY_COUNT              10000</span></div><div class="line"><span class="preprocessor">#define ST_DURATION                 30000</span></div><div class="line"><span class="preprocessor">#define ST_ENTRY_MAX_TIMEOUT_MS     ST_DURATION/10</span></div><div class="line"></div><div class="line"><span class="comment">/* Number of group lock, may be zero, shared by timer entries, group lock</span></div><div class="line"><span class="comment"> * can be useful to evaluate poll vs cancel race condition scenario, i.e:</span></div><div class="line"><span class="comment"> * each group lock must have ref count==1 at the end of the test, otherwise</span></div><div class="line"><span class="comment"> * assertion will raise.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#define ST_ENTRY_GROUP_LOCK_COUNT   1</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define BT_ENTRY_COUNT 100000</span></div><div class="line"><span class="preprocessor">#define BT_ENTRY_SHOW_START 100</span></div><div class="line"><span class="preprocessor">#define BT_ENTRY_SHOW_MULT 10</span></div><div class="line"><span class="preprocessor">#define BT_REPEAT_RANDOM_TEST 4</span></div><div class="line"><span class="preprocessor">#define BT_REPEAT_INC_TEST 4</span></div><div class="line"></div><div class="line"><span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a></div><div class="line">{</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *timer;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> stopping;</div><div class="line">    <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *entries;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga6b90ec490189c586ec263a92869da47f">pj_atomic_t</a> **status;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga6b90ec490189c586ec263a92869da47f">pj_atomic_t</a> *n_sched, *n_cancel, *n_poll;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gadf42a33e518aa8df09d5a11429e8a41a">pj_grp_lock_t</a> **grp_locks;</div><div class="line">    <span class="keywordtype">int</span> err;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga6b90ec490189c586ec263a92869da47f">pj_atomic_t</a> *idx;</div><div class="line">    <span class="keyword">struct </span>{</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> is_poll;</div><div class="line">        <span class="keywordtype">unsigned</span> cnt;</div><div class="line">    } stat[ST_POLL_THREAD_COUNT + ST_CANCEL_THREAD_COUNT + 1];</div><div class="line">    <span class="comment">/* Plus one here to avoid compile warning of zero-sized array */</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> st_schedule_entry(<a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *ht, <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *e)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__time__val.htm">pj_time_val</a> delay = {0};</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gadf42a33e518aa8df09d5a11429e8a41a">pj_grp_lock_t</a> *grp_lock = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line">    <span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> *tparam = (<span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> *)e-&gt;<a class="code" href="structpj__timer__entry.htm#a96ce07b4b890b820ccd1e8365b88add6">user_data</a>;</div><div class="line"></div><div class="line">    if (ST_ENTRY_GROUP_LOCK_COUNT &amp;&amp; <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % 10) {</div><div class="line">        <span class="comment">/* About 90% of entries should have group lock */</span></div><div class="line">        grp_lock = tparam-&gt;grp_locks[<a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % ST_ENTRY_GROUP_LOCK_COUNT];</div><div class="line">    }</div><div class="line"></div><div class="line">    delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % ST_ENTRY_MAX_TIMEOUT_MS;</div><div class="line">    <a class="code" href="group__PJ__TIME.htm#ga0b28411e03320ad6bb5f3316125b461c">pj_time_val_normalize</a>(&amp;delay);</div><div class="line">    status = <a class="code" href="group__PJ__TIMER.htm#ga317345c41a2db7958ad8dc0773a148b2">pj_timer_heap_schedule_w_grp_lock</a>(ht, e, &amp;delay, 1, grp_lock);</div><div class="line">    <span class="keywordflow">return</span> status;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> dummy_callback(<a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *ht, <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *e)</div><div class="line">{</div><div class="line">    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(ht);</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;dummy callback called %p %p&quot;</span>, e, e-&gt;<a class="code" href="structpj__timer__entry.htm#a96ce07b4b890b820ccd1e8365b88add6">user_data</a>));</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> st_entry_callback(<a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *ht, <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *e)</div><div class="line">{</div><div class="line">    <span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> *tparam = (<span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> *)e-&gt;<a class="code" href="structpj__timer__entry.htm#a96ce07b4b890b820ccd1e8365b88add6">user_data</a>;</div><div class="line"></div><div class="line">#<span class="keywordflow">if</span> RANDOMIZED_TEST</div><div class="line">    <span class="comment">/* Make sure the flag has been set. */</span></div><div class="line">    while (<a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam-&gt;status[e - tparam-&gt;entries]) != 1)</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(10);</div><div class="line">    <a class="code" href="group__PJ__ATOMIC.htm#gaa742e470e7431bb2bdef1a76df5b51db">pj_atomic_set</a>(tparam-&gt;status[e - tparam-&gt;entries], 0);</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <span class="comment">/* try to cancel this */</span></div><div class="line">    <a class="code" href="group__PJ__TIMER.htm#ga4ebea3047cb96236a8d78692c22f787e">pj_timer_heap_cancel_if_active</a>(ht, e, 10);</div><div class="line">    </div><div class="line">    <span class="comment">/* busy doing something */</span></div><div class="line">    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(<a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % 50);</div><div class="line"></div><div class="line">    <span class="comment">/* reschedule entry */</span></div><div class="line">    <span class="keywordflow">if</span> (!ST_STRESS_THREAD_COUNT)</div><div class="line">        st_schedule_entry(ht, e);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Randomized stress worker thread function. */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> stress_worker(<span class="keywordtype">void</span> *arg)</div><div class="line">{</div><div class="line">    <span class="comment">/* Enumeration of possible task. */</span></div><div class="line">    <span class="keyword">enum</span> {</div><div class="line">        SCHEDULING = 0,</div><div class="line">        CANCELLING = 1,</div><div class="line">        POLLING = 2,</div><div class="line">        NOTHING = 3</div><div class="line">    };</div><div class="line">    <span class="comment">/* Probability of a certain task being chosen.</span></div><div class="line"><span class="comment">     * The first number indicates the probability of the first task,</span></div><div class="line"><span class="comment">     * the second number for the second task, and so on.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keywordtype">int</span> prob[3] = {75, 15, 5};</div><div class="line">    <span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> *tparam = (<span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a>*)arg;</div><div class="line">    <span class="keywordtype">int</span> t_idx, i;</div><div class="line"></div><div class="line">    t_idx = <a class="code" href="group__PJ__ATOMIC.htm#ga7c90fb13e57b82fa7416f9dd55216eb1">pj_atomic_inc_and_get</a>(tparam-&gt;idx);</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d (random) started&quot;</span>, t_idx));</div><div class="line">    <span class="keywordflow">while</span> (!tparam-&gt;stopping) {</div><div class="line">        <span class="keywordtype">int</span> job, task;</div><div class="line">        <span class="keywordtype">int</span> idx, count;</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> prev_status, status;</div><div class="line"></div><div class="line">        <span class="comment">/* Randomly choose which task to do */</span></div><div class="line">        job = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % 100;</div><div class="line">        <span class="keywordflow">if</span> (job &lt; prob[0]) task = SCHEDULING;</div><div class="line">        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (job &lt; (prob[0] + prob[1])) task = CANCELLING;</div><div class="line">        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (job &lt; (prob[0] + prob[1] + prob[2])) task = POLLING;</div><div class="line">        <span class="keywordflow">else</span> task = NOTHING;</div><div class="line">    </div><div class="line">        idx = <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % ST_ENTRY_COUNT;</div><div class="line">        prev_status = <a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam-&gt;status[idx]);</div><div class="line">        <span class="keywordflow">if</span> (task == SCHEDULING) {</div><div class="line">            <span class="keywordflow">if</span> (prev_status != 0) <span class="keywordflow">continue</span>;</div><div class="line">            status = st_schedule_entry(tparam-&gt;timer, &amp;tparam-&gt;entries[idx]);</div><div class="line">            <span class="keywordflow">if</span> (prev_status == 0 &amp;&amp; status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">                <span class="comment">/* To make sure the flag has been set. */</span></div><div class="line">                <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(20);</div><div class="line">                <span class="keywordflow">if</span> (<a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam-&gt;status[idx]) == 1) {</div><div class="line">                    <span class="comment">/* Race condition with another scheduling. */</span></div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;race schedule-schedule %d: %p&quot;</span>,</div><div class="line">                                      idx, &amp;tparam-&gt;entries[idx]));</div><div class="line">                } <span class="keywordflow">else</span> {</div><div class="line">                    <span class="keywordflow">if</span> (tparam-&gt;err != 0) tparam-&gt;err = -210;</div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;error: failed to schedule entry %d: %p&quot;</span>,</div><div class="line">                                      idx, &amp;tparam-&gt;entries[idx]));</div><div class="line">                }</div><div class="line">            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (prev_status == 1 &amp;&amp; status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">                <span class="comment">/* Race condition with another cancellation or</span></div><div class="line"><span class="comment">                 * timer poll.</span></div><div class="line"><span class="comment">                 */</span></div><div class="line">                <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(20);</div><div class="line">                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;race schedule-cancel/poll %d: %p&quot;</span>,</div><div class="line">                                  idx, &amp;tparam-&gt;entries[idx]));</div><div class="line">            }</div><div class="line">            <span class="keywordflow">if</span> (status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">                <a class="code" href="group__PJ__ATOMIC.htm#gaa742e470e7431bb2bdef1a76df5b51db">pj_atomic_set</a>(tparam-&gt;status[idx], 1);</div><div class="line">                <a class="code" href="group__PJ__ATOMIC.htm#ga2fbd542505166610ab6e44ee1ff9f61f">pj_atomic_inc</a>(tparam-&gt;n_sched);</div><div class="line">            }</div><div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (task == CANCELLING) {</div><div class="line">            count = <a class="code" href="group__PJ__TIMER.htm#ga4ebea3047cb96236a8d78692c22f787e">pj_timer_heap_cancel_if_active</a>(tparam-&gt;timer,</div><div class="line">                                                   &amp;tparam-&gt;entries[idx], 10);</div><div class="line">            <span class="keywordflow">if</span> (prev_status == 0 &amp;&amp; count &gt; 0) {</div><div class="line">                <span class="comment">/* To make sure the flag has been set. */</span></div><div class="line">                <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(20);</div><div class="line">                <span class="keywordflow">if</span> (<a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam-&gt;status[idx]) == 1) {</div><div class="line">                    <span class="comment">/* Race condition with scheduling. */</span></div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;race cancel-schedule %d: %p&quot;</span>,</div><div class="line">                                      idx, &amp;tparam-&gt;entries[idx]));</div><div class="line">                } <span class="keywordflow">else</span> {</div><div class="line">                    <span class="keywordflow">if</span> (tparam-&gt;err != 0) tparam-&gt;err = -220;</div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;error: cancelling invalid entry %d: %p&quot;</span>,</div><div class="line">                                      idx, &amp;tparam-&gt;entries[idx]));</div><div class="line">                }</div><div class="line">            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (prev_status == 1 &amp;&amp; count == 0) {</div><div class="line">                <span class="comment">/* To make sure the flag has been cleared. */</span></div><div class="line">                <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(20);</div><div class="line">                <span class="keywordflow">if</span> (<a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam-&gt;status[idx]) == 0) {</div><div class="line">                    <span class="comment">/* Race condition with polling. */</span></div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;race cancel-poll %d: %p&quot;</span>,</div><div class="line">                                      idx, &amp;tparam-&gt;entries[idx]));</div><div class="line">                } <span class="keywordflow">else</span> {</div><div class="line">                    <span class="keywordflow">if</span> (tparam-&gt;err != 0) tparam-&gt;err = -230;</div><div class="line">                    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;error: failed to cancel entry %d: %p&quot;</span>,</div><div class="line">                                      idx, &amp;tparam-&gt;entries[idx]));</div><div class="line">                }</div><div class="line">            }</div><div class="line">            <span class="keywordflow">if</span> (count &gt; 0) {</div><div class="line">                <span class="comment">/* Make sure the flag has been set. */</span></div><div class="line">                <span class="keywordflow">while</span> (<a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam-&gt;status[idx]) != 1)</div><div class="line">                    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(10);</div><div class="line">                <a class="code" href="group__PJ__ATOMIC.htm#gaa742e470e7431bb2bdef1a76df5b51db">pj_atomic_set</a>(tparam-&gt;status[idx], 0);</div><div class="line">                <a class="code" href="group__PJ__ATOMIC.htm#ga2fbd542505166610ab6e44ee1ff9f61f">pj_atomic_inc</a>(tparam-&gt;n_cancel);</div><div class="line">            }</div><div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (task == POLLING) {</div><div class="line">            count = <a class="code" href="group__PJ__TIMER.htm#ga591fb436503b441ef00e6a4fe2a3117f">pj_timer_heap_poll</a>(tparam-&gt;timer, NULL);</div><div class="line">            <span class="keywordflow">for</span> (i = 0; i &lt; count; i++) {</div><div class="line">                <a class="code" href="group__PJ__ATOMIC.htm#ga7c90fb13e57b82fa7416f9dd55216eb1">pj_atomic_inc_and_get</a>(tparam-&gt;n_poll);</div><div class="line">            }</div><div class="line">        } <span class="keywordflow">else</span> {</div><div class="line">            <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(10);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d (poll) stopped&quot;</span>, t_idx));</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Poll worker thread function. */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> poll_worker(<span class="keywordtype">void</span> *arg)</div><div class="line">{</div><div class="line">    <span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> *tparam = (<span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a>*)arg;</div><div class="line">    <span class="keywordtype">int</span> idx;</div><div class="line"></div><div class="line">    idx = <a class="code" href="group__PJ__ATOMIC.htm#ga7c90fb13e57b82fa7416f9dd55216eb1">pj_atomic_inc_and_get</a>(tparam-&gt;idx);</div><div class="line">    tparam-&gt;stat[idx].is_poll = <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a>;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d (poll) started&quot;</span>, idx));</div><div class="line">    <span class="keywordflow">while</span> (!tparam-&gt;stopping) {</div><div class="line">        <span class="keywordtype">unsigned</span> count;</div><div class="line">        count = <a class="code" href="group__PJ__TIMER.htm#ga591fb436503b441ef00e6a4fe2a3117f">pj_timer_heap_poll</a>(tparam-&gt;timer, NULL);</div><div class="line">        <span class="keywordflow">if</span> (count &gt; 0) {</div><div class="line">            <span class="comment">/* Count expired entries */</span></div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(5,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d called %d entries&quot;</span>,</div><div class="line">                      idx, count));</div><div class="line">            tparam-&gt;stat[idx].cnt += count;</div><div class="line">        } <span class="keywordflow">else</span> {</div><div class="line">            <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(10);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d (poll) stopped&quot;</span>, idx));</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Cancel worker thread function. */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> cancel_worker(<span class="keywordtype">void</span> *arg)</div><div class="line">{</div><div class="line">    <span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> *tparam = (<span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a>*)arg;</div><div class="line">    <span class="keywordtype">int</span> idx;</div><div class="line"></div><div class="line">    idx = <a class="code" href="group__PJ__ATOMIC.htm#ga7c90fb13e57b82fa7416f9dd55216eb1">pj_atomic_inc_and_get</a>(tparam-&gt;idx);</div><div class="line">    tparam-&gt;stat[idx].is_poll = <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a>;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d (cancel) started&quot;</span>, idx));</div><div class="line">    <span class="keywordflow">while</span> (!tparam-&gt;stopping) {</div><div class="line">        <span class="keywordtype">int</span> count;</div><div class="line">        <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *e = &amp;tparam-&gt;entries[<a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % ST_ENTRY_COUNT];</div><div class="line"></div><div class="line">        count = <a class="code" href="group__PJ__TIMER.htm#ga4ebea3047cb96236a8d78692c22f787e">pj_timer_heap_cancel_if_active</a>(tparam-&gt;timer, e, 2);</div><div class="line">        <span class="keywordflow">if</span> (count &gt; 0) {</div><div class="line">            <span class="comment">/* Count cancelled entries */</span></div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(5,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d cancelled %d entries&quot;</span>,</div><div class="line">                      idx, count));</div><div class="line">            tparam-&gt;stat[idx].cnt += count;</div><div class="line"></div><div class="line">            <span class="comment">/* Reschedule entry after some delay */</span></div><div class="line">            <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(<a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % 100);</div><div class="line">            st_schedule_entry(tparam-&gt;timer, e);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(4,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...thread #%d (cancel) stopped&quot;</span>, idx));</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> timer_stress_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordtype">unsigned</span> count = 0, n_sched = 0, n_cancel = 0, n_poll = 0;</div><div class="line">    <span class="keywordtype">int</span> i;</div><div class="line">    <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *entries = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga6b90ec490189c586ec263a92869da47f">pj_atomic_t</a> **entries_status = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gadf42a33e518aa8df09d5a11429e8a41a">pj_grp_lock_t</a> **grp_locks = NULL;</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *timer = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga3dc49084043901d31c7b12e5afc9fb2f">pj_lock_t</a> *timer_lock;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line">    <span class="keywordtype">int</span> err=0;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **stress_threads = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **poll_threads = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **cancel_threads = NULL;</div><div class="line">    <span class="keyword">struct </span><a class="code" href="structthread__param.htm">thread_param</a> tparam = {0};</div><div class="line">    <a class="code" href="structpj__time__val.htm">pj_time_val</a> now;</div><div class="line"><span class="preprocessor">#if SIMULATE_CRASH</span></div><div class="line">    <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *entry;</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *tmp_pool;</div><div class="line">    <a class="code" href="structpj__time__val.htm">pj_time_val</a> delay = {0};</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...Stress test&quot;</span>));</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;now);</div><div class="line">    <a class="code" href="group__PJ__RAND.htm#gab1a26d78213bb31ec7ecd0dddde3f787">pj_srand</a>(now.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a>);</div><div class="line"></div><div class="line">    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>( mem, NULL, 128, 128, NULL);</div><div class="line">    <span class="keywordflow">if</span> (!pool) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: unable to create pool&quot;</span>));</div><div class="line">        err = -10;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Create timer heap.</span></div><div class="line"><span class="comment">     * Initially we only create a fraction of what&#39;s required,</span></div><div class="line"><span class="comment">     * to test the timer heap growth algorithm.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    status = <a class="code" href="group__PJ__TIMER.htm#gac23ecc3a7d6779be2183149da9a841d5">pj_timer_heap_create</a>(pool, ST_ENTRY_COUNT/64, &amp;timer);</div><div class="line">    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create timer heap&quot;</span>, status);</div><div class="line">        err = -20;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Set recursive lock for the timer heap. */</span></div><div class="line">    status = <a class="code" href="group__PJ__LOCK.htm#gad49da1b7c372a303ddb71d7918743d0e">pj_lock_create_recursive_mutex</a>( pool, <span class="stringliteral">&quot;lock&quot;</span>, &amp;timer_lock);</div><div class="line">    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create lock&quot;</span>, status);</div><div class="line">        err = -30;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    <a class="code" href="group__PJ__TIMER.htm#gadf7b50b4eeda50c860b21198b7de1f86">pj_timer_heap_set_lock</a>(timer, timer_lock, <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a>);</div><div class="line"></div><div class="line">    <span class="comment">/* Create group locks for the timer entry. */</span></div><div class="line">    <span class="keywordflow">if</span> (ST_ENTRY_GROUP_LOCK_COUNT) {</div><div class="line">        grp_locks = (<a class="code" href="group__PJ__BASIC.htm#gadf42a33e518aa8df09d5a11429e8a41a">pj_grp_lock_t</a>**)</div><div class="line">                    <a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, ST_ENTRY_GROUP_LOCK_COUNT,</div><div class="line">                                   <span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#gadf42a33e518aa8df09d5a11429e8a41a">pj_grp_lock_t</a>*));</div><div class="line">        tparam.grp_locks = grp_locks;</div><div class="line">    }</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_ENTRY_GROUP_LOCK_COUNT; ++i) {    </div><div class="line">        status = <a class="code" href="group__PJ__GRP__LOCK.htm#gacfecdfab9f40cf249b32542fbe6e1d05">pj_grp_lock_create</a>(pool, NULL, &amp;grp_locks[i]);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: unable to create group lock&quot;</span>, status);</div><div class="line">            err = -40;</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line">        }</div><div class="line">        <a class="code" href="group__PJ__GRP__LOCK.htm#ga59dafa5a6574b8fa4f5d4d33a480ee47">pj_grp_lock_add_ref</a>(grp_locks[i]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Create and schedule timer entries */</span></div><div class="line">    entries = (<a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a>*)<a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, ST_ENTRY_COUNT,</div><div class="line">                                              <span class="keyword">sizeof</span>(*entries));</div><div class="line">    <span class="keywordflow">if</span> (!entries) {</div><div class="line">        err = -50;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    entries_status = (<a class="code" href="group__PJ__BASIC.htm#ga6b90ec490189c586ec263a92869da47f">pj_atomic_t</a>**)<a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, ST_ENTRY_COUNT,</div><div class="line">                                                   <span class="keyword">sizeof</span>(*entries_status));</div><div class="line">    <span class="keywordflow">if</span> (!entries_status) {</div><div class="line">        err = -55;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_ENTRY_COUNT; ++i) {</div><div class="line">        <a class="code" href="group__PJ__TIMER.htm#ga95852c5f154d79368516e0247f66e538">pj_timer_entry_init</a>(&amp;entries[i], 0, &amp;tparam, &amp;st_entry_callback);</div><div class="line"></div><div class="line">        status = <a class="code" href="group__PJ__ATOMIC.htm#ga2759c0fd578a2baca353e1361e0582ca">pj_atomic_create</a>(pool, -1, &amp;entries_status[i]);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            err = -60;</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line">        }</div><div class="line">        <a class="code" href="group__PJ__ATOMIC.htm#gaa742e470e7431bb2bdef1a76df5b51db">pj_atomic_set</a>(entries_status[i], 0);</div><div class="line"></div><div class="line">        <span class="comment">/* For randomized test, we schedule the entry inside the thread */</span></div><div class="line">        <span class="keywordflow">if</span> (!ST_STRESS_THREAD_COUNT) {</div><div class="line">            status = st_schedule_entry(timer, &amp;entries[i]);</div><div class="line">            <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">                app_perror(<span class="stringliteral">&quot;...error: unable to schedule entry&quot;</span>, status);</div><div class="line">                err = -60;</div><div class="line">                <span class="keywordflow">goto</span> on_return;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    tparam.stopping = <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a>;</div><div class="line">    tparam.timer = timer;</div><div class="line">    tparam.entries = entries;</div><div class="line">    tparam.status = entries_status;</div><div class="line">    status = <a class="code" href="group__PJ__ATOMIC.htm#ga2759c0fd578a2baca353e1361e0582ca">pj_atomic_create</a>(pool, -1, &amp;tparam.idx);</div><div class="line">    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create atomic&quot;</span>, status);</div><div class="line">        err = -70;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line">    status = <a class="code" href="group__PJ__ATOMIC.htm#ga2759c0fd578a2baca353e1361e0582ca">pj_atomic_create</a>(pool, -1, &amp;tparam.n_sched);</div><div class="line">    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a> (status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>);</div><div class="line">    <a class="code" href="group__PJ__ATOMIC.htm#gaa742e470e7431bb2bdef1a76df5b51db">pj_atomic_set</a>(tparam.n_sched, 0);</div><div class="line">    status = <a class="code" href="group__PJ__ATOMIC.htm#ga2759c0fd578a2baca353e1361e0582ca">pj_atomic_create</a>(pool, -1, &amp;tparam.n_cancel);</div><div class="line">    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a> (status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>);</div><div class="line">    <a class="code" href="group__PJ__ATOMIC.htm#gaa742e470e7431bb2bdef1a76df5b51db">pj_atomic_set</a>(tparam.n_cancel, 0);</div><div class="line">    status = <a class="code" href="group__PJ__ATOMIC.htm#ga2759c0fd578a2baca353e1361e0582ca">pj_atomic_create</a>(pool, -1, &amp;tparam.n_poll);</div><div class="line">    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a> (status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>);</div><div class="line">    <a class="code" href="group__PJ__ATOMIC.htm#gaa742e470e7431bb2bdef1a76df5b51db">pj_atomic_set</a>(tparam.n_poll, 0);</div><div class="line"></div><div class="line">    <span class="comment">/* Start stress worker threads */</span></div><div class="line">    <span class="keywordflow">if</span> (ST_STRESS_THREAD_COUNT) {</div><div class="line">        stress_threads = (<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>**)</div><div class="line">                        <a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, ST_STRESS_THREAD_COUNT,</div><div class="line">                                       <span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>*));</div><div class="line">    }</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_STRESS_THREAD_COUNT; ++i) {</div><div class="line">        status = <a class="code" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>( pool, <span class="stringliteral">&quot;poll&quot;</span>, &amp;stress_worker, &amp;tparam,</div><div class="line">                                   0, 0, &amp;stress_threads[i]);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: unable to create stress thread&quot;</span>, status);</div><div class="line">            err = -75;</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Start poll worker threads */</span></div><div class="line">    <span class="keywordflow">if</span> (ST_POLL_THREAD_COUNT) {</div><div class="line">        poll_threads = (<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>**)</div><div class="line">                        <a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, ST_POLL_THREAD_COUNT,</div><div class="line">                                       <span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>*));</div><div class="line">    }</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_POLL_THREAD_COUNT; ++i) {</div><div class="line">        status = <a class="code" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>( pool, <span class="stringliteral">&quot;poll&quot;</span>, &amp;poll_worker, &amp;tparam,</div><div class="line">                                   0, 0, &amp;poll_threads[i]);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: unable to create poll thread&quot;</span>, status);</div><div class="line">            err = -80;</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Start cancel worker threads */</span></div><div class="line">    <span class="keywordflow">if</span> (ST_CANCEL_THREAD_COUNT) {</div><div class="line">        cancel_threads = (<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>**)</div><div class="line">                          <a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, ST_CANCEL_THREAD_COUNT,</div><div class="line">                                         <span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>*));</div><div class="line">    }</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_CANCEL_THREAD_COUNT; ++i) {</div><div class="line">        status = <a class="code" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>( pool, <span class="stringliteral">&quot;cancel&quot;</span>, &amp;cancel_worker, &amp;tparam,</div><div class="line">                                   0, 0, &amp;cancel_threads[i]);</div><div class="line">        <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: unable to create cancel thread&quot;</span>, status);</div><div class="line">            err = -90;</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line"><span class="preprocessor">#if SIMULATE_CRASH</span></div><div class="line">    tmp_pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>( mem, NULL, 4096, 128, NULL);</div><div class="line">    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(tmp_pool);</div><div class="line">    entry = (<a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a>*)<a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(tmp_pool, 1, <span class="keyword">sizeof</span>(*entry));</div><div class="line">    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(entry);</div><div class="line">    <a class="code" href="group__PJ__TIMER.htm#ga95852c5f154d79368516e0247f66e538">pj_timer_entry_init</a>(entry, 0, &amp;tparam, &amp;dummy_callback);</div><div class="line">    delay.<a class="code" href="structpj__time__val.htm#af2739d0c2189e9c902281c04fd1f4502">sec</a> = 6;</div><div class="line">    status = <a class="code" href="group__PJ__TIMER.htm#ga70651768f9361e9cda3c1d24fec924f7">pj_timer_heap_schedule</a>(timer, entry, &amp;delay);</div><div class="line">    <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(status == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>);</div><div class="line">    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1000);</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...Releasing timer entry %p without cancelling it&quot;</span>,</div><div class="line">                      entry));</div><div class="line">    <a class="code" href="group__PJ__POOL.htm#ga434cf4995ee89d8316eeca1ae87d84fb">pj_pool_secure_release</a>(&amp;tmp_pool);</div><div class="line">    <span class="comment">//pj_pool_release(tmp_pool);</span></div><div class="line">    <span class="comment">//pj_memset(tmp_pool, 128, 4096);</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <span class="comment">/* Wait */</span></div><div class="line">    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(ST_DURATION);</div><div class="line"></div><div class="line">on_return:</div><div class="line">    </div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...Cleaning up resources&quot;</span>));</div><div class="line">    tparam.stopping = <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a>;</div><div class="line">    </div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_STRESS_THREAD_COUNT; ++i) {</div><div class="line">        <span class="keywordflow">if</span> (!stress_threads[i])</div><div class="line">            <span class="keywordflow">continue</span>;</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(stress_threads[i]);</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(stress_threads[i]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_POLL_THREAD_COUNT; ++i) {</div><div class="line">        <span class="keywordflow">if</span> (!poll_threads[i])</div><div class="line">            <span class="keywordflow">continue</span>;</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(poll_threads[i]);</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(poll_threads[i]);</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_CANCEL_THREAD_COUNT; ++i) {</div><div class="line">        <span class="keywordflow">if</span> (!cancel_threads[i])</div><div class="line">            <span class="keywordflow">continue</span>;</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(cancel_threads[i]);</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(cancel_threads[i]);</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_POLL_THREAD_COUNT+ST_CANCEL_THREAD_COUNT; ++i) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...Thread #%d (%s) executed %d entries&quot;</span>,</div><div class="line">                  i, (tparam.stat[i].is_poll? <span class="stringliteral">&quot;poll&quot;</span>:<span class="stringliteral">&quot;cancel&quot;</span>),</div><div class="line">                  tparam.stat[i].cnt));</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_ENTRY_COUNT; ++i) {</div><div class="line">        count += <a class="code" href="group__PJ__TIMER.htm#ga4ebea3047cb96236a8d78692c22f787e">pj_timer_heap_cancel_if_active</a>(timer, &amp;entries[i], 10);</div><div class="line">        <span class="keywordflow">if</span> (entries_status)</div><div class="line">            <a class="code" href="group__PJ__ATOMIC.htm#ga37c1f01289a5795825cbc2a3b956a601">pj_atomic_destroy</a>(entries_status[i]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;ST_ENTRY_GROUP_LOCK_COUNT; ++i) {</div><div class="line">        <span class="comment">/* Ref count must be equal to 1 */</span></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__GRP__LOCK.htm#ga992c742c8092d8733435d889d6b88a11">pj_grp_lock_get_ref</a>(grp_locks[i]) != 1) {</div><div class="line">            <a class="code" href="group__pj__assert.htm#ga981d47a5e9d7e9655473244839f0f5d3">pj_assert</a>(!<span class="stringliteral">&quot;Group lock ref count must be equal to 1&quot;</span>);</div><div class="line">            <span class="keywordflow">if</span> (!err) err = -100;</div><div class="line">        }</div><div class="line">        <a class="code" href="group__PJ__GRP__LOCK.htm#gaf5cdad52464deb4fb8e5956180e428d0">pj_grp_lock_dec_ref</a>(grp_locks[i]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (timer)</div><div class="line">        <a class="code" href="group__PJ__TIMER.htm#ga6bdecba93d049eac4ea080246b674ff5">pj_timer_heap_destroy</a>(timer);</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;Total memory of timer heap: %d&quot;</span>,</div><div class="line">                      <a class="code" href="group__PJ__TIMER.htm#gab14375d4993080837ae1709c74796ca7">pj_timer_heap_mem_size</a>(ST_ENTRY_COUNT)));</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (tparam.idx)</div><div class="line">        <a class="code" href="group__PJ__ATOMIC.htm#ga37c1f01289a5795825cbc2a3b956a601">pj_atomic_destroy</a>(tparam.idx);</div><div class="line">    <span class="keywordflow">if</span> (tparam.n_sched) {</div><div class="line">        n_sched = <a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam.n_sched);</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;Total number of scheduled entries: %d&quot;</span>, n_sched));</div><div class="line">        <a class="code" href="group__PJ__ATOMIC.htm#ga37c1f01289a5795825cbc2a3b956a601">pj_atomic_destroy</a>(tparam.n_sched);</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (tparam.n_cancel) {</div><div class="line">        n_cancel = <a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam.n_cancel);</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;Total number of cancelled entries: %d&quot;</span>, n_cancel));</div><div class="line">        <a class="code" href="group__PJ__ATOMIC.htm#ga37c1f01289a5795825cbc2a3b956a601">pj_atomic_destroy</a>(tparam.n_cancel);</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (tparam.n_poll) {</div><div class="line">        n_poll = <a class="code" href="group__PJ__ATOMIC.htm#ga8bf9e925db97f3c0736b730618f9d2ea">pj_atomic_get</a>(tparam.n_poll);</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;Total number of polled entries: %d&quot;</span>, n_poll));</div><div class="line">        <a class="code" href="group__PJ__ATOMIC.htm#ga37c1f01289a5795825cbc2a3b956a601">pj_atomic_destroy</a>(tparam.n_poll);</div><div class="line">    }</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;Number of remaining active entries: %d&quot;</span>, count));</div><div class="line">    <span class="keywordflow">if</span> (n_sched) {</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> match = <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a>;</div><div class="line"></div><div class="line"><span class="preprocessor">#if SIMULATE_CRASH</span></div><div class="line">        n_sched++;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">        <span class="keywordflow">if</span> (n_sched != (n_cancel + n_poll + count)) {</div><div class="line">            <span class="keywordflow">if</span> (tparam.err != 0) tparam.err = -250;</div><div class="line">            match = <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a>;</div><div class="line">        }</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;Scheduled = cancelled + polled + remaining?: %s&quot;</span>,</div><div class="line">                          (match? <span class="stringliteral">&quot;yes&quot;</span>: <span class="stringliteral">&quot;no&quot;</span>)));</div><div class="line">    }</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__POOL.htm#ga9d6d508fb309458e090d37d4f4260a95">pj_pool_safe_release</a>(&amp;pool);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> (err? err: tparam.err);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> get_random_delay()</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> <a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % BT_ENTRY_COUNT;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> get_next_delay(<span class="keywordtype">int</span> delay)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> ++delay;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> BENCH_TEST_TYPE {</div><div class="line">    RANDOM_SCH = 0,</div><div class="line">    RANDOM_CAN = 1,</div><div class="line">    INCREMENT_SCH = 2,</div><div class="line">    INCREMENT_CAN = 3</div><div class="line">} BENCH_TEST_TYPE;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">char</span> *get_test_name(BENCH_TEST_TYPE test_type) {</div><div class="line">    <span class="keywordflow">switch</span> (test_type) {</div><div class="line">    <span class="keywordflow">case</span> RANDOM_SCH:</div><div class="line">    <span class="keywordflow">case</span> INCREMENT_SCH:</div><div class="line">        <span class="keywordflow">return</span> <span class="stringliteral">&quot;schedule&quot;</span>;</div><div class="line">    <span class="keywordflow">case</span> RANDOM_CAN:</div><div class="line">    <span class="keywordflow">case</span> INCREMENT_CAN:</div><div class="line">        <span class="keywordflow">return</span> <span class="stringliteral">&quot;cancel&quot;</span>;</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> <span class="stringliteral">&quot;undefined&quot;</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> *get_format_num(<span class="keywordtype">unsigned</span> n, <span class="keywordtype">char</span> *out)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> c;</div><div class="line">    <span class="keywordtype">char</span> buf[64];</div><div class="line">    <span class="keywordtype">char</span> *p;</div><div class="line"></div><div class="line">    pj_ansi_snprintf(buf, 64, <span class="stringliteral">&quot;%d&quot;</span>, n);</div><div class="line">    c = 2 - pj_ansi_strlen(buf) % 3;</div><div class="line">    <span class="keywordflow">for</span> (p = buf; *p != 0; ++p) {</div><div class="line">       *out++ = *p;</div><div class="line">       <span class="keywordflow">if</span> (c == 1) {</div><div class="line">           *out++ = <span class="charliteral">&#39;,&#39;</span>;</div><div class="line">       }</div><div class="line">       c = (c + 1) % 3;</div><div class="line">    }</div><div class="line">    *--out = 0;</div><div class="line">    <span class="keywordflow">return</span> out;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> print_bench(BENCH_TEST_TYPE test_type, <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> time_freq,</div><div class="line">                        <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> time_start, <span class="keywordtype">int</span> start_idx, <span class="keywordtype">int</span> end_idx)</div><div class="line">{</div><div class="line">    <span class="keywordtype">char</span> start_idx_str[64];</div><div class="line">    <span class="keywordtype">char</span> end_idx_str[64];</div><div class="line">    <span class="keywordtype">char</span> num_req_str[64];</div><div class="line">    <span class="keywordtype">unsigned</span> num_req;</div><div class="line">    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t2;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);</div><div class="line">    <a class="code" href="group__PJ__TIMESTAMP.htm#gac1235ac74c27acc3e9b14b17000ef7c3">pj_sub_timestamp</a>(&amp;t2, &amp;time_start);</div><div class="line"></div><div class="line">    num_req = (unsigned)(time_freq.u64 * (end_idx-start_idx) / t2.u64);</div><div class="line">    <span class="keywordflow">if</span> (test_type == RANDOM_CAN || test_type == INCREMENT_CAN) {</div><div class="line">        start_idx = BT_ENTRY_COUNT - start_idx;</div><div class="line">        end_idx = BT_ENTRY_COUNT - end_idx;</div><div class="line">    }</div><div class="line">    get_format_num(start_idx, start_idx_str);</div><div class="line">    get_format_num(end_idx, end_idx_str);</div><div class="line">    get_format_num(num_req, num_req_str);</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, <span class="stringliteral">&quot;    Entries %s-%s: %s %s ent/sec&quot;</span>,</div><div class="line">               start_idx_str, end_idx_str, get_test_name(test_type),</div><div class="line">               num_req_str));</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> bench_test(<a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *timer,</div><div class="line">                      <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *entries,</div><div class="line">                      <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> freq,</div><div class="line">                      BENCH_TEST_TYPE test_type)</div><div class="line">{</div><div class="line">    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t1;</div><div class="line">    <span class="keywordtype">unsigned</span> mult = BT_ENTRY_SHOW_START;</div><div class="line">    <span class="keywordtype">int</span> i, j;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div><div class="line">    <span class="comment">/*Schedule random entry.*/</span></div><div class="line">    <span class="keywordflow">for</span> (i=0, j=0; j &lt; BT_ENTRY_COUNT; ++j) {</div><div class="line">        <a class="code" href="structpj__time__val.htm">pj_time_val</a> delay = { 0 };</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (test_type == RANDOM_SCH || test_type == INCREMENT_SCH) {</div><div class="line">            <span class="keywordflow">if</span> (test_type == RANDOM_SCH)</div><div class="line">                delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = get_random_delay();</div><div class="line">            <span class="keywordflow">else</span></div><div class="line">                delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a> = get_next_delay(delay.<a class="code" href="structpj__time__val.htm#ab9cc04663b258dd3dcb449a3110e0d82">msec</a>);</div><div class="line"></div><div class="line">            <a class="code" href="group__PJ__TIMER.htm#ga95852c5f154d79368516e0247f66e538">pj_timer_entry_init</a>(&amp;entries[j], 0, NULL, &amp;dummy_callback);</div><div class="line"></div><div class="line">            status = <a class="code" href="group__PJ__TIMER.htm#ga70651768f9361e9cda3c1d24fec924f7">pj_timer_heap_schedule</a>(timer, &amp;entries[j], &amp;delay);</div><div class="line">            <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">                app_perror(<span class="stringliteral">&quot;...error: unable to schedule timer entry&quot;</span>, status);</div><div class="line">                <span class="keywordflow">return</span> -50;</div><div class="line">            }</div><div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (test_type == RANDOM_CAN || test_type == INCREMENT_CAN) {</div><div class="line">            <span class="keywordtype">unsigned</span> num_ent = <a class="code" href="group__PJ__TIMER.htm#ga522fb9ade28878a32d7c76e4f90f35ee">pj_timer_heap_cancel</a>(timer, &amp;entries[j]);</div><div class="line">            <span class="keywordflow">if</span> (num_ent == 0) {</div><div class="line">                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: unable to cancel timer entry&quot;</span>));</div><div class="line">                <span class="keywordflow">return</span> -60;</div><div class="line">            }</div><div class="line">        } <span class="keywordflow">else</span> {</div><div class="line">            <span class="keywordflow">return</span> -70;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (j &amp;&amp; (j % mult) == 0) {</div><div class="line">            print_bench(test_type, freq, t1, i, j);</div><div class="line"></div><div class="line">            i = j+1;</div><div class="line">            <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);</div><div class="line">            mult *= BT_ENTRY_SHOW_MULT;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keywordflow">if</span> (j &gt; 0 &amp;&amp; ((j-1) % mult != 0)) {</div><div class="line">        print_bench(test_type, freq, t1, i, j);</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> timer_bench_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gaec8852c90e22c6868c83d44dcbdecb8a">pj_timer_heap_t</a> *timer = NULL;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;</div><div class="line">    <span class="keywordtype">int</span> err=0;</div><div class="line">    <a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a> *entries = NULL;</div><div class="line">    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> freq;</div><div class="line">    <span class="keywordtype">int</span> i;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...Benchmark test&quot;</span>));</div><div class="line"></div><div class="line">    status = <a class="code" href="group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq</a>(&amp;freq);</div><div class="line">    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: unable to get timestamp freq&quot;</span>));</div><div class="line">        err = -10;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>( mem, NULL, 128, 128, NULL);</div><div class="line">    <span class="keywordflow">if</span> (!pool) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...error: unable to create pool&quot;</span>));</div><div class="line">        err = -20;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Create timer heap.*/</span></div><div class="line">    status = <a class="code" href="group__PJ__TIMER.htm#gac23ecc3a7d6779be2183149da9a841d5">pj_timer_heap_create</a>(pool, BT_ENTRY_COUNT/64, &amp;timer);</div><div class="line">    <span class="keywordflow">if</span> (status != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create timer heap&quot;</span>, status);</div><div class="line">        err = -30;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Create and schedule timer entries */</span></div><div class="line">    entries = (<a class="code" href="structpj__timer__entry.htm">pj_timer_entry</a>*)<a class="code" href="group__PJ__POOL.htm#gadbfad2994a9bf4a86ce81f5726d4502c">pj_pool_calloc</a>(pool, BT_ENTRY_COUNT,</div><div class="line">                                              <span class="keyword">sizeof</span>(*entries));</div><div class="line">    <span class="keywordflow">if</span> (!entries) {</div><div class="line">        err = -40;</div><div class="line">        <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....random scheduling/cancelling test..&quot;</span>));</div><div class="line">    <span class="keywordflow">for</span> (i = 0; i &lt; BT_REPEAT_RANDOM_TEST; ++i) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;    test %d of %d..&quot;</span>, i+1, BT_REPEAT_RANDOM_TEST));</div><div class="line">        err = bench_test(timer, entries, freq, RANDOM_SCH);</div><div class="line">        <span class="keywordflow">if</span> (err &lt; 0)</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line"></div><div class="line">        err = bench_test(timer, entries, freq, RANDOM_CAN);</div><div class="line">        <span class="keywordflow">if</span> (err &lt; 0)</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;....increment scheduling/cancelling test..&quot;</span>));</div><div class="line">    <span class="keywordflow">for</span> (i = 0; i &lt; BT_REPEAT_INC_TEST; ++i) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;    test %d of %d..&quot;</span>, i+1, BT_REPEAT_INC_TEST));</div><div class="line">        err = bench_test(timer, entries, freq, INCREMENT_SCH);</div><div class="line">        <span class="keywordflow">if</span> (err &lt; 0)</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line"></div><div class="line">        err = bench_test(timer, entries, freq, INCREMENT_CAN);</div><div class="line">        <span class="keywordflow">if</span> (err &lt; 0)</div><div class="line">            <span class="keywordflow">goto</span> on_return;</div><div class="line">    }</div><div class="line"> on_return:</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;test&quot;</span>, <span class="stringliteral">&quot;...Cleaning up resources&quot;</span>));</div><div class="line">    <span class="keywordflow">if</span> (pool)</div><div class="line">        <a class="code" href="group__PJ__POOL.htm#ga9d6d508fb309458e090d37d4f4260a95">pj_pool_safe_release</a>(&amp;pool);</div><div class="line">    <span class="keywordflow">return</span> err;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> timer_test()</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> rc;</div><div class="line"></div><div class="line">    rc = test_timer_heap();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = timer_stress_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line"><span class="preprocessor">#if WITH_BENCHMARK</span></div><div class="line">    rc = timer_bench_test();</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div><div class="line"><span class="comment"> * when this test is disabled. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> dummy_timer_test;</div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_TIMER_TEST */</span><span class="preprocessor"></span></div><div class="line"></div><div class="line"></div></div><!-- fragment --> </div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
