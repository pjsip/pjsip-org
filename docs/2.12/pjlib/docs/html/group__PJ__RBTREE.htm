<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Red/Black Balanced Tree (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Red/Black Balanced Tree<div class="ingroups"><a class="el" href="group__PJ__DS.htm">Data Structure.</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Red/Black tree is the variant of balanced tree, where the search, insert, and delete operation is <b>guaranteed</b> to take at most <em>O( lg(n) )</em>.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga486cbda8689f731265731ee8544eb216"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga486cbda8689f731265731ee8544eb216">PJ_RBTREE_NODE_SIZE</a>&#160;&#160;&#160;(sizeof(<a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>))</td></tr>
<tr class="separator:ga486cbda8689f731265731ee8544eb216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb70e4245995a56ccd8209fdd58db13f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gabb70e4245995a56ccd8209fdd58db13f">PJ_RBTREE_SIZE</a>&#160;&#160;&#160;(sizeof(<a class="el" href="structpj__rbtree.htm">pj_rbtree</a>))</td></tr>
<tr class="separator:gabb70e4245995a56ccd8209fdd58db13f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga2988a623a3092152646614050871e75f"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga2988a623a3092152646614050871e75f">pj_rbtree_comp</a>(const void *key1, const void *key2)</td></tr>
<tr class="separator:ga2988a623a3092152646614050871e75f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gabc60f4c3d6f75c0c757d840bfff405a8"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gabc60f4c3d6f75c0c757d840bfff405a8">pj_rbcolor_t</a> { <b>PJ_RBCOLOR_BLACK</b>, 
<b>PJ_RBCOLOR_RED</b>
 }</td></tr>
<tr class="separator:gabc60f4c3d6f75c0c757d840bfff405a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga395aeb318d85e277ffc2fcde99b9c158"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga395aeb318d85e277ffc2fcde99b9c158">pj_rbtree_init</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="group__PJ__RBTREE.htm#ga2988a623a3092152646614050871e75f">pj_rbtree_comp</a> *comp)</td></tr>
<tr class="separator:ga395aeb318d85e277ffc2fcde99b9c158"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6a2a6629600d6565019b204f2794120"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gaa6a2a6629600d6565019b204f2794120">pj_rbtree_first</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree)</td></tr>
<tr class="separator:gaa6a2a6629600d6565019b204f2794120"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadbe04630482028d3f1b35c33979317d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gadbe04630482028d3f1b35c33979317d1">pj_rbtree_last</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree)</td></tr>
<tr class="separator:gadbe04630482028d3f1b35c33979317d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91da811545a41a5b9584eb5dc3e365b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga91da811545a41a5b9584eb5dc3e365b4">pj_rbtree_next</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr class="separator:ga91da811545a41a5b9584eb5dc3e365b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga82bc968b5321a5d48e2ff87f0f949f5c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga82bc968b5321a5d48e2ff87f0f949f5c">pj_rbtree_prev</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr class="separator:ga82bc968b5321a5d48e2ff87f0f949f5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d391aef907c48aa90b02e3b661493d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga1d391aef907c48aa90b02e3b661493d3">pj_rbtree_insert</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr class="separator:ga1d391aef907c48aa90b02e3b661493d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0590a8bd993076442c5156d6a8e0d2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gaa0590a8bd993076442c5156d6a8e0d2d">pj_rbtree_find</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, const void *key)</td></tr>
<tr class="separator:gaa0590a8bd993076442c5156d6a8e0d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabce76bb85b946871ebacb40b2d24cfa7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#gabce76bb85b946871ebacb40b2d24cfa7">pj_rbtree_erase</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr class="separator:gabce76bb85b946871ebacb40b2d24cfa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f6cd9fb8a1830bdd72fa6e84b568dc9"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga9f6cd9fb8a1830bdd72fa6e84b568dc9">pj_rbtree_max_height</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr class="separator:ga9f6cd9fb8a1830bdd72fa6e84b568dc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga021ffcb2a6950685be5078c2daa266d0"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__RBTREE.htm#ga021ffcb2a6950685be5078c2daa266d0">pj_rbtree_min_height</a> (<a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *tree, <a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *node)</td></tr>
<tr class="separator:ga021ffcb2a6950685be5078c2daa266d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Red/Black tree is the variant of balanced tree, where the search, insert, and delete operation is <b>guaranteed</b> to take at most <em>O( lg(n) )</em>. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga486cbda8689f731265731ee8544eb216"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga486cbda8689f731265731ee8544eb216">&#9670;&nbsp;</a></span>PJ_RBTREE_NODE_SIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_RBTREE_NODE_SIZE&#160;&#160;&#160;(sizeof(<a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>))</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Guidance on how much memory required for each of the node. </p>

</div>
</div>
<a id="gabb70e4245995a56ccd8209fdd58db13f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabb70e4245995a56ccd8209fdd58db13f">&#9670;&nbsp;</a></span>PJ_RBTREE_SIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_RBTREE_SIZE&#160;&#160;&#160;(sizeof(<a class="el" href="structpj__rbtree.htm">pj_rbtree</a>))</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Guidance on memory required for the tree. </p>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ga2988a623a3092152646614050871e75f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2988a623a3092152646614050871e75f">&#9670;&nbsp;</a></span>pj_rbtree_comp</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> pj_rbtree_comp(const void *key1, const void *key2)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The type of function use to compare key value of tree node. </p><dl class="section return"><dt>Returns</dt><dd>0 if the keys are equal &lt;0 if key1 is lower than key2 &gt;0 if key1 is greater than key2. </dd></dl>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="gabc60f4c3d6f75c0c757d840bfff405a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabc60f4c3d6f75c0c757d840bfff405a8">&#9670;&nbsp;</a></span>pj_rbcolor_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__RBTREE.htm#gabc60f4c3d6f75c0c757d840bfff405a8">pj_rbcolor_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Color type for Red-Black tree. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="gabce76bb85b946871ebacb40b2d24cfa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabce76bb85b946871ebacb40b2d24cfa7">&#9670;&nbsp;</a></span>pj_rbtree_erase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase a node from the tree. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
    <tr><td class="paramname">node</td><td>the node to be erased. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the tree node itself. </dd></dl>

</div>
</div>
<a id="gaa0590a8bd993076442c5156d6a8e0d2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa0590a8bd993076442c5156d6a8e0d2d">&#9670;&nbsp;</a></span>pj_rbtree_find()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_find </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a node which has the specified key. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
    <tr><td class="paramname">key</td><td>the key to search. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the tree node with the specified key, or NULL if the key can not be found. </dd></dl>

</div>
</div>
<a id="gaa6a2a6629600d6565019b204f2794120"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa6a2a6629600d6565019b204f2794120">&#9670;&nbsp;</a></span>pj_rbtree_first()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_first </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the first element in the tree. The first element always has the least value for the key, according to the comparison function. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the tree node, or NULL if the tree has no element. </dd></dl>

</div>
</div>
<a id="ga395aeb318d85e277ffc2fcde99b9c158"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga395aeb318d85e277ffc2fcde99b9c158">&#9670;&nbsp;</a></span>pj_rbtree_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_rbtree_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__RBTREE.htm#ga2988a623a3092152646614050871e75f">pj_rbtree_comp</a> *&#160;</td>
          <td class="paramname"><em>comp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initialize the tree. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree to be initialized. </td></tr>
    <tr><td class="paramname">comp</td><td>key comparison function to be used for this tree. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga1d391aef907c48aa90b02e3b661493d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1d391aef907c48aa90b02e3b661493d3">&#9670;&nbsp;</a></span>pj_rbtree_insert()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> pj_rbtree_insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a new node. The node will be inserted at sorted location. The key of the node must be UNIQUE, i.e. it hasn't existed in the tree. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
    <tr><td class="paramname">node</td><td>the node to be inserted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>zero on success, or -1 if the key already exist. </dd></dl>

</div>
</div>
<a id="gadbe04630482028d3f1b35c33979317d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadbe04630482028d3f1b35c33979317d1">&#9670;&nbsp;</a></span>pj_rbtree_last()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_last </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the last element in the tree. The last element always has the greatest key value, according to the comparison function defined for the tree. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the tree node, or NULL if the tree has no element. </dd></dl>

</div>
</div>
<a id="ga9f6cd9fb8a1830bdd72fa6e84b568dc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9f6cd9fb8a1830bdd72fa6e84b568dc9">&#9670;&nbsp;</a></span>pj_rbtree_max_height()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj_rbtree_max_height </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the maximum tree height from the specified node. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
    <tr><td class="paramname">node</td><td>the node, or NULL to get the root of the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the maximum height, which should be at most lg(N) </dd></dl>

</div>
</div>
<a id="ga021ffcb2a6950685be5078c2daa266d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga021ffcb2a6950685be5078c2daa266d0">&#9670;&nbsp;</a></span>pj_rbtree_min_height()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned pj_rbtree_min_height </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the minumum tree height from the specified node. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
    <tr><td class="paramname">node</td><td>the node, or NULL to get the root of the tree. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the height </dd></dl>

</div>
</div>
<a id="ga91da811545a41a5b9584eb5dc3e365b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga91da811545a41a5b9584eb5dc3e365b4">&#9670;&nbsp;</a></span>pj_rbtree_next()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_next </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the successive element for the specified node. The successive element is an element with greater key value. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
    <tr><td class="paramname">node</td><td>the node. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the successive node, or NULL if the node has no successor. </dd></dl>

</div>
</div>
<a id="ga82bc968b5321a5d48e2ff87f0f949f5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga82bc968b5321a5d48e2ff87f0f949f5c">&#9670;&nbsp;</a></span>pj_rbtree_prev()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a>* pj_rbtree_prev </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__rbtree.htm">pj_rbtree</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__rbtree__node.htm">pj_rbtree_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The the previous node for the specified node. The previous node is an element with less key value. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tree</td><td>the tree. </td></tr>
    <tr><td class="paramname">node</td><td>the node. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the previous node, or NULL if the node has no previous node. </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
