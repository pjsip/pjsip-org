<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: String (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Test: String </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This file provides implementation of <b>string_test()</b>. It tests the functionality of the string API.</p>
<h1><a class="anchor" id="sleep_test_sec"></a>
Scope of the Test</h1>
<p>API tested:</p><ul>
<li><a class="el" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga3321b5cee71785a7b450ad29afe0895b">pj_strcmp2()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#gac6f28fa3462c129b73ca4572f0049be6">pj_stricmp()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#gab8b91334e749e1c4aa6bebec6ec7fc81">pj_strlen()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#gab83273533b1b136a66fb453b905bedf4">pj_strncmp()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga2e4ec6d2005b66d5c97abde02404c443">pj_strnicmp()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#gad6e4de8b9359b0b17328fb0a9b8ba6bb">pj_strchr()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#gaaf333c83193b9bc446259960f093a3ad">pj_strdup()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga96cdcaa39650b7f36fd850f53f4ebebf">pj_strdup2()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga86c2920ae4d2a3444f5b53cb995e18d7">pj_strcpy()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga7851384cbdcf51404c7ef6f43c3a9c47">pj_strcat()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga748d08fdf09faa06cfeea485c01cbacf">pj_strtrim()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga60c21f277b9d2aab493712856972946b">pj_utoa()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga0b12a5cc98e05ff6993aa02436246999">pj_strtoul()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2()</a></li>
<li><a class="el" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string()</a></li>
<li>... and mode..</li>
</ul>
<p>This file is <b>pjlib-test/string.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* $Id$ */</span></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div><div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><span class="comment"> * (at your option) any later version.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div><div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="string_8h.htm">pj/string.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="pool_8h.htm">pj/pool.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="log_8h.htm">pj/log.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="os_8h.htm">pj/os.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define THIS_FILE       &quot;string.c&quot;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if INCLUDE_STRING_TEST</span></div><div class="line"></div><div class="line"><span class="preprocessor">#ifdef _MSC_VER</span></div><div class="line"><span class="preprocessor">#   pragma warning(disable: 4204)</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define HELLO_WORLD     &quot;Hello World&quot;</span></div><div class="line"><span class="preprocessor">#define HELLO_WORLD_LEN 11</span></div><div class="line"><span class="preprocessor">#define JUST_HELLO      &quot;Hello&quot;</span></div><div class="line"><span class="preprocessor">#define JUST_HELLO_LEN  5</span></div><div class="line"><span class="preprocessor">#define UL_VALUE        3456789012UL</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if 1</span></div><div class="line"><span class="comment">/* See if both integers have the same sign */</span></div><div class="line"><a class="code" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(<span class="keywordtype">int</span>) cmp(<span class="keyword">const</span> <span class="keywordtype">char</span> *expr, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> r = !((i&gt;0 &amp;&amp; j&gt;0) || (i&lt;0 &amp;&amp; j&lt;0) || (i==0 &amp;&amp; j==0));</div><div class="line">    <span class="keywordflow">if</span> (r) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,<span class="stringliteral">&quot;   error: %s: expecting %d, got %d&quot;</span>, expr, j, i));</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> r;</div><div class="line">}</div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* For strict comparison, must be equal */</span></div><div class="line"><a class="code" href="group__pj__config.htm#gac928151ecd64bc26385f2725100b559c">PJ_INLINE</a>(<span class="keywordtype">int</span>) cmp(<span class="keyword">const</span> <span class="keywordtype">char</span> *expr, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j)</div><div class="line">{</div><div class="line">    <a class="code" href="group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(expr);</div><div class="line">    <span class="keywordflow">return</span> i!=j;</div><div class="line">}</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define C(expr, res)    cmp(#expr, expr, res)</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> stricmp_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line"><span class="comment">/* This specificly tests and benchmark pj_stricmp(), pj_stricmp_alnum().</span></div><div class="line"><span class="comment"> * In addition, it also tests pj_stricmp2(), pj_strnicmp(), and </span></div><div class="line"><span class="comment"> * pj_strnicmp2().</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#define STRTEST(res,res2,S1,S2,code)    \</span></div><div class="line"><span class="preprocessor">            do { \</span></div><div class="line"><span class="preprocessor">                s1.ptr=S1; s1.slen=(S1)?len:0; \</span></div><div class="line"><span class="preprocessor">                s2.ptr=S2; s2.slen=(S2)?len:0; \</span></div><div class="line"><span class="preprocessor">                pj_get_timestamp(&amp;t1); \</span></div><div class="line"><span class="preprocessor">                if (C(pj_stricmp(&amp;s1,&amp;s2),res)) return code; \</span></div><div class="line"><span class="preprocessor">                pj_get_timestamp(&amp;t2); \</span></div><div class="line"><span class="preprocessor">                pj_sub_timestamp(&amp;t2, &amp;t1); \</span></div><div class="line"><span class="preprocessor">                pj_add_timestamp(&amp;e1, &amp;t2); \</span></div><div class="line"><span class="preprocessor">                pj_get_timestamp(&amp;t1); \</span></div><div class="line"><span class="preprocessor">                if (C(pj_stricmp_alnum(&amp;s1,&amp;s2),res)) return code-1; \</span></div><div class="line"><span class="preprocessor">                pj_get_timestamp(&amp;t2); \</span></div><div class="line"><span class="preprocessor">                pj_sub_timestamp(&amp;t2, &amp;t1); \</span></div><div class="line"><span class="preprocessor">                pj_add_timestamp(&amp;e2, &amp;t2); \</span></div><div class="line"><span class="preprocessor">                if (C(pj_stricmp2(&amp;s1,S2),res2)) return code*10; \</span></div><div class="line"><span class="preprocessor">                if (C(pj_strnicmp(&amp;s1,&amp;s2,len),res)) return code*100; \</span></div><div class="line"><span class="preprocessor">                if (C(pj_strnicmp2(&amp;s1,S2,len),res)) return code*1000; \</span></div><div class="line"><span class="preprocessor">            } while (0)</span></div><div class="line"></div><div class="line">    <span class="keywordtype">char</span> *buf;</div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s1, s2;</div><div class="line">    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> t1, t2, e1, e2, zero;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> c1, c2;</div><div class="line">    <span class="keywordtype">int</span> len;</div><div class="line"></div><div class="line">    e1.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> = e1.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = e2.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> = e2.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(0);</div><div class="line"></div><div class="line"><span class="preprocessor">#define SNULL 0</span></div><div class="line"></div><div class="line">    <span class="comment">/* Compare empty strings. */</span></div><div class="line">    len=0;</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;&quot;</span>,<span class="stringliteral">&quot;&quot;</span>,-500);</div><div class="line">    STRTEST( 0, 0, SNULL,<span class="stringliteral">&quot;&quot;</span>,-502);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;&quot;</span>,SNULL,-504);</div><div class="line">    STRTEST( 0, 0, SNULL,SNULL,-506);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;hello&quot;</span>,<span class="stringliteral">&quot;world&quot;</span>,-508);</div><div class="line"></div><div class="line">    <span class="comment">/* equal, length=1 </span></div><div class="line"><span class="comment">     * use buffer to simulate non-aligned string.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    buf = <span class="stringliteral">&quot;a&quot;</span><span class="stringliteral">&quot;A&quot;</span>;</div><div class="line">    len=1;</div><div class="line">    STRTEST( 0,  -1, <span class="stringliteral">&quot;a&quot;</span>,buf+0,-510);</div><div class="line">    STRTEST( 0,  0, <span class="stringliteral">&quot;a&quot;</span>,buf+1,-512);</div><div class="line">    STRTEST(-1, -1, <span class="stringliteral">&quot;O&quot;</span>, <span class="stringliteral">&quot;P&quot;</span>, -514);</div><div class="line">    STRTEST(-1, -1, SNULL, <span class="stringliteral">&quot;a&quot;</span>, -516);</div><div class="line">    STRTEST( 1,  1, <span class="stringliteral">&quot;a&quot;</span>, SNULL, -518);</div><div class="line"></div><div class="line">    <span class="comment">/* equal, length=2 </span></div><div class="line"><span class="comment">     * use buffer to simulate non-aligned string.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    buf = <span class="stringliteral">&quot;aa&quot;</span><span class="stringliteral">&quot;Aa&quot;</span><span class="stringliteral">&quot;aA&quot;</span><span class="stringliteral">&quot;AA&quot;</span>;</div><div class="line">    len=2;</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aa&quot;</span>,buf+0,-520);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aa&quot;</span>,buf+2,-522);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aa&quot;</span>,buf+4,-524);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aa&quot;</span>,buf+6,-524);</div><div class="line"></div><div class="line">    <span class="comment">/* equal, length=3 </span></div><div class="line"><span class="comment">     * use buffer to simulate non-aligned string.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    buf = <span class="stringliteral">&quot;aaa&quot;</span><span class="stringliteral">&quot;Aaa&quot;</span><span class="stringliteral">&quot;aAa&quot;</span><span class="stringliteral">&quot;aaA&quot;</span><span class="stringliteral">&quot;AAa&quot;</span><span class="stringliteral">&quot;aAA&quot;</span><span class="stringliteral">&quot;AaA&quot;</span><span class="stringliteral">&quot;AAA&quot;</span>;</div><div class="line">    len=3;</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaa&quot;</span>,buf+0,-530);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaa&quot;</span>,buf+3,-532);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaa&quot;</span>,buf+6,-534);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaa&quot;</span>,buf+9,-536);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaa&quot;</span>,buf+12,-538);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaa&quot;</span>,buf+15,-540);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaa&quot;</span>,buf+18,-542);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaa&quot;</span>,buf+21,-534);</div><div class="line"></div><div class="line">    <span class="comment">/* equal, length=4 */</span></div><div class="line">    len=4;</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aaaa&quot;</span>,-540);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;Aaaa&quot;</span>,-542);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aAaa&quot;</span>,-544);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aaAa&quot;</span>,-546);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aaaA&quot;</span>,-548);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;AAaa&quot;</span>,-550);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aAAa&quot;</span>,-552);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aaAA&quot;</span>,-554);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;AaAa&quot;</span>,-556);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aAaA&quot;</span>,-558);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;AaaA&quot;</span>,-560);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;AAAa&quot;</span>,-562);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;aAAA&quot;</span>,-564);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;AAaA&quot;</span>,-566);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;AaAA&quot;</span>,-568);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaa&quot;</span>,<span class="stringliteral">&quot;AAAA&quot;</span>,-570);</div><div class="line"></div><div class="line">    <span class="comment">/* equal, length=5 */</span></div><div class="line">    buf = <span class="stringliteral">&quot;aaaAa&quot;</span><span class="stringliteral">&quot;AaaaA&quot;</span><span class="stringliteral">&quot;AaAaA&quot;</span><span class="stringliteral">&quot;AAAAA&quot;</span>;</div><div class="line">    len=5;</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>,buf+0,-580);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>,buf+5,-582);</div><div class="line">    STRTEST( 0, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>,buf+10,-584);</div><div class="line">    STRTEST( 0, 0, <span class="stringliteral">&quot;aaaaa&quot;</span>,buf+15,-586);</div><div class="line"></div><div class="line">    <span class="comment">/* not equal, length=1 */</span></div><div class="line">    len=1;</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;a&quot;</span>, <span class="stringliteral">&quot;b&quot;</span>, -600);</div><div class="line"></div><div class="line">    <span class="comment">/* not equal, length=2 */</span></div><div class="line">    buf = <span class="stringliteral">&quot;ab&quot;</span><span class="stringliteral">&quot;ba&quot;</span>;</div><div class="line">    len=2;</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aa&quot;</span>, buf+0, -610);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aa&quot;</span>, buf+2, -612);</div><div class="line"></div><div class="line">    <span class="comment">/* not equal, length=3 */</span></div><div class="line">    buf = <span class="stringliteral">&quot;aab&quot;</span><span class="stringliteral">&quot;aba&quot;</span><span class="stringliteral">&quot;baa&quot;</span>;</div><div class="line">    len=3;</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaa&quot;</span>, buf+0, -620);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaa&quot;</span>, buf+3, -622);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaa&quot;</span>, buf+6, -624);</div><div class="line"></div><div class="line">    <span class="comment">/* not equal, length=4 */</span></div><div class="line">    buf = <span class="stringliteral">&quot;aaab&quot;</span><span class="stringliteral">&quot;aaba&quot;</span><span class="stringliteral">&quot;abaa&quot;</span><span class="stringliteral">&quot;baaa&quot;</span>;</div><div class="line">    len=4;</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaa&quot;</span>, buf+0, -630);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaa&quot;</span>, buf+4, -632);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaa&quot;</span>, buf+8, -634);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaa&quot;</span>, buf+12, -636);</div><div class="line"></div><div class="line">    <span class="comment">/* not equal, length=5 */</span></div><div class="line">    buf=<span class="stringliteral">&quot;aaaab&quot;</span><span class="stringliteral">&quot;aaaba&quot;</span><span class="stringliteral">&quot;aabaa&quot;</span><span class="stringliteral">&quot;abaaa&quot;</span><span class="stringliteral">&quot;baaaa&quot;</span>;</div><div class="line">    len=5;</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>, buf+0, -640);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>, buf+5, -642);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>, buf+10, -644);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>, buf+15, -646);</div><div class="line">    STRTEST( -1, -1, <span class="stringliteral">&quot;aaaaa&quot;</span>, buf+20, -648);</div><div class="line"></div><div class="line">    zero.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> = zero.<a class="code" href="unionpj__timestamp.htm#a138d1e096a92d7ab922cfd4e728bd3a8">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> = 0;</div><div class="line">    c1 = <a class="code" href="group__PJ__TIMESTAMP.htm#gabc3085b0db4efd753db831d425e28eb4">pj_elapsed_cycle</a>(&amp;zero, &amp;e1);</div><div class="line">    c2 = <a class="code" href="group__PJ__TIMESTAMP.htm#gabc3085b0db4efd753db831d425e28eb4">pj_elapsed_cycle</a>(&amp;zero, &amp;e2);</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (c1 &lt; c2) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;  info: pj_stricmp_alnum is slower than pj_stricmp!&quot;</span>));</div><div class="line">        <span class="comment">//return -700;</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Avoid division by zero */</span></div><div class="line">    <span class="keywordflow">if</span> (c2 == 0) c2=1;</div><div class="line">    </div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;  time: stricmp=%u, stricmp_alnum=%u (speedup=%d.%02dx)&quot;</span>, </div><div class="line">                   c1, c2,</div><div class="line">                   (c1 * 100 / c2) / 100,</div><div class="line">                   (c1 * 100 / c2) % 100));</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line"><span class="preprocessor">#undef STRTEST</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* This tests pj_strcmp(), pj_strcmp2(), pj_strncmp(), pj_strncmp2() */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> strcmp_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line"><span class="preprocessor">#define STR_TEST(res,S1,S2,code)    \</span></div><div class="line"><span class="preprocessor">            do { \</span></div><div class="line"><span class="preprocessor">                s1.ptr=S1; s1.slen=S1?len:0; \</span></div><div class="line"><span class="preprocessor">                s2.ptr=S2; s2.slen=S2?len:0; \</span></div><div class="line"><span class="preprocessor">                if (C(pj_strcmp(&amp;s1,&amp;s2),res)) return code; \</span></div><div class="line"><span class="preprocessor">                if (C(pj_strcmp2(&amp;s1,S2),res)) return code-1; \</span></div><div class="line"><span class="preprocessor">                if (C(pj_strncmp(&amp;s1,&amp;s2,len),res)) return code-2; \</span></div><div class="line"><span class="preprocessor">                if (C(pj_strncmp2(&amp;s1,S2,len),res)) return code-3; \</span></div><div class="line"><span class="preprocessor">            } while (0)</span></div><div class="line"></div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s1, s2;</div><div class="line">    <span class="keywordtype">int</span> len;</div><div class="line">    </div><div class="line">    <span class="comment">/* Test with length == 0 */</span></div><div class="line">    len=0;</div><div class="line">    STR_TEST(0, <span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, -400);</div><div class="line">    STR_TEST(0, SNULL, <span class="stringliteral">&quot;&quot;</span>, -405);</div><div class="line">    STR_TEST(0, <span class="stringliteral">&quot;&quot;</span>, SNULL, -410);</div><div class="line">    STR_TEST(0, SNULL, SNULL, -415);</div><div class="line">    STR_TEST(0, <span class="stringliteral">&quot;hello&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, -420);</div><div class="line">    STR_TEST(0, <span class="stringliteral">&quot;hello&quot;</span>, SNULL, -425);</div><div class="line"></div><div class="line">    <span class="comment">/* Test with length != 0 */</span></div><div class="line">    len = 2;</div><div class="line">    STR_TEST(0, <span class="stringliteral">&quot;12&quot;</span>, <span class="stringliteral">&quot;12&quot;</span>, -430);</div><div class="line">    STR_TEST(1, <span class="stringliteral">&quot;12&quot;</span>, <span class="stringliteral">&quot;1&quot;</span>, -435);</div><div class="line">    STR_TEST(-1, <span class="stringliteral">&quot;1&quot;</span>, <span class="stringliteral">&quot;12&quot;</span>, -440);</div><div class="line">    STR_TEST(-1, SNULL, <span class="stringliteral">&quot;12&quot;</span>, -445);</div><div class="line">    STR_TEST(1, <span class="stringliteral">&quot;12&quot;</span>, SNULL, -450);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line"></div><div class="line"><span class="preprocessor">#undef STR_TEST</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> string_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keyword">const</span> <a class="code" href="structpj__str__t.htm">pj_str_t</a> hello_world = { HELLO_WORLD, HELLO_WORLD_LEN };</div><div class="line">    <span class="keyword">const</span> <a class="code" href="structpj__str__t.htm">pj_str_t</a> just_hello = { JUST_HELLO, JUST_HELLO_LEN };</div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> s1, s2, s3, s4, s5;</div><div class="line">    <span class="keyword">enum</span> { RCOUNT = 10, RLEN = 16 };</div><div class="line">    <a class="code" href="structpj__str__t.htm">pj_str_t</a> random[RCOUNT];</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    <span class="keywordtype">int</span> i;</div><div class="line"></div><div class="line">    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, SNULL, 4096, 0, SNULL);</div><div class="line">    <span class="keywordflow">if</span> (!pool) <span class="keywordflow">return</span> -5;</div><div class="line">    </div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     * pj_str(), pj_strcmp(), pj_stricmp(), pj_strlen(), </span></div><div class="line"><span class="comment">     * pj_strncmp(), pj_strchr() </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    s1 = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(HELLO_WORLD);</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a>(&amp;s1, &amp;hello_world) != 0)</div><div class="line">        <span class="keywordflow">return</span> -10;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#gac6f28fa3462c129b73ca4572f0049be6">pj_stricmp</a>(&amp;s1, &amp;hello_world) != 0)</div><div class="line">        <span class="keywordflow">return</span> -20;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a>(&amp;s1, &amp;just_hello) &lt;= 0)</div><div class="line">        <span class="keywordflow">return</span> -30;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#gac6f28fa3462c129b73ca4572f0049be6">pj_stricmp</a>(&amp;s1, &amp;just_hello) &lt;= 0)</div><div class="line">        <span class="keywordflow">return</span> -40;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#gab8b91334e749e1c4aa6bebec6ec7fc81">pj_strlen</a>(&amp;s1) != strlen(HELLO_WORLD))</div><div class="line">        <span class="keywordflow">return</span> -50;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#gab83273533b1b136a66fb453b905bedf4">pj_strncmp</a>(&amp;s1, &amp;hello_world, 5) != 0)</div><div class="line">        <span class="keywordflow">return</span> -60;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga2e4ec6d2005b66d5c97abde02404c443">pj_strnicmp</a>(&amp;s1, &amp;hello_world, 5) != 0)</div><div class="line">        <span class="keywordflow">return</span> -70;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#gad6e4de8b9359b0b17328fb0a9b8ba6bb">pj_strchr</a>(&amp;s1, HELLO_WORLD[1]) != s1.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>+1)</div><div class="line">        <span class="keywordflow">return</span> -80;</div><div class="line"></div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     * pj_strdup() </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keywordflow">if</span> (!<a class="code" href="group__PJ__PSTR.htm#gaaf333c83193b9bc446259960f093a3ad">pj_strdup</a>(pool, &amp;s2, &amp;s1))</div><div class="line">        <span class="keywordflow">return</span> -100;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a>(&amp;s1, &amp;s2) != 0)</div><div class="line">        <span class="keywordflow">return</span> -110;</div><div class="line">    </div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     * pj_strcpy(), pj_strcat() </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    s3.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a> = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 256);</div><div class="line">    <span class="keywordflow">if</span> (!s3.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>) </div><div class="line">        <span class="keywordflow">return</span> -200;</div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#ga86c2920ae4d2a3444f5b53cb995e18d7">pj_strcpy</a>(&amp;s3, &amp;s2);</div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#ga7851384cbdcf51404c7ef6f43c3a9c47">pj_strcat</a>(&amp;s3, &amp;just_hello);</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga3321b5cee71785a7b450ad29afe0895b">pj_strcmp2</a>(&amp;s3, HELLO_WORLD JUST_HELLO) != 0)</div><div class="line">        <span class="keywordflow">return</span> -210;</div><div class="line"></div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     * pj_strdup2(), pj_strtrim(). </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#ga96cdcaa39650b7f36fd850f53f4ebebf">pj_strdup2</a>(pool, &amp;s4, <span class="stringliteral">&quot; &quot;</span> HELLO_WORLD <span class="stringliteral">&quot;\t &quot;</span>);</div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#ga748d08fdf09faa06cfeea485c01cbacf">pj_strtrim</a>(&amp;s4);</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga3321b5cee71785a7b450ad29afe0895b">pj_strcmp2</a>(&amp;s4, HELLO_WORLD) != 0)</div><div class="line">        <span class="keywordflow">return</span> -250;</div><div class="line"></div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     * pj_utoa() </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    s5.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a> = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, 16);</div><div class="line">    <span class="keywordflow">if</span> (!s5.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>)</div><div class="line">        <span class="keywordflow">return</span> -270;</div><div class="line">    s5.<a class="code" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> = <a class="code" href="group__PJ__PSTR.htm#ga60c21f277b9d2aab493712856972946b">pj_utoa</a>(UL_VALUE, s5.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>);</div><div class="line"></div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     * pj_strtoul() </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga0b12a5cc98e05ff6993aa02436246999">pj_strtoul</a>(&amp;s5) != UL_VALUE)</div><div class="line">        <span class="keywordflow">return</span> -280;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * pj_strtoul2()</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    s5 = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;123456&quot;</span>);</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2</a>(&amp;s5, SNULL, 10);        <span class="comment">/* Crash test */</span></div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2</a>(&amp;s5, &amp;s4, 10) != 123456UL)</div><div class="line">        <span class="keywordflow">return</span> -290;</div><div class="line">    <span class="keywordflow">if</span> (s4.<a class="code" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> != 0)</div><div class="line">        <span class="keywordflow">return</span> -291;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2</a>(&amp;s5, &amp;s4, 16) != 0x123456UL)</div><div class="line">        <span class="keywordflow">return</span> -292;</div><div class="line"></div><div class="line">    s5 = <a class="code" href="group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;0123ABCD&quot;</span>);</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2</a>(&amp;s5, &amp;s4, 10) != 123)</div><div class="line">        <span class="keywordflow">return</span> -293;</div><div class="line">    <span class="keywordflow">if</span> (s4.<a class="code" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> != 4)</div><div class="line">        <span class="keywordflow">return</span> -294;</div><div class="line">    <span class="keywordflow">if</span> (s4.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a> == SNULL || *s4.<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a> != <span class="charliteral">&#39;A&#39;</span>)</div><div class="line">        <span class="keywordflow">return</span> -295;</div><div class="line">    <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga9c8b52cb93c5e002921fd393441b7c66">pj_strtoul2</a>(&amp;s5, &amp;s4, 16) != 0x123ABCDUL)</div><div class="line">        <span class="keywordflow">return</span> -296;</div><div class="line">    <span class="keywordflow">if</span> (s4.<a class="code" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> != 0)</div><div class="line">        <span class="keywordflow">return</span> -297;</div><div class="line"></div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     * pj_create_random_string() </span></div><div class="line"><span class="comment">     * Check that no duplicate strings are returned.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;RCOUNT; ++i) {</div><div class="line">        <span class="keywordtype">int</span> j;</div><div class="line">        </div><div class="line">        random[i].<a class="code" href="structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a> = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, RLEN);</div><div class="line">        <span class="keywordflow">if</span> (!random[i].ptr)</div><div class="line">            <span class="keywordflow">return</span> -320;</div><div class="line"></div><div class="line">        random[i].<a class="code" href="structpj__str__t.htm#a46788480bdb4080083dcc8965811e015">slen</a> = RLEN;</div><div class="line">        <a class="code" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a>(random[i].ptr, RLEN);</div><div class="line"></div><div class="line">        <span class="keywordflow">for</span> (j=0; j&lt;i; ++j) {</div><div class="line">            <span class="keywordflow">if</span> (<a class="code" href="group__PJ__PSTR.htm#ga521ddd312725bf6fa77e91d0dd4aec34">pj_strcmp</a>(&amp;random[i], &amp;random[j])==0)</div><div class="line">                <span class="keywordflow">return</span> -330;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Done. */</span></div><div class="line">    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line"></div><div class="line">    <span class="comment">/* Case sensitive comparison test. */</span></div><div class="line">    i = strcmp_test();</div><div class="line">    <span class="keywordflow">if</span> (i != 0)</div><div class="line">        <span class="keywordflow">return</span> i;</div><div class="line"></div><div class="line">    <span class="comment">/* Caseless comparison test. */</span></div><div class="line">    i = stricmp_test();</div><div class="line">    <span class="keywordflow">if</span> (i != 0)</div><div class="line">        <span class="keywordflow">return</span> i;</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div><div class="line"><span class="comment"> * when this test is disabled. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> dummy_string_test;</div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_STRING_TEST */</span><span class="preprocessor"></span></div><div class="line"></div></div><!-- fragment --> </div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
