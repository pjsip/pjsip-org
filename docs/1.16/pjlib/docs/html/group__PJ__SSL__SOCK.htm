<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Secure socket I/O (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>Secure socket I/O<br/>
<small>
[<a class="el" href="group__PJ__IO.htm">Input/Output</a>]</small>
</h1>  </div>
</div>
<div class="contents">

<p>Secure socket provides security on socket operation using standard security protocols such as SSL and TLS.  
<a href="#_details">More...</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__cert__info.htm">pj_ssl_cert_info</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__sock__cb.htm">pj_ssl_sock_cb</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gace0713defa5446c9455f3cce37453f30">pj_ssl_cert_verify_flag_t</a> { <br/>
&nbsp;&nbsp;<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a2a79e25049a015466a4a07a406e508c5">PJ_SSL_CERT_ESUCCESS</a> =  0, 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30ace898190eceb513e6a722a1ee188f082">PJ_SSL_CERT_EISSUER_NOT_FOUND</a> =  (1 &lt;&lt; 0), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30afc86024f0581e63006f7ca0b430d5521">PJ_SSL_CERT_EUNTRUSTED</a> =  (1 &lt;&lt; 1), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a09cbdc90cf051de0519c942772dc3973">PJ_SSL_CERT_EVALIDITY_PERIOD</a> =  (1 &lt;&lt; 2), 
<br/>
&nbsp;&nbsp;<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a265c913a4dba6d0c6475c1e801e3e27f">PJ_SSL_CERT_EINVALID_FORMAT</a> =  (1 &lt;&lt; 3), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a5a65cf0e17d96926615abf1b527e3b77">PJ_SSL_CERT_EINVALID_PURPOSE</a> =  (1 &lt;&lt; 4), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a1cca5d6fa02c0ff2ab6d9175e769fb6e">PJ_SSL_CERT_EISSUER_MISMATCH</a> =  (1 &lt;&lt; 5), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a6b2f6262dc3e7e9a87ea669f3f8bc6d5">PJ_SSL_CERT_ECRL_FAILURE</a> =  (1 &lt;&lt; 6), 
<br/>
&nbsp;&nbsp;<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a86426f73fd6adcbc3e31e3154a534805">PJ_SSL_CERT_EREVOKED</a> =  (1 &lt;&lt; 7), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30ace7a06ddacf9d6d2ff70afa90e6f4844">PJ_SSL_CERT_ECHAIN_TOO_LONG</a> =  (1 &lt;&lt; 8), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30a9411a9f45095f14f1bc269f40da96fd2">PJ_SSL_CERT_EIDENTITY_NOT_MATCH</a> =  (1 &lt;&lt; 30), 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggace0713defa5446c9455f3cce37453f30abbff1227dbc0d60cb63f2a7d2e5add34">PJ_SSL_CERT_EUNKNOWN</a> =  (1 &lt;&lt; 31)
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><b>pj_ssl_cert_name_type</b> { <br/>
&nbsp;&nbsp;<b>PJ_SSL_CERT_NAME_UNKNOWN</b> =  0, 
<b>PJ_SSL_CERT_NAME_RFC822</b>, 
<b>PJ_SSL_CERT_NAME_DNS</b>, 
<b>PJ_SSL_CERT_NAME_URI</b>, 
<br/>
&nbsp;&nbsp;<b>PJ_SSL_CERT_NAME_IP</b>
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> { <br/>
&nbsp;&nbsp;<b>PJ_TLS_NULL_WITH_NULL_NULL</b> =  0x00000000, 
<b>PJ_TLS_RSA_WITH_NULL_MD5</b> =  0x00000001, 
<b>PJ_TLS_RSA_WITH_NULL_SHA</b> =  0x00000002, 
<b>PJ_TLS_RSA_WITH_NULL_SHA256</b> =  0x0000003B, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_RSA_WITH_RC4_128_MD5</b> =  0x00000004, 
<b>PJ_TLS_RSA_WITH_RC4_128_SHA</b> =  0x00000005, 
<b>PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA</b> =  0x0000000A, 
<b>PJ_TLS_RSA_WITH_AES_128_CBC_SHA</b> =  0x0000002F, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_RSA_WITH_AES_256_CBC_SHA</b> =  0x00000035, 
<b>PJ_TLS_RSA_WITH_AES_128_CBC_SHA256</b> =  0x0000003C, 
<b>PJ_TLS_RSA_WITH_AES_256_CBC_SHA256</b> =  0x0000003D, 
<b>PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA</b> =  0x0000000D, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA</b> =  0x00000010, 
<b>PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA</b> =  0x00000013, 
<b>PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</b> =  0x00000016, 
<b>PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA</b> =  0x00000030, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA</b> =  0x00000031, 
<b>PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA</b> =  0x00000032, 
<b>PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA</b> =  0x00000033, 
<b>PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA</b> =  0x00000036, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA</b> =  0x00000037, 
<b>PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA</b> =  0x00000038, 
<b>PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA</b> =  0x00000039, 
<b>PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256</b> =  0x0000003E, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256</b> =  0x0000003F, 
<b>PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</b> =  0x00000040, 
<b>PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</b> =  0x00000067, 
<b>PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256</b> =  0x00000068, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256</b> =  0x00000069, 
<b>PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</b> =  0x0000006A, 
<b>PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</b> =  0x0000006B, 
<b>PJ_TLS_DH_anon_WITH_RC4_128_MD5</b> =  0x00000018, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA</b> =  0x0000001B, 
<b>PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA</b> =  0x00000034, 
<b>PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA</b> =  0x0000003A, 
<b>PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256</b> =  0x0000006C, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256</b> =  0x0000006D, 
<b>PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5</b> =  0x00000003, 
<b>PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5</b> =  0x00000006, 
<b>PJ_TLS_RSA_WITH_IDEA_CBC_SHA</b> =  0x00000007, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA</b> =  0x00000008, 
<b>PJ_TLS_RSA_WITH_DES_CBC_SHA</b> =  0x00000009, 
<b>PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA</b> =  0x0000000B, 
<b>PJ_TLS_DH_DSS_WITH_DES_CBC_SHA</b> =  0x0000000C, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA</b> =  0x0000000E, 
<b>PJ_TLS_DH_RSA_WITH_DES_CBC_SHA</b> =  0x0000000F, 
<b>PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</b> =  0x00000011, 
<b>PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA</b> =  0x00000012, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</b> =  0x00000014, 
<b>PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA</b> =  0x00000015, 
<b>PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5</b> =  0x00000017, 
<b>PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA</b> =  0x00000019, 
<br/>
&nbsp;&nbsp;<b>PJ_TLS_DH_anon_WITH_DES_CBC_SHA</b> =  0x0000001A, 
<b>PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA</b> =  0x0000001C, 
<b>PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA</b> =  0x0000001D, 
<b>PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA</b> =  0x0000001E, 
<br/>
&nbsp;&nbsp;<b>PJ_SSL_CK_RC4_128_WITH_MD5</b> =  0x00010080, 
<b>PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5</b> =  0x00020080, 
<b>PJ_SSL_CK_RC2_128_CBC_WITH_MD5</b> =  0x00030080, 
<b>PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5</b> =  0x00040080, 
<br/>
&nbsp;&nbsp;<b>PJ_SSL_CK_IDEA_128_CBC_WITH_MD5</b> =  0x00050080, 
<b>PJ_SSL_CK_DES_64_CBC_WITH_MD5</b> =  0x00060040, 
<b>PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5</b> =  0x000700C0
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac9ec96552b4d363c7293b12ac3fa36d8">pj_ssl_sock_proto</a> { <br/>
&nbsp;&nbsp;<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a89cbc44e93a0b87af1112c0739898e94">PJ_SSL_SOCK_PROTO_DEFAULT</a>, 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8ac0e521edb3cfbc206d134192c3618fe9">PJ_SSL_SOCK_PROTO_TLS1</a>, 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8ac36f14413704dffefa07dde6b0355c95">PJ_SSL_SOCK_PROTO_SSL3</a>, 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a657ef230ce923a8e0230bd25eb572c4e">PJ_SSL_SOCK_PROTO_SSL23</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8a94696ce111c70075626b06f0ccd7198c">PJ_SSL_SOCK_PROTO_SSL2</a>, 
<a class="el" href="group__PJ__SSL__SOCK.htm#ggac9ec96552b4d363c7293b12ac3fa36d8aaef6628e7304ff6abaadd9034881eec8">PJ_SSL_SOCK_PROTO_DTLS1</a>
<br/>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga6f41ea4d6dee0960a176e1207ae94e0f">pj_ssl_cert_load_from_files</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *CA_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *cert_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *privkey_file, const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *privkey_pass, <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **p_cert)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga32fda1752ea202a908d56cafc489ffb5">pj_ssl_cert_info_dump</a> (const <a class="el" href="structpj__ssl__cert__info.htm">pj_ssl_cert_info</a> *ci, const char *indent, char *buf, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> buf_size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga833b878a9887ff17df6a242bab9c6f6c">pj_ssl_cert_get_verify_status_strings</a> (<a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> verify_status, const char *error_strings[], unsigned *count)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga19d7f3eb6dcb931761b89d6cdc51a01e">pj_ssl_cipher_get_availables</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> ciphers[], unsigned *cipher_num)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga1476e697e73ff8add8fa4c24ac25a09b">pj_ssl_cipher_is_supported</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> cipher)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac9cb7328a9fefe1025e11a66acc48d41">pj_ssl_cipher_name</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> cipher)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gae245194dee9b69c6e194fb671054582d">pj_ssl_cipher_id</a> (const char *cipher_name)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga7371af9e78093f05575aacdc34993e2c">pj_ssl_sock_param_default</a> (<a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *param)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga754a041bc5466b6606008f698b4e0bc5">pj_ssl_sock_create</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *param, <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> **p_ssock)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga2f97f0cbc876399bf4ff9f80333c7080">pj_ssl_sock_set_certificate</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> *cert)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gad18de000180234c0747418b9f14a6a54">pj_ssl_sock_close</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga3ed3bf286a1c338332619a38fd0512ab">pj_ssl_sock_set_user_data</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, void *user_data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga34df294a003d408b60925a9de4faf491">pj_ssl_sock_get_user_data</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaee1d4ddbd7c680cdd7ef0636900ef5cb">pj_ssl_sock_get_info</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a> *info)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga64967383bdeaab292724a9d45266b715">pj_ssl_sock_start_read</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga7732c1f7fb3c5cc0896ff26cc48bda39">pj_ssl_sock_start_read2</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, void *readbuf[], <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaedae59ede7e40f69449eb8c3405d48d0">pj_ssl_sock_start_recvfrom</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga5b5022402caf4a37573d77835b2b7718">pj_ssl_sock_start_recvfrom2</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, unsigned buff_size, void *readbuf[], <a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga3d4b8b377709aa10a1ca37c05b0f0df0">pj_ssl_sock_send</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structsend__key.htm">send_key</a>, const void *data, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *size, unsigned flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga9cccecf460743235ca1e7d62fdaa5467">pj_ssl_sock_sendto</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *<a class="el" href="structsend__key.htm">send_key</a>, const void *data, <a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *size, unsigned flags, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *addr, int addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#ga9cd4fbf761a6ee07769122085dd04f73">pj_ssl_sock_start_accept</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *local_addr, int addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gac1c3b0ca4ff363a6df2d04434c4b0027">pj_ssl_sock_start_connect</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *localaddr, const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *remaddr, int addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SSL__SOCK.htm#gaca23db39a5e9d270bf89f16e589798d0">pj_ssl_sock_renegotiate</a> (<a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *ssock)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Secure socket provides security on socket operation using standard security protocols such as SSL and TLS. </p>
<p>Secure socket wraps normal socket and applies security features, i.e: privacy and data integrity, on the socket traffic, using standard security protocols such as SSL and TLS.</p>
<p>Secure socket employs active socket operations, which is similar to (and described more detail) in <a class="el" href="group__PJ__ACTIVESOCK.htm">Active socket I/O</a>. </p>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="gac87d6e6b687aa3c7a2019b7b43181524"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cert_t" ref="gac87d6e6b687aa3c7a2019b7b43181524" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Opaque declaration of endpoint certificate or credentials. This may contains certificate, private key, and trusted Certificate Authorities list. </p>

</div>
</div>
<a class="anchor" id="gac6d1b65855cfff8ce1e36f2312c17d29"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_t" ref="gac6d1b65855cfff8ce1e36f2312c17d29" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> <a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This opaque structure describes the secure socket. </p>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="gace0713defa5446c9455f3cce37453f30"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cert_verify_flag_t" ref="gace0713defa5446c9455f3cce37453f30" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#gace0713defa5446c9455f3cce37453f30">pj_ssl_cert_verify_flag_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a2a79e25049a015466a4a07a406e508c5"></a><!-- doxytag: member="PJ_SSL_CERT_ESUCCESS" ref="ggace0713defa5446c9455f3cce37453f30a2a79e25049a015466a4a07a406e508c5" args="" -->PJ_SSL_CERT_ESUCCESS</em>&nbsp;</td><td>
<p>No error in verification. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30ace898190eceb513e6a722a1ee188f082"></a><!-- doxytag: member="PJ_SSL_CERT_EISSUER_NOT_FOUND" ref="ggace0713defa5446c9455f3cce37453f30ace898190eceb513e6a722a1ee188f082" args="" -->PJ_SSL_CERT_EISSUER_NOT_FOUND</em>&nbsp;</td><td>
<p>The issuer certificate cannot be found. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30afc86024f0581e63006f7ca0b430d5521"></a><!-- doxytag: member="PJ_SSL_CERT_EUNTRUSTED" ref="ggace0713defa5446c9455f3cce37453f30afc86024f0581e63006f7ca0b430d5521" args="" -->PJ_SSL_CERT_EUNTRUSTED</em>&nbsp;</td><td>
<p>The certificate is untrusted. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a09cbdc90cf051de0519c942772dc3973"></a><!-- doxytag: member="PJ_SSL_CERT_EVALIDITY_PERIOD" ref="ggace0713defa5446c9455f3cce37453f30a09cbdc90cf051de0519c942772dc3973" args="" -->PJ_SSL_CERT_EVALIDITY_PERIOD</em>&nbsp;</td><td>
<p>The certificate has expired or not yet valid. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a265c913a4dba6d0c6475c1e801e3e27f"></a><!-- doxytag: member="PJ_SSL_CERT_EINVALID_FORMAT" ref="ggace0713defa5446c9455f3cce37453f30a265c913a4dba6d0c6475c1e801e3e27f" args="" -->PJ_SSL_CERT_EINVALID_FORMAT</em>&nbsp;</td><td>
<p>One or more fields of the certificate cannot be decoded due to invalid format. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a5a65cf0e17d96926615abf1b527e3b77"></a><!-- doxytag: member="PJ_SSL_CERT_EINVALID_PURPOSE" ref="ggace0713defa5446c9455f3cce37453f30a5a65cf0e17d96926615abf1b527e3b77" args="" -->PJ_SSL_CERT_EINVALID_PURPOSE</em>&nbsp;</td><td>
<p>The certificate cannot be used for the specified purpose. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a1cca5d6fa02c0ff2ab6d9175e769fb6e"></a><!-- doxytag: member="PJ_SSL_CERT_EISSUER_MISMATCH" ref="ggace0713defa5446c9455f3cce37453f30a1cca5d6fa02c0ff2ab6d9175e769fb6e" args="" -->PJ_SSL_CERT_EISSUER_MISMATCH</em>&nbsp;</td><td>
<p>The issuer info in the certificate does not match to the (candidate) issuer certificate, e.g: issuer name not match to subject name of (candidate) issuer certificate. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a6b2f6262dc3e7e9a87ea669f3f8bc6d5"></a><!-- doxytag: member="PJ_SSL_CERT_ECRL_FAILURE" ref="ggace0713defa5446c9455f3cce37453f30a6b2f6262dc3e7e9a87ea669f3f8bc6d5" args="" -->PJ_SSL_CERT_ECRL_FAILURE</em>&nbsp;</td><td>
<p>The CRL certificate cannot be found or cannot be read properly. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a86426f73fd6adcbc3e31e3154a534805"></a><!-- doxytag: member="PJ_SSL_CERT_EREVOKED" ref="ggace0713defa5446c9455f3cce37453f30a86426f73fd6adcbc3e31e3154a534805" args="" -->PJ_SSL_CERT_EREVOKED</em>&nbsp;</td><td>
<p>The certificate has been revoked. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30ace7a06ddacf9d6d2ff70afa90e6f4844"></a><!-- doxytag: member="PJ_SSL_CERT_ECHAIN_TOO_LONG" ref="ggace0713defa5446c9455f3cce37453f30ace7a06ddacf9d6d2ff70afa90e6f4844" args="" -->PJ_SSL_CERT_ECHAIN_TOO_LONG</em>&nbsp;</td><td>
<p>The certificate chain length is too long. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30a9411a9f45095f14f1bc269f40da96fd2"></a><!-- doxytag: member="PJ_SSL_CERT_EIDENTITY_NOT_MATCH" ref="ggace0713defa5446c9455f3cce37453f30a9411a9f45095f14f1bc269f40da96fd2" args="" -->PJ_SSL_CERT_EIDENTITY_NOT_MATCH</em>&nbsp;</td><td>
<p>The server identity does not match to any identities specified in the certificate, e.g: subjectAltName extension, subject common name. This flag will only be set by application as SSL socket does not perform server identity verification. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace0713defa5446c9455f3cce37453f30abbff1227dbc0d60cb63f2a7d2e5add34"></a><!-- doxytag: member="PJ_SSL_CERT_EUNKNOWN" ref="ggace0713defa5446c9455f3cce37453f30abbff1227dbc0d60cb63f2a7d2e5add34" args="" -->PJ_SSL_CERT_EUNKNOWN</em>&nbsp;</td><td>
<p>Unknown verification error. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="ga79c116fefb7b7618fddb1b790c58e078"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cipher" ref="ga79c116fefb7b7618fddb1b790c58e078" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Cipher suites enumeration. </p>

</div>
</div>
<a class="anchor" id="gac9ec96552b4d363c7293b12ac3fa36d8"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_proto" ref="gac9ec96552b4d363c7293b12ac3fa36d8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__SSL__SOCK.htm#gac9ec96552b4d363c7293b12ac3fa36d8">pj_ssl_sock_proto</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enumeration of secure socket protocol types. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ggac9ec96552b4d363c7293b12ac3fa36d8a89cbc44e93a0b87af1112c0739898e94"></a><!-- doxytag: member="PJ_SSL_SOCK_PROTO_DEFAULT" ref="ggac9ec96552b4d363c7293b12ac3fa36d8a89cbc44e93a0b87af1112c0739898e94" args="" -->PJ_SSL_SOCK_PROTO_DEFAULT</em>&nbsp;</td><td>
<p>Default protocol of backend. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggac9ec96552b4d363c7293b12ac3fa36d8ac0e521edb3cfbc206d134192c3618fe9"></a><!-- doxytag: member="PJ_SSL_SOCK_PROTO_TLS1" ref="ggac9ec96552b4d363c7293b12ac3fa36d8ac0e521edb3cfbc206d134192c3618fe9" args="" -->PJ_SSL_SOCK_PROTO_TLS1</em>&nbsp;</td><td>
<p>TLSv1.0 protocol. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggac9ec96552b4d363c7293b12ac3fa36d8ac36f14413704dffefa07dde6b0355c95"></a><!-- doxytag: member="PJ_SSL_SOCK_PROTO_SSL3" ref="ggac9ec96552b4d363c7293b12ac3fa36d8ac36f14413704dffefa07dde6b0355c95" args="" -->PJ_SSL_SOCK_PROTO_SSL3</em>&nbsp;</td><td>
<p>SSLv3.0 protocol. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggac9ec96552b4d363c7293b12ac3fa36d8a657ef230ce923a8e0230bd25eb572c4e"></a><!-- doxytag: member="PJ_SSL_SOCK_PROTO_SSL23" ref="ggac9ec96552b4d363c7293b12ac3fa36d8a657ef230ce923a8e0230bd25eb572c4e" args="" -->PJ_SSL_SOCK_PROTO_SSL23</em>&nbsp;</td><td>
<p>SSLv3.0 but can roll back to SSLv2.0. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggac9ec96552b4d363c7293b12ac3fa36d8a94696ce111c70075626b06f0ccd7198c"></a><!-- doxytag: member="PJ_SSL_SOCK_PROTO_SSL2" ref="ggac9ec96552b4d363c7293b12ac3fa36d8a94696ce111c70075626b06f0ccd7198c" args="" -->PJ_SSL_SOCK_PROTO_SSL2</em>&nbsp;</td><td>
<p>SSLv2.0 protocol. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggac9ec96552b4d363c7293b12ac3fa36d8aaef6628e7304ff6abaadd9034881eec8"></a><!-- doxytag: member="PJ_SSL_SOCK_PROTO_DTLS1" ref="ggac9ec96552b4d363c7293b12ac3fa36d8aaef6628e7304ff6abaadd9034881eec8" args="" -->PJ_SSL_SOCK_PROTO_DTLS1</em>&nbsp;</td><td>
<p>DTLSv1.0 protocol. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga833b878a9887ff17df6a242bab9c6f6c"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cert_get_verify_status_strings" ref="ga833b878a9887ff17df6a242bab9c6f6c" args="(pj_uint32_t verify_status, const char *error_strings[], unsigned *count)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cert_get_verify_status_strings </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>verify_status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>error_strings</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned *&nbsp;</td>
          <td class="paramname"> <em>count</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get SSL certificate verification error messages from verification status.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>verify_status</em>&nbsp;</td><td>The SSL certificate verification status. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>error_strings</em>&nbsp;</td><td>Array of strings to receive the verification error messages. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>count</em>&nbsp;</td><td>On input it specifies maximum error messages should be retrieved. On output it specifies the number of error messages retrieved.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a class="anchor" id="ga32fda1752ea202a908d56cafc489ffb5"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cert_info_dump" ref="ga32fda1752ea202a908d56cafc489ffb5" args="(const pj_ssl_cert_info *ci, const char *indent, char *buf, pj_size_t buf_size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> pj_ssl_cert_info_dump </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__ssl__cert__info.htm">pj_ssl_cert_info</a> *&nbsp;</td>
          <td class="paramname"> <em>ci</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>indent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>buf_size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Dump SSL certificate info.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ci</em>&nbsp;</td><td>The certificate info. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>indent</em>&nbsp;</td><td>String for left indentation. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>The buffer where certificate info will be printed on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buf_size</em>&nbsp;</td><td>The buffer size.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The length of the dump result, or -1 when buffer size is not sufficient. </dd></dl>

</div>
</div>
<a class="anchor" id="ga6f41ea4d6dee0960a176e1207ae94e0f"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cert_load_from_files" ref="ga6f41ea4d6dee0960a176e1207ae94e0f" args="(pj_pool_t *pool, const pj_str_t *CA_file, const pj_str_t *cert_file, const pj_str_t *privkey_file, const pj_str_t *privkey_pass, pj_ssl_cert_t **p_cert)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cert_load_from_files </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>CA_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>cert_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>privkey_file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__str__t.htm">pj_str_t</a> *&nbsp;</td>
          <td class="paramname"> <em>privkey_pass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> **&nbsp;</td>
          <td class="paramname"> <em>p_cert</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create credential from files.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>CA_file</em>&nbsp;</td><td>The file of trusted CA list. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>cert_file</em>&nbsp;</td><td>The file of certificate. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>privkey_file</em>&nbsp;</td><td>The file of private key. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>privkey_pass</em>&nbsp;</td><td>The password of private key, if any. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p_cert</em>&nbsp;</td><td>Pointer to credential instance to be created.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a class="anchor" id="ga19d7f3eb6dcb931761b89d6cdc51a01e"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cipher_get_availables" ref="ga19d7f3eb6dcb931761b89d6cdc51a01e" args="(pj_ssl_cipher ciphers[], unsigned *cipher_num)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_cipher_get_availables </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&nbsp;</td>
          <td class="paramname"> <em>ciphers</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned *&nbsp;</td>
          <td class="paramname"> <em>cipher_num</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get cipher list supported by SSL/TLS backend.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ciphers</em>&nbsp;</td><td>The ciphers buffer to receive cipher list. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>cipher_num</em>&nbsp;</td><td>Maximum number of ciphers to be received.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a class="anchor" id="gae245194dee9b69c6e194fb671054582d"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cipher_id" ref="gae245194dee9b69c6e194fb671054582d" args="(const char *cipher_name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a> pj_ssl_cipher_id </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>cipher_name</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get cipher ID from cipher name string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>cipher_name</em>&nbsp;</td><td>The cipher name string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The cipher ID or PJ_TLS_UNKNOWN_CIPHER if the cipher name string is not recognized/supported. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1476e697e73ff8add8fa4c24ac25a09b"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cipher_is_supported" ref="ga1476e697e73ff8add8fa4c24ac25a09b" args="(pj_ssl_cipher cipher)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pj_ssl_cipher_is_supported </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&nbsp;</td>
          <td class="paramname"> <em>cipher</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Check if the specified cipher is supported by SSL/TLS backend.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>cipher</em>&nbsp;</td><td>The cipher.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_TRUE when supported. </dd></dl>

</div>
</div>
<a class="anchor" id="gac9cb7328a9fefe1025e11a66acc48d41"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_cipher_name" ref="gac9cb7328a9fefe1025e11a66acc48d41" args="(pj_ssl_cipher cipher)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* pj_ssl_cipher_name </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#ga79c116fefb7b7618fddb1b790c58e078">pj_ssl_cipher</a>&nbsp;</td>
          <td class="paramname"> <em>cipher</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get cipher name string.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>cipher</em>&nbsp;</td><td>The cipher.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The cipher name or NULL if cipher is not recognized/ supported. </dd></dl>

</div>
</div>
<a class="anchor" id="gad18de000180234c0747418b9f14a6a54"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_close" ref="gad18de000180234c0747418b9f14a6a54" args="(pj_ssl_sock_t *ssock)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_close </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Close and destroy the secure socket.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga754a041bc5466b6606008f698b4e0bc5"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_create" ref="ga754a041bc5466b6606008f698b4e0bc5" args="(pj_pool_t *pool, const pj_ssl_sock_param *param, pj_ssl_sock_t **p_ssock)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> **&nbsp;</td>
          <td class="paramname"> <em>p_ssock</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create secure socket instance.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool for allocating secure socket instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>param</em>&nbsp;</td><td>The secure socket parameter, see <a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a>. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p_ssock</em>&nbsp;</td><td>Pointer to secure socket instance to be created.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS when successful. </dd></dl>

</div>
</div>
<a class="anchor" id="gaee1d4ddbd7c680cdd7ef0636900ef5cb"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_get_info" ref="gaee1d4ddbd7c680cdd7ef0636900ef5cb" args="(pj_ssl_sock_t *ssock, pj_ssl_sock_info *info)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_get_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a> *&nbsp;</td>
          <td class="paramname"> <em>info</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Retrieve the local address and port used by specified secure socket.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>info</em>&nbsp;</td><td>The info buffer to be set, see <a class="el" href="structpj__ssl__sock__info.htm">pj_ssl_sock_info</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on successful. </dd></dl>

</div>
</div>
<a class="anchor" id="ga34df294a003d408b60925a9de4faf491"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_get_user_data" ref="ga34df294a003d408b60925a9de4faf491" args="(pj_ssl_sock_t *ssock)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* pj_ssl_sock_get_user_data </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Retrieve the user data previously associated with this secure socket.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The user data. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7371af9e78093f05575aacdc34993e2c"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_param_default" ref="ga7371af9e78093f05575aacdc34993e2c" args="(pj_ssl_sock_param *param)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pj_ssl_sock_param_default </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__ssl__sock__param.htm">pj_ssl_sock_param</a> *&nbsp;</td>
          <td class="paramname"> <em>param</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Initialize the secure socket parameters for its creation with the default values.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>param</em>&nbsp;</td><td>The parameter to be initialized. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaca23db39a5e9d270bf89f16e589798d0"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_renegotiate" ref="gaca23db39a5e9d270bf89f16e589798d0" args="(pj_ssl_sock_t *ssock)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_renegotiate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Starts SSL/TLS renegotiation over an already established SSL connection for this socket. This operation is performed transparently, no callback will be called once the renegotiation completed successfully. However, when the renegotiation fails, the connection will be closed and callback <em>on_data_read()</em> will be invoked with non-PJ_SUCCESS status code.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if renegotiation is completed immediately, or PJ_EPENDING if renegotiation has been started and waiting for completion, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3d4b8b377709aa10a1ca37c05b0f0df0"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_send" ref="ga3d4b8b377709aa10a1ca37c05b0f0df0" args="(pj_ssl_sock_t *ssock, pj_ioqueue_op_key_t *send_key, const void *data, pj_ssize_t *size, unsigned flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_send </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *&nbsp;</td>
          <td class="paramname"> <em>send_key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Send data using the socket.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="structsend__key.htm">send_key</a></em>&nbsp;</td><td>The operation key to send the data, which is useful if application wants to submit multiple pending send operations and want to track which exact data has been sent in the <em>on_data_sent()</em> callback. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>The data to be sent. This data must remain valid until the data has been sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The size of the data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if data has been sent immediately, or PJ_EPENDING if data cannot be sent immediately or PJ_ENOMEM when sending buffer could not handle all queued data, see <em>send_buffer_size</em>. The callback <em>on_data_sent()</em> will be called when data is actually sent. Any other return value indicates error condition. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9cccecf460743235ca1e7d62fdaa5467"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_sendto" ref="ga9cccecf460743235ca1e7d62fdaa5467" args="(pj_ssl_sock_t *ssock, pj_ioqueue_op_key_t *send_key, const void *data, pj_ssize_t *size, unsigned flags, const pj_sockaddr_t *addr, int addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_sendto </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *&nbsp;</td>
          <td class="paramname"> <em>send_key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> *&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&nbsp;</td>
          <td class="paramname"> <em>addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>addr_len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Send datagram using the socket.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="structsend__key.htm">send_key</a></em>&nbsp;</td><td>The operation key to send the data, which is useful if application wants to submit multiple pending send operations and want to track which exact data has been sent in the <em>on_data_sent()</em> callback. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>The data to be sent. This data must remain valid until the data has been sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The size of the data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send()</a>. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>addr</em>&nbsp;</td><td>The destination address. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>addr_len</em>&nbsp;</td><td>Length of buffer containing destination address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if data has been sent immediately, or PJ_EPENDING if data cannot be sent immediately. In this case the <em>on_data_sent()</em> callback will be called when data is actually sent. Any other return value indicates error condition. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2f97f0cbc876399bf4ff9f80333c7080"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_set_certificate" ref="ga2f97f0cbc876399bf4ff9f80333c7080" args="(pj_ssl_sock_t *ssock, pj_pool_t *pool, const pj_ssl_cert_t *cert)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_set_certificate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a> *&nbsp;</td>
          <td class="paramname"> <em>cert</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set secure socket certificate or credentials. Credentials may include certificate, private key and trusted Certification Authorities list. Normally, server socket must provide certificate (and private key). Socket client may also need to provide certificate in case requested by the server.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket instance. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>cert</em>&nbsp;</td><td>The endpoint certificate/credentials, see <a class="el" href="group__PJ__SSL__SOCK.htm#gac87d6e6b687aa3c7a2019b7b43181524">pj_ssl_cert_t</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3ed3bf286a1c338332619a38fd0512ab"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_set_user_data" ref="ga3ed3bf286a1c338332619a38fd0512ab" args="(pj_ssl_sock_t *ssock, void *user_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_set_user_data </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>user_data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Associate arbitrary data with the secure socket. Application may inspect this data in the callbacks and associate it with higher level processing.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>user_data</em>&nbsp;</td><td>The user data to be associated with the secure socket.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9cd4fbf761a6ee07769122085dd04f73"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_start_accept" ref="ga9cd4fbf761a6ee07769122085dd04f73" args="(pj_ssl_sock_t *ssock, pj_pool_t *pool, const pj_sockaddr_t *local_addr, int addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_accept </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&nbsp;</td>
          <td class="paramname"> <em>local_addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>addr_len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Starts asynchronous socket accept() operations on this secure socket. This function will issue <em>async_cnt</em> number of asynchronous <em>accept()</em> operations to the socket and returns back to caller. Incoming connection on the socket will be reported back to application via the <em>on_accept_complete()</em> callback.</p>
<p>Application only needs to call this function once to initiate accept() operations. Further accept() operations will be done automatically by the secure socket when <em>on_accept_complete()</em> callback returns non-zero.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool used to allocate some internal data for the operation. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>localaddr</em>&nbsp;</td><td>Local address to bind on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>addr_len</em>&nbsp;</td><td>Length of buffer containing local address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gac1c3b0ca4ff363a6df2d04434c4b0027"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_start_connect" ref="gac1c3b0ca4ff363a6df2d04434c4b0027" args="(pj_ssl_sock_t *ssock, pj_pool_t *pool, const pj_sockaddr_t *localaddr, const pj_sockaddr_t *remaddr, int addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_connect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&nbsp;</td>
          <td class="paramname"> <em>localaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__PJ__BASIC.htm#gab18aea853290263f8563e171cde31514">pj_sockaddr_t</a> *&nbsp;</td>
          <td class="paramname"> <em>remaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>addr_len</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Starts asynchronous socket connect() operation and SSL/TLS handshaking for this socket. Once the connection is done (either successfully or not), the <em>on_connect_complete()</em> callback will be called.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool to allocate some internal data for the operation. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>localaddr</em>&nbsp;</td><td>Local address. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>remaddr</em>&nbsp;</td><td>Remote address. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>addr_len</em>&nbsp;</td><td>Length of buffer containing above addresses.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if connection can be established immediately or PJ_EPENDING if connection cannot be established immediately. In this case the <em>on_connect_complete()</em> callback will be called when connection is complete. Any other return value indicates error condition. </dd></dl>

</div>
</div>
<a class="anchor" id="ga64967383bdeaab292724a9d45266b715"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_start_read" ref="ga64967383bdeaab292724a9d45266b715" args="(pj_ssl_sock_t *ssock, pj_pool_t *pool, unsigned buff_size, pj_uint32_t flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_read </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Starts read operation on this secure socket. This function will create <em>async_cnt</em> number of buffers (the <em>async_cnt</em> parameter was given in <em><a class="el" href="group__PJ__SSL__SOCK.htm#ga754a041bc5466b6606008f698b4e0bc5">pj_ssl_sock_create()</a></em> function) where each buffer is <em>buff_size</em> long. The buffers are allocated from the specified <em>pool</em>. Once the buffers are created, it then issues <em>async_cnt</em> number of asynchronous <em>recv()</em> operations to the socket and returns back to caller. Incoming data on the socket will be reported back to application via the <em>on_data_read()</em> callback.</p>
<p>Application only needs to call this function once to initiate read operations. Further read operations will be done automatically by the secure socket when <em>on_data_read()</em> callback returns non-zero.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buff_size</em>&nbsp;</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7732c1f7fb3c5cc0896ff26cc48bda39"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_start_read2" ref="ga7732c1f7fb3c5cc0896ff26cc48bda39" args="(pj_ssl_sock_t *ssock, pj_pool_t *pool, unsigned buff_size, void *readbuf[], pj_uint32_t flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_read2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>readbuf</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Same as <a class="el" href="group__PJ__SSL__SOCK.htm#ga64967383bdeaab292724a9d45266b715">pj_ssl_sock_start_read()</a>, except that the application supplies the buffers for the read operation so that the acive socket does not have to allocate the buffers.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buff_size</em>&nbsp;</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>readbuf</em>&nbsp;</td><td>Array of packet buffers, each has buff_size size. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaedae59ede7e40f69449eb8c3405d48d0"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_start_recvfrom" ref="gaedae59ede7e40f69449eb8c3405d48d0" args="(pj_ssl_sock_t *ssock, pj_pool_t *pool, unsigned buff_size, pj_uint32_t flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_recvfrom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Same as <a class="el" href="group__PJ__SSL__SOCK.htm#ga64967383bdeaab292724a9d45266b715">pj_ssl_sock_start_read()</a>, except that this function is used only for datagram sockets, and it will trigger <em>on_data_recvfrom()</em> callback instead.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buff_size</em>&nbsp;</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5b5022402caf4a37573d77835b2b7718"></a><!-- doxytag: member="ssl_sock.h::pj_ssl_sock_start_recvfrom2" ref="ga5b5022402caf4a37573d77835b2b7718" args="(pj_ssl_sock_t *ssock, pj_pool_t *pool, unsigned buff_size, void *readbuf[], pj_uint32_t flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_ssl_sock_start_recvfrom2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__SSL__SOCK.htm#gac6d1b65855cfff8ce1e36f2312c17d29">pj_ssl_sock_t</a> *&nbsp;</td>
          <td class="paramname"> <em>ssock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>buff_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>readbuf</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Same as <a class="el" href="group__PJ__SSL__SOCK.htm#gaedae59ede7e40f69449eb8c3405d48d0">pj_ssl_sock_start_recvfrom()</a> except that the recvfrom() operation takes the buffer from the argument rather than creating new ones.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ssock</em>&nbsp;</td><td>The secure socket. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>Pool used to allocate buffers for incoming data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>buff_size</em>&nbsp;</td><td>The size of each buffer, in bytes. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>readbuf</em>&nbsp;</td><td>Array of packet buffers, each has buff_size size. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Flags to be given to <a class="el" href="group__PJ__IOQUEUE.htm#ga374d409596460c721e6c185e4a13f25d">pj_ioqueue_recvfrom()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if the operation has been successful, or the appropriate error code on failure. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
