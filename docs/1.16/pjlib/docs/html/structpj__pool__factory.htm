<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: pj_pool_factory Struct Reference (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="functions.htm"><span>Data&nbsp;Fields</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<h1>pj_pool_factory Struct Reference<br/>
<small>
[<a class="el" href="group__PJ__POOL__FACTORY.htm">Pool Factory and Policy</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="pj_pool_factory" --><table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__pool__factory__policy.htm">pj_pool_factory_policy</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__pool__factory.htm#a767d5e5bd2bf77fa6d10ef79b34e8e29">policy</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__pool__factory.htm#a40b56aed69ae485cd954649fe6ad3648">create_pool</a> )(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, const char *name, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> initial_size, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> increment_size, <a class="el" href="group__PJ__POOL.htm#gabffd362d92627d62c4498b7efe0ae62a">pj_pool_callback</a> *callback)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__pool__factory.htm#aa0129e28377d50ff9cf950b5215d003b">release_pool</a> )(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__pool__factory.htm#ac21dccb7cf8df7bcd730c84c09f48f21">dump_status</a> )(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> detail)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__pool__factory.htm#ae4cdbe472198f8d3f18243115ad2079c">on_block_alloc</a> )(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__pool__factory.htm#acf615aa07dacd92c907084d480f76a65">on_block_free</a> )(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2e4ec9690707de7689e7254e234d920e"></a><!-- doxytag: member="pj_pool_factory::dummy" ref="a2e4ec9690707de7689e7254e234d920e" args="" -->
int&nbsp;</td><td class="memItemRight" valign="bottom"><b>dummy</b></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>This structure contains the declaration for pool factory interface.</p>
<p>Forward declaration for memory pool factory. </p>
<hr/><h2>Field Documentation</h2>
<a class="anchor" id="a40b56aed69ae485cd954649fe6ad3648"></a><!-- doxytag: member="pj_pool_factory::create_pool" ref="a40b56aed69ae485cd954649fe6ad3648" args=")(pj_pool_factory *factory, const char *name, pj_size_t initial_size, pj_size_t increment_size, pj_pool_callback *callback)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a>*(* <a class="el" href="structpj__pool__factory.htm#a40b56aed69ae485cd954649fe6ad3648">pj_pool_factory::create_pool</a>)(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, const char *name, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> initial_size, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> increment_size, <a class="el" href="group__PJ__POOL.htm#gabffd362d92627d62c4498b7efe0ae62a">pj_pool_callback</a> *callback)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a new pool from the pool factory.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factory</em>&nbsp;</td><td>The pool factory. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>the name to be assigned to the pool. The name should not be longer than PJ_MAX_OBJ_NAME (32 chars), or otherwise it will be truncated. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>initial_size</em>&nbsp;</td><td>the size of initial memory blocks taken by the pool. Note that the pool will take 68+20 bytes for administrative area from this block. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>increment_size</em>&nbsp;</td><td>the size of each additional blocks to be allocated when the pool is running out of memory. If user requests memory which is larger than this size, then an error occurs. Note that each time a pool allocates additional block, it needs 20 bytes (equal to sizeof(pj_pool_block)) to store some administrative info. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>callback</em>&nbsp;</td><td>Cllback to be called when error occurs in the pool. Note that when an error occurs during pool creation, the callback itself is not called. Instead, NULL will be returned.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the memory pool, or NULL. </dd></dl>

</div>
</div>
<a class="anchor" id="ac21dccb7cf8df7bcd730c84c09f48f21"></a><!-- doxytag: member="pj_pool_factory::dump_status" ref="ac21dccb7cf8df7bcd730c84c09f48f21" args=")(pj_pool_factory *factory, pj_bool_t detail)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpj__pool__factory.htm#ac21dccb7cf8df7bcd730c84c09f48f21">pj_pool_factory::dump_status</a>)(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> detail)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Dump pool status to log.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factory</em>&nbsp;</td><td>The pool factory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae4cdbe472198f8d3f18243115ad2079c"></a><!-- doxytag: member="pj_pool_factory::on_block_alloc" ref="ae4cdbe472198f8d3f18243115ad2079c" args=")(pj_pool_factory *factory, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>(* <a class="el" href="structpj__pool__factory.htm#ae4cdbe472198f8d3f18243115ad2079c">pj_pool_factory::on_block_alloc</a>)(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This is optional callback to be called by allocation policy when it allocates a new memory block. The factory may use this callback for example to keep track of the total number of memory blocks currently allocated by applications.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factory</em>&nbsp;</td><td>The pool factory. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Size requested by application.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>MUST return PJ_TRUE, otherwise the block allocation is cancelled. </dd></dl>

</div>
</div>
<a class="anchor" id="acf615aa07dacd92c907084d480f76a65"></a><!-- doxytag: member="pj_pool_factory::on_block_free" ref="acf615aa07dacd92c907084d480f76a65" args=")(pj_pool_factory *factory, pj_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpj__pool__factory.htm#acf615aa07dacd92c907084d480f76a65">pj_pool_factory::on_block_free</a>)(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> size)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This is optional callback to be called by allocation policy when it frees memory block. The factory may use this callback for example to keep track of the total number of memory blocks currently allocated by applications.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factory</em>&nbsp;</td><td>The pool factory. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Size freed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a767d5e5bd2bf77fa6d10ef79b34e8e29"></a><!-- doxytag: member="pj_pool_factory::policy" ref="a767d5e5bd2bf77fa6d10ef79b34e8e29" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpj__pool__factory__policy.htm">pj_pool_factory_policy</a> <a class="el" href="structpj__pool__factory.htm#a767d5e5bd2bf77fa6d10ef79b34e8e29">pj_pool_factory::policy</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Memory pool policy. </p>

</div>
</div>
<a class="anchor" id="aa0129e28377d50ff9cf950b5215d003b"></a><!-- doxytag: member="pj_pool_factory::release_pool" ref="aa0129e28377d50ff9cf950b5215d003b" args=")(pj_pool_factory *factory, pj_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpj__pool__factory.htm#aa0129e28377d50ff9cf950b5215d003b">pj_pool_factory::release_pool</a>)(<a class="el" href="structpj__pool__factory.htm">pj_pool_factory</a> *factory, <a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Release the pool to the pool factory.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factory</em>&nbsp;</td><td>The pool factory. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The pool to be released. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li><a class="el" href="pool_8h_source.htm">pool.h</a></li>
<li><a class="el" href="pool__alt_8h_source.htm">pool_alt.h</a></li>
</ul>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
