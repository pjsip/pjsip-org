<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Welcome to PJLIB! (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Welcome to PJLIB! </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h1><a class="anchor" id="intro_sec"></a>
What is PJLIB</h1>
<p>PJLIB is an Open Source, small footprint framework library written in C for making scalable applications. Because of its small footprint, it can be used in embedded applications (we hope so!), but yet the library is also aimed for facilitating the creation of high performance protocol stacks.</p>
<p>PJLIB is released under GPL terms.</p>
<h1><a class="anchor" id="download_sec"></a>
Download</h1>
<p>PJLIB and all documentation can be downloaded from <a href="http://www.pjsip.org">http://www.pjsip.org</a>.</p>
<h1><a class="anchor" id="how_to_use_sec"></a>
About This Documentation</h1>
<p>This document is generated directly from PJLIB source file using <em>doxygen</em> (<a href="http://www.doxygen.org">http://www.doxygen.org</a>). Doxygen is a great (and free!) tools for generating such documentation.</p>
<h2><a class="anchor" id="find_samples_subsec"></a>
How to Read This Document</h2>
<p>This documentation is laid out more to be a reference guide instead of tutorial, therefore first time users may find it difficult to grasp PJLIB by reading this document alone.</p>
<p>However, we've tried our best to make this document easy to follow. For first time users, we would suggest that you follow these steps when reading this documentation:</p>
<ul>
<li>continue reading this introduction chapter. At the end of this chapter, you'll find section called <a class="el" href="index.htm#pjlib_fundamentals_sec">Principles in Using PJLIB</a> which should guide you to understand basic things about PJLIB.</li>
<li>find information about specific features that you want to use in PJLIB. Use the <b>Module Index</b> to find out about all features in PJLIB (if you're browsing the HTML documentation, click on the <em>Module</em> link on top of the page, or if you're reading the PDF documentation, click on <em>Module</em> <em>Documentation</em> on the navigation pane on the left).</li>
</ul>
<h2><a class="anchor" id="doc_organize_sec"></a>
How To's</h2>
<p>Please find below links to specific tasks that you probably want to do:</p>
<ul>
<li><b>How to Build PJLIB</b> <br />
 Please refer to <a class="el" href="pjlib_build_sys_pg.htm">Building, and Installing PJLIB</a> page for more information.</li>
<li><b>How to Use PJLIB in My Application</b> <br />
 Please refer to <a class="el" href="index.htm#configure_app_sec">Configuring Application to use PJLIB</a> for more information.</li>
<li><b>How to Port PJLIB</b> <br />
 Please refer to <a class="el" href="porting_pjlib_pg.htm">Porting PJLIB</a> page.</li>
<li><b>Where to Read Samples Documentation</b> <br />
 Most of the modules provide link to the corresponding sample file. Alternatively, to get the list of all examples, you can click on <b>Related Pages</b> on the top of HTML document or on <b>PJLIB Page Documentation</b> on navigation pane of your PDF reader.</li>
<li><b>How to Submit Code to PJLIB Project</b> <br />
 Please read <a class="el" href="pjlib_coding_convention_page.htm">Coding Convention</a> before submitting your code. Send your code as patch against current Subversion tree to the appropriate mailing list.</li>
</ul>
<h1><a class="anchor" id="features_sec"></a>
Features</h1>
<h2><a class="anchor" id="open_source_feat"></a>
It's Open Source!</h2>
<p>PJLIB is currently released on GPL license, but other arrangements can be made with the author.</p>
<h2><a class="anchor" id="extreme_portable_feat"></a>
Extreme Portability</h2>
<p>PJLIB is designed to be extremely portable. It can run on any kind of processors (16-bit, 32-bit, or 64-bit, big or little endian, single or multi-processors) and operating systems. Floating point or no floating point. Multi-threading or not. It can even run in environment where no ANSI LIBC is available.</p>
<p>Currently PJLIB is known to run on these platforms:</p><ul>
<li>Win32/x86 (Win95/98/ME, NT/2000/XP/2003, mingw).</li>
<li>arm, WinCE and Windows Mobile.</li>
<li>Linux/x86, (user mode and as <b>kernel module</b>(!)).</li>
<li>Linux/alpha</li>
<li>Solaris/ultra.</li>
<li>MacOS X/powerpc</li>
<li>RTEMS (x86 and powerpc).</li>
</ul>
<p>And efforts is under way to port PJLIB on:</p><ul>
<li>Symbian OS</li>
</ul>
<h2><a class="anchor" id="small_size_feat"></a>
Small in Size</h2>
<p>One of the primary objectives is to have library that is small in size for typical embedded applications. As a rough guidance, we aim to keep the library size below 100KB for it to be considered as small. As the result, most of the functionalities in the library can be tailored to meet the requirements; user can enable/disable specific functionalities to get the desired size/performance/functionality balance.</p>
<p>For more info, please see <a class="el" href="group__pj__config.htm">Build Configuration</a>.</p>
<h2><a class="anchor" id="big_perform_feat"></a>
Big in Performance</h2>
<p>Almost everything in PJLIB is designed to achieve the highest possible performance out of the target platform.</p>
<h2><a class="anchor" id="no_dyn_mem"></a>
No Dynamic Memory Allocations</h2>
<p>The central idea of PJLIB is that for applications to run as fast as it can, it should not use <em>malloc()</em> at all, but instead should get the memory from a preallocated storage pool. There are few things that can be optimized with this approach:</p>
<ul>
<li><em>alloc()</em> is a O(1) operation.</li>
<li>no mutex is used inside alloc(). It is assumed that synchronization will be used in higher abstraction by application anyway.</li>
<li>no <em>free()</em> is required. All chunks will be deleted when the pool is destroyed.</li>
</ul>
<p>The performance gained on some systems can be as high as 30x speed up against <em>malloc()</em> and <em>free()</em> on certain configurations, but of course your mileage may vary.</p>
<p>For more information, see <a class="el" href="group__PJ__POOL__GROUP.htm">Fast Memory Pool</a></p>
<h2><a class="anchor" id="os_abstract_feat"></a>
Operating System Abstraction</h2>
<p>PJLIB has abstractions for features that are normally not portable across operating systems:</p><ul>
<li><a class="el" href="group__PJ__THREAD.htm">Threads</a> <br />
 Portable thread manipulation.</li>
<li><a class="el" href="group__PJ__TLS.htm">Thread Local Storage.</a> <br />
 Storing data in thread's private data.</li>
<li><a class="el" href="group__PJ__MUTEX.htm">Mutexes.</a> <br />
 Mutual exclusion protection.</li>
<li><a class="el" href="group__PJ__SEM.htm">Semaphores.</a> <br />
 Semaphores.</li>
<li><a class="el" href="group__PJ__ATOMIC.htm">Atomic Variables</a> <br />
 Atomic variables and their operations.</li>
<li><a class="el" href="group__PJ__CRIT__SEC.htm">Critical sections.</a> <br />
 Fast locking of critical sections.</li>
<li><a class="el" href="group__PJ__LOCK.htm">Lock Objects</a> <br />
 High level abstraction for lock objects.</li>
<li><a class="el" href="group__PJ__EVENT.htm">Event Object.</a> <br />
 Event object.</li>
<li><a class="el" href="group__PJ__TIME.htm">Time Data Type and Manipulation.</a> <br />
 Portable time manipulation.</li>
<li><a class="el" href="group__PJ__TIMESTAMP.htm">High Resolution Timestamp</a> <br />
 High resolution time value.</li>
<li>etc.</li>
</ul>
<h2><a class="anchor" id="ll_network_io_sec"></a>
Low-Level Network I/O</h2>
<p>PJLIB has very portable abstraction and fairly complete set of API for doing network I/O communications. At the lowest level, PJLIB provides:</p>
<ul>
<li><a class="el" href="group__PJ__SOCK.htm">Socket Abstraction</a> <br />
 A highly portable socket abstraction, runs on all kind of network APIs such as standard BSD socket, Windows socket, Linux <b>kernel</b> socket, PalmOS networking API, etc.</li>
<li><a class="el" href="group__pj__addr__resolve.htm">Network Address Resolution</a> <br />
 Portable address resolution, which implements <a class="el" href="group__pj__addr__resolve.htm#ga7c8264aa7743594d31766679dbae0b88">pj_gethostbyname()</a>.</li>
<li><a class="el" href="group__PJ__SOCK__SELECT.htm">Socket select() API.</a> <br />
 A portable <em>select()</em> like API (<a class="el" href="group__PJ__SOCK__SELECT.htm#gac84492169bc8b8fbab6e48f1b9150b2f">pj_sock_select()</a>) which can be implemented with various back-end.</li>
</ul>
<h2><a class="anchor" id="timer_mgmt_sec"></a>
Timer Management</h2>
<p>A passive framework for managing timer, see <a class="el" href="group__PJ__TIMER.htm">Timer Heap Management.</a> for more info. There is also function to retrieve high resolution timestamp from the system (see <a class="el" href="group__PJ__TIMESTAMP.htm">High Resolution Timestamp</a>).</p>
<h2><a class="anchor" id="data_struct_sec"></a>
Various Data Structures</h2>
<p>Various data structures are provided in the library:</p>
<ul>
<li><a class="el" href="group__PJ__PSTR.htm">String Operations</a></li>
<li><a class="el" href="group__PJ__ARRAY.htm">Array helper.</a></li>
<li><a class="el" href="group__PJ__HASH.htm">Hash Table</a></li>
<li><a class="el" href="group__PJ__LIST.htm">Linked List</a></li>
<li><a class="el" href="group__PJ__RBTREE.htm">Red/Black Balanced Tree</a></li>
</ul>
<h2><a class="anchor" id="exception_sec"></a>
Exception Construct</h2>
<p>A convenient TRY/CATCH like construct to propagate errors, which by default are used by the <a class="el" href="group__PJ__POOL__GROUP.htm">memory pool</a> and the lexical scanner in pjlib-util. The exception construct can be used to write programs like below:</p>
<pre>
    #define SYNTAX_ERROR  1</pre><pre>    PJ_TRY {
       msg = NULL;
       msg = parse_msg(buf, len);
    }
    PJ_CATCH ( SYNTAX_ERROR ) {
       .. handle error ..
    }
    PJ_END;
 </pre><p>Please see <a class="el" href="group__PJ__EXCEPT.htm">Exception Handling</a> for more information.</p>
<h2><a class="anchor" id="logging_sec"></a>
Logging Facility</h2>
<p>PJLIB <a class="el" href="group__PJ__LOG.htm">Logging Facility</a> consists of macros to write logging information to some output device. Some of the features of the logging facility:</p>
<ul>
<li>the verbosity can be fine-tuned both at compile time (to control the library size) or run-time (to control the verbosity of the information).</li>
<li>output device is configurable (e.g. stdout, printk, file, etc.)</li>
<li>log decoration is configurable.</li>
</ul>
<p>See <a class="el" href="group__PJ__LOG.htm">Logging Facility</a> for more information.</p>
<h2><a class="anchor" id="guid_gen_sec"></a>
Random and GUID Generation</h2>
<p>PJLIB provides facility to create random string (<a class="el" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string()</a>) or globally unique identifier (see <a class="el" href="group__PJ__GUID.htm">Globally Unique Identifier</a>).</p>
<h1><a class="anchor" id="configure_app_sec"></a>
Configuring Application to use PJLIB</h1>
<h2><a class="anchor" id="pjlib_compil_sec"></a>
Building PJLIB</h2>
<p>Follow the instructions in <a class="el" href="pjlib_build_sys_pg.htm">Building, and Installing PJLIB</a> to build PJLIB.</p>
<h2><a class="anchor" id="pjlib_compil_app_sec"></a>
Building Applications with PJLIB</h2>
<p>Use the following settings when building applications with PJLIB.</p>
<h3><a class="anchor" id="compil_inc_dir_sec"></a>
Include Search Path</h3>
<p>Add this to your include search path ($PJLIB is PJLIB root directory): </p><pre>
   $PJLIB/include
 </pre><h3><a class="anchor" id="compil_inc_file_sec"></a>
Include PJLIB Header</h3>
<p>To include all PJLIB headers: </p><pre class="fragment">  #include &lt;pjlib.h&gt;</pre><p>Alternatively, you can include individual PJLIB headers like this: </p><pre class="fragment">   #include &lt;pj/log.h&gt;
   #include &lt;pj/os.h&gt;
</pre><h3><a class="anchor" id="compil_lib_dir_sec"></a>
Library Path</h3>
<p>Add this to your library search path: </p><pre>
   $PJLIB/lib
 </pre><p>Then add the appropriate PJLIB library to your link specification. For example, you would add <code>libpj-i386-linux-gcc.a</code> when you're building applications in Linux.</p>
<h2><a class="anchor" id="pjlib_fundamentals_sec"></a>
Principles in Using PJLIB</h2>
<p>Few things that you <b>MUST</b> do when using PJLIB, to make sure that you create trully portable applications.</p>
<h3><a class="anchor" id="call_pjlib_init_sec"></a>
Call pj_init()</h3>
<p>Before you do anything else, call <code><a class="el" href="group__PJ__BASIC.htm#ga069615152140fa2df009cebc8a36b769">pj_init()</a></code>. This would make sure that PJLIB system is properly set up.</p>
<h3><a class="anchor" id="no_ansi_subsec"></a>
Do NOT Use ANSI C</h3>
<p>Contrary to popular teaching, ANSI C (and LIBC) is not the most portable library in the world, nor it's the most ubiquitous. For example, LIBC is not available in Linux kernel. Also normally LIBC will be excluded from compilation of RTOSes to reduce size.</p>
<p>So for maximum portability, do NOT use ANSI C. Do not even try to include any other header files outside &lt;include/pj&gt;. Stick with the functionalities provided by PJLIB.</p>
<h3><a class="anchor" id="string_rep_subsubsec"></a>
Use pj_str_t instead of C Strings</h3>
<p>PJLIB uses <a class="el" href="structpj__str__t.htm">pj_str_t</a> instead of normal C strings. You SHOULD follow this convention too. Remember, ANSI string-h is not always available. And PJLIB string is faster!</p>
<h3><a class="anchor" id="mem_alloc_subsubsec"></a>
Use Pool for Memory Allocations</h3>
<p>You MUST NOT use <em>malloc()</em> or any other memory allocation functions. Use PJLIB <a class="el" href="group__PJ__POOL__GROUP.htm">Fast Memory Pool</a> instead! It's faster and most portable.</p>
<h2><a class="anchor" id="logging_subsubsec"></a>
Use Logging for Text Display</h2>
<p>DO NOT use &lt;stdio.h&gt; for text output. Use PJLIB <a class="el" href="group__PJ__LOG.htm">Logging Facility</a> instead.</p>
<h1><a class="anchor" id="porting_pjlib_sec0"></a>
Porting PJLIB</h1>
<p>Please see <a class="el" href="porting_pjlib_pg.htm">Porting PJLIB</a> page on more information to port PJLIB to new target.</p>
<h1><a class="anchor" id="enjoy_sec"></a>
Enjoy Using PJLIB!</h1>
<p>We hope that you find PJLIB usefull for your application. If you have any questions, suggestions, critics, bug fixes, or anything else, we would be happy to hear it.</p>
<p>Enjoy using PJLIB!</p>
<p>Benny Prijono &lt; bennylp at pjsip dot org &gt; </p>
</div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
