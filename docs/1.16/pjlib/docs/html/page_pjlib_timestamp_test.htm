<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Test: Timestamp (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Test: Timestamp </h1>  </div>
</div>
<div class="contents">
<p>This file provides implementation of timestamp_test()</p>
<h2><a class="anchor" id="timestamp_test_sec"></a>
Scope of the Test</h2>
<p>This tests whether timestamp API works.</p>
<p>API tested:</p>
<ul>
<li><a class="el" href="group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq()</a></li>
<li><a class="el" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp()</a></li>
<li><a class="el" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec()</a></li>
<li><a class="el" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG()</a></li>
</ul>
<p>This file is <b>pjlib-test/timestamp.c</b></p>
<div class="fragment"><pre class="fragment"><span class="comment">/* $Id: timestamp.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<span class="comment">/* </span>
<span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<span class="comment"> *</span>
<span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<span class="comment"> * (at your option) any later version.</span>
<span class="comment"> *</span>
<span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="comment"> * GNU General Public License for more details.</span>
<span class="comment"> *</span>
<span class="comment"> * You should have received a copy of the GNU General Public License</span>
<span class="comment"> * along with this program; if not, write to the Free Software</span>
<span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<span class="comment"> */</span>
<span class="preprocessor">#include &quot;test.h&quot;</span>
<span class="preprocessor">#include &lt;<a class="code" href="os_8h.htm" title="OS dependent functions.">pj/os.h</a>&gt;</span>
<span class="preprocessor">#include &lt;<a class="code" href="log_8h.htm" title="Logging Utility.">pj/log.h</a>&gt;</span>
<span class="preprocessor">#include &lt;<a class="code" href="rand_8h.htm" title="Random Number Generator.">pj/rand.h</a>&gt;</span>


<span class="preprocessor">#if INCLUDE_TIMESTAMP_TEST</span>
<span class="preprocessor"></span>
<span class="preprocessor">#define THIS_FILE   &quot;timestamp&quot;</span>
<span class="preprocessor"></span>
<span class="keyword">static</span> <span class="keywordtype">int</span> timestamp_accuracy()
{
    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> freq, t1, t2;
    <a class="code" href="structpj__time__val.htm">pj_time_val</a> tv1, tv2, tvtmp;
    pj_int64_t msec, tics;
    pj_int64_t diff;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...testing frequency accuracy (pls wait)&quot;</span>));

    <a class="code" href="group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq</a>(&amp;freq);

    <span class="comment">/* Get the start time */</span>
    <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tvtmp);
    <span class="keywordflow">do</span> {
        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tv1);
    } <span class="keywordflow">while</span> (<a class="code" href="group__PJ__TIME.htm#gabe181b183828aae6bc56c1cf4b593d59">PJ_TIME_VAL_EQ</a>(tvtmp, tv1));
    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);

    <span class="comment">/* Sleep for 10 seconds */</span>
    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(10000);

    <span class="comment">/* Get end time */</span>
    <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tvtmp);
    <span class="keywordflow">do</span> {
        <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tv2);
    } <span class="keywordflow">while</span> (<a class="code" href="group__PJ__TIME.htm#gabe181b183828aae6bc56c1cf4b593d59">PJ_TIME_VAL_EQ</a>(tvtmp, tv2));
    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);

    <span class="comment">/* Get the elapsed time */</span>
    <a class="code" href="group__PJ__TIME.htm#gaec98fc019fc44b5a6f6b0b9137bcf272">PJ_TIME_VAL_SUB</a>(tv2, tv1);
    msec = <a class="code" href="group__PJ__TIME.htm#gad015d440803cb8f62ff73878f35badaa">PJ_TIME_VAL_MSEC</a>(tv2);

    <span class="comment">/* Check that the frequency match the elapsed time */</span>
    tics = t2.u64 - t1.u64;
    diff = tics - (msec * freq.u64 / 1000);
    <span class="keywordflow">if</span> (diff &lt; 0)
        diff = -diff;

    <span class="comment">/* Only allow 1 msec mismatch */</span>
    <span class="keywordflow">if</span> (diff &gt; (pj_int64_t)(freq.u64 / 1000)) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....error: timestamp drifted by %d usec after &quot;</span>
                             <span class="stringliteral">&quot;%d msec&quot;</span>, 
                             (<a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>)(diff * 1000000 / freq.u64), 
                             msec));
        <span class="keywordflow">return</span> -2000;

    <span class="comment">/* Otherwise just print warning if timestamp drifted by &gt;1 usec */</span>
    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (diff &gt; (pj_int64_t)(freq.u64 / 1000000)) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....warning: timestamp drifted by %d usec after &quot;</span>
                             <span class="stringliteral">&quot;%d msec&quot;</span>, 
                             (<a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>)(diff * 1000000 / freq.u64), 
                             msec));
    } <span class="keywordflow">else</span> {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....good. Timestamp is accurate down to&quot;</span>
                             <span class="stringliteral">&quot; nearest usec.&quot;</span>));
    }

    <span class="keywordflow">return</span> 0;
}


<span class="keywordtype">int</span> timestamp_test(<span class="keywordtype">void</span>)
{
    <span class="keyword">enum</span> { CONSECUTIVE_LOOP = 100 };
    <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span> i;
    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> freq, t1, t2;
    <a class="code" href="structpj__time__val.htm">pj_time_val</a> tv1, tv2;
    <span class="keywordtype">unsigned</span> elapsed;
    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...Testing timestamp (high res time)&quot;</span>));
    
    <span class="comment">/* Get and display timestamp frequency. */</span>
    <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__TIMESTAMP.htm#ga08e3e11a5e8f68f3111e5ecf3bff0ac1">pj_get_timestamp_freq</a>(&amp;freq)) != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR: get timestamp freq&quot;</span>, rc);
        <span class="keywordflow">return</span> -1000;
    }

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....frequency: hiword=%lu loword=%lu&quot;</span>, 
                        freq.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a>, freq.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>));

    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...checking if time can run backwards (pls wait)..&quot;</span>));

    <span class="comment">/*</span>
<span class="comment">     * Check if consecutive readings should yield timestamp value</span>
<span class="comment">     * that is bigger than previous value.</span>
<span class="comment">     * First we get the first timestamp.</span>
<span class="comment">     */</span>
    rc = <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR: pj_get_timestamp&quot;</span>, rc);
        <span class="keywordflow">return</span> -1001;
    }
    rc = <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tv1);
    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;...ERROR: pj_gettimeofday&quot;</span>, rc);
        <span class="keywordflow">return</span> -1002;
    }
    <span class="keywordflow">for</span> (i=0; i&lt;CONSECUTIVE_LOOP; ++i) {
        
        <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(<a class="code" href="group__PJ__RAND.htm#ga654f8cb013a1312b87000df1a1d03398">pj_rand</a>() % 100);

        rc = <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...ERROR: pj_get_timestamp&quot;</span>, rc);
            <span class="keywordflow">return</span> -1003;
        }
        rc = <a class="code" href="group__PJ__TIME.htm#ga0806df13f40d3153061f399ed86be856">pj_gettimeofday</a>(&amp;tv2);
        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
            app_perror(<span class="stringliteral">&quot;...ERROR: pj_gettimeofday&quot;</span>, rc);
            <span class="keywordflow">return</span> -1004;
        }

        <span class="comment">/* compare t2 with t1, expecting t2 &gt;= t1. */</span>
        <span class="keywordflow">if</span> (t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> &lt; t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> ||
            (t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> == t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a> &amp;&amp; t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a> &lt; t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>))
        {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: timestamp run backwards!&quot;</span>));
            <span class="keywordflow">return</span> -1005;
        }

        <span class="comment">/* compare tv2 with tv1, expecting tv2 &gt;= tv1. */</span>
        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__TIME.htm#ga9dd4507187780ed1e83a10176dc845b8">PJ_TIME_VAL_LT</a>(tv2, tv1)) {
            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...ERROR: time run backwards!&quot;</span>));
            <span class="keywordflow">return</span> -1006;
        }
    }

    <span class="comment">/* </span>
<span class="comment">     * Simple test to time some loop. </span>
<span class="comment">     */</span>
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....testing simple 1000000 loop&quot;</span>));


    <span class="comment">/* Mark start time. */</span>
    <span class="keywordflow">if</span> ((rc=<a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t1)) != <a class="code" href="group__PJ__BASIC.htm#ga1a7d58698e362566cf64a0c59ab7d4cd">PJ_SUCCESS</a>) {
        app_perror(<span class="stringliteral">&quot;....error: cat&#39;t get timestamp&quot;</span>, rc);
        <span class="keywordflow">return</span> -1010;
    }

    <span class="comment">/* Loop.. */</span>
    <span class="keywordflow">for</span> (i=0; i&lt;1000000; ++i) {
        <span class="comment">/* Try to do something so that smart compilers wont</span>
<span class="comment">         * remove this silly loop.</span>
<span class="comment">         */</span>
        null_func();
    }

    <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(0);

    <span class="comment">/* Mark end time. */</span>
    <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;t2);

    <span class="comment">/* Get elapsed time in usec. */</span>
    elapsed = <a class="code" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a>(&amp;t1, &amp;t2);
    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....elapsed: %u usec&quot;</span>, (<span class="keywordtype">unsigned</span>)elapsed));

    <span class="comment">/* See if elapsed time is &quot;reasonable&quot;. </span>
<span class="comment">     * This should be good even on 50Mhz embedded powerpc.</span>
<span class="comment">     */</span>
    <span class="keywordflow">if</span> (elapsed &lt; 1 || elapsed &gt; 1000000) {
        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;....error: elapsed time outside window (%u, &quot;</span>
                             <span class="stringliteral">&quot;t1.u32.hi=%u, t1.u32.lo=%u, &quot;</span>
                             <span class="stringliteral">&quot;t2.u32.hi=%u, t2.u32.lo=%u)&quot;</span>,
                             elapsed, 
                             t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a>, t1.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>, t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#ad8d7dc97c37ef8ee2a7fac9960c85039">hi</a>, t2.<a class="code" href="unionpj__timestamp.htm#a33538567edfbfe804209b8f6ef73be48">u32</a>.<a class="code" href="unionpj__timestamp.htm#a2108e6b2a0b25129da1dbaef8076c218">lo</a>));
        <span class="keywordflow">return</span> -1030;
    }

    <span class="comment">/* Testing time/timestamp accuracy */</span>
    rc = timestamp_accuracy();
    <span class="keywordflow">if</span> (rc != 0)
        <span class="keywordflow">return</span> rc;

    <span class="keywordflow">return</span> 0;
}


<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span>
<span class="comment"> * when this test is disabled. </span>
<span class="comment"> */</span>
<span class="keywordtype">int</span> dummy_timestamp_test;
<span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_TIMESTAMP_TEST */</span>

</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
