<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Socket select() API. (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Socket select() API.<div class="ingroups"><a class="el" href="group__PJ__OS.htm">Operating System Dependent Functionality.</a> &raquo; <a class="el" href="group__PJ__IO.htm">Input/Output</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga73e77bf9c12e925d43e7b45f1121e596"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SOCK__SELECT.htm#ga73e77bf9c12e925d43e7b45f1121e596">PJ_FD_ZERO</a> (<a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *fdsetp)</td></tr>
<tr class="separator:ga73e77bf9c12e925d43e7b45f1121e596"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga249223ede6e6915cd4e0f8d9ce5264a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SOCK__SELECT.htm#ga249223ede6e6915cd4e0f8d9ce5264a3">PJ_FD_COUNT</a> (const <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *fdsetp)</td></tr>
<tr class="separator:ga249223ede6e6915cd4e0f8d9ce5264a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c61d47831851a00aed2361f0166bb69"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SOCK__SELECT.htm#ga5c61d47831851a00aed2361f0166bb69">PJ_FD_SET</a> (<a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> fd, <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *fdsetp)</td></tr>
<tr class="separator:ga5c61d47831851a00aed2361f0166bb69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga642c142bf6997d04ff51ebfd716637d4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SOCK__SELECT.htm#ga642c142bf6997d04ff51ebfd716637d4">PJ_FD_CLR</a> (<a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> fd, <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *fdsetp)</td></tr>
<tr class="separator:ga642c142bf6997d04ff51ebfd716637d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8396be2fb425e96a4182f7c90504477"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SOCK__SELECT.htm#gab8396be2fb425e96a4182f7c90504477">PJ_FD_ISSET</a> (<a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a> fd, const <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *fdsetp)</td></tr>
<tr class="separator:gab8396be2fb425e96a4182f7c90504477"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac84492169bc8b8fbab6e48f1b9150b2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__SOCK__SELECT.htm#gac84492169bc8b8fbab6e48f1b9150b2f">pj_sock_select</a> (<a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> n, <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *readfds, <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *writefds, <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *exceptfds, const <a class="el" href="structpj__time__val.htm">pj_time_val</a> *timeout)</td></tr>
<tr class="separator:gac84492169bc8b8fbab6e48f1b9150b2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>This module provides portable abstraction for <em>select()</em> like API. The abstraction is needed so that it can utilize various event dispatching mechanisms that are available across platforms.</p>
<p>The API is very similar to normal <em>select()</em> usage.</p>
<h1><a class="anchor" id="pj_sock_select_examples_sec"></a>
Examples</h1>
<p>For some examples on how to use the select API, please see:</p>
<ul>
<li><a class="el" href="page_pjlib_select_test.htm">Test: Socket Select()</a> </li>
</ul>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga642c142bf6997d04ff51ebfd716637d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga642c142bf6997d04ff51ebfd716637d4">&#9670;&nbsp;</a></span>PJ_FD_CLR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PJ_FD_CLR </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>fdsetp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove the file descriptor fd from the set pointed to by fdsetp. If fd is not a member of this set, there shall be no effect on the set, nor will an error be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fd</td><td>The socket descriptor. </td></tr>
    <tr><td class="paramname">fdsetp</td><td>The descriptor set. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga249223ede6e6915cd4e0f8d9ce5264a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga249223ede6e6915cd4e0f8d9ce5264a3">&#9670;&nbsp;</a></span>PJ_FD_COUNT()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> PJ_FD_COUNT </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>fdsetp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This is an internal function, application shouldn't use this.</p>
<p>Get the number of descriptors in the set. This is defined in sock_select.c This function will only return the number of sockets set from PJ_FD_SET operation. When the set is modified by other means (such as by select()), the count will not be reflected here.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fdsetp</td><td>The descriptor set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of descriptors in the set. </dd></dl>

</div>
</div>
<a id="gab8396be2fb425e96a4182f7c90504477"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab8396be2fb425e96a4182f7c90504477">&#9670;&nbsp;</a></span>PJ_FD_ISSET()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> PJ_FD_ISSET </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>fdsetp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Evaluate to non-zero if the file descriptor fd is a member of the set pointed to by fdsetp, and shall evaluate to zero otherwise.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fd</td><td>The socket descriptor. </td></tr>
    <tr><td class="paramname">fdsetp</td><td>The descriptor set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Nonzero if fd is member of the descriptor set. </dd></dl>

</div>
</div>
<a id="ga5c61d47831851a00aed2361f0166bb69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5c61d47831851a00aed2361f0166bb69">&#9670;&nbsp;</a></span>PJ_FD_SET()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PJ_FD_SET </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>fdsetp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add the file descriptor fd to the set pointed to by fdsetp. If the file descriptor fd is already in this set, there shall be no effect on the set, nor will an error be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fd</td><td>The socket descriptor. </td></tr>
    <tr><td class="paramname">fdsetp</td><td>The descriptor set. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga73e77bf9c12e925d43e7b45f1121e596"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga73e77bf9c12e925d43e7b45f1121e596">&#9670;&nbsp;</a></span>PJ_FD_ZERO()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PJ_FD_ZERO </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>fdsetp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initialize the descriptor set pointed to by fdsetp to the null set.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fdsetp</td><td>The descriptor set. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gac84492169bc8b8fbab6e48f1b9150b2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac84492169bc8b8fbab6e48f1b9150b2f">&#9670;&nbsp;</a></span>pj_sock_select()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> pj_sock_select </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>readfds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>writefds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__fd__set__t.htm">pj_fd_set_t</a> *&#160;</td>
          <td class="paramname"><em>exceptfds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__time__val.htm">pj_time_val</a> *&#160;</td>
          <td class="paramname"><em>timeout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This function wait for a number of file descriptors to change status. The behaviour is the same as select() function call which appear in standard BSD socket libraries.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">n</td><td>On Unices, this specifies the highest-numbered descriptor in any of the three set, plus 1. On Windows, the value is ignored. </td></tr>
    <tr><td class="paramname">readfds</td><td>Optional pointer to a set of sockets to be checked for readability. </td></tr>
    <tr><td class="paramname">writefds</td><td>Optional pointer to a set of sockets to be checked for writability. </td></tr>
    <tr><td class="paramname">exceptfds</td><td>Optional pointer to a set of sockets to be checked for errors. </td></tr>
    <tr><td class="paramname">timeout</td><td>Maximum time for select to wait, or null for blocking operations.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The total number of socket handles that are ready, or zero if the time limit expired, or -1 if an error occurred. </dd></dl>

</div>
</div>
</div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
