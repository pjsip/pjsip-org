<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>TURN: Traversal Using Relays around NAT (2.13)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#groups">Modules</a>  </div>
  <div class="headertitle"><div class="title">TURN: Traversal Using Relays around NAT<div class="ingroups"><a class="el" href="group__PJNATH.htm">NAT Traversal Helper Library</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>TURN protocol implementation.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="groups" name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem:group__PJNATH__TURN__SOCK"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__TURN__SOCK.htm">TURN client transport</a></td></tr>
<tr class="memdesc:group__PJNATH__TURN__SOCK"><td class="mdescLeft">&#160;</td><td class="mdescRight">Client transport utilizing TURN relay. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__PJNATH__TURN__SESSION"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__TURN__SESSION.htm">TURN client session</a></td></tr>
<tr class="memdesc:group__PJNATH__TURN__SESSION"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transport independent TURN client session. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h1><a class="anchor" id="turn_intro_sec"></a>
Introduction to TURN</h1>
<p >When a direct communication path cannot be found, it is necessary to use the services of an intermediate host that acts as a relay for the packets. This relay typically sits in the public Internet and relays packets between two hosts that both sit behind NATs.</p>
<p >TURN allows a host behind a NAT (called the TURN client) to request that another host (called the TURN server) act as a relay. The client can arrange for the server to relay packets to and from certain other hosts (called peers) and can control aspects of how the relaying is done. The client does this by obtaining an IP address and port on the server, called the relayed-transport-address. When a peer sends a packet to the relayed-transport-address, the server relays the packet to the client. When the client sends a data packet to the server, the server relays it to the appropriate peer using the relayed- transport-address as the source.</p>
<h1><a class="anchor" id="turn_op_sec"></a>
Overview of TURN operations</h1>
<p ><b>Discovering TURN server</b>.<br  />
Client learns the IP address of the TURN server either through some privisioning or by querying DNS SRV records for TURN service for the specified domain. Client may use UDP or TCP (or TLS) to connect to the TURN server.</p>
<p ><b>Authentication</b>.<br  />
All TURN operations requires the use of authentication (it uses STUN long term autentication method), hence client must be configured with the correct credential to use the service.</p>
<p ><b>Allocation</b>.<br  />
Client creates one "relay port" (or called <b>relayed-transport-address</b> in TURN terminology) in the TURN server by sending TURN <em>Allocate</em> request, hence this process is called creating allocation. Once the allocation is successful, client will be given the IP address and port of the "relay 
port" in the Allocate response.</p>
<p ><b>Sending data through the relay</b>.<br  />
Once allocation has been created, client may send data to any remote endpoints (called peers in TURN terminology) via the "relay port". It does so by sending Send Indication to the TURN server, giving the peer address in the indication message. But note that at this point peers are not allowed to send data towards the client (via the "relay port") before permission is installed for that peer.</p>
<p ><b>Creating permissions</b>.<br  />
Permission needs to be created in the TURN server so that a peer can send data to the client via the relay port (a peer in this case is identified by its IP address). Without this, when the TURN server receives data from the peer in the "relay port", it will drop this data.</p>
<p ><b>Receiving data from peers</b>.<br  />
Once permission has been installed for the peer, any data received by the TURN server (from that peer) in the "relay port" will be relayed back to client by using Data Indication.</p>
<p ><b>Using ChannelData</b>.<br  />
TURN provides optimized framing to the data by using ChannelData packetization. The client activates this format by sending ChannelBind request to the TURN server, which provides (channel) binding which maps a particular peer address with a channel number. Data sent or received to/for this peer will then use ChannelData format instead of Send or Data Indications.</p>
<p ><b>Refreshing the allocation, permissions, and channel bindings</b>.<br  />
Allocations, permissions, and channel bindings need to be refreshed periodically by client, or otherwise they will expire.</p>
<p ><b>Destroying the allocation</b>.<br  />
Once the "relay port" is no longer needed, client destroys the allocation by sending Refresh request with LIFETIME attribute set to zero.</p>
<h1><a class="anchor" id="turn_org_sec"></a>
Library organizations</h1>
<p >The TURN functionalities in PJNATH primarily consist of <a class="el" href="group__PJNATH__TURN__SOCK.htm">TURN client transport</a> and <a class="el" href="group__PJNATH__TURN__SESSION.htm">TURN client session</a>. Please see more below.</p>
<h1><a class="anchor" id="turn_using_sec"></a>
Using TURN transport</h1>
<p >The <a class="el" href="group__PJNATH__TURN__SOCK.htm">TURN client transport</a> is a ready to use object for relaying application data via a TURN server, by managing all the operations above.</p>
<p >Among other things it provides the following features:</p><ul>
<li>resolution of the TURN server with DNS SRV</li>
<li>interface to create allocation, permissions, and channel bindings</li>
<li>interface to send and receive packets through the relay</li>
<li>provides callback to notify the application about incoming data</li>
<li>managing the allocation, permissions, and channel bindings</li>
</ul>
<p >Please see <a class="el" href="group__PJNATH__TURN__SOCK.htm">TURN client transport</a> for more documentation about and on how to use this object.</p>
<h1><a class="anchor" id="turn_owntransport_sec"></a>
Creating custom TURN transport</h1>
<p >The <a class="el" href="group__PJNATH__TURN__SESSION.htm">TURN client session</a> is a transport-independent object to manage a client TURN session. It contains the core logic for managing the TURN client session as listed in TURN operations above, but in transport-independent manner (i.e. it doesn't have a socket), so that developer can integrate TURN client functionality into existing framework that already has its own means to send and receive data, or to support new transport types to TURN, such as TLS.</p>
<p >You can create your own (custom) TURN transport by wrapping this into your own object, and provide it with the means to send and receive packets.</p>
<p >Please see <a class="el" href="group__PJNATH__TURN__SESSION.htm">TURN client session</a> for more information.</p>
<h1><a class="anchor" id="turn_samples_sec"></a>
Samples</h1>
<p >The <a class="el" href="turn_client_sample.htm">pjturn-client, a sample TURN client</a> is a sample application to use the <a class="el" href="group__PJNATH__TURN__SOCK.htm">TURN client transport</a>. Also there is a sample TURN server in the distribution as well.</p>
<p >Also see <b><a class="el" href="group__samples__page.htm">PJNATH Samples and screenshots</a></b> for other samples. </p>
</div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
