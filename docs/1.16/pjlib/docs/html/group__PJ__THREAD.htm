<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJLIB Reference: Threads (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>


<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>Threads<br/>
<small>
[<a class="el" href="group__PJ__SYS__INFO.htm">System Information</a>,&nbsp;<a class="el" href="group__PJ__OS.htm">Operating System Dependent Functionality.</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gad89d8163d860b36123d0b5213fe9f6c5">PJ_THREAD_DESC_SIZE</a>&nbsp;&nbsp;&nbsp;(64)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga9af86900386496e4b75fdeafff9459e3">PJ_CHECK_STACK</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga45cdab0321622ec3cc2ae98b1dbf74c6">pj_thread_get_stack_max_usage</a>(thread)&nbsp;&nbsp;&nbsp;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga025f7f1bed34d08768c3852faeb4be79">pj_thread_get_stack_info</a>(thread, f, l)&nbsp;&nbsp;&nbsp;(*(f)=&quot;&quot;,*(l)=0)</td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef long&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a> [(64)]</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga8b8f2c300e02517d5890d9b461178088">pj_thread_create_flags</a> { <b>PJ_THREAD_SUSPENDED</b> =  1
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a> (PJ_THREAD_FUNC pj_thread_proc)(void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gae6e779b7ef2349ff205841e249255bb0">pj_getpid</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a> (<a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *pool, const char *thread_name, pj_thread_proc *proc, void *arg, <a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> stack_size, unsigned flags, <a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register</a> (const char *thread_name, <a class="el" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a> desc, <a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gaab74a1091f1ddb68da4f8f599ae339a9">pj_thread_is_registered</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gab0227ecc33b2d62994c8eefc8cb48f5c">pj_thread_get_prio</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga73337ff87e56cd9f66b58e2bace3621e">pj_thread_set_prio</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread, int prio)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga07df1826af4b9aec2f68a9e0e9d6512e">pj_thread_get_prio_min</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gadacba7fac1f06c71dd3c3666386d73cc">pj_thread_get_prio_max</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga5579c079213c69dd031577a79126c86c">pj_thread_get_os_handle</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gaf2dc77f1afbcc5e513ec782cc6a79ea1">pj_thread_get_name</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga2fcffcdf69a7b51ef19550a7dfb726e3">pj_thread_this</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a> (<a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *thread)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a> (unsigned msec)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>This module provides multithreading API.</p>
<h2><a class="anchor" id="pj_thread_examples_sec"></a>
Examples</h2>
<p>For examples, please see:</p>
<ul>
<li><a class="el" href="page_pjlib_thread_test.htm">Test: Thread Test</a></li>
<li><a class="el" href="page_pjlib_sleep_test.htm">Test: Sleep, Time, and Timestamp</a> </li>
</ul>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ga9af86900386496e4b75fdeafff9459e3"></a><!-- doxytag: member="os.h::PJ_CHECK_STACK" ref="ga9af86900386496e4b75fdeafff9459e3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_CHECK_STACK</td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p><a class="el" href="group__PJ__THREAD.htm#ga9af86900386496e4b75fdeafff9459e3">PJ_CHECK_STACK()</a> macro is used to check the sanity of the stack. The OS implementation may check that no stack overflow occurs, and it also may collect statistic about stack usage. </p>

</div>
</div>
<a class="anchor" id="gad89d8163d860b36123d0b5213fe9f6c5"></a><!-- doxytag: member="os.h::PJ_THREAD_DESC_SIZE" ref="gad89d8163d860b36123d0b5213fe9f6c5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PJ_THREAD_DESC_SIZE&nbsp;&nbsp;&nbsp;(64)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Size of thread struct. </p>

</div>
</div>
<a class="anchor" id="ga025f7f1bed34d08768c3852faeb4be79"></a><!-- doxytag: member="os.h::pj_thread_get_stack_info" ref="ga025f7f1bed34d08768c3852faeb4be79" args="(thread, f, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define pj_thread_get_stack_info</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">thread, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">f, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">l</td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td>&nbsp;&nbsp;&nbsp;(*(f)=&quot;&quot;,*(l)=0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p><a class="el" href="group__PJ__THREAD.htm#ga025f7f1bed34d08768c3852faeb4be79">pj_thread_get_stack_info()</a> for the thread </p>

</div>
</div>
<a class="anchor" id="ga45cdab0321622ec3cc2ae98b1dbf74c6"></a><!-- doxytag: member="os.h::pj_thread_get_stack_max_usage" ref="ga45cdab0321622ec3cc2ae98b1dbf74c6" args="(thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define pj_thread_get_stack_max_usage</td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname">thread</td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p><a class="el" href="group__PJ__THREAD.htm#ga45cdab0321622ec3cc2ae98b1dbf74c6">pj_thread_get_stack_max_usage()</a> for the thread </p>

</div>
</div>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="ga145dba91437211fe7b768573c14268bb"></a><!-- doxytag: member="os.h::pj_thread_desc" ref="ga145dba91437211fe7b768573c14268bb" args="[(64)]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef long <a class="el" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a>[(64)]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Thread structure, to thread's state when the thread is created by external or native API. </p>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="ga8b8f2c300e02517d5890d9b461178088"></a><!-- doxytag: member="os.h::pj_thread_create_flags" ref="ga8b8f2c300e02517d5890d9b461178088" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJ__THREAD.htm#ga8b8f2c300e02517d5890d9b461178088">pj_thread_create_flags</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Thread creation flags:</p>
<ul>
<li>PJ_THREAD_SUSPENDED: specify that the thread should be created suspended. </li>
</ul>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gab600dc33a20a0f36550a4538506d020e"></a><!-- doxytag: member="os.h::int" ref="gab600dc33a20a0f36550a4538506d020e" args="(PJ_THREAD_FUNC pj_thread_proc)(void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int </td>
          <td>(</td>
          <td class="paramtype">PJ_THREAD_FUNC&nbsp;</td>
          <td class="paramname"> <em>pj_thread_proc</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Type of thread entry function. </p>

</div>
</div>
<a class="anchor" id="gae6e779b7ef2349ff205841e249255bb0"></a><!-- doxytag: member="os.h::pj_getpid" ref="gae6e779b7ef2349ff205841e249255bb0" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> pj_getpid </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get process ID. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>process ID. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7b63533cf4f3ba0cba68cab49a22d722"></a><!-- doxytag: member="os.h::pj_thread_create" ref="ga7b63533cf4f3ba0cba68cab49a22d722" args="(pj_pool_t *pool, const char *thread_name, pj_thread_proc *proc, void *arg, pj_size_t stack_size, unsigned flags, pj_thread_t **thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__pool__t.htm">pj_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>thread_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pj_thread_proc *&nbsp;</td>
          <td class="paramname"> <em>proc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>&nbsp;</td>
          <td class="paramname"> <em>stack_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **&nbsp;</td>
          <td class="paramname"> <em>thread</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a new thread.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pool</em>&nbsp;</td><td>The memory pool from which the thread record will be allocated from. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>thread_name</em>&nbsp;</td><td>The optional name to be assigned to the thread. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>proc</em>&nbsp;</td><td>Thread entry function. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>arg</em>&nbsp;</td><td>Argument to be passed to the thread entry function. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>stack_size</em>&nbsp;</td><td>The size of the stack for the new thread, or ZERO or PJ_THREAD_DEFAULT_STACK_SIZE to let the library choose the reasonable size for the stack. For some systems, the stack will be allocated from the pool, so the pool must have suitable capacity. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Flags for thread creation, which is bitmask combination from enum pj_thread_create_flags. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>Pointer to hold the newly created thread.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the error code. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5435f79ad044f9ce2113af311bf2b777"></a><!-- doxytag: member="os.h::pj_thread_destroy" ref="ga5435f79ad044f9ce2113af311bf2b777" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Destroy thread and release resources allocated for the thread. However, the memory allocated for the pj_thread_t itself will only be released when the pool used to create the thread is destroyed.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>zero on success. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf2dc77f1afbcc5e513ec782cc6a79ea1"></a><!-- doxytag: member="os.h::pj_thread_get_name" ref="gaf2dc77f1afbcc5e513ec782cc6a79ea1" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* pj_thread_get_name </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get thread name.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Thread name as null terminated string. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5579c079213c69dd031577a79126c86c"></a><!-- doxytag: member="os.h::pj_thread_get_os_handle" ref="ga5579c079213c69dd031577a79126c86c" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* pj_thread_get_os_handle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return native handle from pj_thread_t for manipulation using native OS APIs.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>PJLIB thread descriptor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Native thread handle. For example, when the backend thread uses pthread, this function will return pointer to pthread_t, and on Windows, this function will return HANDLE. </dd></dl>

</div>
</div>
<a class="anchor" id="gab0227ecc33b2d62994c8eefc8cb48f5c"></a><!-- doxytag: member="os.h::pj_thread_get_prio" ref="gab0227ecc33b2d62994c8eefc8cb48f5c" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_thread_get_prio </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get thread priority value for the thread.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>Thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Thread priority value, or -1 on error. </dd></dl>

</div>
</div>
<a class="anchor" id="gadacba7fac1f06c71dd3c3666386d73cc"></a><!-- doxytag: member="os.h::pj_thread_get_prio_max" ref="gadacba7fac1f06c71dd3c3666386d73cc" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_thread_get_prio_max </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the highest priority value available for this thread.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>Thread handle. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Minimum thread priority value, or -1 on error. </dd></dl>

</div>
</div>
<a class="anchor" id="ga07df1826af4b9aec2f68a9e0e9d6512e"></a><!-- doxytag: member="os.h::pj_thread_get_prio_min" ref="ga07df1826af4b9aec2f68a9e0e9d6512e" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int pj_thread_get_prio_min </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the lowest priority value available for this thread.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>Thread handle. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Minimum thread priority value, or -1 on error. </dd></dl>

</div>
</div>
<a class="anchor" id="gaab74a1091f1ddb68da4f8f599ae339a9"></a><!-- doxytag: member="os.h::pj_thread_is_registered" ref="gaab74a1091f1ddb68da4f8f599ae339a9" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> pj_thread_is_registered </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Check if this thread has been registered to PJLIB.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Non-zero if it is registered. </dd></dl>

</div>
</div>
<a class="anchor" id="ga60d90ce08d2f7e92dcaa0443cf87912f"></a><!-- doxytag: member="os.h::pj_thread_join" ref="ga60d90ce08d2f7e92dcaa0443cf87912f" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_join </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Join thread, and block the caller thread until the specified thread exits. If the specified thread has already been dead, or it does not exist, the function will return immediately with successfull status.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success. </dd></dl>

</div>
</div>
<a class="anchor" id="ga600d2f8baddfd78de3b6b60cce027a9a"></a><!-- doxytag: member="os.h::pj_thread_register" ref="ga600d2f8baddfd78de3b6b60cce027a9a" args="(const char *thread_name, pj_thread_desc desc, pj_thread_t **thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_register </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>thread_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__THREAD.htm#ga145dba91437211fe7b768573c14268bb">pj_thread_desc</a>&nbsp;</td>
          <td class="paramname"> <em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **&nbsp;</td>
          <td class="paramname"> <em>thread</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Register a thread that was created by external or native API to PJLIB. This function must be called in the context of the thread being registered. When the thread is created by external function or API call, it must be 'registered' to PJLIB using <a class="el" href="group__PJ__THREAD.htm#ga600d2f8baddfd78de3b6b60cce027a9a">pj_thread_register()</a>, so that it can cooperate with PJLIB's framework. During registration, some data needs to be maintained, and this data must remain available during the thread's lifetime.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread_name</em>&nbsp;</td><td>The optional name to be assigned to the thread. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>desc</em>&nbsp;</td><td>Thread descriptor, which must be available throughout the lifetime of the thread. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>Pointer to hold the created thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the error code. </dd></dl>

</div>
</div>
<a class="anchor" id="ga223e764be70bd61ab21a77c76be32783"></a><!-- doxytag: member="os.h::pj_thread_resume" ref="ga223e764be70bd61ab21a77c76be32783" args="(pj_thread_t *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_resume </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Resume a suspended thread.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>The thread handle.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>zero on success. </dd></dl>

</div>
</div>
<a class="anchor" id="ga73337ff87e56cd9f66b58e2bace3621e"></a><!-- doxytag: member="os.h::pj_thread_set_prio" ref="ga73337ff87e56cd9f66b58e2bace3621e" args="(pj_thread_t *thread, int prio)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_set_prio </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> *&nbsp;</td>
          <td class="paramname"> <em>thread</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>prio</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the thread priority. The priority value must be in the priority value range, which can be retrieved with <a class="el" href="group__PJ__THREAD.htm#ga07df1826af4b9aec2f68a9e0e9d6512e">pj_thread_get_prio_min()</a> and <a class="el" href="group__PJ__THREAD.htm#gadacba7fac1f06c71dd3c3666386d73cc">pj_thread_get_prio_max()</a> functions.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thread</em>&nbsp;</td><td>Thread handle. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>New priority to be set to the thread.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success or the error code. </dd></dl>

</div>
</div>
<a class="anchor" id="gad59cd6fd7390711758afcc0bde375d68"></a><!-- doxytag: member="os.h::pj_thread_sleep" ref="gad59cd6fd7390711758afcc0bde375d68" args="(unsigned msec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> pj_thread_sleep </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>msec</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Put the current thread to sleep for the specified miliseconds.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msec</em>&nbsp;</td><td>Miliseconds delay.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>zero if successfull. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2fcffcdf69a7b51ef19550a7dfb726e3"></a><!-- doxytag: member="os.h::pj_thread_this" ref="ga2fcffcdf69a7b51ef19550a7dfb726e3" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>* pj_thread_this </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the current thread.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Thread handle of current thread. </dd></dl>

</div>
</div>
</div>
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
