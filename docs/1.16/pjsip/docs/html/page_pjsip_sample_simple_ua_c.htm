<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>PJSIP Reference: Samples: Simple UA (1.16)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJSIP Reference</p>

<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>Samples: Simple UA </h1>  </div>
</div>
<div class="contents">
<p>This is a very simple SIP User Agent application that only use PJSIP (without PJSIP-UA). It's able to make and receive call, and play media to the sound device.</p>
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: simpleua.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00054"></a>00054 <span class="comment">/* Include all headers. */</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &lt;pjsip.h&gt;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &lt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/pjmedia_8h.htm">pjmedia.h</a>&gt;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &lt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/pjmedia-codec_8h.htm">pjmedia-codec.h</a>&gt;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &lt;pjsip_ua.h&gt;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &lt;<a class="code" href="pjsip__simple_8h.htm" title="SIP SIMPLE Extension.">pjsip_simple.h</a>&gt;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &lt;pjlib-util.h&gt;</span>
<a name="l00061"></a>00061 <span class="preprocessor">#include &lt;pjlib.h&gt;</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">/* For logging purpose. */</span>
<a name="l00064"></a>00064 <span class="preprocessor">#define THIS_FILE   &quot;simpleua.c&quot;</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>
<a name="l00066"></a>00066 <span class="preprocessor">#include &quot;util.h&quot;</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">/* Settings */</span>
<a name="l00070"></a>00070 <span class="preprocessor">#define AF          pj_AF_INET()     </span><span class="comment">/* Change to pj_AF_INET6() for IPv6.</span>
<a name="l00071"></a>00071 <span class="comment">                                      * PJ_HAS_IPV6 must be enabled and</span>
<a name="l00072"></a>00072 <span class="comment">                                      * your system must support IPv6.  */</span>
<a name="l00073"></a>00073 <span class="preprocessor">#define SIP_PORT    5060             </span><span class="comment">/* Listening SIP port              */</span>
<a name="l00074"></a>00074 <span class="preprocessor">#define RTP_PORT    4000             </span><span class="comment">/* RTP port                        */</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">/*</span>
<a name="l00077"></a>00077 <span class="comment"> * Static variables.</span>
<a name="l00078"></a>00078 <span class="comment"> */</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a>             g_complete;    <span class="comment">/* Quit flag.               */</span>
<a name="l00081"></a>00081 <span class="keyword">static</span> <a class="code" href="sip__types_8h.htm#a2b184bd797bb08929129539d9dddd329">pjsip_endpoint</a>       *g_endpt;       <span class="comment">/* SIP endpoint.            */</span>
<a name="l00082"></a>00082 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm">pj_caching_pool</a>       cp;            <span class="comment">/* Global pool factory.     */</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keyword">static</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__TYPES.htm#ga7c3623d8e90e22b7184a6e42dc24f6f5">pjmedia_endpt</a>        *g_med_endpt;   <span class="comment">/* Media endpoint.          */</span>
<a name="l00085"></a>00085 <span class="keyword">static</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__transport__info.htm">pjmedia_transport_info</a> g_med_tpinfo; <span class="comment">/* Socket info for media    */</span>
<a name="l00086"></a>00086 <span class="keyword">static</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__transport.htm">pjmedia_transport</a>    *g_med_transport;<span class="comment">/* Media stream transport  */</span>
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">/* Call variables: */</span>
<a name="l00089"></a>00089 <span class="keyword">static</span> <a class="code" href="structpjsip__inv__session.htm">pjsip_inv_session</a>    *g_inv;         <span class="comment">/* Current invite session.  */</span>
<a name="l00090"></a>00090 <span class="keyword">static</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__SESSION.htm#ga4b9d005c55d892a13a7dd49a9167b974">pjmedia_session</a>      *g_med_session; <span class="comment">/* Call&#39;s media session.    */</span>
<a name="l00091"></a>00091 <span class="keyword">static</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__SND__PORT.htm#gaf747a635d331877d0025e182faa3f1a2">pjmedia_snd_port</a>     *g_snd_player;  <span class="comment">/* Call&#39;s sound player      */</span>
<a name="l00092"></a>00092 <span class="keyword">static</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__SND__PORT.htm#gaf747a635d331877d0025e182faa3f1a2">pjmedia_snd_port</a>     *g_snd_rec;     <span class="comment">/* Call&#39;s sound recorder.   */</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">/*</span>
<a name="l00096"></a>00096 <span class="comment"> * Prototypes:</span>
<a name="l00097"></a>00097 <span class="comment"> */</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="comment">/* Callback to be called when SDP negotiation is done in the call: */</span>
<a name="l00100"></a>00100 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_media_update( <a class="code" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv,
<a name="l00101"></a>00101                                   <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status);
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">/* Callback to be called when invite session&#39;s state has changed: */</span>
<a name="l00104"></a>00104 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_state_changed( <a class="code" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, 
<a name="l00105"></a>00105                                    <a class="code" href="structpjsip__event.htm">pjsip_event</a> *e);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 <span class="comment">/* Callback to be called when dialog has forked: */</span>
<a name="l00108"></a>00108 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_forked(<a class="code" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="code" href="structpjsip__event.htm">pjsip_event</a> *e);
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 <span class="comment">/* Callback to be called to handle incoming requests outside dialogs: */</span>
<a name="l00111"></a>00111 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> on_rx_request( <a class="code" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata );
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 <span class="comment">/* This is a PJSIP module to be registered by application to handle</span>
<a name="l00117"></a>00117 <span class="comment"> * incoming requests outside any dialogs/transactions. The main purpose</span>
<a name="l00118"></a>00118 <span class="comment"> * here is to handle incoming INVITE request message, where we will</span>
<a name="l00119"></a>00119 <span class="comment"> * create a dialog and INVITE session for it.</span>
<a name="l00120"></a>00120 <span class="comment"> */</span>
<a name="l00121"></a>00121 <span class="keyword">static</span> <a class="code" href="structpjsip__module.htm">pjsip_module</a> mod_simpleua =
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123     NULL, NULL,                     <span class="comment">/* prev, next.              */</span>
<a name="l00124"></a>00124     { <span class="stringliteral">&quot;mod-simpleua&quot;</span>, 12 },         <span class="comment">/* Name.                    */</span>
<a name="l00125"></a>00125     -1,                             <span class="comment">/* Id                       */</span>
<a name="l00126"></a>00126     PJSIP_MOD_PRIORITY_APPLICATION, <span class="comment">/* Priority                 */</span>
<a name="l00127"></a>00127     NULL,                           <span class="comment">/* load()                   */</span>
<a name="l00128"></a>00128     NULL,                           <span class="comment">/* start()                  */</span>
<a name="l00129"></a>00129     NULL,                           <span class="comment">/* stop()                   */</span>
<a name="l00130"></a>00130     NULL,                           <span class="comment">/* unload()                 */</span>
<a name="l00131"></a>00131     &amp;on_rx_request,                 <span class="comment">/* on_rx_request()          */</span>
<a name="l00132"></a>00132     NULL,                           <span class="comment">/* on_rx_response()         */</span>
<a name="l00133"></a>00133     NULL,                           <span class="comment">/* on_tx_request.           */</span>
<a name="l00134"></a>00134     NULL,                           <span class="comment">/* on_tx_response()         */</span>
<a name="l00135"></a>00135     NULL,                           <span class="comment">/* on_tsx_state()           */</span>
<a name="l00136"></a>00136 };
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">/*</span>
<a name="l00141"></a>00141 <span class="comment"> * main()</span>
<a name="l00142"></a>00142 <span class="comment"> *</span>
<a name="l00143"></a>00143 <span class="comment"> * If called with argument, treat argument as SIP URL to be called.</span>
<a name="l00144"></a>00144 <span class="comment"> * Otherwise wait for incoming calls.</span>
<a name="l00145"></a>00145 <span class="comment"> */</span>
<a name="l00146"></a>00146 <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150     <span class="comment">/* Must init PJLIB first: */</span>
<a name="l00151"></a>00151     status = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga069615152140fa2df009cebc8a36b769">pj_init</a>();
<a name="l00152"></a>00152     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="comment">/* Then init PJLIB-UTIL: */</span>
<a name="l00156"></a>00156     status = <a class="codeRef" doxygen="pjlib-util.tag:../../../pjlib-util/docs/html/" href="../../../pjlib-util/docs/html/group__PJLIB__UTIL__BASE.htm#gaf44fef477c4b0e38a99004965fc55110">pjlib_util_init</a>();
<a name="l00157"></a>00157     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="comment">/* Must create a pool factory before we can allocate any memory. */</span>
<a name="l00161"></a>00161     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__CACHING__POOL.htm#gafbf5400f191e2095240bc6472754e94f">pj_caching_pool_init</a>(&amp;cp, &amp;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__POOL__FACTORY.htm#ga98cf758eafb888f318a8de7f396f47ca">pj_pool_factory_default_policy</a>, 0);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="comment">/* Create global endpoint: */</span>
<a name="l00165"></a>00165     {
<a name="l00166"></a>00166         <span class="keyword">const</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> *hostname;
<a name="l00167"></a>00167         <span class="keyword">const</span> <span class="keywordtype">char</span> *endpt_name;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169         <span class="comment">/* Endpoint MUST be assigned a globally unique name.</span>
<a name="l00170"></a>00170 <span class="comment">         * The name will be used as the hostname in Warning header.</span>
<a name="l00171"></a>00171 <span class="comment">         */</span>
<a name="l00172"></a>00172 
<a name="l00173"></a>00173         <span class="comment">/* For this implementation, we&#39;ll use hostname for simplicity */</span>
<a name="l00174"></a>00174         hostname = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga47bc19975b9e88fc86d4bf43ffd2a17f">pj_gethostname</a>();
<a name="l00175"></a>00175         endpt_name = hostname-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177         <span class="comment">/* Create the endpoint: */</span>
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         status = <a class="code" href="group__PJSIP__ENDPT.htm#gaf264125f3592f83d0dce3bccf2bd5916">pjsip_endpt_create</a>(&amp;cp.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm#a0849ace123d8760dfab52418c2732af3">factory</a>, endpt_name, 
<a name="l00180"></a>00180                                     &amp;g_endpt);
<a name="l00181"></a>00181         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="comment">/* </span>
<a name="l00186"></a>00186 <span class="comment">     * Add UDP transport, with hard-coded port </span>
<a name="l00187"></a>00187 <span class="comment">     * Alternatively, application can use pjsip_udp_transport_attach() to</span>
<a name="l00188"></a>00188 <span class="comment">     * start UDP transport, if it already has an UDP socket (e.g. after it</span>
<a name="l00189"></a>00189 <span class="comment">     * resolves the address with STUN).</span>
<a name="l00190"></a>00190 <span class="comment">     */</span>
<a name="l00191"></a>00191     {
<a name="l00192"></a>00192         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm">pj_sockaddr</a> addr;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga14a50bd931bd5ee1fcc064ad701d64b6">pj_sockaddr_init</a>(AF, &amp;addr, NULL, (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga47506d8dde1056c5c96d62f0df6ddf28">pj_uint16_t</a>)SIP_PORT);
<a name="l00195"></a>00195         
<a name="l00196"></a>00196         <span class="keywordflow">if</span> (AF == <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>()) {
<a name="l00197"></a>00197             status = <a class="code" href="group__PJSIP__TRANSPORT__UDP.htm#ga065dd345bde0618c3c7301d3cbc31ac8">pjsip_udp_transport_start</a>( g_endpt, &amp;addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm#ab25ec448ae63acfdd2aa0f3ef2fd10b8">ipv4</a>, NULL, 
<a name="l00198"></a>00198                                                 1, NULL);
<a name="l00199"></a>00199         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (AF == <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga60a867be35581f776aa88156505309de">pj_AF_INET6</a>()) {
<a name="l00200"></a>00200             status = <a class="code" href="group__PJSIP__TRANSPORT__UDP.htm#ga7b40599e5e4e104b121555a00ce8d4dd">pjsip_udp_transport_start6</a>(g_endpt, &amp;addr.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm#a77e01c1d6cd93aae0d3bbb1718dd1ccf">ipv6</a>, NULL,
<a name="l00201"></a>00201                                                 1, NULL);
<a name="l00202"></a>00202         } <span class="keywordflow">else</span> {
<a name="l00203"></a>00203             status = PJ_EAFNOTSUP;
<a name="l00204"></a>00204         }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00207"></a>00207             app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to start UDP transport&quot;</span>, status);
<a name="l00208"></a>00208             <span class="keywordflow">return</span> 1;
<a name="l00209"></a>00209         }
<a name="l00210"></a>00210     }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <span class="comment">/* </span>
<a name="l00214"></a>00214 <span class="comment">     * Init transaction layer.</span>
<a name="l00215"></a>00215 <span class="comment">     * This will create/initialize transaction hash tables etc.</span>
<a name="l00216"></a>00216 <span class="comment">     */</span>
<a name="l00217"></a>00217     status = <a class="code" href="group__PJSIP__TRANSACT__TRANSACTION.htm#ga98b6d8edf24b82c6cbc6afbdf274cdf1">pjsip_tsx_layer_init_module</a>(g_endpt);
<a name="l00218"></a>00218     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="comment">/* </span>
<a name="l00222"></a>00222 <span class="comment">     * Initialize UA layer module.</span>
<a name="l00223"></a>00223 <span class="comment">     * This will create/initialize dialog hash tables etc.</span>
<a name="l00224"></a>00224 <span class="comment">     */</span>
<a name="l00225"></a>00225     status = <a class="code" href="group__PJSUA__UA.htm#ga444b57c13a6e8ac9131bd2c2ff6356ed">pjsip_ua_init_module</a>( g_endpt, NULL );
<a name="l00226"></a>00226     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 
<a name="l00229"></a>00229     <span class="comment">/* </span>
<a name="l00230"></a>00230 <span class="comment">     * Init invite session module.</span>
<a name="l00231"></a>00231 <span class="comment">     * The invite session module initialization takes additional argument,</span>
<a name="l00232"></a>00232 <span class="comment">     * i.e. a structure containing callbacks to be called on specific</span>
<a name="l00233"></a>00233 <span class="comment">     * occurence of events.</span>
<a name="l00234"></a>00234 <span class="comment">     *</span>
<a name="l00235"></a>00235 <span class="comment">     * The on_state_changed and on_new_session callbacks are mandatory.</span>
<a name="l00236"></a>00236 <span class="comment">     * Application must supply the callback function.</span>
<a name="l00237"></a>00237 <span class="comment">     *</span>
<a name="l00238"></a>00238 <span class="comment">     * We use on_media_update() callback in this application to start</span>
<a name="l00239"></a>00239 <span class="comment">     * media transmission.</span>
<a name="l00240"></a>00240 <span class="comment">     */</span>
<a name="l00241"></a>00241     {
<a name="l00242"></a>00242         <a class="code" href="structpjsip__inv__callback.htm">pjsip_inv_callback</a> inv_cb;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244         <span class="comment">/* Init the callback for INVITE session: */</span>
<a name="l00245"></a>00245         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#gafa92001573289c87313c660146369fa3">pj_bzero</a>(&amp;inv_cb, <span class="keyword">sizeof</span>(inv_cb));
<a name="l00246"></a>00246         inv_cb.<a class="code" href="structpjsip__inv__callback.htm#aabf40987d5cb9296a2eea1a10534a061">on_state_changed</a> = &amp;call_on_state_changed;
<a name="l00247"></a>00247         inv_cb.<a class="code" href="structpjsip__inv__callback.htm#adf8e43e12064218cc3b9312a9c357cf3">on_new_session</a> = &amp;call_on_forked;
<a name="l00248"></a>00248         inv_cb.<a class="code" href="structpjsip__inv__callback.htm#aaafbe25fa41f5aa57dfe5a42bf025f2d">on_media_update</a> = &amp;call_on_media_update;
<a name="l00249"></a>00249 
<a name="l00250"></a>00250         <span class="comment">/* Initialize invite session module:  */</span>
<a name="l00251"></a>00251         status = <a class="code" href="group__PJSIP__INV.htm#gafd8e278e13d53c78ec6f4dabc2ba2a04">pjsip_inv_usage_init</a>(g_endpt, &amp;inv_cb);
<a name="l00252"></a>00252         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255     <span class="comment">/* Initialize 100rel support */</span>
<a name="l00256"></a>00256     status = <a class="code" href="group__PJSIP__100REL.htm#ga4235c00a7111a1f04e1e75fcc8174744">pjsip_100rel_init_module</a>(g_endpt);
<a name="l00257"></a>00257     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, status);
<a name="l00258"></a>00258 
<a name="l00259"></a>00259     <span class="comment">/*</span>
<a name="l00260"></a>00260 <span class="comment">     * Register our module to receive incoming requests.</span>
<a name="l00261"></a>00261 <span class="comment">     */</span>
<a name="l00262"></a>00262     status = <a class="code" href="group__PJSIP__ENDPT.htm#ga1322fd2f38ecbf723e3e7e78632fe140">pjsip_endpt_register_module</a>( g_endpt, &amp;mod_simpleua);
<a name="l00263"></a>00263     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="comment">/* </span>
<a name="l00267"></a>00267 <span class="comment">     * Initialize media endpoint.</span>
<a name="l00268"></a>00268 <span class="comment">     * This will implicitly initialize PJMEDIA too.</span>
<a name="l00269"></a>00269 <span class="comment">     */</span>
<a name="l00270"></a>00270 <span class="preprocessor">#if PJ_HAS_THREADS</span>
<a name="l00271"></a>00271 <span class="preprocessor"></span>    status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__ENDPT.htm#ga2865efcd255dbcb05ede33dbae5c27f5">pjmedia_endpt_create</a>(&amp;cp.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm#a0849ace123d8760dfab52418c2732af3">factory</a>, NULL, 1, &amp;g_med_endpt);
<a name="l00272"></a>00272 <span class="preprocessor">#else</span>
<a name="l00273"></a>00273 <span class="preprocessor"></span>    status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__ENDPT.htm#ga2865efcd255dbcb05ede33dbae5c27f5">pjmedia_endpt_create</a>(&amp;cp.<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__caching__pool.htm#a0849ace123d8760dfab52418c2732af3">factory</a>, 
<a name="l00274"></a>00274                                   <a class="code" href="group__PJSIP__ENDPT.htm#gada884870b0a2079339725984bc3a9b0e">pjsip_endpt_get_ioqueue</a>(g_endpt), 
<a name="l00275"></a>00275                                   0, &amp;g_med_endpt);
<a name="l00276"></a>00276 <span class="preprocessor">#endif</span>
<a name="l00277"></a>00277 <span class="preprocessor"></span>    <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00278"></a>00278 
<a name="l00279"></a>00279     <span class="comment">/* </span>
<a name="l00280"></a>00280 <span class="comment">     * Add PCMA/PCMU codec to the media endpoint. </span>
<a name="l00281"></a>00281 <span class="comment">     */</span>
<a name="l00282"></a>00282 <span class="preprocessor">#if defined(PJMEDIA_HAS_G711_CODEC) &amp;&amp; PJMEDIA_HAS_G711_CODEC!=0</span>
<a name="l00283"></a>00283 <span class="preprocessor"></span>    status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__G711.htm#gaa4cc7591d63c308e1f2e7821240abf14">pjmedia_codec_g711_init</a>(g_med_endpt);
<a name="l00284"></a>00284     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00285"></a>00285 <span class="preprocessor">#endif</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span>
<a name="l00287"></a>00287     
<a name="l00288"></a>00288     <span class="comment">/* </span>
<a name="l00289"></a>00289 <span class="comment">     * Create media transport used to send/receive RTP/RTCP socket.</span>
<a name="l00290"></a>00290 <span class="comment">     * One media transport is needed for each call. Application may</span>
<a name="l00291"></a>00291 <span class="comment">     * opt to re-use the same media transport for subsequent calls.</span>
<a name="l00292"></a>00292 <span class="comment">     */</span>
<a name="l00293"></a>00293     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__TRANSPORT__UDP.htm#ga65206348e650bf824dfa1a3242b57001">pjmedia_transport_udp_create3</a>(g_med_endpt, AF, NULL, NULL, 
<a name="l00294"></a>00294                                            RTP_PORT, 0, &amp;g_med_transport);
<a name="l00295"></a>00295     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00296"></a>00296         app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to create media transport&quot;</span>, status);
<a name="l00297"></a>00297         <span class="keywordflow">return</span> 1;
<a name="l00298"></a>00298     }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     <span class="comment">/* </span>
<a name="l00301"></a>00301 <span class="comment">     * Get socket info (address, port) of the media transport. We will</span>
<a name="l00302"></a>00302 <span class="comment">     * need this info to create SDP (i.e. the address and port info in</span>
<a name="l00303"></a>00303 <span class="comment">     * the SDP).</span>
<a name="l00304"></a>00304 <span class="comment">     */</span>
<a name="l00305"></a>00305     <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__TRANSPORT.htm#gab293d1afad42d1f49745f3fcd235fa17">pjmedia_transport_info_init</a>(&amp;g_med_tpinfo);
<a name="l00306"></a>00306     <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__TRANSPORT.htm#ga213beab16cd5d94437c2890b9f3fe75b">pjmedia_transport_get_info</a>(g_med_transport, &amp;g_med_tpinfo);
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 
<a name="l00309"></a>00309     <span class="comment">/*</span>
<a name="l00310"></a>00310 <span class="comment">     * If URL is specified, then make call immediately.</span>
<a name="l00311"></a>00311 <span class="comment">     */</span>
<a name="l00312"></a>00312     <span class="keywordflow">if</span> (argc &gt; 1) {
<a name="l00313"></a>00313         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm">pj_sockaddr</a> hostaddr;
<a name="l00314"></a>00314         <span class="keywordtype">char</span> hostip[<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga29a062374255dd3f90272161610cc5e3">PJ_INET6_ADDRSTRLEN</a>+2];
<a name="l00315"></a>00315         <span class="keywordtype">char</span> temp[80];
<a name="l00316"></a>00316         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> dst_uri = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(argv[1]);
<a name="l00317"></a>00317         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> local_uri;
<a name="l00318"></a>00318         <a class="code" href="structpjsip__dialog.htm">pjsip_dialog</a> *dlg;
<a name="l00319"></a>00319         <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *local_sdp;
<a name="l00320"></a>00320         <a class="code" href="structpjsip__tx__data.htm">pjsip_tx_data</a> *tdata;
<a name="l00321"></a>00321 
<a name="l00322"></a>00322         <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__addr__resolve.htm#ga410b1bd02dcabf108b129e95368beef4">pj_gethostip</a>(AF, &amp;hostaddr) != PJ_SUCCESS) {
<a name="l00323"></a>00323             app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to retrieve local host IP&quot;</span>, status);
<a name="l00324"></a>00324             <span class="keywordflow">return</span> 1;
<a name="l00325"></a>00325         }
<a name="l00326"></a>00326         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga9c3d13cca00f7166f02a2b7b2b84c855">pj_sockaddr_print</a>(&amp;hostaddr, hostip, <span class="keyword">sizeof</span>(hostip), 2);
<a name="l00327"></a>00327 
<a name="l00328"></a>00328         pj_ansi_sprintf(temp, <span class="stringliteral">&quot;&lt;sip:simpleuac@%s:%d&gt;&quot;</span>, 
<a name="l00329"></a>00329                         hostip, SIP_PORT);
<a name="l00330"></a>00330         local_uri = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(temp);
<a name="l00331"></a>00331 
<a name="l00332"></a>00332         <span class="comment">/* Create UAC dialog */</span>
<a name="l00333"></a>00333         status = <a class="code" href="group__PJSIP__DIALOG.htm#ga6643135a8dbee20a156c1046fda27e03">pjsip_dlg_create_uac</a>( <a class="code" href="group__PJSUA__UA.htm#gaec6ebe425231e64b6cc47f908e187a1e">pjsip_ua_instance</a>(), 
<a name="l00334"></a>00334                                        &amp;local_uri,  <span class="comment">/* local URI */</span>
<a name="l00335"></a>00335                                        &amp;local_uri,  <span class="comment">/* local Contact */</span>
<a name="l00336"></a>00336                                        &amp;dst_uri,    <span class="comment">/* remote URI */</span>
<a name="l00337"></a>00337                                        &amp;dst_uri,    <span class="comment">/* remote target */</span>
<a name="l00338"></a>00338                                        &amp;dlg);       <span class="comment">/* dialog */</span>
<a name="l00339"></a>00339         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00340"></a>00340             app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to create UAC dialog&quot;</span>, status);
<a name="l00341"></a>00341             <span class="keywordflow">return</span> 1;
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343 
<a name="l00344"></a>00344         <span class="comment">/* If we expect the outgoing INVITE to be challenged, then we should</span>
<a name="l00345"></a>00345 <span class="comment">         * put the credentials in the dialog here, with something like this:</span>
<a name="l00346"></a>00346 <span class="comment">         *</span>
<a name="l00347"></a>00347 <span class="comment">            {</span>
<a name="l00348"></a>00348 <span class="comment">                pjsip_cred_info cred[1];</span>
<a name="l00349"></a>00349 <span class="comment"></span>
<a name="l00350"></a>00350 <span class="comment">                cred[0].realm     = pj_str(&quot;sip.server.realm&quot;);</span>
<a name="l00351"></a>00351 <span class="comment">                cred[0].scheme    = pj_str(&quot;digest&quot;);</span>
<a name="l00352"></a>00352 <span class="comment">                cred[0].username  = pj_str(&quot;theuser&quot;);</span>
<a name="l00353"></a>00353 <span class="comment">                cred[0].data_type = PJSIP_CRED_DATA_PLAIN_PASSWD;</span>
<a name="l00354"></a>00354 <span class="comment">                cred[0].data      = pj_str(&quot;thepassword&quot;);</span>
<a name="l00355"></a>00355 <span class="comment"></span>
<a name="l00356"></a>00356 <span class="comment">                pjsip_auth_clt_set_credentials( &amp;dlg-&gt;auth_sess, 1, cred);</span>
<a name="l00357"></a>00357 <span class="comment">            }</span>
<a name="l00358"></a>00358 <span class="comment">         *</span>
<a name="l00359"></a>00359 <span class="comment">         */</span>
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 
<a name="l00362"></a>00362         <span class="comment">/* Get the SDP body to be put in the outgoing INVITE, by asking</span>
<a name="l00363"></a>00363 <span class="comment">         * media endpoint to create one for us. The SDP will contain all</span>
<a name="l00364"></a>00364 <span class="comment">         * codecs that have been registered to it (in this case, only</span>
<a name="l00365"></a>00365 <span class="comment">         * PCMA and PCMU), plus telephony event.</span>
<a name="l00366"></a>00366 <span class="comment">         */</span>
<a name="l00367"></a>00367         status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__ENDPT.htm#gaa49360a690c292dddd722b39c2f8c8bb">pjmedia_endpt_create_sdp</a>( g_med_endpt,     <span class="comment">/* the media endpt  */</span>
<a name="l00368"></a>00368                                            dlg-&gt;<a class="code" href="structpjsip__dialog.htm#aab6bd0fc8bb4f29bacbf68070bad6c2b">pool</a>,       <span class="comment">/* pool.            */</span>
<a name="l00369"></a>00369                                            1,               <span class="comment">/* # of streams     */</span>
<a name="l00370"></a>00370                                            &amp;g_med_tpinfo.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__transport__info.htm#a0d8a2639d0a981e9e025d71e200160cb">sock_info</a>,   
<a name="l00371"></a>00371                                                             <span class="comment">/* RTP sock info    */</span>
<a name="l00372"></a>00372                                            &amp;local_sdp);     <span class="comment">/* the SDP result   */</span>
<a name="l00373"></a>00373         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 
<a name="l00376"></a>00376 
<a name="l00377"></a>00377         <span class="comment">/* Create the INVITE session, and pass the SDP returned earlier</span>
<a name="l00378"></a>00378 <span class="comment">         * as the session&#39;s initial capability.</span>
<a name="l00379"></a>00379 <span class="comment">         */</span>
<a name="l00380"></a>00380         status = <a class="code" href="group__PJSIP__INV.htm#ga5a0312d7ff604f9fd7308bbcdb1e08c7">pjsip_inv_create_uac</a>( dlg, local_sdp, 0, &amp;g_inv);
<a name="l00381"></a>00381         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00382"></a>00382 
<a name="l00383"></a>00383         <span class="comment">/* If we want the initial INVITE to travel to specific SIP proxies,</span>
<a name="l00384"></a>00384 <span class="comment">         * then we should put the initial dialog&#39;s route set here. The final</span>
<a name="l00385"></a>00385 <span class="comment">         * route set will be updated once a dialog has been established.</span>
<a name="l00386"></a>00386 <span class="comment">         * To set the dialog&#39;s initial route set, we do it with something</span>
<a name="l00387"></a>00387 <span class="comment">         * like this:</span>
<a name="l00388"></a>00388 <span class="comment">         *</span>
<a name="l00389"></a>00389 <span class="comment">            {</span>
<a name="l00390"></a>00390 <span class="comment">                pjsip_route_hdr route_set;</span>
<a name="l00391"></a>00391 <span class="comment">                pjsip_route_hdr *route;</span>
<a name="l00392"></a>00392 <span class="comment">                const pj_str_t hname = { &quot;Route&quot;, 5 };</span>
<a name="l00393"></a>00393 <span class="comment">                char *uri = &quot;sip:proxy.server;lr&quot;;</span>
<a name="l00394"></a>00394 <span class="comment"></span>
<a name="l00395"></a>00395 <span class="comment">                pj_list_init(&amp;route_set);</span>
<a name="l00396"></a>00396 <span class="comment"></span>
<a name="l00397"></a>00397 <span class="comment">                route = pjsip_parse_hdr( dlg-&gt;pool, &amp;hname, </span>
<a name="l00398"></a>00398 <span class="comment">                                         uri, strlen(uri),</span>
<a name="l00399"></a>00399 <span class="comment">                                         NULL);</span>
<a name="l00400"></a>00400 <span class="comment">                PJ_ASSERT_RETURN(route != NULL, 1);</span>
<a name="l00401"></a>00401 <span class="comment">                pj_list_push_back(&amp;route_set, route);</span>
<a name="l00402"></a>00402 <span class="comment"></span>
<a name="l00403"></a>00403 <span class="comment">                pjsip_dlg_set_route_set(dlg, &amp;route_set);</span>
<a name="l00404"></a>00404 <span class="comment">            }</span>
<a name="l00405"></a>00405 <span class="comment">         *</span>
<a name="l00406"></a>00406 <span class="comment">         * Note that Route URI SHOULD have an &quot;;lr&quot; parameter!</span>
<a name="l00407"></a>00407 <span class="comment">         */</span>
<a name="l00408"></a>00408 
<a name="l00409"></a>00409         <span class="comment">/* Create initial INVITE request.</span>
<a name="l00410"></a>00410 <span class="comment">         * This INVITE request will contain a perfectly good request and </span>
<a name="l00411"></a>00411 <span class="comment">         * an SDP body as well.</span>
<a name="l00412"></a>00412 <span class="comment">         */</span>
<a name="l00413"></a>00413         status = <a class="code" href="group__PJSIP__INV.htm#ga729c006bbc8076e88ab8337754d2319e">pjsip_inv_invite</a>(g_inv, &amp;tdata);
<a name="l00414"></a>00414         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00415"></a>00415 
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 
<a name="l00418"></a>00418         <span class="comment">/* Send initial INVITE request. </span>
<a name="l00419"></a>00419 <span class="comment">         * From now on, the invite session&#39;s state will be reported to us</span>
<a name="l00420"></a>00420 <span class="comment">         * via the invite session callbacks.</span>
<a name="l00421"></a>00421 <span class="comment">         */</span>
<a name="l00422"></a>00422         status = <a class="code" href="group__PJSIP__INV.htm#ga0b80fd8a5a89df2228b681f141c1ebd9">pjsip_inv_send_msg</a>(g_inv, tdata);
<a name="l00423"></a>00423         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, 1);
<a name="l00424"></a>00424 
<a name="l00425"></a>00425 
<a name="l00426"></a>00426     } <span class="keywordflow">else</span> {
<a name="l00427"></a>00427 
<a name="l00428"></a>00428         <span class="comment">/* No URL to make call to */</span>
<a name="l00429"></a>00429 
<a name="l00430"></a>00430         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Ready to accept incoming calls...&quot;</span>));
<a name="l00431"></a>00431     }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 
<a name="l00434"></a>00434     <span class="comment">/* Loop until one call is completed */</span>
<a name="l00435"></a>00435     <span class="keywordflow">for</span> (;!g_complete;) {
<a name="l00436"></a>00436         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__time__val.htm">pj_time_val</a> timeout = {0, 10};
<a name="l00437"></a>00437         <a class="code" href="group__PJSIP__ENDPT.htm#ga2fc6fbb56b269712776f22d02edb2f6c">pjsip_endpt_handle_events</a>(g_endpt, &amp;timeout);
<a name="l00438"></a>00438     }
<a name="l00439"></a>00439 
<a name="l00440"></a>00440     <span class="comment">/* On exit, dump current memory usage: */</span>
<a name="l00441"></a>00441     dump_pool_usage(THIS_FILE, &amp;cp);
<a name="l00442"></a>00442 
<a name="l00443"></a>00443     <span class="keywordflow">return</span> 0;
<a name="l00444"></a>00444 }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 <span class="comment">/*</span>
<a name="l00449"></a>00449 <span class="comment"> * Callback when INVITE session state has changed.</span>
<a name="l00450"></a>00450 <span class="comment"> * This callback is registered when the invite session module is initialized.</span>
<a name="l00451"></a>00451 <span class="comment"> * We mostly want to know when the invite session has been disconnected,</span>
<a name="l00452"></a>00452 <span class="comment"> * so that we can quit the application.</span>
<a name="l00453"></a>00453 <span class="comment"> */</span>
<a name="l00454"></a>00454 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_state_changed( <a class="code" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, 
<a name="l00455"></a>00455                                    <a class="code" href="structpjsip__event.htm">pjsip_event</a> *e)
<a name="l00456"></a>00456 {
<a name="l00457"></a>00457     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);
<a name="l00458"></a>00458 
<a name="l00459"></a>00459     <span class="keywordflow">if</span> (inv-&gt;<a class="code" href="structpjsip__inv__session.htm#ab0bd09f668c16bc4e52527952a27c0a7">state</a> == <a class="code" href="group__PJSIP__INV.htm#gga083ffd9c75c406c41f113479cc1ebc1caab482bbbe77ed88994a790bd6abcc1c5">PJSIP_INV_STATE_DISCONNECTED</a>) {
<a name="l00460"></a>00460 
<a name="l00461"></a>00461         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Call DISCONNECTED [reason=%d (%s)]&quot;</span>, 
<a name="l00462"></a>00462                   inv-&gt;<a class="code" href="structpjsip__inv__session.htm#a135700970065ef7dc4c92d34ba0fa78a">cause</a>,
<a name="l00463"></a>00463                   <a class="code" href="group__PJSIP__MSG__LINE.htm#gaf5eea65c3b5d78522b857cc13bf753c8">pjsip_get_status_text</a>(inv-&gt;<a class="code" href="structpjsip__inv__session.htm#a135700970065ef7dc4c92d34ba0fa78a">cause</a>)-&gt;<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm#a4eb3153e4363a93f65f5c728911168d4">ptr</a>));
<a name="l00464"></a>00464 
<a name="l00465"></a>00465         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;One call completed, application quitting...&quot;</span>));
<a name="l00466"></a>00466         g_complete = 1;
<a name="l00467"></a>00467 
<a name="l00468"></a>00468     } <span class="keywordflow">else</span> {
<a name="l00469"></a>00469 
<a name="l00470"></a>00470         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;Call state changed to %s&quot;</span>, 
<a name="l00471"></a>00471                   <a class="code" href="group__PJSIP__INV.htm#gab7ce264f6ddfded819a010bca074a5f1">pjsip_inv_state_name</a>(inv-&gt;<a class="code" href="structpjsip__inv__session.htm#ab0bd09f668c16bc4e52527952a27c0a7">state</a>)));
<a name="l00472"></a>00472 
<a name="l00473"></a>00473     }
<a name="l00474"></a>00474 }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 
<a name="l00477"></a>00477 <span class="comment">/* This callback is called when dialog has forked. */</span>
<a name="l00478"></a>00478 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_forked(<a class="code" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv, <a class="code" href="structpjsip__event.htm">pjsip_event</a> *e)
<a name="l00479"></a>00479 {
<a name="l00480"></a>00480     <span class="comment">/* To be done... */</span>
<a name="l00481"></a>00481     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(inv);
<a name="l00482"></a>00482     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__config.htm#ga7523f8576efd271c22b188eab05d7870">PJ_UNUSED_ARG</a>(e);
<a name="l00483"></a>00483 }
<a name="l00484"></a>00484 
<a name="l00485"></a>00485 
<a name="l00486"></a>00486 <span class="comment">/*</span>
<a name="l00487"></a>00487 <span class="comment"> * Callback when incoming requests outside any transactions and any</span>
<a name="l00488"></a>00488 <span class="comment"> * dialogs are received. We&#39;re only interested to hande incoming INVITE</span>
<a name="l00489"></a>00489 <span class="comment"> * request, and we&#39;ll reject any other requests with 500 response.</span>
<a name="l00490"></a>00490 <span class="comment"> */</span>
<a name="l00491"></a>00491 <span class="keyword">static</span> <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> on_rx_request( <a class="code" href="structpjsip__rx__data.htm">pjsip_rx_data</a> *rdata )
<a name="l00492"></a>00492 {
<a name="l00493"></a>00493     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/unionpj__sockaddr.htm">pj_sockaddr</a> hostaddr;
<a name="l00494"></a>00494     <span class="keywordtype">char</span> temp[80], hostip[PJ_INET6_ADDRSTRLEN];
<a name="l00495"></a>00495     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> local_uri;
<a name="l00496"></a>00496     <a class="code" href="structpjsip__dialog.htm">pjsip_dialog</a> *dlg;
<a name="l00497"></a>00497     <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *local_sdp;
<a name="l00498"></a>00498     <a class="code" href="structpjsip__tx__data.htm">pjsip_tx_data</a> *tdata;
<a name="l00499"></a>00499     <span class="keywordtype">unsigned</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structapp__t_1_1options.htm">options</a> = 0;
<a name="l00500"></a>00500     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status;
<a name="l00501"></a>00501 
<a name="l00502"></a>00502 
<a name="l00503"></a>00503     <span class="comment">/* </span>
<a name="l00504"></a>00504 <span class="comment">     * Respond (statelessly) any non-INVITE requests with 500 </span>
<a name="l00505"></a>00505 <span class="comment">     */</span>
<a name="l00506"></a>00506     <span class="keywordflow">if</span> (rdata-&gt;<a class="code" href="structpjsip__rx__data.htm#a957baee7035acb34775c1c7cfd929161">msg_info</a>.<a class="code" href="structpjsip__rx__data.htm#adb0a7cf9ce637a3629784acc76073570">msg</a>-&gt;<a class="code" href="structpjsip__msg.htm#a93bcca2b1e43e5940b0d073b0c78ac63">line</a>.<a class="code" href="structpjsip__msg.htm#a121c667b91084eb868069d428299351a">req</a>.<a class="code" href="structpjsip__request__line.htm#ac3bb3248869a192554dda0b328a10e01">method</a>.<a class="code" href="structpjsip__method.htm#a107556b345ce2a3fbdff4f64e1cd43be">id</a> != <a class="code" href="group__PJSIP__MSG__METHOD.htm#gga66b57e1b5645d2ee843141a0e657b0d1a3191457e7b8629e0cb3955564784e5b9">PJSIP_INVITE_METHOD</a>) {
<a name="l00507"></a>00507 
<a name="l00508"></a>00508         <span class="keywordflow">if</span> (rdata-&gt;<a class="code" href="structpjsip__rx__data.htm#a957baee7035acb34775c1c7cfd929161">msg_info</a>.<a class="code" href="structpjsip__rx__data.htm#adb0a7cf9ce637a3629784acc76073570">msg</a>-&gt;<a class="code" href="structpjsip__msg.htm#a93bcca2b1e43e5940b0d073b0c78ac63">line</a>.<a class="code" href="structpjsip__msg.htm#a121c667b91084eb868069d428299351a">req</a>.<a class="code" href="structpjsip__request__line.htm#ac3bb3248869a192554dda0b328a10e01">method</a>.<a class="code" href="structpjsip__method.htm#a107556b345ce2a3fbdff4f64e1cd43be">id</a> != <a class="code" href="group__PJSIP__MSG__METHOD.htm#gga66b57e1b5645d2ee843141a0e657b0d1a0e564a7a7fc064ef37547b2d82117372">PJSIP_ACK_METHOD</a>) {
<a name="l00509"></a>00509             <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Simple UA unable to handle &quot;</span>
<a name="l00510"></a>00510                                      <span class="stringliteral">&quot;this request&quot;</span>);
<a name="l00511"></a>00511 
<a name="l00512"></a>00512             <a class="code" href="group__PJSIP__ENDPT__STATELESS.htm#ga09a4577a6c0b7c14c37d0981b1d55f07">pjsip_endpt_respond_stateless</a>( g_endpt, rdata, 
<a name="l00513"></a>00513                                            500, &amp;reason,
<a name="l00514"></a>00514                                            NULL, NULL);
<a name="l00515"></a>00515         }
<a name="l00516"></a>00516         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00517"></a>00517     }
<a name="l00518"></a>00518 
<a name="l00519"></a>00519 
<a name="l00520"></a>00520     <span class="comment">/*</span>
<a name="l00521"></a>00521 <span class="comment">     * Reject INVITE if we already have an INVITE session in progress.</span>
<a name="l00522"></a>00522 <span class="comment">     */</span>
<a name="l00523"></a>00523     <span class="keywordflow">if</span> (g_inv) {
<a name="l00524"></a>00524 
<a name="l00525"></a>00525         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Another call is in progress&quot;</span>);
<a name="l00526"></a>00526 
<a name="l00527"></a>00527         <a class="code" href="group__PJSIP__ENDPT__STATELESS.htm#ga09a4577a6c0b7c14c37d0981b1d55f07">pjsip_endpt_respond_stateless</a>( g_endpt, rdata, 
<a name="l00528"></a>00528                                        500, &amp;reason,
<a name="l00529"></a>00529                                        NULL, NULL);
<a name="l00530"></a>00530         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00531"></a>00531 
<a name="l00532"></a>00532     }
<a name="l00533"></a>00533 
<a name="l00534"></a>00534     <span class="comment">/* Verify that we can handle the request. */</span>
<a name="l00535"></a>00535     status = <a class="code" href="group__PJSIP__INV.htm#gac1ec4917f8f7c7376a6ea49201045ddf">pjsip_inv_verify_request</a>(rdata, &amp;options, NULL, NULL,
<a name="l00536"></a>00536                                       g_endpt, NULL);
<a name="l00537"></a>00537     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00538"></a>00538 
<a name="l00539"></a>00539         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/structpj__str__t.htm">pj_str_t</a> reason = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(<span class="stringliteral">&quot;Sorry Simple UA can not handle this INVITE&quot;</span>);
<a name="l00540"></a>00540 
<a name="l00541"></a>00541         <a class="code" href="group__PJSIP__ENDPT__STATELESS.htm#ga09a4577a6c0b7c14c37d0981b1d55f07">pjsip_endpt_respond_stateless</a>( g_endpt, rdata, 
<a name="l00542"></a>00542                                        500, &amp;reason,
<a name="l00543"></a>00543                                        NULL, NULL);
<a name="l00544"></a>00544         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00545"></a>00545     } 
<a name="l00546"></a>00546 
<a name="l00547"></a>00547     <span class="comment">/*</span>
<a name="l00548"></a>00548 <span class="comment">     * Generate Contact URI</span>
<a name="l00549"></a>00549 <span class="comment">     */</span>
<a name="l00550"></a>00550     <span class="keywordflow">if</span> (<a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__addr__resolve.htm#ga410b1bd02dcabf108b129e95368beef4">pj_gethostip</a>(AF, &amp;hostaddr) != PJ_SUCCESS) {
<a name="l00551"></a>00551         app_perror(THIS_FILE, <span class="stringliteral">&quot;Unable to retrieve local host IP&quot;</span>, status);
<a name="l00552"></a>00552         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00553"></a>00553     }
<a name="l00554"></a>00554     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__SOCK.htm#ga9c3d13cca00f7166f02a2b7b2b84c855">pj_sockaddr_print</a>(&amp;hostaddr, hostip, <span class="keyword">sizeof</span>(hostip), 2);
<a name="l00555"></a>00555 
<a name="l00556"></a>00556     pj_ansi_sprintf(temp, <span class="stringliteral">&quot;&lt;sip:simpleuas@%s:%d&gt;&quot;</span>, 
<a name="l00557"></a>00557                     hostip, SIP_PORT);
<a name="l00558"></a>00558     local_uri = <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__PSTR.htm#ga20fa0c4d9ccddd0822a775730cf4a867">pj_str</a>(temp);
<a name="l00559"></a>00559 
<a name="l00560"></a>00560     <span class="comment">/*</span>
<a name="l00561"></a>00561 <span class="comment">     * Create UAS dialog.</span>
<a name="l00562"></a>00562 <span class="comment">     */</span>
<a name="l00563"></a>00563     status = <a class="code" href="group__PJSIP__DIALOG.htm#ga334ccd676171ef9b329eb33ce25d539c">pjsip_dlg_create_uas</a>( <a class="code" href="group__PJSUA__UA.htm#gaec6ebe425231e64b6cc47f908e187a1e">pjsip_ua_instance</a>(), 
<a name="l00564"></a>00564                                    rdata,
<a name="l00565"></a>00565                                    &amp;local_uri, <span class="comment">/* contact */</span>
<a name="l00566"></a>00566                                    &amp;dlg);
<a name="l00567"></a>00567     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00568"></a>00568         <a class="code" href="group__PJSIP__ENDPT__STATELESS.htm#ga09a4577a6c0b7c14c37d0981b1d55f07">pjsip_endpt_respond_stateless</a>(g_endpt, rdata, 500, NULL,
<a name="l00569"></a>00569                                       NULL, NULL);
<a name="l00570"></a>00570         <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00571"></a>00571     }
<a name="l00572"></a>00572 
<a name="l00573"></a>00573     <span class="comment">/* </span>
<a name="l00574"></a>00574 <span class="comment">     * Get media capability from media endpoint: </span>
<a name="l00575"></a>00575 <span class="comment">     */</span>
<a name="l00576"></a>00576 
<a name="l00577"></a>00577     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__ENDPT.htm#gaa49360a690c292dddd722b39c2f8c8bb">pjmedia_endpt_create_sdp</a>( g_med_endpt, rdata-&gt;<a class="code" href="structpjsip__rx__data.htm#a2509e30e2282a5abd5afa931fc6e7843">tp_info</a>.<a class="code" href="structpjsip__rx__data.htm#ab6aa6cf77c7843500dce282f19630890">pool</a>, 1,
<a name="l00578"></a>00578                                        &amp;g_med_tpinfo.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__transport__info.htm#a0d8a2639d0a981e9e025d71e200160cb">sock_info</a>, 
<a name="l00579"></a>00579                                        &amp;local_sdp);
<a name="l00580"></a>00580     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, PJ_TRUE);
<a name="l00581"></a>00581 
<a name="l00582"></a>00582 
<a name="l00583"></a>00583     <span class="comment">/* </span>
<a name="l00584"></a>00584 <span class="comment">     * Create invite session, and pass both the UAS dialog and the SDP</span>
<a name="l00585"></a>00585 <span class="comment">     * capability to the session.</span>
<a name="l00586"></a>00586 <span class="comment">     */</span>
<a name="l00587"></a>00587     status = <a class="code" href="group__PJSIP__INV.htm#ga446995d30676e2f47279056793756f0e">pjsip_inv_create_uas</a>( dlg, rdata, local_sdp, 0, &amp;g_inv);
<a name="l00588"></a>00588     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, PJ_TRUE);
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 
<a name="l00591"></a>00591     <span class="comment">/*</span>
<a name="l00592"></a>00592 <span class="comment">     * Initially send 180 response.</span>
<a name="l00593"></a>00593 <span class="comment">     *</span>
<a name="l00594"></a>00594 <span class="comment">     * The very first response to an INVITE must be created with</span>
<a name="l00595"></a>00595 <span class="comment">     * pjsip_inv_initial_answer(). Subsequent responses to the same</span>
<a name="l00596"></a>00596 <span class="comment">     * transaction MUST use pjsip_inv_answer().</span>
<a name="l00597"></a>00597 <span class="comment">     */</span>
<a name="l00598"></a>00598     status = <a class="code" href="group__PJSIP__INV.htm#ga7dbf4062678f4a75c3ba15f5b7a81ebf">pjsip_inv_initial_answer</a>(g_inv, rdata, 
<a name="l00599"></a>00599                                       180, 
<a name="l00600"></a>00600                                       NULL, NULL, &amp;tdata);
<a name="l00601"></a>00601     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, PJ_TRUE);
<a name="l00602"></a>00602 
<a name="l00603"></a>00603 
<a name="l00604"></a>00604     <span class="comment">/* Send the 180 response. */</span>  
<a name="l00605"></a>00605     status = <a class="code" href="group__PJSIP__INV.htm#ga0b80fd8a5a89df2228b681f141c1ebd9">pjsip_inv_send_msg</a>(g_inv, tdata); 
<a name="l00606"></a>00606     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, PJ_TRUE);
<a name="l00607"></a>00607 
<a name="l00608"></a>00608 
<a name="l00609"></a>00609     <span class="comment">/*</span>
<a name="l00610"></a>00610 <span class="comment">     * Now create 200 response.</span>
<a name="l00611"></a>00611 <span class="comment">     */</span>
<a name="l00612"></a>00612     status = <a class="code" href="group__PJSIP__INV.htm#gad2ec8b6d5c6b02f65c979eea05f82f61">pjsip_inv_answer</a>( g_inv, 
<a name="l00613"></a>00613                                200, NULL,       <span class="comment">/* st_code and st_text */</span>
<a name="l00614"></a>00614                                NULL,            <span class="comment">/* SDP already specified */</span>
<a name="l00615"></a>00615                                &amp;tdata);
<a name="l00616"></a>00616     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, PJ_TRUE);
<a name="l00617"></a>00617 
<a name="l00618"></a>00618     <span class="comment">/*</span>
<a name="l00619"></a>00619 <span class="comment">     * Send the 200 response.</span>
<a name="l00620"></a>00620 <span class="comment">     */</span>
<a name="l00621"></a>00621     status = <a class="code" href="group__PJSIP__INV.htm#ga0b80fd8a5a89df2228b681f141c1ebd9">pjsip_inv_send_msg</a>(g_inv, tdata);
<a name="l00622"></a>00622     <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__pj__assert.htm#gac98bea768b573f53432076a387864fb3">PJ_ASSERT_RETURN</a>(status == PJ_SUCCESS, PJ_TRUE);
<a name="l00623"></a>00623 
<a name="l00624"></a>00624 
<a name="l00625"></a>00625     <span class="comment">/* Done. </span>
<a name="l00626"></a>00626 <span class="comment">     * When the call is disconnected, it will be reported via the callback.</span>
<a name="l00627"></a>00627 <span class="comment">     */</span>
<a name="l00628"></a>00628 
<a name="l00629"></a>00629     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00630"></a>00630 }
<a name="l00631"></a>00631 
<a name="l00632"></a>00632  
<a name="l00633"></a>00633 
<a name="l00634"></a>00634 <span class="comment">/*</span>
<a name="l00635"></a>00635 <span class="comment"> * Callback when SDP negotiation has completed.</span>
<a name="l00636"></a>00636 <span class="comment"> * We are interested with this callback because we want to start media</span>
<a name="l00637"></a>00637 <span class="comment"> * as soon as SDP negotiation is completed.</span>
<a name="l00638"></a>00638 <span class="comment"> */</span>
<a name="l00639"></a>00639 <span class="keyword">static</span> <span class="keywordtype">void</span> call_on_media_update( <a class="code" href="structpjsip__inv__session.htm">pjsip_inv_session</a> *inv,
<a name="l00640"></a>00640                                   <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> status)
<a name="l00641"></a>00641 {
<a name="l00642"></a>00642     <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__session__info.htm">pjmedia_session_info</a> sess_info;
<a name="l00643"></a>00643     <span class="keyword">const</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *local_sdp;
<a name="l00644"></a>00644     <span class="keyword">const</span> <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__sdp__session.htm">pjmedia_sdp_session</a> *remote_sdp;
<a name="l00645"></a>00645     <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm">pjmedia_port</a> *media_port;
<a name="l00646"></a>00646 
<a name="l00647"></a>00647     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00648"></a>00648 
<a name="l00649"></a>00649         app_perror(THIS_FILE, <span class="stringliteral">&quot;SDP negotiation has failed&quot;</span>, status);
<a name="l00650"></a>00650 
<a name="l00651"></a>00651         <span class="comment">/* Here we should disconnect call if we&#39;re not in the middle </span>
<a name="l00652"></a>00652 <span class="comment">         * of initializing an UAS dialog and if this is not a re-INVITE.</span>
<a name="l00653"></a>00653 <span class="comment">         */</span>
<a name="l00654"></a>00654         <span class="keywordflow">return</span>;
<a name="l00655"></a>00655     }
<a name="l00656"></a>00656 
<a name="l00657"></a>00657     <span class="comment">/* Get local and remote SDP.</span>
<a name="l00658"></a>00658 <span class="comment">     * We need both SDPs to create a media session.</span>
<a name="l00659"></a>00659 <span class="comment">     */</span>
<a name="l00660"></a>00660     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__SDP__NEG.htm#gaa5fc5d38e7f2d9284ad352f251beecb3">pjmedia_sdp_neg_get_active_local</a>(inv-&gt;<a class="code" href="structpjsip__inv__session.htm#ab0482c41fc504f1326f5cc0fc77ca19b">neg</a>, &amp;local_sdp);
<a name="l00661"></a>00661 
<a name="l00662"></a>00662     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__SDP__NEG.htm#gab0ad3a803c7b2bf4ac840126619ff8ed">pjmedia_sdp_neg_get_active_remote</a>(inv-&gt;<a class="code" href="structpjsip__inv__session.htm#ab0482c41fc504f1326f5cc0fc77ca19b">neg</a>, &amp;remote_sdp);
<a name="l00663"></a>00663 
<a name="l00664"></a>00664 
<a name="l00665"></a>00665     <span class="comment">/* Create session info based on the two SDPs. </span>
<a name="l00666"></a>00666 <span class="comment">     * We only support one stream per session for now.</span>
<a name="l00667"></a>00667 <span class="comment">     */</span>
<a name="l00668"></a>00668     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__SESSION.htm#gafb5bdab351e35b00b1c92e5f6c996e77">pjmedia_session_info_from_sdp</a>(inv-&gt;<a class="code" href="structpjsip__inv__session.htm#a54bac564665fe25e610f2778c30de528">dlg</a>-&gt;<a class="code" href="structpjsip__dialog.htm#aab6bd0fc8bb4f29bacbf68070bad6c2b">pool</a>, g_med_endpt, 
<a name="l00669"></a>00669                                            1, &amp;sess_info, 
<a name="l00670"></a>00670                                            local_sdp, remote_sdp);
<a name="l00671"></a>00671     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00672"></a>00672         app_perror( THIS_FILE, <span class="stringliteral">&quot;Unable to create media session&quot;</span>, status);
<a name="l00673"></a>00673         <span class="keywordflow">return</span>;
<a name="l00674"></a>00674     }
<a name="l00675"></a>00675 
<a name="l00676"></a>00676     <span class="comment">/* If required, we can also change some settings in the session info,</span>
<a name="l00677"></a>00677 <span class="comment">     * (such as jitter buffer settings, codec settings, etc) before we</span>
<a name="l00678"></a>00678 <span class="comment">     * create the session.</span>
<a name="l00679"></a>00679 <span class="comment">     */</span>
<a name="l00680"></a>00680 
<a name="l00681"></a>00681     <span class="comment">/* Create new media session, passing the two SDPs, and also the</span>
<a name="l00682"></a>00682 <span class="comment">     * media socket that we created earlier.</span>
<a name="l00683"></a>00683 <span class="comment">     * The media session is active immediately.</span>
<a name="l00684"></a>00684 <span class="comment">     */</span>
<a name="l00685"></a>00685     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__SESSION.htm#ga6bb6bcc4721ca9f357b5e3bb750378c6">pjmedia_session_create</a>( g_med_endpt, &amp;sess_info,
<a name="l00686"></a>00686                                      &amp;g_med_transport, NULL, &amp;g_med_session );
<a name="l00687"></a>00687     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00688"></a>00688         app_perror( THIS_FILE, <span class="stringliteral">&quot;Unable to create media session&quot;</span>, status);
<a name="l00689"></a>00689         <span class="keywordflow">return</span>;
<a name="l00690"></a>00690     }
<a name="l00691"></a>00691 
<a name="l00692"></a>00692 
<a name="l00693"></a>00693     <span class="comment">/* Get the media port interface of the first stream in the session. </span>
<a name="l00694"></a>00694 <span class="comment">     * Media port interface is basicly a struct containing get_frame() and</span>
<a name="l00695"></a>00695 <span class="comment">     * put_frame() function. With this media port interface, we can attach</span>
<a name="l00696"></a>00696 <span class="comment">     * the port interface to conference bridge, or directly to a sound</span>
<a name="l00697"></a>00697 <span class="comment">     * player/recorder device.</span>
<a name="l00698"></a>00698 <span class="comment">     */</span>
<a name="l00699"></a>00699     <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMEDIA__SESSION.htm#gaa1871d244410caf4ea95c40622b6e453">pjmedia_session_get_port</a>(g_med_session, 0, &amp;media_port);
<a name="l00700"></a>00700 
<a name="l00701"></a>00701 
<a name="l00702"></a>00702 
<a name="l00703"></a>00703     <span class="comment">/* Create a sound Player device and connect the media port to the</span>
<a name="l00704"></a>00704 <span class="comment">     * sound device.</span>
<a name="l00705"></a>00705 <span class="comment">     */</span>
<a name="l00706"></a>00706     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__SND__PORT.htm#gaa67792594c2b15e22f957f12e90cd206">pjmedia_snd_port_create_player</a>( 
<a name="l00707"></a>00707                     inv-&gt;<a class="code" href="structpjsip__inv__session.htm#aec9ae6086ff45062bb61f1d21a3d0545">pool</a>,                          <span class="comment">/* pool             */</span>
<a name="l00708"></a>00708                     -1,                                 <span class="comment">/* sound dev id     */</span>
<a name="l00709"></a>00709                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a67150be4ab8cf4855fe8ca75156d9f61">clock_rate</a>,        <span class="comment">/* clock rate       */</span>
<a name="l00710"></a>00710                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a8e49e273b80f0a914e34358c8b0356b0">channel_count</a>,     <span class="comment">/* channel count    */</span>
<a name="l00711"></a>00711                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#afd0e1dca00660c509808a09ba3135e5c">samples_per_frame</a>, <span class="comment">/* samples per frame*/</span>
<a name="l00712"></a>00712                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a604c79a6c2a4afd930abd1323e8e8d31">bits_per_sample</a>,   <span class="comment">/* bits per sample  */</span>
<a name="l00713"></a>00713                     0,                                  <span class="comment">/* options          */</span>
<a name="l00714"></a>00714                     &amp;g_snd_player);
<a name="l00715"></a>00715     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00716"></a>00716         app_perror( THIS_FILE, <span class="stringliteral">&quot;Unable to create sound player&quot;</span>, status);
<a name="l00717"></a>00717         <a class="codeRef" doxygen="pjlib.tag:../../../pjlib/docs/html/" href="../../../pjlib/docs/html/group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;%d %d %d %d&quot;</span>,
<a name="l00718"></a>00718                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a67150be4ab8cf4855fe8ca75156d9f61">clock_rate</a>,        <span class="comment">/* clock rate       */</span>
<a name="l00719"></a>00719                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a8e49e273b80f0a914e34358c8b0356b0">channel_count</a>,     <span class="comment">/* channel count    */</span>
<a name="l00720"></a>00720                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#afd0e1dca00660c509808a09ba3135e5c">samples_per_frame</a>, <span class="comment">/* samples per frame*/</span>
<a name="l00721"></a>00721                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a604c79a6c2a4afd930abd1323e8e8d31">bits_per_sample</a>    <span class="comment">/* bits per sample  */</span>
<a name="l00722"></a>00722             ));
<a name="l00723"></a>00723         <span class="keywordflow">return</span>;
<a name="l00724"></a>00724     }
<a name="l00725"></a>00725 
<a name="l00726"></a>00726     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__SND__PORT.htm#ga046156b765a34e6c640b0534e6b21f9c">pjmedia_snd_port_connect</a>(g_snd_player, media_port);
<a name="l00727"></a>00727 
<a name="l00728"></a>00728 
<a name="l00729"></a>00729     <span class="comment">/* Create a sound recorder device and connect the media port to the</span>
<a name="l00730"></a>00730 <span class="comment">     * sound device.</span>
<a name="l00731"></a>00731 <span class="comment">     */</span>
<a name="l00732"></a>00732     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__SND__PORT.htm#gae667a793d66b446edb61b6c20de0e70d">pjmedia_snd_port_create_rec</a>( 
<a name="l00733"></a>00733                     inv-&gt;<a class="code" href="structpjsip__inv__session.htm#aec9ae6086ff45062bb61f1d21a3d0545">pool</a>,                          <span class="comment">/* pool             */</span>
<a name="l00734"></a>00734                     -1,                                 <span class="comment">/* sound dev id     */</span>
<a name="l00735"></a>00735                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a67150be4ab8cf4855fe8ca75156d9f61">clock_rate</a>,        <span class="comment">/* clock rate       */</span>
<a name="l00736"></a>00736                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a8e49e273b80f0a914e34358c8b0356b0">channel_count</a>,     <span class="comment">/* channel count    */</span>
<a name="l00737"></a>00737                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#afd0e1dca00660c509808a09ba3135e5c">samples_per_frame</a>, <span class="comment">/* samples per frame*/</span>
<a name="l00738"></a>00738                     media_port-&gt;<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port.htm#a1003b9085848f0a1ad3a3af9a760cbdb">info</a>.<a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/structpjmedia__port__info.htm#a604c79a6c2a4afd930abd1323e8e8d31">bits_per_sample</a>,   <span class="comment">/* bits per sample  */</span>
<a name="l00739"></a>00739                     0,                                  <span class="comment">/* options          */</span>
<a name="l00740"></a>00740                     &amp;g_snd_rec);
<a name="l00741"></a>00741     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00742"></a>00742         app_perror( THIS_FILE, <span class="stringliteral">&quot;Unable to create sound recorder&quot;</span>, status);
<a name="l00743"></a>00743         <span class="keywordflow">return</span>;
<a name="l00744"></a>00744     }
<a name="l00745"></a>00745 
<a name="l00746"></a>00746     status = <a class="codeRef" doxygen="pjmedia.tag:../../../pjmedia/docs/html/" href="../../../pjmedia/docs/html/group__PJMED__SND__PORT.htm#ga046156b765a34e6c640b0534e6b21f9c">pjmedia_snd_port_connect</a>(g_snd_rec, media_port);
<a name="l00747"></a>00747 
<a name="l00748"></a>00748     <span class="comment">/* Done with media. */</span>
<a name="l00749"></a>00749 }
<a name="l00750"></a>00750 
<a name="l00751"></a>00751 
</pre></div> </div>
<p>&nbsp;</p>
<hr><center>
PJSIP Open Source, high performance, small footprint, and very very portable SIP stack<br>
Copyright (C) 2006-2008 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
