<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Test: I/O Queue Performance (2.12)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; PJLIB Reference</p>
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Test: I/O Queue Performance </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Test the performance of the I/O queue, using typical producer consumer test. The test should examine the effect of using multiple threads on the performance.</p>
<p>This file is <b>pjlib-test/ioq_perf.c</b></p>
<div class="fragment"><div class="line"><span class="comment">/* $Id$ */</span></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span></div><div class="line"><span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><span class="comment"> * (at your option) any later version.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"> * along with this program; if not, write to the Free Software</span></div><div class="line"><span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;pjlib.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;pj/compat/high_precision.h&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if INCLUDE_IOQUEUE_PERF_TEST</span></div><div class="line"></div><div class="line"><span class="preprocessor">#ifdef _MSC_VER</span></div><div class="line"><span class="preprocessor">#   pragma warning ( disable: 4204)     // non-constant aggregate initializer</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define THIS_FILE       &quot;ioq_perf&quot;</span></div><div class="line"><span class="comment">//#define TRACE_(expr)  PJ_LOG(3,expr)</span></div><div class="line"><span class="preprocessor">#define TRACE_(expr)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> thread_quit_flag;</div><div class="line"><span class="keyword">static</span> <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> last_error;</div><div class="line"><span class="keyword">static</span> <span class="keywordtype">unsigned</span> last_error_counter;</div><div class="line"></div><div class="line"><span class="comment">/* Descriptor for each producer/consumer pair. */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct </span>test_item</div><div class="line">{</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga5ccc87de27d1236bc31ae3673d153984">pj_sock_t</a>            server_fd, </div><div class="line">                         client_fd;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a>        *ioqueue;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a>    *server_key,</div><div class="line">                        *client_key;</div><div class="line">    <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a>  recv_op,</div><div class="line">                         send_op;</div><div class="line">    <span class="keywordtype">int</span>                  has_pending_send;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>            buffer_size;</div><div class="line">    <span class="keywordtype">char</span>                *outgoing_buffer;</div><div class="line">    <span class="keywordtype">char</span>                *incoming_buffer;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a>            bytes_sent, </div><div class="line">                         bytes_recv;</div><div class="line">} test_item;</div><div class="line"></div><div class="line"><span class="comment">/* Callback when data has been read.</span></div><div class="line"><span class="comment"> * Increment item-&gt;bytes_recv and ready to read the next data.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_read_complete(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div><div class="line">                             <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,</div><div class="line">                             <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_read)</div><div class="line">{</div><div class="line">    test_item *item = (test_item*)<a class="code" href="group__PJ__IOQUEUE.htm#ga238dc908101226262f8ba91393e12efc">pj_ioqueue_get_user_data</a>(key);</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div><div class="line">    <span class="keywordtype">int</span> data_is_available = 1;</div><div class="line"></div><div class="line">    <span class="comment">//TRACE_((THIS_FILE, &quot;     read complete, bytes_read=%d&quot;, bytes_read));</span></div><div class="line"></div><div class="line">    <span class="keywordflow">do</span> {</div><div class="line">        <span class="keywordflow">if</span> (thread_quit_flag)</div><div class="line">            <span class="keywordflow">return</span>;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (bytes_read &lt; 0) {</div><div class="line">            <span class="keywordtype">char</span> errmsg[<a class="code" href="group__pj__errno.htm#ga314a8edfdcec54a086a401e97b5b0bd0">PJ_ERR_MSG_SIZE</a>];</div><div class="line"></div><div class="line">            rc = (<a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a>)-bytes_read;</div><div class="line">            <span class="keywordflow">if</span> (rc != last_error) {</div><div class="line">                <span class="comment">//last_error = rc;</span></div><div class="line">                <a class="code" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a>(rc, errmsg, <span class="keyword">sizeof</span>(errmsg));</div><div class="line">                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE,<span class="stringliteral">&quot;...error: read error, bytes_read=%d (%s)&quot;</span>, </div><div class="line">                          bytes_read, errmsg));</div><div class="line">                <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, </div><div class="line">                          <span class="stringliteral">&quot;.....additional info: total read=%u, total sent=%u&quot;</span>,</div><div class="line">                          item-&gt;bytes_recv, item-&gt;bytes_sent));</div><div class="line">            } <span class="keywordflow">else</span> {</div><div class="line">                last_error_counter++;</div><div class="line">            }</div><div class="line">            bytes_read = 0;</div><div class="line"></div><div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bytes_read == 0) {</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...socket has closed!&quot;</span>));</div><div class="line">        }</div><div class="line"></div><div class="line">        item-&gt;bytes_recv += bytes_read;</div><div class="line">    </div><div class="line">        <span class="comment">/* To assure that the test quits, even if main thread</span></div><div class="line"><span class="comment">         * doesn&#39;t have time to run.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keywordflow">if</span> (item-&gt;bytes_recv &gt; item-&gt;buffer_size * 10000) </div><div class="line">            thread_quit_flag = 1;</div><div class="line"></div><div class="line">        bytes_read = item-&gt;buffer_size;</div><div class="line">        rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>( key, op_key,</div><div class="line">                              item-&gt;incoming_buffer, &amp;bytes_read, 0 );</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (rc == <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            data_is_available = 1;</div><div class="line">        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rc == <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div><div class="line">            data_is_available = 0;</div><div class="line">        } <span class="keywordflow">else</span> {</div><div class="line">            data_is_available = 0;</div><div class="line">            <span class="keywordflow">if</span> (rc != last_error) {</div><div class="line">                last_error = rc;</div><div class="line">                app_perror(<span class="stringliteral">&quot;...error: read error(1)&quot;</span>, rc);</div><div class="line">            } <span class="keywordflow">else</span> {</div><div class="line">                last_error_counter++;</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (!item-&gt;has_pending_send) {</div><div class="line">            <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> sent = item-&gt;buffer_size;</div><div class="line">            rc = <a class="code" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send</a>(item-&gt;client_key, &amp;item-&gt;send_op,</div><div class="line">                                 item-&gt;outgoing_buffer, &amp;sent, 0);</div><div class="line">            <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div><div class="line">                app_perror(<span class="stringliteral">&quot;...error: write error&quot;</span>, rc);</div><div class="line">            }</div><div class="line"></div><div class="line">            item-&gt;has_pending_send = (rc==<a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>);</div><div class="line">        }</div><div class="line"></div><div class="line">    } <span class="keywordflow">while</span> (data_is_available);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Callback when data has been written.</span></div><div class="line"><span class="comment"> * Increment item-&gt;bytes_sent and write the next data.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_write_complete(<a class="code" href="group__PJ__BASIC.htm#ga89da69533fa1109f3a11ef91c489d9ad">pj_ioqueue_key_t</a> *key, </div><div class="line">                              <a class="code" href="structpj__ioqueue__op__key__t.htm">pj_ioqueue_op_key_t</a> *op_key,</div><div class="line">                              <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes_sent)</div><div class="line">{</div><div class="line">    test_item *item = (test_item*) <a class="code" href="group__PJ__IOQUEUE.htm#ga238dc908101226262f8ba91393e12efc">pj_ioqueue_get_user_data</a>(key);</div><div class="line">    </div><div class="line">    <span class="comment">//TRACE_((THIS_FILE, &quot;     write complete: sent = %d&quot;, bytes_sent));</span></div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (thread_quit_flag)</div><div class="line">        <span class="keywordflow">return</span>;</div><div class="line"></div><div class="line">    item-&gt;has_pending_send = 0;</div><div class="line">    item-&gt;bytes_sent += bytes_sent;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (bytes_sent &lt;= 0) {</div><div class="line">        <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;...error: sending stopped. bytes_sent=%d&quot;</span>, </div><div class="line">                  bytes_sent));</div><div class="line">    } </div><div class="line">    <span class="keywordflow">else</span> {</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div><div class="line"></div><div class="line">        bytes_sent = item-&gt;buffer_size;</div><div class="line">        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send</a>( item-&gt;client_key, op_key,</div><div class="line">                              item-&gt;outgoing_buffer, &amp;bytes_sent, 0);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: write error&quot;</span>, rc);</div><div class="line">        }</div><div class="line"></div><div class="line">        item-&gt;has_pending_send = (rc==<a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">struct </span>thread_arg</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span>           id;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue;</div><div class="line">    <span class="keywordtype">unsigned</span>      counter;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">/* The worker thread. */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> worker_thread(<span class="keywordtype">void</span> *p)</div><div class="line">{</div><div class="line">    <span class="keyword">struct </span>thread_arg *arg = (<span class="keyword">struct </span>thread_arg*) p;</div><div class="line">    <span class="keyword">const</span> <a class="code" href="structpj__time__val.htm">pj_time_val</a> timeout = {0, 100};</div><div class="line">    <span class="keywordtype">int</span> rc;</div><div class="line"></div><div class="line">    <span class="keywordflow">while</span> (!thread_quit_flag) {</div><div class="line"></div><div class="line">        ++arg-&gt;counter;</div><div class="line">        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gac65cc5cb9a04f2008d1fa62709ba2d91">pj_ioqueue_poll</a>(arg-&gt;ioqueue, &amp;timeout);</div><div class="line">        <span class="comment">//TRACE_((THIS_FILE, &quot;     thread: poll returned rc=%d&quot;, rc));</span></div><div class="line">        <span class="keywordflow">if</span> (rc &lt; 0) {</div><div class="line">            <span class="keywordtype">char</span> errmsg[<a class="code" href="group__pj__errno.htm#ga314a8edfdcec54a086a401e97b5b0bd0">PJ_ERR_MSG_SIZE</a>];</div><div class="line">            <a class="code" href="group__pj__errno.htm#ga7d2616aded0d61924fb31f4fd6ee45c0">pj_strerror</a>(-rc, errmsg, <span class="keyword">sizeof</span>(errmsg));</div><div class="line">            <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3, (THIS_FILE, </div><div class="line">                       <span class="stringliteral">&quot;...error in pj_ioqueue_poll() in thread %d &quot;</span></div><div class="line">                       <span class="stringliteral">&quot;after %d loop: %s [pj_status_t=%d]&quot;</span>, </div><div class="line">                       arg-&gt;id, arg-&gt;counter, errmsg, -rc));</div><div class="line">            <span class="comment">//return -1;</span></div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* Calculate the bandwidth for the specific test configuration.</span></div><div class="line"><span class="comment"> * The test is simple:</span></div><div class="line"><span class="comment"> *  - create sockpair_cnt number of producer-consumer socket pair.</span></div><div class="line"><span class="comment"> *  - create thread_cnt number of worker threads.</span></div><div class="line"><span class="comment"> *  - each producer will send buffer_size bytes data as fast and</span></div><div class="line"><span class="comment"> *    as soon as it can.</span></div><div class="line"><span class="comment"> *  - each consumer will read buffer_size bytes of data as fast </span></div><div class="line"><span class="comment"> *    as it could.</span></div><div class="line"><span class="comment"> *  - measure the total bytes received by all consumers during a</span></div><div class="line"><span class="comment"> *    period of time.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> perform_test(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur,</div><div class="line">                        <span class="keywordtype">int</span> sock_type, <span class="keyword">const</span> <span class="keywordtype">char</span> *type_name,</div><div class="line">                        <span class="keywordtype">unsigned</span> thread_cnt, <span class="keywordtype">unsigned</span> sockpair_cnt,</div><div class="line">                        <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> buffer_size, </div><div class="line">                        <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> *p_bandwidth)</div><div class="line">{</div><div class="line">    <span class="keyword">enum</span> { MSEC_DURATION = 5000 };</div><div class="line">    <a class="code" href="structpj__pool__t.htm">pj_pool_t</a> *pool;</div><div class="line">    test_item *items;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a> **thread;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga26ca218655d86b00d807e1407854128e">pj_ioqueue_t</a> *ioqueue;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gab43ba3167bd2a2ab4580509dbf79200e">pj_status_t</a> rc;</div><div class="line">    <a class="code" href="structpj__ioqueue__callback.htm">pj_ioqueue_callback</a> ioqueue_callback;</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a> total_elapsed_usec, total_received;</div><div class="line">    pj_highprec_t bandwidth;</div><div class="line">    <a class="code" href="unionpj__timestamp.htm">pj_timestamp</a> start, stop;</div><div class="line">    <span class="keywordtype">unsigned</span> i;</div><div class="line"></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;    starting test..&quot;</span>));</div><div class="line"></div><div class="line">    ioqueue_callback.<a class="code" href="group__PJ__IOQUEUE.htm#gaaf564626f7a74bc96fa6ef96f72cb6e1">on_read_complete</a> = &amp;on_read_complete;</div><div class="line">    ioqueue_callback.<a class="code" href="group__PJ__IOQUEUE.htm#ga70ec522e331bee4a8ed0798358b62ffe">on_write_complete</a> = &amp;on_write_complete;</div><div class="line"></div><div class="line">    thread_quit_flag = 0;</div><div class="line"></div><div class="line">    pool = <a class="code" href="group__PJ__POOL.htm#gaf58c3ba26a1314c0e0be103960ba4a5e">pj_pool_create</a>(mem, NULL, 4096, 4096, NULL);</div><div class="line">    <span class="keywordflow">if</span> (!pool)</div><div class="line">        <span class="keywordflow">return</span> -10;</div><div class="line"></div><div class="line">    items = (test_item*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, sockpair_cnt*<span class="keyword">sizeof</span>(test_item));</div><div class="line">    thread = (<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>**)</div><div class="line">             <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, thread_cnt*<span class="keyword">sizeof</span>(<a class="code" href="group__PJ__BASIC.htm#gacb9d46aed6813bf142efc1c3db7a2d17">pj_thread_t</a>*));</div><div class="line"></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;     creating ioqueue..&quot;</span>));</div><div class="line">    rc = <a class="code" href="group__PJ__IOQUEUE.htm#gaae188673e57ae841d586a738e53cffc5">pj_ioqueue_create</a>(pool, sockpair_cnt*2, &amp;ioqueue);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: unable to create ioqueue&quot;</span>, rc);</div><div class="line">        <span class="keywordflow">return</span> -15;</div><div class="line">    }</div><div class="line"></div><div class="line">    rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga61f080c7c8d52bcf5e2d955257fde21e">pj_ioqueue_set_default_concurrency</a>(ioqueue, allow_concur);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">        app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_set_default_concurrency()&quot;</span>, rc);</div><div class="line">        <span class="keywordflow">return</span> -16;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Initialize each producer-consumer pair. */</span></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;sockpair_cnt; ++i) {</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#ga173588cd6381f3ad354c23c26929093a">pj_ssize_t</a> bytes;</div><div class="line"></div><div class="line">        items[i].ioqueue = ioqueue;</div><div class="line">        items[i].buffer_size = buffer_size;</div><div class="line">        items[i].outgoing_buffer = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, buffer_size);</div><div class="line">        items[i].incoming_buffer = (<span class="keywordtype">char</span>*) <a class="code" href="group__PJ__POOL.htm#ga865b3702766960869d1c58429e213cf4">pj_pool_alloc</a>(pool, buffer_size);</div><div class="line">        items[i].bytes_recv = items[i].bytes_sent = 0;</div><div class="line"></div><div class="line">        <span class="comment">/* randomize outgoing buffer. */</span></div><div class="line">        <a class="code" href="group__PJ__PSTR.htm#gae0f30eb53208168b12b6c8e50649ce89">pj_create_random_string</a>(items[i].outgoing_buffer, buffer_size);</div><div class="line"></div><div class="line">        <span class="comment">/* Init operation keys. */</span></div><div class="line">        <a class="code" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;items[i].recv_op, <span class="keyword">sizeof</span>(items[i].recv_op));</div><div class="line">        <a class="code" href="group__PJ__IOQUEUE.htm#ga2ef6f3b6077c716793e2b4a488e03fe4">pj_ioqueue_op_key_init</a>(&amp;items[i].send_op, <span class="keyword">sizeof</span>(items[i].send_op));</div><div class="line"></div><div class="line">        <span class="comment">/* Create socket pair. */</span></div><div class="line">        TRACE_((THIS_FILE, <span class="stringliteral">&quot;      calling socketpair..&quot;</span>));</div><div class="line">        rc = app_socketpair(<a class="code" href="group__PJ__SOCK.htm#ga8ea303b95fe973432a361e47e0459086">pj_AF_INET</a>(), sock_type, 0, </div><div class="line">                            &amp;items[i].server_fd, &amp;items[i].client_fd);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: unable to create socket pair&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -20;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Register server socket to ioqueue. */</span></div><div class="line">        TRACE_((THIS_FILE, <span class="stringliteral">&quot;      register(1)..&quot;</span>));</div><div class="line">        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, </div><div class="line">                                      items[i].server_fd,</div><div class="line">                                      &amp;items[i], &amp;ioqueue_callback,</div><div class="line">                                      &amp;items[i].server_key);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: registering server socket to ioqueue&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -60;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Register client socket to ioqueue. */</span></div><div class="line">        TRACE_((THIS_FILE, <span class="stringliteral">&quot;      register(2)..&quot;</span>));</div><div class="line">        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gada2faae3ca27a917b90f6fa39b758355">pj_ioqueue_register_sock</a>(pool, ioqueue, </div><div class="line">                                      items[i].client_fd,</div><div class="line">                                      &amp;items[i],  &amp;ioqueue_callback,</div><div class="line">                                      &amp;items[i].client_key);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: registering server socket to ioqueue&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -70;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Start reading. */</span></div><div class="line">        TRACE_((THIS_FILE, <span class="stringliteral">&quot;      pj_ioqueue_recv..&quot;</span>));</div><div class="line">        bytes = items[i].buffer_size;</div><div class="line">        rc = <a class="code" href="group__PJ__IOQUEUE.htm#ga71e08c6414a6f0cd1c1d2fde267bccbe">pj_ioqueue_recv</a>(items[i].server_key, &amp;items[i].recv_op,</div><div class="line">                             items[i].incoming_buffer, &amp;bytes,</div><div class="line">                             0);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_recv&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -73;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* Start writing. */</span></div><div class="line">        TRACE_((THIS_FILE, <span class="stringliteral">&quot;      pj_ioqueue_write..&quot;</span>));</div><div class="line">        bytes = items[i].buffer_size;</div><div class="line">        rc = <a class="code" href="group__PJ__IOQUEUE.htm#gabf96d153949aeda0e7b9dbb742ffcda7">pj_ioqueue_send</a>(items[i].client_key, &amp;items[i].send_op,</div><div class="line">                             items[i].outgoing_buffer, &amp;bytes, 0);</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a> &amp;&amp; rc != <a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: pj_ioqueue_write&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -76;</div><div class="line">        }</div><div class="line"></div><div class="line">        items[i].has_pending_send = (rc==<a class="code" href="group__pj__errnum.htm#ga8706796879339b5dc875e2af631d6fe7">PJ_EPENDING</a>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Create the threads. */</span></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;thread_cnt; ++i) {</div><div class="line">        <span class="keyword">struct </span>thread_arg *arg;</div><div class="line"></div><div class="line">        arg = (<span class="keyword">struct </span>thread_arg*) <a class="code" href="group__PJ__POOL.htm#ga4ecb4c956f18e49b20308ffd075b0b40">pj_pool_zalloc</a>(pool, <span class="keyword">sizeof</span>(*arg));</div><div class="line">        arg-&gt;id = i;</div><div class="line">        arg-&gt;ioqueue = ioqueue;</div><div class="line">        arg-&gt;counter = 0;</div><div class="line"></div><div class="line">        rc = <a class="code" href="group__PJ__THREAD.htm#ga7b63533cf4f3ba0cba68cab49a22d722">pj_thread_create</a>( pool, NULL, </div><div class="line">                               &amp;worker_thread, </div><div class="line">                               arg, </div><div class="line">                               <a class="code" href="group__pj__config.htm#gac2fba901c0f4a6af0a6cfc948a420602">PJ_THREAD_DEFAULT_STACK_SIZE</a>, </div><div class="line">                               PJ_THREAD_SUSPENDED, &amp;thread[i] );</div><div class="line">        <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>) {</div><div class="line">            app_perror(<span class="stringliteral">&quot;...error: unable to create thread&quot;</span>, rc);</div><div class="line">            <span class="keywordflow">return</span> -80;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Mark start time. */</span></div><div class="line">    rc = <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;start);</div><div class="line">    <span class="keywordflow">if</span> (rc != <a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bea312497101cf4a5d856e77d5302059935">PJ_SUCCESS</a>)</div><div class="line">        <span class="keywordflow">return</span> -90;</div><div class="line"></div><div class="line">    <span class="comment">/* Start the thread. */</span></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;     resuming all threads..&quot;</span>));</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;thread_cnt; ++i) {</div><div class="line">        rc = <a class="code" href="group__PJ__THREAD.htm#ga223e764be70bd61ab21a77c76be32783">pj_thread_resume</a>(thread[i]);</div><div class="line">        <span class="keywordflow">if</span> (rc != 0)</div><div class="line">            <span class="keywordflow">return</span> -100;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Wait for MSEC_DURATION seconds. </span></div><div class="line"><span class="comment">     * This should be as simple as pj_thread_sleep(MSEC_DURATION) actually,</span></div><div class="line"><span class="comment">     * but unfortunately it doesn&#39;t work when system doesn&#39;t employ</span></div><div class="line"><span class="comment">     * timeslicing for threads.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;     wait for few seconds..&quot;</span>));</div><div class="line">    <span class="keywordflow">do</span> {</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(1);</div><div class="line"></div><div class="line">        <span class="comment">/* Mark end time. */</span></div><div class="line">        rc = <a class="code" href="group__PJ__TIMESTAMP.htm#gaa419b8448d1cb55db85aeac2e86fe11c">pj_get_timestamp</a>(&amp;stop);</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (thread_quit_flag) {</div><div class="line">            TRACE_((THIS_FILE, <span class="stringliteral">&quot;      transfer limit reached..&quot;</span>));</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (<a class="code" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a>(&amp;start,&amp;stop)&lt;MSEC_DURATION * 1000) {</div><div class="line">            TRACE_((THIS_FILE, <span class="stringliteral">&quot;      time limit reached..&quot;</span>));</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">    } <span class="keywordflow">while</span> (1);</div><div class="line"></div><div class="line">    <span class="comment">/* Terminate all threads. */</span></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;     terminating all threads..&quot;</span>));</div><div class="line">    thread_quit_flag = 1;</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;thread_cnt; ++i) {</div><div class="line">        TRACE_((THIS_FILE, <span class="stringliteral">&quot;      join thread %d..&quot;</span>, i));</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga60d90ce08d2f7e92dcaa0443cf87912f">pj_thread_join</a>(thread[i]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Close all sockets. */</span></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;     closing all sockets..&quot;</span>));</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;sockpair_cnt; ++i) {</div><div class="line">        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(items[i].server_key);</div><div class="line">        <a class="code" href="group__PJ__IOQUEUE.htm#ga7c05e3b02e71e7680679c90c2adbe230">pj_ioqueue_unregister</a>(items[i].client_key);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Destroy threads */</span></div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;thread_cnt; ++i) {</div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#ga5435f79ad044f9ce2113af311bf2b777">pj_thread_destroy</a>(thread[i]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* Destroy ioqueue. */</span></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;     destroying ioqueue..&quot;</span>));</div><div class="line">    <a class="code" href="group__PJ__IOQUEUE.htm#ga59f004632b9ae20e43fa573e6b6cb237">pj_ioqueue_destroy</a>(ioqueue);</div><div class="line"></div><div class="line">    <span class="comment">/* Calculate actual time in usec. */</span></div><div class="line">    total_elapsed_usec = <a class="code" href="group__PJ__TIMESTAMP.htm#gad5a0323beb04de52474b59693b4b12ac">pj_elapsed_usec</a>(&amp;start, &amp;stop);</div><div class="line"></div><div class="line">    <span class="comment">/* Calculate total bytes received. */</span></div><div class="line">    total_received = 0;</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;sockpair_cnt; ++i) {</div><div class="line">        total_received = (<a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>)items[i].bytes_recv;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">/* bandwidth = total_received*1000/total_elapsed_usec */</span></div><div class="line">    bandwidth = total_received;</div><div class="line">    pj_highprec_mul(bandwidth, 1000);</div><div class="line">    pj_highprec_div(bandwidth, total_elapsed_usec);</div><div class="line">    </div><div class="line">    *p_bandwidth = (<a class="code" href="group__PJ__BASIC.htm#gafbfd2fd08c6041ea3cb217310c0b5b48">pj_uint32_t</a>)bandwidth;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   %.4s    %2d        %2d       %8d KB/s&quot;</span>,</div><div class="line">              type_name, thread_cnt, sockpair_cnt,</div><div class="line">              *p_bandwidth));</div><div class="line"></div><div class="line">    <span class="comment">/* Done. */</span></div><div class="line">    <a class="code" href="group__PJ__POOL.htm#gade0f14f6635ecfccb576ec41c57fede5">pj_pool_release</a>(pool);</div><div class="line"></div><div class="line">    TRACE_((THIS_FILE, <span class="stringliteral">&quot;    done..&quot;</span>));</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">int</span> ioqueue_perf_test_imp(<a class="code" href="group__PJ__BASIC.htm#ga1dc7a356fb36bd2dee2bc7d6c7e817e4">pj_bool_t</a> allow_concur)</div><div class="line">{</div><div class="line">    <span class="keyword">enum</span> { BUF_SIZE = 512 };</div><div class="line">    <span class="keywordtype">int</span> i, rc;</div><div class="line">    <span class="keyword">struct </span>{</div><div class="line">        <span class="keywordtype">int</span>         type;</div><div class="line">        <span class="keyword">const</span> <span class="keywordtype">char</span> *type_name;</div><div class="line">        <span class="keywordtype">int</span>         thread_cnt;</div><div class="line">        <span class="keywordtype">int</span>         sockpair_cnt;</div><div class="line">    } test_param[] = </div><div class="line">    {</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 1, 1},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 1, 2},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 1, 4},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 1, 8},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 2, 1},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 2, 2},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 2, 4},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 2, 8},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 4, 1},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 4, 2},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 4, 4},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 4, 8},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gaaa5fa1293ffc11d0970811819b3828dc">pj_SOCK_DGRAM</a>(), <span class="stringliteral">&quot;udp&quot;</span>, 4, 16},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 1, 1},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 1, 2},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 1, 4},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 1, 8},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 2, 1},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 2, 2},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 2, 4},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 2, 8},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 4, 1},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 4, 2},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 4, 4},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 4, 8},</div><div class="line">        { <a class="code" href="group__PJ__SOCK.htm#gae224fbf8e8bd55b40030fcd8f9645291">pj_SOCK_STREAM</a>(), <span class="stringliteral">&quot;tcp&quot;</span>, 4, 16},</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 1, 32},</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 1, 32},</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 1, 32},</span></div><div class="line"><span class="comment">        { pj_SOCK_DGRAM(), &quot;udp&quot;, 1, 32},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 32, 1},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 1, 32},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 1, 32},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 1, 32},</span></div><div class="line"><span class="comment">        { pj_SOCK_STREAM(), &quot;tcp&quot;, 1, 32},</span></div><div class="line"><span class="comment">*/</span></div><div class="line">    };</div><div class="line">    <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> best_bandwidth;</div><div class="line">    <span class="keywordtype">int</span> best_index = 0;</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   Benchmarking %s ioqueue:&quot;</span>, <a class="code" href="group__PJ__IOQUEUE.htm#ga6179808511eccf51f35944c4b7de679e">pj_ioqueue_name</a>()));</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   Testing with concurency=%d&quot;</span>, allow_concur));</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   =======================================&quot;</span>));</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   Type  Threads  Skt.Pairs      Bandwidth&quot;</span>));</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   =======================================&quot;</span>));</div><div class="line"></div><div class="line">    best_bandwidth = 0;</div><div class="line">    <span class="keywordflow">for</span> (i=0; i&lt;(<a class="code" href="group__PJ__THREAD.htm#gab600dc33a20a0f36550a4538506d020e">int</a>)(<span class="keyword">sizeof</span>(test_param)/<span class="keyword">sizeof</span>(test_param[0])); ++i) {</div><div class="line">        <a class="code" href="group__PJ__BASIC.htm#ga9fdb3ceb491cd888cd30ca30d78026e8">pj_size_t</a> bandwidth;</div><div class="line"></div><div class="line">        rc = perform_test(allow_concur,</div><div class="line">                          test_param[i].type, </div><div class="line">                          test_param[i].type_name,</div><div class="line">                          test_param[i].thread_cnt, </div><div class="line">                          test_param[i].sockpair_cnt, </div><div class="line">                          BUF_SIZE, </div><div class="line">                          &amp;bandwidth);</div><div class="line">        <span class="keywordflow">if</span> (rc != 0)</div><div class="line">            <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (bandwidth &gt; best_bandwidth)</div><div class="line">            best_bandwidth = bandwidth, best_index = i;</div><div class="line"></div><div class="line">        <span class="comment">/* Give it a rest before next test, to allow system to close the</span></div><div class="line"><span class="comment">         * sockets properly. </span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <a class="code" href="group__PJ__THREAD.htm#gad59cd6fd7390711758afcc0bde375d68">pj_thread_sleep</a>(500);</div><div class="line">    }</div><div class="line"></div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, </div><div class="line">              <span class="stringliteral">&quot;   Best: Type=%s Threads=%d, Skt.Pairs=%d, Bandwidth=%u KB/s&quot;</span>,</div><div class="line">              test_param[best_index].type_name,</div><div class="line">              test_param[best_index].thread_cnt,</div><div class="line">              test_param[best_index].sockpair_cnt,</div><div class="line">              best_bandwidth));</div><div class="line">    <a class="code" href="group__PJ__LOG.htm#ga767b9231bf7c2b57274771cdc4bca818">PJ_LOG</a>(3,(THIS_FILE, <span class="stringliteral">&quot;   (Note: packet size=%d, total errors=%u)&quot;</span>, </div><div class="line">                         BUF_SIZE, last_error_counter));</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * main test entry.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> ioqueue_perf_test(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> rc;</div><div class="line"></div><div class="line">    rc = ioqueue_perf_test_imp(<a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead235b21a623d982cc561fb12bffa87c0">PJ_TRUE</a>);</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    rc = ioqueue_perf_test_imp(<a class="code" href="group__PJ__BASIC.htm#gga65c74a186d2c92fe9f088f3e1e8688bead95511b40a74f4625b161dd9e42c6e6e">PJ_FALSE</a>);</div><div class="line">    <span class="keywordflow">if</span> (rc != 0)</div><div class="line">        <span class="keywordflow">return</span> rc;</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="comment">/* To prevent warning about &quot;translation unit is empty&quot;</span></div><div class="line"><span class="comment"> * when this test is disabled. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keywordtype">int</span> dummy_uiq_perf_test;</div><div class="line"><span class="preprocessor">#endif  </span><span class="comment">/* INCLUDE_IOQUEUE_PERF_TEST */</span><span class="preprocessor"></span></div><div class="line"></div><div class="line"></div></div><!-- fragment --> </div></div><!-- contents -->
<p>&nbsp;</p>
<hr><center>
PJLIB Open Source, high performance, small footprint, and very very portable framework<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>
<!--#include virtual="/footer.html" -->
</BODY>
</HTML>
